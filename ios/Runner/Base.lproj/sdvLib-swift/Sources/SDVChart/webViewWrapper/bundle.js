/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ([
/* 0 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var sdv_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);

__webpack_require__(1);

console.log("Loading webViewWrapper...")

let $el = document.createElement('div');
$el.style.position = "absolute"

// $el.style.width = '100vw'
// $el.style.height = '100vh'


// Basura del webview que no mide "Exactamente" lo que toca y se cortan los borders...
$el.style.margin = 'auto'
$el.style.width = 'calc(100vw - 4px)' //WTF!?!??
$el.style.height = 'calc(100vh - 4px)'//WTF!?!??
$el.style.top = "50%"
$el.style.left = "50%"
$el.style.transform = "translate(-50%,-50%)"


document.body.appendChild($el)
let instance 

window.sdvInterface = {
  render: (chartType,settings)=>{
    console.log("Rendering webViewWrapper")
    if(!instance){
      console.log("Instantiating",chartType)
      let className = sdv_lib__WEBPACK_IMPORTED_MODULE_0__.CHARTS.find((cn)=>cn.name===chartType+'Component')
      if(!className) throw("chartType",chartType,"not found!")
      instance = new className($el,settings.data,settings.config);
      // instance.onReady = () => console.log("Chart was drawn and can be modified")
    } else {
      console.log("Updating",JSON.stringify(settings))
      instance.config = settings.config
      instance.data = settings.data
    }
    
  }
}

/***/ }),
/* 1 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "index.html");

/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ANNOTATION_TYPES": () => /* binding */ ANNOTATION_TYPES,
/* harmony export */   "BarChart": () => /* binding */ BarChartComponent,
/* harmony export */   "BubbleChart": () => /* binding */ BubbleChartComponent,
/* harmony export */   "CHARTS": () => /* binding */ CHARTS,
/* harmony export */   "CandleStick": () => /* binding */ CandleStickComponent,
/* harmony export */   "ChoroplethCat": () => /* binding */ ChoroplethCatComponent,
/* harmony export */   "ChoroplethSeq": () => /* binding */ ChoroplethSeqComponent,
/* harmony export */   "DonutChart": () => /* binding */ DonutChartComponent,
/* harmony export */   "GroupedBars": () => /* binding */ GroupedBarsComponent,
/* harmony export */   "HeatMap": () => /* binding */ HeatMapComponent,
/* harmony export */   "LineAndBarChart": () => /* binding */ LineAndBarChartComponent,
/* harmony export */   "LineChart": () => /* binding */ LineChartComponent,
/* harmony export */   "ParallelCoords": () => /* binding */ ParallelCoordsComponent,
/* harmony export */   "PercentageBar": () => /* binding */ PercentageBarComponent,
/* harmony export */   "PieChart": () => /* binding */ PieChartComponent,
/* harmony export */   "RadarChart": () => /* binding */ RadarChartComponent,
/* harmony export */   "SANTANDER_LOGOS": () => /* binding */ SANTANDER_LOGOS,
/* harmony export */   "ScatterPlot": () => /* binding */ ScatterPlotComponent,
/* harmony export */   "StackedArea": () => /* binding */ StackedAreaComponent,
/* harmony export */   "StackedBars": () => /* binding */ StackedBarsComponent,
/* harmony export */   "colorUtils": () => /* binding */ COLORS,
/* harmony export */   "configUtils": () => /* binding */ configUtils,
/* harmony export */   "dataUtils": () => /* binding */ dataUtils,
/* harmony export */   "drawGradientRect": () => /* binding */ drawGradientRect
/* harmony export */ });
function polyfill () {
  if (!String.prototype.replaceAll) {
    String.prototype.replaceAll = function (str, newStr) {
      // If a regex pattern
      if (Object.prototype.toString.call(str).toLowerCase() === '[object regexp]') {
        return this.replace(str, newStr);
      } // If a string


      return this.replace(new RegExp(str, 'g'), newStr);
    };
  }
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var BaseHelper = /*#__PURE__*/function () {
  function BaseHelper() {
    _classCallCheck(this, BaseHelper);
  }

  _createClass(BaseHelper, null, [{
    key: "init",
    value: function init() {}
  }, {
    key: "update",
    value: function update() {}
  }, {
    key: "beforeDraw",
    value: function beforeDraw() {}
  }, {
    key: "draw",
    value: function draw() {}
  }, {
    key: "afterDraw",
    value: function afterDraw() {}
  }]);

  return BaseHelper;
}();

_defineProperty(BaseHelper, "defaultConfig", {});

var xhtml = "http://www.w3.org/1999/xhtml";
var namespaces = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

function namespace (name) {
  var prefix = name += "",
      i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return namespaces.hasOwnProperty(prefix) ? {
    space: namespaces[prefix],
    local: name
  } : name; // eslint-disable-line no-prototype-builtins
}

function creatorInherit(name) {
  return function () {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function () {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function creator (name) {
  var fullname = namespace(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}

function none() {}

function selector (selector) {
  return selector == null ? none : function () {
    return this.querySelector(selector);
  };
}

function selection_select (select) {
  if (typeof select !== "function") select = selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new Selection(subgroups, this._parents);
}

function array (x) {
  return typeof x === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
  : Array.from(x); // Map, Set, iterable, string, or anything else
}

function empty() {
  return [];
}

function selectorAll (selector) {
  return selector == null ? empty : function () {
    return this.querySelectorAll(selector);
  };
}

function arrayAll(select) {
  return function () {
    var group = select.apply(this, arguments);
    return group == null ? [] : array(group);
  };
}

function selection_selectAll (select) {
  if (typeof select === "function") select = arrayAll(select);else select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new Selection(subgroups, parents);
}

function matcher (selector) {
  return function () {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function (node) {
    return node.matches(selector);
  };
}

var find = Array.prototype.find;

function childFind(match) {
  return function () {
    return find.call(this.children, match);
  };
}

function childFirst() {
  return this.firstElementChild;
}

function selection_selectChild (match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}

var filter = Array.prototype.filter;

function children() {
  return this.children;
}

function childrenFilter(match) {
  return function () {
    return filter.call(this.children, match);
  };
}

function selection_selectChildren (match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}

function selection_filter (match) {
  if (typeof match !== "function") match = matcher(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Selection(subgroups, this._parents);
}

function sparse (update) {
  return new Array(update.length);
}

function selection_enter () {
  return new Selection(this._enter || this._groups.map(sparse), this._parents);
}
function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function (child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function (child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function (selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function (selector) {
    return this._parent.querySelectorAll(selector);
  }
};

function constant (x) {
  return function () {
    return x;
  };
}

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length; // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.

  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  } // Put any non-null nodes that don’t fit into exit.


  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = new Map(),
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue; // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.

  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";

      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  } // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.


  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";

    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  } // Add any remaining nodes that were not bound to data to exit.


  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
      exit[i] = node;
    }
  }
}

function datum(node) {
  return node.__data__;
}

function selection_data (value, key) {
  if (!arguments.length) return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;
  if (typeof value !== "function") value = constant(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = array(value.call(parent, parent && parent.__data__, j, parents)),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.

    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;

        while (!(next = updateGroup[i1]) && ++i1 < dataLength);

        previous._next = next || null;
      }
    }
  }

  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}

function selection_exit () {
  return new Selection(this._exit || this._groups.map(sparse), this._parents);
}

function selection_join (onenter, onupdate, onexit) {
  var enter = this.enter(),
      update = this,
      exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove();else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

function selection_merge (selection) {
  if (!(selection instanceof Selection)) throw new Error("invalid merge");

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Selection(merges, this._parents);
}

function selection_order () {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}

function selection_sort (compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }

    sortgroup.sort(compareNode);
  }

  return new Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function selection_call () {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

function selection_nodes () {
  return Array.from(this);
}

function selection_node () {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}

function selection_size () {
  let size = 0;

  for (const node of this) ++size; // eslint-disable-line no-unused-vars


  return size;
}

function selection_empty () {
  return !this.node();
}

function selection_each (callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function () {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function () {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function selection_attr (name, value) {
  var fullname = namespace(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }

  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}

function defaultView (node) {
  return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node
  node.document && node // node is a Window
  || node.defaultView; // node is a Document
}

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function () {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
  };
}

function selection_style (name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
}

function propertyRemove(name) {
  return function () {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function () {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];else this[name] = v;
  };
}

function selection_property (name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function (name) {
    var i = this._names.indexOf(name);

    if (i < 0) {
      this._names.push(name);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function (name) {
    var i = this._names.indexOf(name);

    if (i >= 0) {
      this._names.splice(i, 1);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function (name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function () {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function () {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function () {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function selection_classed (name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()),
        i = -1,
        n = names.length;

    while (++i < n) if (!list.contains(names[i])) return false;

    return true;
  }

  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function selection_text (value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function () {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function selection_html (value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function selection_raise () {
  return this.each(raise);
}

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function selection_lower () {
  return this.each(lower);
}

function selection_append (name) {
  var create = typeof name === "function" ? name : creator(name);
  return this.select(function () {
    return this.appendChild(create.apply(this, arguments));
  });
}

function constantNull() {
  return null;
}

function selection_insert (name, before) {
  var create = typeof name === "function" ? name : creator(name),
      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
  return this.select(function () {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function selection_remove () {
  return this.each(remove);
}

function selection_cloneShallow() {
  var clone = this.cloneNode(false),
      parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_cloneDeep() {
  var clone = this.cloneNode(true),
      parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_clone (deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

function selection_datum (value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

function contextListener(listener) {
  return function (event) {
    listener.call(this, event, this.__data__);
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {
      type: t,
      name: name
    };
  });
}

function onRemove(typename) {
  return function () {
    var on = this.__on;
    if (!on) return;

    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }

    if (++i) on.length = i;else delete this.__on;
  };
}

function onAdd(typename, value, options) {
  return function () {
    var on = this.__on,
        o,
        listener = contextListener(value);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
        this.addEventListener(o.type, o.listener = listener, o.options = options);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, options);
    o = {
      type: typename.type,
      name: typename.name,
      value: value,
      listener: listener,
      options: options
    };
    if (!on) this.__on = [o];else on.push(o);
  };
}

function selection_on (typename, value, options) {
  var typenames = parseTypenames(typename + ""),
      i,
      n = typenames.length,
      t;

  if (arguments.length < 2) {
    var on = this.node().__on;

    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;

  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));

  return this;
}

function dispatchEvent(node, type, params) {
  var window = defaultView(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function () {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function () {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function selection_dispatch (type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}

function* selection_iterator () {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) yield node;
    }
  }
}

var root = [null];
function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

function selection_selection() {
  return this;
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: selection_select,
  selectAll: selection_selectAll,
  selectChild: selection_selectChild,
  selectChildren: selection_selectChildren,
  filter: selection_filter,
  data: selection_data,
  enter: selection_enter,
  exit: selection_exit,
  join: selection_join,
  merge: selection_merge,
  selection: selection_selection,
  order: selection_order,
  sort: selection_sort,
  call: selection_call,
  nodes: selection_nodes,
  node: selection_node,
  size: selection_size,
  empty: selection_empty,
  each: selection_each,
  attr: selection_attr,
  style: selection_style,
  property: selection_property,
  classed: selection_classed,
  text: selection_text,
  html: selection_html,
  raise: selection_raise,
  lower: selection_lower,
  append: selection_append,
  insert: selection_insert,
  remove: selection_remove,
  clone: selection_clone,
  datum: selection_datum,
  on: selection_on,
  dispatch: selection_dispatch,
  [Symbol.iterator]: selection_iterator
};

function d3_select (selector) {
  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
}

function d3_create (name) {
  return d3_select(creator(name).call(document.documentElement));
}

function sourceEvent (event) {
  let sourceEvent;

  while (sourceEvent = event.sourceEvent) event = sourceEvent;

  return event;
}

function pointer (event, node) {
  event = sourceEvent(event);
  if (node === undefined) node = event.currentTarget;

  if (node) {
    var svg = node.ownerSVGElement || node;

    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }

    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }

  return [event.pageX, event.pageY];
}

var wrapWords = function wrapWords(text, before, after, join) {
  join = join || ' ';
  var words = text.split(' ');

  for (var i = 0; i < words.length; i++) {
    words[i] = before + words[i] + after;
  }

  return words.join(join);
};

var wrapWordsInChildElement = function wrapWordsInChildElement(el) {
  if (el.parentElement && el.parentElement.className == "js-detect-wrap") {
    return;
  }

  if (el.nodeName == '#text') {
    var words = el.textContent.split(' ');

    for (var i = 0; i < words.length; i++) {
      if (words[i].length > 0) {
        var span = document.createElement('span');
        span.className = "js-detect-wrap";
        span.innerText = words[i];
        el.parentNode.insertBefore(span, el);
      }

      if (i < words.length - 1) el.parentNode.insertBefore(document.createTextNode(" "), el);
    }

    el.parentNode.removeChild(el);
  } else {
    if (el.innerText) {
      el.innerHTML = wrapWords(el.innerText, '<span class="js-detect-wrap">', '</span>');
    }
  }
};

var wrapWordsInElement = function wrapWordsInElement(el) {
  if (!el.firstChild) {
    wrapWordsInChildElement(el);
  } else {
    var siblings = [];
    var s = el.firstChild;

    do {
      siblings.push(s);
    } while (s.nextSibling);

    {
      s = s.nextSibling;
    }

    for (var i = 0; i < siblings.length; i++) {
      wrapWordsInElement(siblings[i]);
    }
  }
};

var getLines = function getLines(el) {
  var clone = el.cloneNode(true);
  el.parentElement.append(clone);
  wrapWordsInElement(clone);
  var spans = clone.getElementsByClassName('js-detect-wrap');
  var lastOffset = 0,
      line = [],
      lines = [],
      l = 0;

  for (var i = 0; i < spans.length; i++) {
    var offset = spans[i].offsetTop + spans[i].getBoundingClientRect().height;

    if (offset == lastOffset) {
      line.push(spans[i]);
    } else {
      if (line.length > 0) lines[l++] = line;
      line = [spans[i]];
    }

    lastOffset = offset;
  }

  lines.push(line);
  el.parentElement.removeChild(clone);
  return lines;
};

var detector = {
  wrapWords: wrapWords,
  wrapWordsInElement: wrapWordsInElement,
  wrapWordsInChildElement: wrapWordsInChildElement,
  getLines: getLines
};
function wrapSvgText(text, width) {
  text.each(function () {
    var text = d3_select(this),
        words = text.text().split(/\s+/).reverse(),
        word;
    if (words.length === 1) return;
    var line = [],
        lineNumber = 0,
        lineHeight = 1.1,
        // ems
    y = text.attr("y"),
        x = text.attr("x"),
        dy = parseFloat(text.attr("dy") || 0),
        tspan = text.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em");
    word = words.pop();

    while (word) {
      line.push(word);
      tspan.text(line.join(" "));

      if (tspan.node().getComputedTextLength() > width && line.length > 1) {
        line.pop();
        tspan.text(line.join(" "));
        line = [word];
        tspan = text.append("tspan").attr("x", x).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
      }

      word = words.pop();
    }
  });
}
function ellipseSvgText(text, width) {
  text.each(function () {
    var currentWidth = this.getComputedTextLength();
    var currentText = this.innerHTML;

    while (currentWidth > width) {
      console.log(currentWidth, width);
      currentText = currentText.slice(0, -1);
      this.innerHTML = currentText + '...';
      currentWidth = this.getComputedTextLength();
    }
  });
}

function ascending$1 (a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function bisector (f) {
  let delta = f;
  let compare = f;

  if (f.length === 1) {
    delta = (d, x) => f(d) - x;

    compare = ascendingComparator(f);
  }

  function left(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
    }

    return lo;
  }

  function right(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
    }

    return lo;
  }

  function center(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {
    left,
    center,
    right
  };
}

function ascendingComparator(f) {
  return (d, x) => ascending$1(f(d), x);
}

function number (x) {
  return x === null ? NaN : +x;
}

const ascendingBisect = bisector(ascending$1);
const bisectRight = ascendingBisect.right;
const bisectCenter = bisector(number).center;

function d3_extent (values, valueof) {
  let min;
  let max;

  if (valueof === undefined) {
    for (const value of values) {
      if (value != null) {
        if (min === undefined) {
          if (value >= value) min = max = value;
        } else {
          if (min > value) min = value;
          if (max < value) max = value;
        }
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null) {
        if (min === undefined) {
          if (value >= value) min = max = value;
        } else {
          if (min > value) min = value;
          if (max < value) max = value;
        }
      }
    }
  }

  return [min, max];
}

// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
class Adder {
  constructor() {
    this._partials = new Float64Array(32);
    this._n = 0;
  }

  add(x) {
    const p = this._partials;
    let i = 0;

    for (let j = 0; j < this._n && j < 32; j++) {
      const y = p[j],
            hi = x + y,
            lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
      if (lo) p[i++] = lo;
      x = hi;
    }

    p[i] = x;
    this._n = i + 1;
    return this;
  }

  valueOf() {
    const p = this._partials;
    let n = this._n,
        x,
        y,
        lo,
        hi = 0;

    if (n > 0) {
      hi = p[--n];

      while (n > 0) {
        x = hi;
        y = p[--n];
        hi = x + y;
        lo = y - (hi - x);
        if (lo) break;
      }

      if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
        y = lo * 2;
        x = hi + y;
        if (y == x - hi) hi = x;
      }
    }

    return hi;
  }

}

var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);
function ticks (start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));

    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    step = -step;
    start = Math.ceil(start * step);
    stop = Math.floor(stop * step);
    ticks = new Array(n = Math.ceil(stop - start + 1));

    while (++i < n) ticks[i] = (start + i) / step;
  }

  if (reverse) ticks.reverse();
  return ticks;
}
function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}

function max(values, valueof) {
  let max;

  if (valueof === undefined) {
    for (const value of values) {
      if (value != null && (max < value || max === undefined && value >= value)) {
        max = value;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) {
        max = value;
      }
    }
  }

  return max;
}

function min(values, valueof) {
  let min;

  if (valueof === undefined) {
    for (const value of values) {
      if (value != null && (min > value || min === undefined && value >= value)) {
        min = value;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) {
        min = value;
      }
    }
  }

  return min;
}

function* flatten(arrays) {
  for (const array of arrays) {
    yield* array;
  }
}

function merge(arrays) {
  return Array.from(flatten(arrays));
}

function range (start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}

var noop = {
  value: () => {}
};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
    _[t] = [];
  }

  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames$1(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {
      type: t,
      name: name
    };
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function (typename, callback) {
    var _ = this._,
        T = parseTypenames$1(typename + "", _),
        t,
        i = -1,
        n = T.length; // If no callback was specified, return the callback of the given type and name.

    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;

      return;
    } // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.


    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function () {
    var copy = {},
        _ = this._;

    for (var t in _) copy[t] = _[t].slice();

    return new Dispatch(copy);
  },
  call: function (type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function (type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }

  if (callback != null) type.push({
    name: name,
    value: callback
  });
  return type;
}

function noevent (event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

function dragDisable (view) {
  var root = view.document.documentElement,
      selection = d3_select(view).on("dragstart.drag", noevent, true);

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", noevent, true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection = d3_select(view).on("dragstart.drag", null);

  if (noclick) {
    selection.on("click.drag", noevent, true);
    setTimeout(function () {
      selection.on("click.drag", null);
    }, 0);
  }

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}

function define (constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);

  for (var key in definition) prototype[key] = definition[key];

  return prototype;
}

function Color() {}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};
define(Color, color, {
  copy: function (channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function () {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
  : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
  : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
  : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
  : null // invalid hex
  ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
  : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
  : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define(Rgb, rgb, extend(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function () {
    return this;
  },
  displayable: function () {
    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}

function rgb_formatRgb() {
  var a = this.opacity;
  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
}

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;

  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }

  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hsl, hsl, extend(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function () {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  },
  formatHsl: function () {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
  }
}));
/* From FvD 13.37, CSS Color Module Level 3 */

function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1,
      t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
function basis$1 (values) {
  var n = values.length - 1;
  return function (t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

var constant$1 = (x => () => x);

function linear(a, d) {
  return function (t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
    return Math.pow(a + t * b, y);
  };
}
function gamma(y) {
  return (y = +y) === 1 ? nogamma : function (a, b) {
    return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);
  };
}
function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant$1(isNaN(a) ? b : a);
}

var interpolateRgb = (function rgbGamma(y) {
  var color = gamma(y);

  function rgb$1(start, end) {
    var r = color((start = rgb(start)).r, (end = rgb(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb$1.gamma = rgbGamma;
  return rgb$1;
})(1);

function rgbSpline(spline) {
  return function (colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i,
        color;

    for (i = 0; i < n; ++i) {
      color = rgb(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }

    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function (t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(basis$1);

function numberArray (a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function (t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;

    return c;
  };
}
function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = d3_interpolate(a[i], b[i]);

  for (; i < nb; ++i) c[i] = b[i];

  return function (t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);

    return c;
  };
}

function date (a, b) {
  var d = new Date();
  return a = +a, b = +b, function (t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}

function interpolateNumber (a, b) {
  return a = +a, b = +b, function (t) {
    return a * (1 - t) + b * t;
  };
}

function object (a, b) {
  var i = {},
      c = {},
      k;
  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = d3_interpolate(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function (t) {
    for (k in i) c[k] = i[k](t);

    return c;
  };
}

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function () {
    return b;
  };
}

function one(b) {
  return function (t) {
    return b(t) + "";
  };
}

function interpolateString (a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0,
      // scan index for next number in b
  am,
      // current match in a
  bm,
      // current match in b
  bs,
      // string preceding current number in b, if any
  i = -1,
      // index in s
  s = [],
      // string constants and placeholders
  q = []; // number interpolators
  // Coerce inputs to strings.

  a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }

    if ((am = am[0]) === (bm = bm[0])) {
      // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else {
      // interpolate non-matching numbers
      s[++i] = null;
      q.push({
        i: i,
        x: interpolateNumber(am, bm)
      });
    }

    bi = reB.lastIndex;
  } // Add remains of b.


  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  } // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.


  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
    for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);

    return s.join("");
  });
}

function d3_interpolate (a, b) {
  var t = typeof b,
      c;
  return b == null || t === "boolean" ? constant$1(b) : (t === "number" ? interpolateNumber : t === "string" ? (c = color(b)) ? (b = c, interpolateRgb) : interpolateString : b instanceof color ? interpolateRgb : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object : interpolateNumber)(a, b);
}

function d3_interpolateRound (a, b) {
  return a = +a, b = +b, function (t) {
    return Math.round(a * (1 - t) + b * t);
  };
}

var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose (a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}

var svgNode;
/* eslint-disable no-undef */

function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
  if (value == null) return identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}

function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({
        i: i - 4,
        x: interpolateNumber(xa, xb)
      }, {
        i: i - 2,
        x: interpolateNumber(ya, yb)
      });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

      q.push({
        i: s.push(pop(s) + "rotate(", null, degParen) - 2,
        x: interpolateNumber(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({
        i: s.push(pop(s) + "skewX(", null, degParen) - 2,
        x: interpolateNumber(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: interpolateNumber(xa, xb)
      }, {
        i: i - 2,
        x: interpolateNumber(ya, yb)
      });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function (a, b) {
    var s = [],
        // string constants and placeholders
    q = []; // number interpolators

    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc

    return function (t) {
      var i = -1,
          n = q.length,
          o;

      while (++i < n) s[(o = q[i]).i] = o.x(t);

      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

var epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

var interpolateZoom = (function zoomRho(rho, rho2, rho4) {
  // p0 = [ux0, uy0, w0]
  // p1 = [ux1, uy1, w1]
  function zoom(p0, p1) {
    var ux0 = p0[0],
        uy0 = p0[1],
        w0 = p0[2],
        ux1 = p1[0],
        uy1 = p1[1],
        w1 = p1[2],
        dx = ux1 - ux0,
        dy = uy1 - uy0,
        d2 = dx * dx + dy * dy,
        i,
        S; // Special case for u0 ≅ u1.

    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;

      i = function (t) {
        return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
      };
    } // General case.
    else {
        var d1 = Math.sqrt(d2),
            b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
            b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
            r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
            r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
        S = (r1 - r0) / rho;

        i = function (t) {
          var s = t * S,
              coshr0 = cosh(r0),
              u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
          return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
        };
      }

    i.duration = S * 1000 * rho / Math.SQRT2;
    return i;
  }

  zoom.rho = function (_) {
    var _1 = Math.max(1e-3, +_),
        _2 = _1 * _1,
        _4 = _2 * _2;

    return zoomRho(_1, _2, _4);
  };

  return zoom;
})(Math.SQRT2, 2, 4);

var frame = 0,
    // is an animation frame pending?
timeout = 0,
    // is a timeout pending?
interval = 0,
    // are any timers active?
pokeDelay = 1000,
    // how frequently we check for clock skew
taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function (callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);

    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;else taskHead = this;
      taskTail = this;
    }

    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function () {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}
function timerFlush() {
  now(); // Get the current time, if not already set.

  ++frame; // Pretend we’ve set an alarm, if we haven’t already.

  var t = taskHead,
      e;

  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }

  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;

  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(),
      delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0,
      t1 = taskHead,
      t2,
      time = Infinity;

  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }

  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.

  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

function timeout$1 (callback, delay, time) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart(elapsed => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}

var emptyOn = dispatch("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function schedule (node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index,
    // For context during callback.
    group: group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id) {
  var schedule = get$1(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}
function set$1(node, id) {
  var schedule = get$1(node, id);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}
function get$1(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}

function create(node, id, self) {
  var schedules = node.__transition,
      tween; // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!

  schedules[id] = self;
  self.timer = timer(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time); // If the elapsed delay is less than our first sleep, start immediately.

    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o; // If the state is not SCHEDULED, then we previously errored on start.

    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue; // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!

      if (o.state === STARTED) return timeout$1(start); // Interrupt the active transition, if any.

      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } // Cancel any pre-empted transitions.
      else if (+i < id) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("cancel", node, node.__data__, o.index, o.group);
          delete schedules[i];
        }
    } // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.


    timeout$1(function () {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    }); // Dispatch the start event.
    // Note this must be done before the tween are initialized.

    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted

    self.state = STARTED; // Initialize the tween, deleting null tween.

    tween = new Array(n = self.tween.length);

    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }

    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(node, t);
    } // Dispatch the end event.


    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];

    for (var i in schedules) return; // eslint-disable-line no-unused-vars


    delete node.__transition;
  }
}

function interrupt (node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;
  if (!schedules) return;
  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty = false;
      continue;
    }

    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
}

function selection_interrupt (name) {
  return this.each(function () {
    interrupt(this, name);
  });
}

function tweenRemove(id, name) {
  var tween0, tween1;
  return function () {
    var schedule = set$1(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = tween0 = tween;

      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error();
  return function () {
    var schedule = set$1(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();

      for (var t = {
        name: name,
        value: value
      }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }

      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

function transition_tween (name, value) {
  var id = this._id;
  name += "";

  if (arguments.length < 2) {
    var tween = get$1(this.node(), id).tween;

    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }

    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}
function tweenValue(transition, name, value) {
  var id = transition._id;
  transition.each(function () {
    var schedule = set$1(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function (node) {
    return get$1(node, id).value[name];
  };
}

function interpolate (a, b) {
  var c;
  return (typeof b === "number" ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b);
}

function attrRemove$1(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS$1(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant$1(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrConstantNS$1(fullname, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrFunction$1(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
        value1 = value(this),
        string1;
    if (value1 == null) return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function attrFunctionNS$1(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
        value1 = value(this),
        string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function transition_attr (name, value) {
  var fullname = namespace(name),
      i = fullname === "transform" ? interpolateTransformSvg : interpolate;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname) : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));
}

function attrInterpolate(name, i) {
  return function (t) {
    this.setAttribute(name, i.call(this, t));
  };
}

function attrInterpolateNS(fullname, i) {
  return function (t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}

function attrTweenNS(fullname, value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function transition_attrTween (name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  var fullname = namespace(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

function delayFunction(id, value) {
  return function () {
    init(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function () {
    init(this, id).delay = value;
  };
}

function transition_delay (value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : get$1(this.node(), id).delay;
}

function durationFunction(id, value) {
  return function () {
    set$1(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function () {
    set$1(this, id).duration = value;
  };
}

function transition_duration (value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : get$1(this.node(), id).duration;
}

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error();
  return function () {
    set$1(this, id).ease = value;
  };
}

function transition_ease (value) {
  var id = this._id;
  return arguments.length ? this.each(easeConstant(id, value)) : get$1(this.node(), id).ease;
}

function easeVarying(id, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (typeof v !== "function") throw new Error();
    set$1(this, id).ease = v;
  };
}

function transition_easeVarying (value) {
  if (typeof value !== "function") throw new Error();
  return this.each(easeVarying(this._id, value));
}

function transition_filter (match) {
  if (typeof match !== "function") match = matcher(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Transition(subgroups, this._parents, this._name, this._id);
}

function transition_merge (transition) {
  if (transition._id !== this._id) throw new Error();

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Transition(merges, this._parents, this._name, this._id);
}

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function (t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0,
      on1,
      sit = start(name) ? init : set$1;
  return function () {
    var schedule = sit(this, id),
        on = schedule.on; // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.

    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}

function transition_on (name, listener) {
  var id = this._id;
  return arguments.length < 2 ? get$1(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
}

function removeFunction(id) {
  return function () {
    var parent = this.parentNode;

    for (var i in this.__transition) if (+i !== id) return;

    if (parent) parent.removeChild(this);
  };
}

function transition_remove () {
  return this.on("end.remove", removeFunction(this._id));
}

function transition_select (select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
      }
    }
  }

  return new Transition(subgroups, this._parents, name, id);
}

function transition_selectAll (select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            schedule(child, name, id, k, children, inherit);
          }
        }

        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new Transition(subgroups, parents, name, id);
}

var Selection$1 = selection.prototype.constructor;
function transition_selection () {
  return new Selection$1(this._groups, this._parents);
}

function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = styleValue(this, name),
        string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}

function styleRemove$1(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant$1(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function styleFunction$1(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = styleValue(this, name),
        value1 = value(this),
        string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function styleMaybeRemove(id, name) {
  var on0,
      on1,
      listener0,
      key = "style." + name,
      event = "end." + key,
      remove;
  return function () {
    var schedule = set$1(this, id),
        on = schedule.on,
        listener = schedule.value[key] == null ? remove || (remove = styleRemove$1(name)) : undefined; // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.

    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}

function transition_style (name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove$1(name)) : typeof value === "function" ? this.styleTween(name, styleFunction$1(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant$1(name, i, value), priority).on("end.style." + name, null);
}

function styleInterpolate(name, i, priority) {
  return function (t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}

function styleTween(name, value, priority) {
  var t, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }

  tween._value = value;
  return tween;
}

function transition_styleTween (name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

function textConstant$1(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction$1(value) {
  return function () {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

function transition_text (value) {
  return this.tween("text", typeof value === "function" ? textFunction$1(tweenValue(this, "text", value)) : textConstant$1(value == null ? "" : value + ""));
}

function textInterpolate(i) {
  return function (t) {
    this.textContent = i.call(this, t);
  };
}

function textTween(value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function transition_textTween (value) {
  var key = "text";
  if (arguments.length < 1) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, textTween(value));
}

function transition_transition () {
  var name = this._name,
      id0 = this._id,
      id1 = newId();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = get$1(node, id0);
        schedule(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new Transition(groups, this._parents, name, id1);
}

function transition_end () {
  var on0,
      on1,
      that = this,
      id = that._id,
      size = that.size();
  return new Promise(function (resolve, reject) {
    var cancel = {
      value: reject
    },
        end = {
      value: function () {
        if (--size === 0) resolve();
      }
    };
    that.each(function () {
      var schedule = set$1(this, id),
          on = schedule.on; // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.

      if (on !== on0) {
        on1 = (on0 = on).copy();

        on1._.cancel.push(cancel);

        on1._.interrupt.push(cancel);

        on1._.end.push(end);
      }

      schedule.on = on1;
    }); // The selection was empty, resolve end immediately

    if (size === 0) resolve();
  });
}

var id = 0;
function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}
function transition(name) {
  return selection().transition(name);
}
function newId() {
  return ++id;
}
var selection_prototype = selection.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: transition_select,
  selectAll: transition_selectAll,
  filter: transition_filter,
  merge: transition_merge,
  selection: transition_selection,
  transition: transition_transition,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: transition_on,
  attr: transition_attr,
  attrTween: transition_attrTween,
  style: transition_style,
  styleTween: transition_styleTween,
  text: transition_text,
  textTween: transition_textTween,
  remove: transition_remove,
  tween: transition_tween,
  delay: transition_delay,
  duration: transition_duration,
  ease: transition_ease,
  easeVarying: transition_easeVarying,
  end: transition_end,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};

function inherit(node, id) {
  var timing;

  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id} not found`);
    }
  }

  return timing;
}

function selection_transition (name) {
  var id, timing;

  if (name instanceof Transition) {
    id = name._id, name = name._name;
  } else {
    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new Transition(groups, this._parents, name, id);
}

selection.prototype.interrupt = selection_interrupt;
selection.prototype.transition = selection_transition;

var constant$2 = (x => () => x);

function ZoomEvent(type, {
  sourceEvent,
  target,
  transform,
  dispatch
}) {
  Object.defineProperties(this, {
    type: {
      value: type,
      enumerable: true,
      configurable: true
    },
    sourceEvent: {
      value: sourceEvent,
      enumerable: true,
      configurable: true
    },
    target: {
      value: target,
      enumerable: true,
      configurable: true
    },
    transform: {
      value: transform,
      enumerable: true,
      configurable: true
    },
    _: {
      value: dispatch
    }
  });
}

function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}
Transform.prototype = {
  constructor: Transform,
  scale: function (k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function (x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function (point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function (x) {
    return x * this.k + this.x;
  },
  applyY: function (y) {
    return y * this.k + this.y;
  },
  invert: function (location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function (x) {
    return (x - this.x) / this.k;
  },
  invertY: function (y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function (x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function (y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function () {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity$1 = new Transform(1, 0, 0);

function nopropagation(event) {
  event.stopImmediatePropagation();
}
function noevent$1 (event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// except for pinch-to-zoom, which is sent as a wheel+ctrlKey event

function defaultFilter(event) {
  return (!event.ctrlKey || event.type === 'wheel') && !event.button;
}

function defaultExtent() {
  var e = this;

  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;

    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }

    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }

  return [[0, 0], [e.clientWidth, e.clientHeight]];
}

function defaultTransform() {
  return this.__zoom || identity$1;
}

function defaultWheelDelta(event) {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);
}

function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}

function defaultConstrain(transform, extent, translateExtent) {
  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
  return transform.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
}

function d3_zoom () {
  var filter = defaultFilter,
      extent = defaultExtent,
      constrain = defaultConstrain,
      wheelDelta = defaultWheelDelta,
      touchable = defaultTouchable,
      scaleExtent = [0, Infinity],
      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
      duration = 250,
      interpolate = interpolateZoom,
      listeners = dispatch("start", "zoom", "end"),
      touchstarting,
      touchfirst,
      touchending,
      touchDelay = 500,
      wheelDelay = 150,
      clickDistance2 = 0,
      tapDistance = 10;

  function zoom(selection) {
    selection.property("__zoom", defaultTransform).on("wheel.zoom", wheeled).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  zoom.transform = function (collection, transform, point, event) {
    var selection = collection.selection ? collection.selection() : collection;
    selection.property("__zoom", defaultTransform);

    if (collection !== selection) {
      schedule(collection, transform, point, event);
    } else {
      selection.interrupt().each(function () {
        gesture(this, arguments).event(event).start().zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform).end();
      });
    }
  };

  zoom.scaleBy = function (selection, k, p, event) {
    zoom.scaleTo(selection, function () {
      var k0 = this.__zoom.k,
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p, event);
  };

  zoom.scaleTo = function (selection, k, p, event) {
    zoom.transform(selection, function () {
      var e = extent.apply(this, arguments),
          t0 = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,
          p1 = t0.invert(p0),
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p, event);
  };

  zoom.translateBy = function (selection, x, y, event) {
    zoom.transform(selection, function () {
      return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent.apply(this, arguments), translateExtent);
    }, null, event);
  };

  zoom.translateTo = function (selection, x, y, p, event) {
    zoom.transform(selection, function () {
      var e = extent.apply(this, arguments),
          t = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(identity$1.translate(p0[0], p0[1]).scale(t.k).translate(typeof x === "function" ? -x.apply(this, arguments) : -x, typeof y === "function" ? -y.apply(this, arguments) : -y), e, translateExtent);
    }, p, event);
  };

  function scale(transform, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
  }

  function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k,
        y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
  }

  function centroid(extent) {
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
  }

  function schedule(transition, transform, point, event) {
    transition.on("start.zoom", function () {
      gesture(this, arguments).event(event).start();
    }).on("interrupt.zoom end.zoom", function () {
      gesture(this, arguments).event(event).end();
    }).tween("zoom", function () {
      var that = this,
          args = arguments,
          g = gesture(that, args).event(event),
          e = extent.apply(that, args),
          p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,
          w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
          a = that.__zoom,
          b = typeof transform === "function" ? transform.apply(that, args) : transform,
          i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
      return function (t) {
        if (t === 1) t = b; // Avoid rounding error on end.
        else {
            var l = i(t),
                k = w / l[2];
            t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
          }
        g.zoom(null, t);
      };
    });
  }

  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }

  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }

  Gesture.prototype = {
    event: function (event) {
      if (event) this.sourceEvent = event;
      return this;
    },
    start: function () {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }

      return this;
    },
    zoom: function (key, transform) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
      this.that.__zoom = transform;
      this.emit("zoom");
      return this;
    },
    end: function () {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }

      return this;
    },
    emit: function (type) {
      var d = d3_select(this.that).datum();
      listeners.call(type, this.that, new ZoomEvent(type, {
        sourceEvent: this.sourceEvent,
        target: zoom,
        type,
        transform: this.that.__zoom,
        dispatch: listeners
      }), d);
    }
  };

  function wheeled(event, ...args) {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, args).event(event),
        t = this.__zoom,
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
        p = pointer(event); // If the mouse is in the same location as before, reuse it.
    // If there were recent wheel events, reset the wheel idle timeout.

    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }

      clearTimeout(g.wheel);
    } // If this wheel event won’t trigger a transform change, ignore it.
    else if (t.k === k) return; // Otherwise, capture the mouse point and location at the start.
      else {
          g.mouse = [p, t.invert(p)];
          interrupt(this);
          g.start();
        }

    noevent$1(event);
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }

  function mousedowned(event, ...args) {
    if (touchending || !filter.apply(this, arguments)) return;
    var g = gesture(this, args, true).event(event),
        v = d3_select(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
        p = pointer(event, currentTarget),
        currentTarget = event.currentTarget,
        x0 = event.clientX,
        y0 = event.clientY;
    dragDisable(event.view);
    nopropagation(event);
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt(this);
    g.start();

    function mousemoved(event) {
      noevent$1(event);

      if (!g.moved) {
        var dx = event.clientX - x0,
            dy = event.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }

      g.event(event).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event, currentTarget), g.mouse[1]), g.extent, translateExtent));
    }

    function mouseupped(event) {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event.view, g.moved);
      noevent$1(event);
      g.event(event).end();
    }
  }

  function dblclicked(event, ...args) {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom,
        p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this),
        p1 = t0.invert(p0),
        k1 = t0.k * (event.shiftKey ? 0.5 : 2),
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
    noevent$1(event);
    if (duration > 0) d3_select(this).transition().duration(duration).call(schedule, t1, p0, event);else d3_select(this).call(zoom.transform, t1, p0, event);
  }

  function touchstarted(event, ...args) {
    if (!filter.apply(this, arguments)) return;
    var touches = event.touches,
        n = touches.length,
        g = gesture(this, args, event.changedTouches.length === n).event(event),
        started,
        i,
        t,
        p;
    nopropagation(event);

    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer(t, this);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
    }

    if (touchstarting) touchstarting = clearTimeout(touchstarting);

    if (started) {
      if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function () {
        touchstarting = null;
      }, touchDelay);
      interrupt(this);
      g.start();
    }
  }

  function touchmoved(event, ...args) {
    if (!this.__zooming) return;
    var g = gesture(this, args).event(event),
        touches = event.changedTouches,
        n = touches.length,
        i,
        t,
        p,
        l;
    noevent$1(event);

    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer(t, this);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }

    t = g.that.__zoom;

    if (g.touch1) {
      var p0 = g.touch0[0],
          l0 = g.touch0[1],
          p1 = g.touch1[0],
          l1 = g.touch1[1],
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];else return;

    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }

  function touchended(event, ...args) {
    if (!this.__zooming) return;
    var g = gesture(this, args).event(event),
        touches = event.changedTouches,
        n = touches.length,
        i,
        t;
    nopropagation(event);
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function () {
      touchending = null;
    }, touchDelay);

    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }

    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);else {
      g.end(); // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.

      if (g.taps === 2) {
        t = pointer(t, this);

        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
          var p = d3_select(this).on("dblclick.zoom");
          if (p) p.apply(this, arguments);
        }
      }
    }
  }

  zoom.wheelDelta = function (_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant$2(+_), zoom) : wheelDelta;
  };

  zoom.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$2(!!_), zoom) : filter;
  };

  zoom.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$2(!!_), zoom) : touchable;
  };

  zoom.extent = function (_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$2([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };

  zoom.scaleExtent = function (_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };

  zoom.translateExtent = function (_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };

  zoom.constrain = function (_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };

  zoom.duration = function (_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };

  zoom.interpolate = function (_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };

  zoom.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };

  zoom.clickDistance = function (_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };

  zoom.tapDistance = function (_) {
    return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
  };

  return zoom;
}

function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      this.range(domain);
      break;

    default:
      this.range(range).domain(domain);
      break;
  }

  return this;
}
function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      {
        if (typeof domain === "function") this.interpolator(domain);else this.range(domain);
        break;
      }

    default:
      {
        this.domain(domain);
        if (typeof interpolator === "function") this.interpolator(interpolator);else this.range(interpolator);
        break;
      }
  }

  return this;
}

const implicit = Symbol("implicit");
function ordinal() {
  var index = new Map(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    var key = d + "",
        i = index.get(key);

    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }

    return range[(i - 1) % range.length];
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = new Map();

    for (const value of _) {
      const key = value + "";
      if (index.has(key)) continue;
      index.set(key, domain.push(value));
    }

    return scale;
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return ordinal(domain, range).unknown(unknown);
  };

  initRange.apply(scale, arguments);
  return scale;
}

function band() {
  var scale = ordinal().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      r0 = 0,
      r1 = 1,
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;
  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = r1 < r0,
        start = reverse ? r1 : r0,
        stop = reverse ? r0 : r1;
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = range(n).map(function (i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function (_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };

  scale.rangeRound = function (_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };

  scale.bandwidth = function () {
    return bandwidth;
  };

  scale.step = function () {
    return step;
  };

  scale.round = function (_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };

  scale.paddingInner = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };

  scale.paddingOuter = function (_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };

  scale.align = function (_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function () {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };

  return initRange.apply(rescale(), arguments);
}

function pointish(scale) {
  var copy = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function () {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}

function constant$3 (x) {
  return function () {
    return x;
  };
}

function number$1 (x) {
  return +x;
}

var unit = [0, 1];
function identity$2(x) {
  return x;
}

function normalize(a, b) {
  return (b -= a = +a) ? function (x) {
    return (x - a) / b;
  } : constant$3(isNaN(b) ? NaN : 0.5);
}

function clamper(a, b) {
  var t;
  if (a > b) t = a, a = b, b = t;
  return function (x) {
    return Math.max(a, Math.min(b, x));
  };
} // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


function bimap(domain, range, interpolate) {
  var d0 = domain[0],
      d1 = domain[1],
      r0 = range[0],
      r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function (x) {
    return r0(d0(x));
  };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1; // Reverse descending domains.

  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function (x) {
    var i = bisectRight(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit,
      range = unit,
      interpolate = d3_interpolate,
      transform,
      untransform,
      unknown,
      clamp = identity$2,
      piecewise,
      output,
      input;

  function rescale() {
    var n = Math.min(domain.length, range.length);
    if (clamp !== identity$2) clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function (y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
  };

  scale.domain = function (_) {
    return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = Array.from(_), interpolate = d3_interpolateRound, rescale();
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = _ ? true : identity$2, rescale()) : clamp !== identity$2;
  };

  scale.interpolate = function (_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity$2, identity$2);
}

function formatDecimal (x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
} // Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].

function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

  var i,
      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
}

function exponent (x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

function formatGroup (grouping, thousands) {
  return function (value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}

function formatNumerals (numerals) {
  return function (value) {
    return value.replace(/[0-9]/g, function (i) {
      return numerals[+i];
    });
  };
}

// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function () {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function formatTrim (s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".":
        i0 = i1 = i;
        break;

      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;

      default:
        if (!+s[i]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }

  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

var prefixExponent;
function formatPrefixAuto (x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

function formatRounded (x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

var formatTypes = {
  "%": (x, p) => (x * 100).toFixed(p),
  "b": x => Math.round(x).toString(2),
  "c": x => x + "",
  "d": formatDecimal,
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": x => Math.round(x).toString(8),
  "p": (x, p) => formatRounded(x * 100, p),
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": x => Math.round(x).toString(16).toUpperCase(),
  "x": x => Math.round(x).toString(16)
};

function identity$3 (x) {
  return x;
}

var map = Array.prototype.map,
    prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function formatLocale (locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? identity$3 : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? identity$3 : formatNumerals(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "−" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type; // The "n" type is an alias for ",g".

    if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.

    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?

    var formatType = formatTypes[type],
        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].

    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i,
          n,
          c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!

        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.

        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

        if (trim) value = formatTrim(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.

        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false; // Compute the prefix and suffix.

        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.

        if (maybeSuffix) {
          i = -1, n = value.length;

          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      } // If the fill character is not "0", grouping is applied before padding.


      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;

        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;

        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;

        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }

      return numerals(value);
    }

    format.toString = function () {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}

var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = formatLocale(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

function precisionFixed (step) {
  return Math.max(0, -exponent(Math.abs(step)));
}

function precisionPrefix (step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}

function precisionRound (step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}

function tickFormat (start, stop, count, specifier) {
  var step = tickStep(start, stop, count),
      precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);

  switch (specifier.type) {
    case "s":
      {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
        return formatPrefix(specifier, value);
      }

    case "":
    case "e":
    case "g":
    case "p":
    case "r":
      {
        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }

    case "f":
    case "%":
      {
        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
  }

  return format(specifier);
}

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function (count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function (count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function (count) {
    if (count == null) count = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    while (maxIter-- > 0) {
      step = tickIncrement(start, stop, count);

      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }

      prestep = step;
    }

    return scale;
  };

  return scale;
}
function linear$1() {
  var scale = continuous();

  scale.copy = function () {
    return copy(scale, linear$1());
  };

  initRange.apply(scale, arguments);
  return linearish(scale);
}

function nice (domain, interval) {
  domain = domain.slice();
  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}

function transformSymlog(c) {
  return function (x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function transformSymexp(c) {
  return function (x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function symlogish(transform) {
  var c = 1,
      scale = transform(transformSymlog(c), transformSymexp(c));

  scale.constant = function (_) {
    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  };

  return linearish(scale);
}
function symlog() {
  var scale = symlogish(transformer());

  scale.copy = function () {
    return copy(scale, symlog()).constant(scale.constant());
  };

  return initRange.apply(scale, arguments);
}

function transformPow(exponent) {
  return function (x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}

function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}

function powish(transform) {
  var scale = transform(identity$2, identity$2),
      exponent = 1;

  function rescale() {
    return exponent === 1 ? transform(identity$2, identity$2) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
  }

  scale.exponent = function (_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };

  return linearish(scale);
}
function pow() {
  var scale = powish(transformer());

  scale.copy = function () {
    return copy(scale, pow()).exponent(scale.exponent());
  };

  initRange.apply(scale, arguments);
  return scale;
}

var t0 = new Date(),
    t1 = new Date();
function newInterval(floori, offseti, count, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
  }

  interval.floor = function (date) {
    return floori(date = new Date(+date)), date;
  };

  interval.ceil = function (date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function (date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function (date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function (start, stop, step) {
    var range = [],
        previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date

    do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);

    return range;
  };

  interval.filter = function (test) {
    return newInterval(function (date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function (date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty

        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty

        }
      }
    });
  };

  if (count) {
    interval.count = function (start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function (step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
        return field(d) % step === 0;
      } : function (d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }

  return interval;
}

var millisecond = newInterval(function () {// noop
}, function (date, step) {
  date.setTime(+date + step);
}, function (start, end) {
  return end - start;
}); // An optimized implementation for this simple case.

millisecond.every = function (k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return newInterval(function (date) {
    date.setTime(Math.floor(date / k) * k);
  }, function (date, step) {
    date.setTime(+date + step * k);
  }, function (start, end) {
    return (end - start) / k;
  });
};

var durationSecond = 1e3;
var durationMinute = 6e4;
var durationHour = 36e5;
var durationDay = 864e5;
var durationWeek = 6048e5;

var second = newInterval(function (date) {
  date.setTime(date - date.getMilliseconds());
}, function (date, step) {
  date.setTime(+date + step * durationSecond);
}, function (start, end) {
  return (end - start) / durationSecond;
}, function (date) {
  return date.getUTCSeconds();
});

var minute = newInterval(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, function (date, step) {
  date.setTime(+date + step * durationMinute);
}, function (start, end) {
  return (end - start) / durationMinute;
}, function (date) {
  return date.getMinutes();
});

var hour = newInterval(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, function (date, step) {
  date.setTime(+date + step * durationHour);
}, function (start, end) {
  return (end - start) / durationHour;
}, function (date) {
  return date.getHours();
});

var day = newInterval(date => date.setHours(0, 0, 0, 0), (date, step) => date.setDate(date.getDate() + step), (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay, date => date.getDate() - 1);

function weekday(i) {
  return newInterval(function (date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}

var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);

var month = newInterval(function (date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setMonth(date.getMonth() + step);
}, function (start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function (date) {
  return date.getMonth();
});

var year = newInterval(function (date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function (start, end) {
  return end.getFullYear() - start.getFullYear();
}, function (date) {
  return date.getFullYear();
}); // An optimized implementation for this simple case.

year.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

var utcDay = newInterval(function (date) {
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function (start, end) {
  return (end - start) / durationDay;
}, function (date) {
  return date.getUTCDate() - 1;
});

function utcWeekday(i) {
  return newInterval(function (date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function (start, end) {
    return (end - start) / durationWeek;
  });
}

var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);

var utcYear = newInterval(function (date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function (start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function (date) {
  return date.getUTCFullYear();
}); // An optimized implementation for this simple case.

utcYear.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }

  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }

  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newDate(y, m, d) {
  return {
    y: y,
    m: m,
    d: d,
    H: 0,
    M: 0,
    S: 0,
    L: 0
  };
}

function formatLocale$1(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;
  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  }; // These recursive directive definitions must be deferred.

  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function (date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;
      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, Z) {
    return function (string) {
      var d = newDate(1900, undefined, 1),
          i = parseSpecifier(d, specifier, string += "", 0),
          week,
          day$1;
      if (i != string.length) return null; // If a UNIX timestamp is specified, return it.

      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0)); // If this is utcParse, never use the local timezone.

      if (Z && !("Z" in d)) d.Z = 0; // The am-pm flag is 0 for AM, and 1 for PM.

      if ("p" in d) d.H = d.H % 12 + d.p * 12; // If the month was not specified, inherit from the quarter.

      if (d.m === undefined) d.m = "q" in d ? d.q : 0; // Convert day-of-week and week-of-year to day-of-year.

      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;

        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();
          week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();
          week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);
          week = day.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day$1 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;
      } // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.


      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      } // Otherwise, all fields are in local time.


      return localDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);

      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }

  return {
    format: function (specifier) {
      var f = newFormat(specifier += "", formats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    parse: function (specifier) {
      var p = newParse(specifier += "", false);

      p.toString = function () {
        return specifier;
      };

      return p;
    },
    utcFormat: function (specifier) {
      var f = newFormat(specifier += "", utcFormats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    utcParse: function (specifier) {
      var p = newParse(specifier += "", true);

      p.toString = function () {
        return specifier;
      };

      return p;
    }
  };
}
var pads = {
  "-": "",
  "_": " ",
  "0": "0"
},
    numberRe = /^\s*\d+/,
    // note: ignores next directive
percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  return new Map(names.map((name, i) => [name.toLowerCase(), i]));
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + day.count(year(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(sunday.count(year(d) - 1, d), p, 2);
}

function dISO(d) {
  var day = d.getDay();
  return day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);
}

function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(monday.count(year(d) - 1, d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatYearISO(d, p) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatFullYearISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
}

function UTCdISO(d) {
  var day = d.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
}

function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCFullYearISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}

var locale$1;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale$1({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale$1(definition) {
  locale$1 = formatLocale$1(definition);
  timeFormat = locale$1.format;
  timeParse = locale$1.parse;
  utcFormat = locale$1.utcFormat;
  utcParse = locale$1.utcParse;
  return locale$1;
}

var durationSecond$1 = 1000,
    durationMinute$1 = durationSecond$1 * 60,
    durationHour$1 = durationMinute$1 * 60,
    durationDay$1 = durationHour$1 * 24,
    durationWeek$1 = durationDay$1 * 7,
    durationMonth = durationDay$1 * 30,
    durationYear = durationDay$1 * 365;

function date$1(t) {
  return new Date(t);
}

function number$2(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
  var scale = continuous(),
      invert = scale.invert,
      domain = scale.domain;
  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");
  var tickIntervals = [[second, 1, durationSecond$1], [second, 5, 5 * durationSecond$1], [second, 15, 15 * durationSecond$1], [second, 30, 30 * durationSecond$1], [minute, 1, durationMinute$1], [minute, 5, 5 * durationMinute$1], [minute, 15, 15 * durationMinute$1], [minute, 30, 30 * durationMinute$1], [hour, 1, durationHour$1], [hour, 3, 3 * durationHour$1], [hour, 6, 6 * durationHour$1], [hour, 12, 12 * durationHour$1], [day, 1, durationDay$1], [day, 2, 2 * durationDay$1], [week, 1, durationWeek$1], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
  }

  function tickInterval(interval, start, stop) {
    if (interval == null) interval = 10; // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.

    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = bisector(function (i) {
        return i[2];
      }).right(tickIntervals, target),
          step;

      if (i === tickIntervals.length) {
        step = tickStep(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = Math.max(tickStep(start, stop, interval), 1);
        interval = millisecond;
      }

      return interval.every(step);
    }

    return interval;
  }

  scale.invert = function (y) {
    return new Date(invert(y));
  };

  scale.domain = function (_) {
    return arguments.length ? domain(Array.from(_, number$2)) : domain().map(date$1);
  };

  scale.ticks = function (interval) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop

    return r ? t.reverse() : t;
  };

  scale.tickFormat = function (count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function (interval) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1])) ? domain(nice(d, interval)) : scale;
  };

  scale.copy = function () {
    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
  };

  return scale;
}
function scaleTime () {
  return initRange.apply(calendar(year, month, sunday, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
}

function transformer$1() {
  var x0 = 0,
      x1 = 1,
      t0,
      t1,
      k10,
      transform,
      interpolator = identity$2,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  function range(interpolate) {
    return function (_) {
      var r0, r1;
      return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
    };
  }

  scale.range = range(d3_interpolate);
  scale.rangeRound = range(d3_interpolateRound);

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}

function copy$1(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}
function sequential() {
  var scale = linearish(transformer$1()(identity$2));

  scale.copy = function () {
    return copy$1(scale, sequential());
  };

  return initInterpolator.apply(scale, arguments);
}

var slice = Array.prototype.slice;

function identity$4 (x) {
  return x;
}

var top = 1,
    right = 2,
    bottom = 3,
    left = 4,
    epsilon = 1e-6;

function translateX(x) {
  return 'translate(' + (x + 0.5) + ',0)';
}

function translateY(y) {
  return 'translate(0,' + (y + 0.5) + ')';
}

function number$3(scale) {
  return function (d) {
    return +scale(d);
  };
}

function center(scale) {
  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.

  if (scale.round()) offset = Math.round(offset);
  return function (d) {
    return +scale(d) + offset;
  };
}

function entering() {
  return !this.__axis;
}

function axis(orient, scale) {
  var tickArguments = [],
      tickValues = null,
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3,
      k = orient === top || orient === left ? -1 : 1,
      x = orient === left || orient === right ? 'x' : 'y',
      transform = orient === top || orient === bottom ? translateX : translateY,
      drawTicks = null;

  function axis(context) {
    var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues,
        format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$4 : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = +range[0] + 0.5,
        range1 = +range[range.length - 1] + 0.5,
        position = (scale.bandwidth ? center : number$3)(scale.copy()),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll('.domain').data([null]),
        tick = selection.selectAll('.tick').data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append('g').attr('class', 'tick'),
        line = tick.select('line'),
        text = tick.select('text');
    path = path.merge(path.enter().insert('path', '.tick').attr('class', 'domain').attr('stroke', 'currentColor'));
    tick = tick.merge(tickEnter);
    line = line.merge(tickEnter.append('line').attr('stroke', 'currentColor').attr(x + '2', k * tickSizeInner));
    text = text.merge(tickEnter.append('text').attr('fill', 'currentColor').attr(x, k * spacing).attr('dy', orient === top ? '0em' : orient === bottom ? '0.71em' : '0.32em'));

    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);
      tickExit = tickExit.transition(context).attr('opacity', epsilon).attr('transform', function (d) {
        return isFinite(d = position(d)) ? transform(d) : this.getAttribute('transform');
      });
      tickEnter.attr('opacity', epsilon).attr('transform', function (d) {
        var p = this.parentNode.__axis;
        return transform(p && isFinite(p = p(d)) ? p : position(d));
      });
    }

    tickExit.remove();
    path.attr('d', orient === left || orient == right ? tickSizeOuter ? 'M' + k * tickSizeOuter + ',' + range0 + 'H0.5V' + range1 + 'H' + k * tickSizeOuter : 'M0.5,' + range0 + 'V' + range1 : tickSizeOuter ? 'M' + range0 + ',' + k * tickSizeOuter + 'V0.5H' + range1 + 'V' + k * tickSizeOuter : 'M' + range0 + ',0.5H' + range1);
    tick.attr('opacity', 1).attr('transform', function (d) {
      return transform(position(d));
    });
    line.attr(x + '2', k * tickSizeInner);
    text.attr(x, k * spacing); //.text(format)

    selection.filter(entering).attr('fill', 'none').attr('font-size', 10).attr('font-family', 'sans-serif').attr('text-anchor', orient === right ? 'start' : orient === left ? 'end' : 'middle');
    drawTicks(tickEnter, tick);
    selection.each(function () {
      this.__axis = position;
    });
  }

  axis.scale = function (_) {
    return arguments.length ? (scale = _, axis) : scale;
  };

  axis.ticks = function () {
    return tickArguments = slice.call(arguments), axis;
  };

  axis.tickArguments = function (_) {
    return arguments.length ? (tickArguments = _ == null ? [] : slice.call(_), axis) : tickArguments.slice();
  };

  axis.tickValues = function (_) {
    return arguments.length ? (tickValues = _ == null ? null : slice.call(_), axis) : tickValues && tickValues.slice();
  };

  axis.tickFormat = function (_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };

  axis.tickSize = function (_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };

  axis.tickSizeInner = function (_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };

  axis.tickSizeOuter = function (_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };

  axis.tickPadding = function (_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };

  axis.drawTicks = function (_) {
    return arguments.length ? (drawTicks = _, axis) : drawTicks;
  };

  return axis;
}

function axisTop(scale) {
  return axis(top, scale);
}
function axisRight(scale) {
  return axis(right, scale);
}
function axisBottom(scale) {
  return axis(bottom, scale);
}
function axisLeft(scale) {
  return axis(left, scale);
}

function chunky(scale1, scale2) {
  var _scales = [scale1 || linear$1(), scale2 || linear$1()];

  var scale = function scale(t) {
    if (_scales[0].domain()[0] <= t && t <= _scales[0].domain()[1]) {
      return _scales[0](t);
    } else {
      return _scales[1](t);
    }
  };

  scale.copy = function () {
    var copy = chunky(_scales[0].copy(), _scales[1].copy());
    copy._threshold = scale._threshold;
    return copy;
  };

  scale.domain = function (vals) {
    if (vals) {
      _scales[0].domain(vals[0]);

      _scales[1].domain(vals[1]);

      return scale;
    } else {
      return [_scales[0].domain()[0], _scales[1].domain()[1]]; // return _scales[0].domain()
    }
  };

  scale.range = function (vals) {
    if (vals) {
      _scales[0].range(vals[0]);

      _scales[1].range(vals[1]);

      return scale;
    } else {
      return [_scales[0].range()[0], _scales[1].range()[1]]; // return _scales[0].range()
    }
  };

  scale.subDomains = function () {
    return [_scales[0].domain(), _scales[1].domain()];
  };

  scale.subRanges = function () {
    return [_scales[0].range(), _scales[1].range()];
  };

  scale.ticks = function (val) {
    var outlierTicks = _scales[1].ticks(2);

    outlierTicks = [outlierTicks[0], outlierTicks[outlierTicks.length - 1]];
    return _scales[0].ticks(val - 1).concat(outlierTicks); // if(val){
    //   return _scales[0].ticks(val)
    // } else {
    //   return _scales[0].ticks()
    // }
  };

  scale.isChunky = true; // initRange.apply(scale, arguments);
  // return linearish(scale);

  return scale;
}

/**
 * Module Dependencies
 */
var isArray = Array.isArray;
/**
 * Initialize the outliers
 *
 * @param {Array|String|undefined}
 * @return {Array|Function}
 */

function outliers(arr) {
  if (isArray(arr)) return calc(arr);
  var o = null;
  var k = 'string' == typeof arr && arr;
  return function (v, i, a) {
    if (!o) o = calc(a, k);
    v = k ? v[k] : v;
    return !~o.indexOf(v);
  };
}
/**
 * Calculate the outliers
 *
 * @param {Array} arr
 * @param {String} key (optional)
 * @return {Array} outliers
 */


function calc(arr, key) {
  arr = arr.slice(0);
  if (key) arr = arr.map(function (v) {
    return v[key];
  });
  arr = arr.sort(function (a, b) {
    return a - b;
  });
  var len = arr.length;
  var middle = median(arr);
  var range = iqr(arr);
  var outliers = [];

  for (var i = 0; i < len; i++) {
    Math.abs(arr[i] - middle) > range && outliers.push(arr[i]);
  }

  return outliers;
}
/**
 * Find the median
 *
 * @param {Array} arr
 * @return {Number}
 */


function median(arr) {
  var len = arr.length;
  var half = ~~(len / 2);
  return len % 2 ? arr[half] : (arr[half - 1] + arr[half]) / 2;
}
/**
 * Find the range
 *
 * @param {Array} arr
 * @return {Number}
 */


function iqr(arr) {
  var len = arr.length;
  var q1 = median(arr.slice(0, ~~(len / 2)));
  var q3 = median(arr.slice(Math.ceil(len / 2))); // quizas hay que ponerlo como parametro

  var g = 1.5;
  return (q3 - q1) * g;
}

var d3Scales = {
  scaleLinear: linear$1,
  scaleSymlog: symlog,
  scaleBand: band,
  scalePow: pow,
  scalePoint: point,
  scaleTime: scaleTime,
  chunky: chunky
};
var d3Axes = {
  axisBottom: axisBottom,
  axisTop: axisTop,
  axisLeft: axisLeft,
  axisRight: axisRight
};
var DEFAULT_TICK_COUNT = 4;
var GAP_SIZE = 20;
function categoricalExtent(data) {
  var getter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (d) {
    return d.id;
  };

  if (data[0] && Array.isArray(data[0].value)) {
    var allValues = data.map(function (row) {
      return row.value.map(getter);
    });
    allValues = allValues.reduce(function (acc, val) {
      return acc.concat(val);
    }, []);
    return allValues.filter(function (d, i) {
      return allValues.indexOf(d) === i;
    });
  } else {
    return data.map(getter);
  }
}
function continuousExtentParts(data) {
  var getter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (d) {
    return d.value;
  };
  // return d3_extent(data.reduce((res,d)=>res.concat(d3_extent(d.value,(dd)=>getter(dd))),[]))
  var dict = data.reduce(function (res, d) {
    d.value.forEach(function (dd) {
      if (!res[dd.id]) res[dd.id] = [Infinity, -Infinity];
      var values = getter(dd);
      if (!Array.isArray(values)) values = [values];
      var minV = min(values);
      var maxV = max(values);
      res[dd.id][0] = Math.min(res[dd.id][0], minV || minV === 0 ? minV : null);
      res[dd.id][1] = Math.max(res[dd.id][1], maxV || maxV === 0 ? maxV : null);
    });
    return res;
  }, {});
  return Object.keys(dict).map(function (key) {
    return {
      value: dict[key].map(function (dd) {
        return {
          value: dd
        };
      })
    };
  });
}
function continuousExtent(data) {
  var getter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (d) {
    return d.value;
  };

  if (data[0] && Array.isArray(data[0].value)) {
    return d3_extent(data.reduce(function (res, d) {
      return res.concat(d3_extent(d.value, function (dd) {
        return getter(dd);
      }));
    }, []));
  } else {
    return d3_extent(data, getter);
  }
}
function continuousExtentTicks(data) {
  var getter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (d) {
    return d.value;
  };
  var ticks;

  if (data[0] && Array.isArray(data[0].value)) {
    ticks = data.reduce(function (res, d) {
      return res.concat(d.value.map(getter));
    }, []);
  } else {
    ticks = data.map(getter);
  }

  return ticks.filter(function (d, i) {
    return ticks.findIndex(function (dd) {
      return String(dd) === String(d);
    }) === i;
  });
}
function cleanCollisions(axis, extent, extentParts) {
  var multiplier = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.1;
  if (!extentParts[0] || extent[0] == extent[1]) return extent;

  var checkColision = function checkColision(ticks) {
    // return axis.type==='left' ? ticks[ticks.length-1]<extentParts[0].value[1].value*1.02 : ticks[ticks.length-1]<extentParts[extentParts.length-1].value[1].value*1.02
    var partToCheck = axis.type === 'left' ? extentParts[0].value[1] : extentParts[extentParts.length - 1].value[1];
    if (partToCheck.value) partToCheck = partToCheck.value; // console.log("checking",ticks[ticks.length-1],partToCheck)

    return ticks[ticks.length - 1] < partToCheck * multiplier;
  };

  var tmpScale = axis.scale.copy().domain(extent);
  var ticks = tmpScale.ticks(DEFAULT_TICK_COUNT);
  var tickDist = Math.abs(ticks[1] - ticks[0]);

  while (checkColision(ticks)) {
    // console.log("ticks",ticks)
    extent[1] = +extent[1] + tickDist; // if(originalExtent[0]>=0) extent[0]=0

    tmpScale.domain(extent);
    ticks = tmpScale.ticks(DEFAULT_TICK_COUNT);
    tickDist = Math.abs(ticks[1] - ticks[0]); // console.log("new ticks",tmpScale.ticks(DEFAULT_TICK_COUNT))
  }

  return extent;
}
function padLinear(_ref, k) {
  var _ref2 = _slicedToArray(_ref, 2),
      x0 = _ref2[0],
      x1 = _ref2[1];

  x0 = Number(x0);
  x1 = Number(x1);
  var d = x1 - x0 > 0 ? x1 - x0 : x1 * 0.2;
  var dx = d * k / 2;
  if (x0.getDate) return [new Date(x0 - dx), new Date(x1 + dx)];else return [x0 - dx, x1 + dx];
}
function getMinDist(data, scale, getter) {
  if (Array.isArray(data[0].value)) {
    return data.reduce(function (min, row) {
      return row.value.reduce(function (min, p, i) {
        if (i > 0) min = Math.min(min, scale(getter(row.value[i])) - scale(getter(row.value[i - 1])));
        return min;
      }, Infinity);
    }, Infinity);
  } else {
    return data.reduce(function (min, p, i) {
      if (i > 0) min = Math.min(min, scale(getter(data[i])) - scale(getter(data[i - 1])));
      return min;
    }, Infinity);
  }
}

var AxisHelper = /*#__PURE__*/function (_BaseHelper) {
  _inherits(AxisHelper, _BaseHelper);

  var _super = _createSuper(AxisHelper);

  function AxisHelper() {
    _classCallCheck(this, AxisHelper);

    return _super.apply(this, arguments);
  }

  _createClass(AxisHelper, null, [{
    key: "init",
    value: function init() {}
  }, {
    key: "update",
    value: function update() {
      var _this = this;

      var yDims = this.getYAxesIds();
      var xDims = this.getXAxesIds();
      this.axes = _objectSpread2(_objectSpread2({}, xDims.reduce(function (o, dim) {
        return _objectSpread2(_objectSpread2({}, o), {}, _defineProperty({}, dim, {}));
      }, {})), yDims.reduce(function (o, dim) {
        return _objectSpread2(_objectSpread2({}, o), {}, _defineProperty({}, dim, {}));
      }, {}));
      this.defMargin = {
        top: 20,
        right: 20,
        left: 20,
        bottom: 20
      };

      if (this.config.AxisHelper.y.showTickValues) {
        if (!this.config.horizontal) this.defMargin[this.config.AxisHelper.y.side] = 40;else {
          if (this.config.AxisHelper.y.side === 'left') this.defMargin['top'] = 40;else this.defMargin['bottom'] = 40;
        }
      }

      if (yDims.length > 1) {
        this.defMargin.left = 40;
        this.defMargin.right = 40;
      }

      this.margin = _objectSpread2({}, this.defMargin);
      this.contentSize = {
        width: 0,
        height: 0
      };
      xDims.forEach(function (dim) {
        return _this._initAxis(dim);
      });
      yDims.forEach(function (dim) {
        return _this._initAxis(dim);
      });
    }
  }, {
    key: "beforeDraw",
    value: function beforeDraw() {
      this._updateAxes(); //includes a _redrawAxes

    }
  }, {
    key: "draw",
    value: function draw() {}
  }, {
    key: "afterDraw",
    value: function afterDraw() {
      var _this2 = this;

      // let restrictDomain = (originalDomain, newDomain) => {
      //   let addDiff = (x, a, b) => {
      //     if (x.getTime) return new Date(x.getTime() + (b.getTime() - a.getTime()))
      //     else return x + (b - a)
      //   }
      //   if (newDomain[1] > originalDomain[1]) {
      //     newDomain = newDomain.map(x => addDiff(x, newDomain[1], originalDomain[1]))
      //   }
      //   if (newDomain[0] < originalDomain[0]) {
      //     newDomain = newDomain.map(x => addDiff(x, newDomain[0], originalDomain[0]))
      //   }
      //   console.log("restricted domain",newDomain)
      //   return newDomain
      // }
      var zoomedSemantic = function zoomedSemantic(_ref3) {
        var transform = _ref3.transform;
        var skipTransitions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        transform.x = Math.min(transform.x, -_this2.axes.x.scale.range()[0] * transform.k);
        transform.x = Math.max(transform.x, -_this2.axes.x.scale.range()[1] * transform.k + _this2.contentSize.width);
        transform.y = Math.min(transform.y, -_this2.axes.y.scale.range()[1] * transform.k);
        transform.y = Math.max(transform.y, -_this2.axes.y.scale.range()[0] * transform.k + _this2.contentSize.height);
        var zx = transform.rescaleX(_this2.axes.x.scale).interpolate(d3_interpolateRound);
        var zy = transform.rescaleY(_this2.axes.y.scale).interpolate(d3_interpolateRound); // let originalDomain = this.axes.x.scale.domain()
        // let newDomain = zx.domain()
        // zx.domain(newDomain)
        // zx.domain(restrictDomain(this.axes.x.scale.domain(), zx.domain()))
        // zy.domain(restrictDomain(this.axes.y.scale.domain(), zy.domain()))

        if (_this2.config.AxisHelper.zoomAxes.indexOf('x') >= 0) _this2.axes.x.func.scale(zx);
        if (_this2.config.AxisHelper.zoomAxes.indexOf('y') >= 0) _this2.axes.y.func.scale(zy);
        _this2._zooming = skipTransitions;

        _this2._beforeDraws[_this2._helperIds.indexOf('ItemsHelper')].call(_this2); // this._beforeDraws[this._helperIds.indexOf('AxisHelper')].call(this)


        _this2._redrawAxes();

        _this2.draw();

        _this2._zooming = false;

        _this2.emit('translate', {
          x: _this2.axes.x.func.scale().range(),
          y: _this2.axes.y.func.scale().range()
        });
      };

      var zoomedGeometric = function zoomedGeometric(_ref4) {
        var transform = _ref4.transform;
        var td = _this2.config.horizontal ? transform.y : transform.x;

        _this2.axes.x.func.scale().range(_this2.axes.x.scale.range().map(function (d) {
          return d + td;
        }));

        _this2._zooming = true;

        _this2._beforeDraws[_this2._helperIds.indexOf('ItemsHelper')].call(_this2); // this._beforeDraws[this._helperIds.indexOf('AxisHelper')].call(this)


        _this2._redrawAxes();

        _this2.draw();

        _this2._zooming = false;

        _this2.emit('translate', {
          x: _this2.axes.x.func.scale().range()
        });
      };

      var zoomYTarget = this.axes.y || this.axes.y_0;

      if (this.config.AxisHelper.zoom && !this.axes.x.scale.bandwidth) {
        var zoom = d3_zoom().scaleExtent([1, 3]); //PARA EL LINECHART

        if (this.config.AxisHelper.zoomAxes.length === 1 && this.config.AxisHelper.zoomAxes[0] === 'x') {
          var minDist = getMinDist(this.data, this.axes['x'].scale, function (d) {
            return (// this._getValueOnAxis(d, 'x')
              d.id
            );
          });
          var initialScale = minDist < 50 ? 50 / minDist : 1;
          var initialTransform = identity$1.scale(initialScale);
          d3_select(this.$root).call(zoom).call(zoom.transform, initialTransform);
          this.axes.x.func.ticks(Math.ceil(DEFAULT_TICK_COUNT / initialScale));

          if (this.config.AxisHelper.zoomAxes.indexOf('x') >= 0) {
            this.axes.x.func.scale().range(this.axes.x.scale.range().map(function (d) {
              return initialScale * d;
            }));
          }

          if (this.config.AxisHelper.zoomAxes.indexOf('y') >= 0) {
            this.axes.x.func.scale().range(this.axes.x.scale.range().map(function (d) {
              return initialScale * d;
            }));
          }

          zoomedSemantic({
            transform: initialTransform
          }, false);
        } else {
          //PARA LOS "SCATTER Y CANDELS"
          var _zoom = d3_zoom().scaleExtent([1, 5]);

          d3_select(this.$root).call(_zoom).call(_zoom.transform, identity$1);

          _zoom.on('zoom', zoomedSemantic);

          d3_select(this.$root).style('cursor', 'move');
          zoomedSemantic({
            transform: identity$1
          }, false);
        } // HAY QUE HACERLO (BIEN) Tambien para las "y's" y ver "que pasa en TODOS los casos... (paralels bars areas...)"


        this._redrawAxes();

        this.draw();
        zoom.on('zoom', zoomedSemantic);
        d3_select(this.$root).style('cursor', 'move');
      } else if (this.config.AxisHelper.zoom) {
        //PARA LOS BARS, PARALELS etc
        var sortedXRange = this.config.horizontal ? zoomYTarget.scale.range().sort(function (a, b) {
          return a - b;
        }) : this.axes.x.scale.range().sort(function (a, b) {
          return a - b;
        });
        var sortedYRange = this.config.horizontal ? this.axes.x.scale.range().sort(function (a, b) {
          return a - b;
        }) : zoomYTarget.scale.range().sort(function (a, b) {
          return a - b;
        }); // chapuzilla para el "parallels" pero parece OK, no?

        if (this.getYAxesIds().length > 2) {
          sortedXRange = [sortedXRange[0] - 40, sortedXRange[1] + 40];
        }

        var _zoom2 = d3_zoom().scaleExtent([1, 1]).translateExtent([[sortedXRange[0], sortedYRange[0]], [sortedXRange[1] + this.margin.left + this.margin.right, sortedYRange[1] + this.margin.top + this.margin.bottom]]);

        d3_select(this.$root).call(_zoom2).call(_zoom2.transform, identity$1);

        _zoom2.on('zoom', zoomedGeometric);

        d3_select(this.$root).style('cursor', 'move');
      } else {
        d3_select(this.$root).on('.zoom', null);
        d3_select(this.$root).style('cursor', null);
      }

      if (this.config.AxisHelper.zoom) {
        var clips = this.root.selectAll('clipPath').data(['content', 'x', 'y']);
        var clipsEnter = clips.enter().append('clipPath').attr('id', function (d) {
          return 'zoom-clip-' + d + '-' + _this2._chartId;
        });
        clipsEnter.append('rect');
        clips = clips.merge(clipsEnter);
        this.root.select("#zoom-clip-content-".concat(this._chartId)).select('rect').attr('x', 0).attr('y', 0).attr('width', this.contentSize.width).attr('height', this.contentSize.height);

        var _long = this.config.horizontal ? 'x' : 'y';

        var _short = this.config.horizontal ? 'y' : 'x';

        this.root.select("#zoom-clip-".concat(_short, "-").concat(this._chartId)).select('rect').attr('x', -20).attr('y', -this.contentSize.height).attr('width', this.contentSize.width + 40).attr('height', this.contentSize.height + this.margin.bottom);
        this.root.select("#zoom-clip-".concat(_long, "-").concat(this._chartId)).select('rect').attr('x', zoomYTarget.type === 'left' ? -this.margin.left : -this.margin.left - this.contentSize.width).attr('y', -10).attr('width', this.contentSize.width + this.margin.left + this.margin.right).attr('height', this.contentSize.height + 20);
        this.content.attr('clip-path', "url(#zoom-clip-content-".concat(this._chartId, ")"));
        this.axes.x.selection.attr('clip-path', "url(#zoom-clip-x-".concat(this._chartId, ")"));
        zoomYTarget.selection.attr('clip-path', "url(#zoom-clip-y-".concat(this._chartId, ")"));
      } else {
        this.content.attr('clip-path', null);
        if (this.axes.x) this.axes.x.selection.attr('clip-path', null);
        if (zoomYTarget) zoomYTarget.selection.attr('clip-path', null);
      }
    }
  }]);

  return AxisHelper;
}(BaseHelper);

_defineProperty(AxisHelper, "_firstAxisRender", true);

_defineProperty(AxisHelper, "configName", 'AxisHelper');

_defineProperty(AxisHelper, "defaultConfig", {
  index: 102,
  x: {
    /**
     * Scale to use in the X dimension. Use Logarithmic or Power if your dataset spans multiple orders of magnitude.
     */
    scale: {
      type: String,
      "default": 'linear',
      options: ['linear', 'log', 'pow', 'band', 'point'],
      exposed: true
    },
    side: {
      type: String,
      "default": 'bottom',
      options: ['bottom', 'top'],
      exposed: false,
      nonEditable: true
    },
    domain: {
      type: Array,
      "default": ['auto', 'auto']
    },
    getExtent: {
      type: Function,
      "default": null
    },
    getDataType: {
      type: [Function, null],
      "default": null
    },
    getValue: {
      type: [Function, null],
      "default": null
    },
    dimensions: {
      type: [String, null],
      "default": 'single'
    },

    /**
     * Show/hide equispaced values on the X axis.
     */
    showTickValues: {
      type: Boolean,
      "default": true,
      exposed: true
    },

    /**
     * Show/hide vertical lines.
     */
    grid: {
      type: Boolean,
      "default": false,
      exposed: true
    },

    /**
     * Text format for the values on the X axis, and the tooltips. See [valueFormat](#/developer/PropDetails#valueFormat)
     */
    valueFormat: {
      type: [String, Array, Function, null],
      "default": null,
      exposed: true
    },

    /**
     * Unit to be appended to the formatted values. ('$', '¤', '£' will be prepended instead)
     */
    unit: {
      type: [String, Array, null],
      "default": null,
      exposed: true
    },

    /**
     * Orientation of the values on the X axis.
     */
    tickOrientation: {
      type: [String],
      "default": 'horizontal',
      options: ['horizontal', 'vertical', 'skewed'],
      exposed: true
    },

    /**
     * Text wrap of the values on the X axis.
     */
    tickWrap: {
      type: [String],
      "default": 'wrap',
      options: ['wrap', 'ellipsis', 'none'],
      exposed: true
    },

    /**
     * Force the axis to have a tick on each data point.
     */
    tickMatchData: {
      type: [Boolean],
      "default": false,
      exposed: true
    },

    /**
     * Value on which to slice the range of the X axis. Usefull when the dataset has some outliers.
     */
    trimThreshold: {
      type: [Boolean, Number, String],
      "default": false,
      exposed: true
    }
  },
  y: {
    /**
     * Scale to use in the Y dimension. Use Logarithmic or Power if your dataset spans multiple orders of magnitude.
     */
    scale: {
      type: [String, Array],
      "default": 'linear',
      options: ['linear', 'log', 'pow', 'band', 'point'],
      exposed: true
    },

    /**
     * Side on which to draw the Y axis.
     */
    side: {
      type: String,
      "default": 'left',
      options: ['left', 'right'],
      exposed: true
    },
    domain: {
      type: Array,
      "default": ['auto', 'auto']
    },
    getExtent: {
      type: Function,
      "default": null
    },
    getDataType: {
      type: [Function, null],
      "default": null
    },
    getValue: {
      type: [Function, null],
      "default": null
    },
    dimensions: {
      type: String,
      "default": 'single'
    },

    /**
     * Show/hide equispaced values on the Y axis.
     */
    showTickValues: {
      type: Boolean,
      "default": true,
      exposed: true
    },

    /**
     * Show/hide horizontal lines.
     */
    grid: {
      type: Boolean,
      "default": true,
      exposed: true
    },

    /**
     * Text format for the values on the Y axis, and the tooltips. See [valueFormat](#/developer/PropDetails#valueFormat)
     */
    valueFormat: {
      type: [String, Array, Function, null],
      "default": null,
      exposed: true
    },

    /**
     * Unit to be appended to the formatted values. ('$', '¤', '£' will be prepended instead)
     */
    unit: {
      type: [String, Array, null],
      "default": null,
      exposed: true
    },

    /**
     * Orientation of the values on the Y axis.
     */
    tickOrientation: {
      type: [String, Array],
      "default": 'horizontal',
      options: ['horizontal', 'vertical', 'skewed'],
      exposed: true
    },

    /**
     * Text wrap of the values on the Y axis.
     */
    tickWrap: {
      type: [String],
      "default": 'wrap',
      options: ['wrap', 'ellipsis', 'none'],
      exposed: true
    },

    /**
     * Force the axis to have a tick on each data point.
     */
    tickMatchData: {
      type: [Boolean],
      "default": false,
      exposed: false
    },

    /**
     * Value on which to slice the range of the Y axis. Usefull when the dataset has some outliers.
     */
    trimThreshold: {
      type: [Boolean, Number, String],
      "default": false,
      exposed: true
    }
  },

  /**
   * Default zoom explanation (should be overridden)
   */
  zoom: {
    type: Boolean,
    "default": false,
    exposed: true
  },
  zoomAxes: {
    type: Array,
    "default": ['x', 'y'],
    exposed: false
  } // semanticZoom: {
  //   type: Boolean,
  //   default: false
  // },
  // geometricZoom: {
  //   type: Boolean,
  //   default: false
  // }

});

_defineProperty(AxisHelper, "getYAxesIds", function () {
  if (this.config.AxisHelper.y.dimensions === 'data.dimensions') return this.data[0] ? Object.keys(this.data[0].dimensions).map(function (d, i) {
    return 'y_' + i;
  }) : [];else if (this.config.AxisHelper.y.dimensions === 'line-and-bar') return ['y_0', 'y_1'];else return ['y']; // return this.config.AxisHelper.y.multi?Object.keys(this.data[0].dimensions).map((d,i)=>'y_'+i):['y']
});

_defineProperty(AxisHelper, "getYAxesLabels", function () {
  if (this.config.AxisHelper.y.dimensions === 'data.dimensions') return this.data[0] ? Object.keys(this.data[0].dimensions).map(function (d) {
    return d;
  }) : [];else if (this.config.AxisHelper.y.dimensions === 'line-and-bar') return ['y_lines', 'y_bars'];else return ['y-label?']; // return this.config.AxisHelper.y.multi?Object.keys(this.data[0].dimensions).map((d)=>d):['y-label?']
});

_defineProperty(AxisHelper, "getXAxesIds", function () {
  if (this.config.AxisHelper.x.dimensions === null) return [];else return ['x']; // return this.config.AxisHelper.y.multi?Object.keys(this.data[0].dimensions).map((d,i)=>'y_'+i):['y']
});

_defineProperty(AxisHelper, "getXAxesLabels", function () {
  if (this.config.AxisHelper.x.dimensions === null) return [];else return ['x-label?'];
});

_defineProperty(AxisHelper, "_getAxisOrder", function () {
  var yDims = this.getYAxesIds();
  var xDims = this.getXAxesIds();
  if (this.config.horizontal) return [].concat(_toConsumableArray(yDims), _toConsumableArray(xDims));else return [].concat(_toConsumableArray(xDims), _toConsumableArray(yDims));
});

_defineProperty(AxisHelper, "getd3Scale", function (type, axis) {
  var computedThreshold;

  if (this.config.AxisHelper[axis[0]].trimThreshold === true) {
    var min = Math.min.apply(Math, _toConsumableArray(outliers(this.data.map(function (d) {
      return d.value;
    }))));
    computedThreshold = min !== Infinity ? min : null;
  } else {
    computedThreshold = this.config.AxisHelper[axis[0]].trimThreshold;
  }

  var d3Type;
  var dataType = this.config.AxisHelper[axis[0]].getDataType && this.config.AxisHelper[axis[0]].getDataType(this.data);

  if (dataType === String && type === 'linear') {
    d3Type = 'scalePoint';
  } else if (dataType === Date && type === 'linear') {
    d3Type = 'scaleTime';
  } else if (type === 'linear' && computedThreshold) {
    d3Type = 'chunky';
  } else if (type === 'log') {
    d3Type = 'scaleSymlog';
  } else {
    d3Type = 'scale' + type.charAt(0).toUpperCase() + type.slice(1);
  }

  var scale = d3Scales[d3Type]();
  scale.type = d3Type;
  if (scale.padding && this.config.mode !== 'grid') scale.padding(0.25);
  if (computedThreshold) scale._threshold = computedThreshold;
  return scale;
});

_defineProperty(AxisHelper, "_initAxis", function (axis) {
  var _this3 = this;

  var yDims = this.getYAxesIds();
  var xDims = this.getXAxesIds();
  var dims = {
    x: xDims,
    y: yDims
  };
  var scaleStr;

  if (Array.isArray(this.config.AxisHelper[axis[0]].scale)) {
    scaleStr = this.config.AxisHelper[axis[0]].scale[dims[axis[0]].indexOf(axis)] || this.config.AxisHelper[axis[0]].scale[0];
  } else {
    scaleStr = this.config.AxisHelper[axis[0]].scale;
  }

  var scale = this.getd3Scale(scaleStr, axis);
  var axisType;

  if (xDims.length > 0 && yDims.length > 0 && this._getAxisOrder().indexOf(axis) === 0) {
    if (this.config.horizontal && this.config.AxisHelper[axis[0]].side === 'left' || this.config.AxisHelper[axis[0]].side === 'top') axisType = 'top';else axisType = 'bottom';
  } else {
    // axisType = (this.config.horizontal || this.config.AxisHelper[axis[0]].side==='left')?'axisLeft':'axisRight'//'axisLeft'
    if (yDims.length > 1 && yDims.indexOf(axis) === yDims.length - 1) axisType = 'right';else if (this.config.horizontal && this.config.AxisHelper[axis[0]].side === 'bottom' || this.config.AxisHelper[axis[0]].side === 'left') axisType = 'left';else axisType = 'right';
  }

  var d3AxisType = 'axis' + axisType.charAt(0).toUpperCase() + axisType.slice(1); // this.axes[axis].func = d3[d3AxisType]()

  this.axes[axis].scale = scale;
  this.axes[axis].type = axisType;
  this.axes[axis].func = d3Axes[d3AxisType]().scale(scale.copy()).ticks(DEFAULT_TICK_COUNT) // .tickFormat(this.config.AxisHelper[axis[0]].tickFormat.bind(this))
  .tickFormat(function (d) {
    return _this3.formatValue.bind(_this3)(d, axis);
  }).tickSize(5).tickSizeOuter(0) //solo le importa al parallelcorrds, y quiere un 0 :D
  .drawTicks(function (enter, update) {
    return _this3._drawTicks(axis, enter, update);
  });
});

_defineProperty(AxisHelper, "_setDomain", function (axis) {
  var _this4 = this;

  var domain;
  domain = this._getExtent(axis);
  if (this.config.AxisHelper[axis[0]].domain[0] !== 'auto') domain[0] = this.config.AxisHelper[axis[0]].domain[0];
  if (this.config.AxisHelper[axis[0]].domain[1] !== 'auto') domain[1] = this.config.AxisHelper[axis[0]].domain[1]; // "chapuzilla" para los datumvalus que no es salgan (sobretodo en horizontal!)

  if (axis[0] === 'y' && this.config.showDatumValues) {
    domain = [domain[0], padLinear(domain, 0.2)[1]];
  } // Idem para lines and bars


  if (axis === 'y_0' && this.config.showLineDatumValues || axis === 'y_1' && this.config.showBarDatumValues) {
    domain = [domain[0], padLinear(domain, 0.2)[1]];
  } // MMM no estoy nada convencido de este "if/else" pero lo del this.zeroBased no pinta mal...


  if (axis[0] === 'y' && this.zeroBased && domain[0] >= 0) domain[0] = 0; // else if(!this.axes[axis].func.scale().isChunky && domain.length===2) domain = padLinear(domain,0.2)
  else if (!this.axes[axis].func.scale().isChunky && this.config.AxisHelper[axis[0]].scale !== 'band' && this.config.AxisHelper[axis[0]].scale !== 'point' && this.axes[axis].scale.type !== 'scalePoint') {
      if (axis[0] === 'x' && this.config.AxisHelper.zoom) {
        domain = padLinear(domain, 0.07);
      } else {
        domain = padLinear(domain, 0.2);
      }
    }

  if (this.axes[axis].scale.isChunky) {
    var threshold = this.axes[axis].scale._threshold;
    var max = domain[1]; // OLD: let next = this.data.reduce((min,d)=>this._getValueOnAxis(d,axis)<th?min:Math.min(min,this._getValueOnAxis(d,axis)),max)

    var allValues = categoricalExtent(this.data, function (d) {
      return _this4._getValueOnAxis(d, axis);
    });
    var next = allValues.reduce(function (min, d) {
      return d < threshold ? min : Math.min(min, d);
    }, max);
    var ticks = d3Scales.scaleLinear().domain([next, max]).ticks(2); // intentmaos forzar "en el tick"

    if (next > ticks[0]) next = ticks[0];else if (ticks.length > 1) next = ticks[0] - (ticks[1] - ticks[0]);
    var dom0 = [domain[0], threshold];
    var dom1 = [next, max];
    dom0 = [padLinear(dom0, 0.2)[0], dom0[1]];
    dom1 = [dom1[0], padLinear(dom1, 0.2)[1]];
    domain = [dom0, dom1];
  }

  this.axes[axis].scale.domain(domain);
  this.axes[axis].func.scale().domain(domain); // PREUBA: solo en "x axis" si hay en los datos MENOS ticks que el "DEFAULT_TICK_COUNT" pintamos SOLO los ticks de los datos
  // PERO entonces, si no son "equiestpaciados" queda MUY raro...

  if (axis[0] === 'x' && this.config.AxisHelper.y.dimensions !== 'line-and-bar' && (this.config.AxisHelper[axis[0]].scale !== 'band' || this.config.AxisHelper[axis[0]].scale !== 'point')) {
    var uniqueTicks = continuousExtentTicks(this.data, function (d) {
      return d.id;
    });

    if (uniqueTicks.length < DEFAULT_TICK_COUNT || this.config.AxisHelper[axis[0]].tickMatchData) {
      // this.axes[axis].scale.tickValues(this.data.map(d => d.id))
      // this.axes[axis].func.scale().tickValues(this.data.map(d => d.id))
      this.axes[axis].func.tickValues(uniqueTicks);
    }
  }
});

_defineProperty(AxisHelper, "_getTickOrientationOnAxis", function (axis) {
  var type = axis[0].toUpperCase();
  var dimIds = this["get".concat(type, "AxesIds")](); //this.getYAxesIds()

  if (Array.isArray(this.config.AxisHelper[axis[0]].tickOrientation)) {
    return this.config.AxisHelper[axis[0]].tickOrientation[dimIds.indexOf(axis)];
  } else {
    return this.config.AxisHelper[axis[0]].tickOrientation;
  }
});

_defineProperty(AxisHelper, "_getValueOnAxis", function (d, axis) {
  if (this.config.AxisHelper[axis[0]].getValue) return this.config.AxisHelper[axis[0]].getValue(d);else return d.value;
});

_defineProperty(AxisHelper, "_getExtent", function (axis) {
  var type = axis[0].toUpperCase();
  var dimNames = this["get".concat(type, "AxesLabels")](); // ]this.getYAxesLabels()

  var dimIds = this["get".concat(type, "AxesIds")](); //this.getYAxesIds()

  if (this.config.AxisHelper[axis[0]].getExtent) return this.config.AxisHelper[axis[0]].getExtent.call(this, this.data, dimNames[dimIds.indexOf(axis)], axis);else if (this.config.AxisHelper[axis[0]].scale === 'scaleBand') return this.data.map(function (d) {
    return d.id;
  });else return d3_extent(this.data, function (d) {
    return d.value;
  });
});

_defineProperty(AxisHelper, "_setRange", function (axis) {
  var range;

  if (this.getXAxesIds().length > 0) {
    if (axis === this._getAxisOrder()[0]) range = [0, this.contentSize.width];else {
      // CUANDO SON LOS "BARS" en las "ys" (horizonal) hay que flipear el range
      if (this.getXAxesIds().indexOf(axis) >= 0) range = [0, this.contentSize.height];else range = [this.contentSize.height, 0];
    }
  } else {
    range = [0, Math.min(this.contentSize.width / 2, this.contentSize.height / 2) - 20];
  } // chapuzilla para el "parallels" pero parece OK, no?
  // YA NO HACE FALTA porque ponemos padding(0.25) para todos los "scalePoint" => MUCHO MEJOR!
  // if (this.axes[axis].scale.bandwidth && this.axes[axis].scale.bandwidth() === 0) {
  //   range = [range[0] + 40, range[1] - 40]
  // }
  // UN POCO FEO:  DEERIA SER UN "else" no!?!?!?!


  if (this.axes[axis].func.scale().isChunky) {
    var gapHeight = GAP_SIZE;
    var secondRange = this.contentSize.height * 0.2 + gapHeight / 2;
    if (this.axes[axis].type === 'left' || this.axes[axis].type === 'right') range = [[range[0], range[1] + secondRange], [range[1] + (secondRange - gapHeight), range[1]]];else range = [[range[0], range[1] - secondRange], [range[1] - (secondRange - gapHeight), range[1]]];
  }

  this.axes[axis].scale.range(range);
  this.axes[axis].func.scale().range(range);

  if (this.config.AxisHelper.zoom && this.axes[axis[0]] && this.axes[axis[0]].scale.bandwidth) {
    var minBarWidth = 40; //chapuzilla "grouped bars"

    if (this.config.mode === 'grouped') minBarWidth = this.data.length * minBarWidth; //chapuzilla "paralels"

    if (this.getYAxesIds().length > 2) minBarWidth = 120;
    var currentBandWidth = this.axes[axis[0]].scale.bandwidth(); //excepcion para el "pointScale" del parallels, qeu devuelve siempre bandWidth=0

    if (currentBandWidth === 0) currentBandWidth = (this.axes[axis[0]].scale.range()[1] - this.axes[axis[0]].scale.range()[0]) / this.axes[axis[0]].scale.domain().length;

    if (currentBandWidth < minBarWidth) {
      var newRangeExtent = minBarWidth * this.axes[axis[0]].scale.domain().length;
      if (range[0] < range[1]) range[1] = range[0] + newRangeExtent;else range[0] = range[1] + newRangeExtent; //re-set after the fact

      this.axes[axis].scale.range(range);
      this.axes[axis].func.scale().range(range);
    }
  }
});

_defineProperty(AxisHelper, "_updateAxes", function () {
  var _this5 = this;

  this.needsRedraw = false;
  this.__canSkip = false;
  this.contentSize.width = this.size.width - this.margin.left - this.margin.right;
  this.contentSize.height = this.size.height - this.margin.top - this.margin.bottom;
  var yDims = this.getYAxesIds(); // let yDimNames = this.getYAxesLabels()

  var xDims = this.getXAxesIds(); // let xDimNames = this.getXAxesLabels()

  var axes = [].concat(_toConsumableArray(xDims), _toConsumableArray(yDims));
  axes.forEach(function (axis) {
    _this5._setDomain(axis);

    _this5._setRange(axis);
  });

  this._drawAxes(axes);

  this._positionAxes();

  if (this.needsRedraw) {
    this._beforeDraws[this._helperIds.indexOf('AxisHelper')].call(this);
  } else {
    this._firstAxisRender = false;
  }

  this.__canSkip = true;
});

_defineProperty(AxisHelper, "_positionAxes", function () {
  var _this6 = this;

  var ylocations;
  var yDims = this.getYAxesIds();
  var xDims = this.getXAxesIds();
  var yDimNames = this.getYAxesLabels();
  if (yDims.length === 1 || xDims.length === 0) ylocations = function ylocations() {
    return 0;
  };else if (yDims.length === 2) ylocations = function ylocations(d) {
    return yDims.indexOf(d) === 0 ? 0 : _this6.contentSize.width;
  };else ylocations = function ylocations(d) {
    return _this6.axes.x.func.scale()(yDimNames[yDims.indexOf(d)]);
  };

  if (xDims.length > 0) {
    this.content.attr('transform', "translate(".concat(this.margin.left, ",").concat(this.margin.top, ")"));
    var topOffset = this.config.horizontal && this.config.AxisHelper[this._getAxisOrder()[0]].side === 'left' || this.config.AxisHelper[this._getAxisOrder()[0]].side === 'top' ? this.margin.top : this.contentSize.height + this.margin.top;

    this.axes[this._getAxisOrder()[0]].selection.attr('transform', "translate(".concat(this.margin.left, ",").concat(topOffset, ")"));

    this._getAxisOrder().slice(1).forEach(function (dim) {
      var leftOffset = _this6.config.horizontal && _this6.config.AxisHelper[dim[0]].side === 'bottom' || _this6.config.AxisHelper[dim[0]].side === 'left' ? _this6.margin.left : _this6.contentSize.width + _this6.margin.left;

      _this6.axes[dim].selection.attr('transform', "translate(".concat(leftOffset + ylocations(dim), ",").concat(_this6.margin.top, ")"));
    });
  } else {
    this.content.attr('transform', "translate(".concat(this.margin.left + this.contentSize.width / 2, ",").concat(this.margin.top + this.contentSize.height / 2, ")"));

    this._getAxisOrder().forEach(function (dim, i) {
      _this6.axes[dim].selection.attr('transform', "translate(".concat(_this6.margin.left + _this6.contentSize.width / 2, ",").concat(_this6.margin.top + _this6.contentSize.height / 2, ") rotate( ").concat(180 + i / yDims.length * 360, " )"));
    });
  }
});

_defineProperty(AxisHelper, "_drawAxes", function (axes) {
  var self = this;
  var sel, enter;
  sel = d3_select(this.$root).selectAll(".axis").data(axes);
  enter = sel.enter().append('g').attr('class', function (axis) {
    return "axis ".concat(axis, "-axis");
  }).style('font-family', 'santander-microtext-embedded').style('font-size', '14px').each(function (axis) {
    d3_select(this).call(self.axes[axis].func);
  });
  sel.exit().remove();
  sel = sel.selection().merge(enter);
  sel.each(function (axis) {
    var axisSel = d3_select(this);
    self.axes[axis].selection = axisSel;

    self._drawAxis(axis, axisSel);
  });
});

_defineProperty(AxisHelper, "_drawTicks", function (axis, enter, update) {
  var self = this; // TODO:
  // ver como se necesita realmente "todo esto" poruqe hay cosas duplicadas!! (actula_tick_data) por ejemplo

  var isVertical = this._getAxisOrder().indexOf(axis) != 0;
  var dims = this['get' + axis[0].toUpperCase() + 'AxesIds'](); // let shouldDrawGrid = self.config.AxisHelper[axis[0]].grid && (dims.length===1 || dims.indexOf(axis)===0)

  var shouldDrawGrid = self.config.AxisHelper[axis[0]].grid && (dims.length === 1 || dims.length == 2 && dims.indexOf(axis) === 0);
  var func = this.axes[axis].func;
  var actual_tick_data = func.tickValues() == null ? func.scale().ticks ? func.scale().ticks.apply(func.scale(), func.tickArguments()) : func.scale().domain() : func.tickValues(); // let unit = this.config.AxisHelper[axis[0]].unit

  var unit = this.getUnit(axis);

  var isLastTick = function isLastTick(d) {
    return actual_tick_data.findIndex(function (dd) {
      return String(dd) === String(d);
    }) === actual_tick_data.length - 1;
  };

  var ticksToDraw = this.__canSkip ? enter : update; // TODO:
  // QUIZAS HAY QUE "sacar fuera" algunas cosas que hay que hacer SIEMRPE (enter y update)
  // Lo "demas" solo se hace para los enter o para todos en funcion del "__canSkip"

  ticksToDraw.each(function (d) {
    // let hasUnit = self.config.AxisHelper[axis[0]].unit && isLastTick(d)
    var hasUnit = self.getUnit(axis) && isLastTick(d);
    var tick = d3_select(this);
    var unitGroup = tick.selectAll('.unit').data(hasUnit ? [unit] : []);
    unitGroup.exit().remove();
    var unitGruopEnter = unitGroup.enter().append('g').attr('class', 'unit');
    unitGruopEnter.append('text').attr('fill', 'currentColor');
    unitGroup = unitGroup.merge(unitGruopEnter);
    var unitSel = unitGroup.select('text'); // unitSel.text(formatNumber(d,self.config.valueFormat)+' '+unit)

    unitSel.text(self.valueWithUnit.call(self, d, axis));
    var valueSel = tick.select('text');

    if (self.axes.x) {
      valueSel.style('opacity', hasUnit ? '0' : '1').text(self.axes[axis].func.tickFormat()(d));
    } else {
      valueSel.style('opacity', 0);
    }

    var unitWidth = hasUnit ? unitSel.node().getComputedTextLength() : 0;
    var valueWidth = valueSel.node().getComputedTextLength();
    if (dims.length < 3 || !self.axes.x) tick.select('line').attr('display', 'none');else {
      if (!hasUnit) tick.select('line').attr('display', 'block').attr('transform', function () {
        return self.axes[axis].type === 'left' ? 'translate(2.5,0)' : 'translate(-2.5,0)';
      });else tick.select('line').attr('display', 'none');
    }
    if (!self.config.AxisHelper[axis[0]].showTickValues) tick.selectAll('text,.unit').attr('display', 'none');else tick.selectAll('text,.unit').attr('display', 'inherit');
    var x, y, dy, anchor, spacing, halfheight, fullheight, transform;
    spacing = self.axes[axis].func.tickSize();
    halfheight = '0.36em';
    fullheight = '0.71em';
    transform = null; // SETTING Xs AND Ys 1

    if (self.axes[axis].type === 'left') {
      x = -spacing;
      y = 0;
      anchor = 'end';
      if (self.config.AxisHelper[axis[0]].unit) dy = 0;else dy = halfheight;
    } else if (self.axes[axis].type === 'right') {
      x = spacing;
      y = 0;
      anchor = 'start';
      if (self.config.AxisHelper[axis[0]].unit) dy = 0;else dy = halfheight;
    } else if (self.axes[axis].type === 'bottom') {
      x = 0;
      y = 3 + spacing;
      anchor = 'middle';
      dy = fullheight;
    } else if (self.axes[axis].type === 'top') {
      x = 0;
      y = -spacing - 3;
      anchor = 'middle';
      dy = fullheight;
    }

    if (self.axes[axis].type === 'left') {
      unitSel.attr('text-anchor', 'start').attr('dx', -valueWidth - 3 - self.axes[axis].func.tickSize());
    } else if (self.axes[axis].type === 'right') {
      unitSel.attr('text-anchor', 'start').attr('dx', -unitWidth + valueWidth + 3 + self.axes[axis].func.tickSize());
    } else if (self.axes[axis].type === 'bottom') {
      unitSel.attr('text-anchor', anchor).attr('dy', dy).attr('y', y).attr('x', x);
    }

    if (self._getTickOrientationOnAxis(axis) === 'skewed') {
      if (self.axes[axis].type === 'top' || self.axes[axis].type === 'bottom') {
        if (self.axes[axis].type === 'bottom') {
          transform = 'rotate(-45)';
          anchor = 'end';
          y = 0;
          x = -3 - spacing;
        } else {
          transform = 'rotate(-45)';
          anchor = 'start';
          y = 0;
          x = 3 + spacing;
        }
      } else {
        if (self.axes[axis].type === 'left') {
          transform = 'rotate(-45)';
          anchor = 'end';
          y = '-' + fullheight;
          x = -3;
        } else {
          transform = 'rotate(45)';
          anchor = 'start';
          y = '-' + fullheight;
          x = 3;
        }
      }
    } else if (self._getTickOrientationOnAxis(axis) === 'vertical') {
      if (self.axes[axis].type === 'top' || self.axes[axis].type === 'bottom') {
        if (self.axes[axis].type === 'bottom') {
          transform = 'rotate(-90)';
          anchor = 'end';
          x = -3 - spacing;
          y = '-' + halfheight;
        } else if (self.axes[axis].type === 'top') {
          transform = 'rotate(-90)';
          anchor = 'start';
          x = 3 + spacing;
          y = '-' + halfheight;
        }
      } else {
        if (self.axes[axis].type === 'left') {
          transform = 'rotate(-90)';
          anchor = 'end';
          x = 0;
          y = -3 - 2 * spacing;
          anchor = 'middle';
        } else {
          transform = 'rotate(90)';
          anchor = 'end';
          x = 0;
          y = -3 - 2 * spacing;
          anchor = 'middle';
        }
      }
    } // console.log(x,y,dy,anchor,transform)


    tick.select('text').interrupt('axis-transition').attr('text-anchor', anchor).attr('x', x).attr('y', y).attr('dy', dy).attr('transform', transform); //Wrap/ellipse tick texts
    // TODO: hay que calcular este 40 con la distancia entre ticks...

    var maxWidth;

    if (!isVertical) {
      if (self.axes[axis].scale.bandwidth) {
        maxWidth = self.axes[axis].scale.bandwidth(); //excepcion para el "pointScale" del parallels, qeu devuelve siempre bandWidth=0

        if (maxWidth === 0) maxWidth = (self.axes[axis].scale.range()[1] - self.axes[axis].scale.range()[0]) / self.axes[axis].scale.domain().length;
      } else {
        // maxWidth = 40
        maxWidth = (self.axes[axis].scale.range()[1] - self.axes[axis].scale.range()[0]) / actual_tick_data.length;
      }
    } else {
      maxWidth = 120;
    }

    var type = self.axes[axis].type;

    if (self.config.AxisHelper[axis[0]].tickWrap === 'wrap') {
      tick.select('text').interrupt('axis-transition').call(wrapSvgText, maxWidth); //los ".unit" tambien se deben "wrappear" pero solo si son bottom (o top...)

      if (type === 'bottom' || type === 'top') unitSel.interrupt('axis-transition').call(wrapSvgText, maxWidth);
    } else if (self.config.AxisHelper[axis[0]].tickWrap === 'ellipsis') {
      tick.select('text').interrupt('axis-transition').call(ellipseSvgText, maxWidth); //los ".unit" tambien se deben "ellipsar" pero solo si son bottom (o top...)

      if (type === 'bottom' || type === 'top') unitSel.interrupt('axis-transition').call(wrapSvgText, maxWidth);
    }

    var gridLine = tick.selectAll('.grid-line').data(shouldDrawGrid ? [null] : []);
    gridLine.exit().remove();
    gridLine = gridLine.merge(gridLine.enter().append('line').attr('class', 'grid-line'));
    var gridColors = self.config.skin === 'light' ? ['#e3e3e3', '#e3e3e3'] : ['#434343', '#434343']; // let gridColors = self.config.skin === 'light' ? ['#ccc', '#bbb'] : ['#bbb', '#aaa']

    var isSolidZero = d === 0 && self.axes[axis].func.scale().domain()[0] < 0;
    gridLine.attr('display', 'inherit').attr('stroke', isSolidZero ? gridColors[0] : gridColors[1]).attr('shape-rendering', 'crispedges').attr('stroke-width', 1).attr('stroke-dasharray', isSolidZero ? '0' : '1 3');

    if (!isVertical) {
      var sign = self.config.AxisHelper[axis[0]].side === 'top' ? 1 : -1;
      gridLine.attr('y1', sign * self.contentSize.height).attr('x1', 0).attr('x2', 0);
    } else {
      var _sign = self.config.AxisHelper[axis[0]].side === 'left' ? 1 : -1;

      gridLine.attr('x1', _sign * self.contentSize.width).attr('x2', _sign * ((hasUnit ? unitWidth - valueWidth : 0) - self.axes[axis].func.tickSize() / 2)).attr('y1', 0);
    }
  });
});

_defineProperty(AxisHelper, "_drawAxis", function (axis, sel) {

  if (this._firstAxisRender || this._zooming) {
    sel = sel.transition('axis-transition').duration(0).call(this.axes[axis].func);
  } else {
    sel = sel.transition('axis-transition').duration(this._transitionDuration).call(this.axes[axis].func);
  }

  var func = this.axes[axis].func;
  var actual_tick_data = func.tickValues() == null ? func.scale().ticks ? func.scale().ticks.apply(func.scale(), func.tickArguments()) : func.scale().domain() : func.tickValues();
  var ids = this["get".concat(axis[0].toUpperCase(), "AxesIds")]();
  var index = ids.indexOf(axis);
  var type = this.axes[axis].type; // Solo aplicamos al primero y ultimo + SI hay eje x + SI se estan mostrando lo values!

  if (!this._zooming || this.zooming) {
    if (this.axes.x && (index === 0 || index === ids.length - 1) && this.config.AxisHelper[axis[0]].showTickValues) {
      var usedLength = 0;
      sel.selectAll('.tick').select('text').each(function (d) {
        if (!actual_tick_data.find(function (dd) {
          return String(dd) === String(d);
        })) return;
        var dim = type === 'bottom' || type === 'top' ? 'height' : 'width';
        usedLength = Math.max(usedLength, this.getBoundingClientRect()[dim]);
      }); //los ".unit" tambien deben "empujar" pero solo si son bottom (o top...)

      sel.selectAll('.tick').select('.unit').select('text').each(function (d) {
        if (!actual_tick_data.find(function (dd) {
          return String(dd) === String(d);
        })) return;
        var dim = type === 'bottom' || type === 'top' ? 'height' : 'width';
        if (type === 'bottom' || type === 'top') usedLength = Math.max(usedLength, this.getBoundingClientRect()[dim]);
      }); // Add some "slack"

      usedLength += 10;

      if (usedLength > this.margin[type]) {
        this.margin[type] = usedLength;
        this.needsRedraw = true;
      } else if (usedLength < this.defMargin[type] && this.defMargin[type] < this.margin[type]) {
        this.margin[type] = this.defMargin[type];
        this.needsRedraw = true;
      }
    }
  }

  if (this.config.showLineLabel) {
    // BASURA, no se puede usar "getComputedTextLength" porque aun no se ha ejecutado el "draw"...
    // let maxWidth = d3_max(this.parentItems.merge(this.parentItemsEnter).nodes(), el => {
    //   let node = d3_select(el).select('.line-label').select('text').node()
    //   return node ? node.getComputedTextLength() : this.margin.right
    // })
    var maxWidth = max(this.data, function (d) {
      return d.id.length * 8;
    });

    if (this.margin.right < maxWidth) {
      this.needsRedraw = true;
      this.margin.right = maxWidth;
    }
  }

  var yDims = this.getYAxesIds();
  if (axis === 'x' || yDims.length < 3) sel.select('.domain').attr('display', 'none');

  if (this.axes[axis].func.scale().isChunky) {
    var subRanges = this.axes[axis].func.scale().subRanges();
    var subDoms = this.axes[axis].selection.selectAll('.sub-domain').data(subRanges);
    subDoms = subDoms.merge(subDoms.enter().append('line').attr('class', 'sub-domain'));
    subDoms.attr('stroke', 'currentColor');

    if (type === 'bottom' || type === 'top') {
      subDoms.attr('y1', 0).attr('y2', 0).attr('x1', function (d) {
        return d[1];
      }).attr('x2', function (d) {
        return d[0];
      });
    } else {
      subDoms.attr('x1', 0).attr('x2', 0).attr('y1', function (d) {
        return d[0];
      }).attr('y2', function (d) {
        return d[1];
      });
    }
  } else {
    this.axes[axis].selection.selectAll('.sub-domain').remove();
  } // this.content.raise()
  // AJustamos los "units" en multi y axes (parallels (y radar))


  if (yDims.length > 2) {
    if (index >= 0 && this.getUnit(axis)) {
      var tickPos = this.axes[axis].func.scale()(actual_tick_data[actual_tick_data.length - 1]);
      var groundPos = this.axes[axis].func.scale().range()[0];
      this.axes[axis].selection.select('.domain').interrupt('axis-transition').attr('d', "M0.5,".concat(groundPos, "V").concat(tickPos + 5, "M0.5,").concat(Math.max(0, tickPos - 14), "V0"));
    }
  }
});

_defineProperty(AxisHelper, "_redrawAxes", function () {
  var yDims = this.getYAxesIds();
  var xDims = this.getXAxesIds();
  var axes = [].concat(_toConsumableArray(xDims), _toConsumableArray(yDims));

  this._drawAxes(axes);

  this._positionAxes();
});

function isObject(item) {
  return item && _typeof(item) === 'object' && !Array.isArray(item);
} // export function mergeConfig(target={}, source={}) {
//   let output = Object.assign({}, target);
//   if (isObject(target) && isObject(source)) {
//     Object.keys(source).forEach(key => {
//       if (isObject(source[key])) {
//         if (!(key in target)){
//           Object.assign(output, { [key]: source[key] });
//         } else {
//           output[key] = mergeConfig(target[key], source[key]);
//         }
//       } else {
//         if(isObject(target[key]) && target[key].default!==undefined) {
//           Object.assign(output, { [key]: mergeConfig(target[key], {value: source[key]}) })
//         }
//         else {
//           Object.assign(output, { [key]: source[key] });
//         }
//       }
//     });
//   }
//   return output;
// }
// NADA CLARO ESTE ULTIMO CAMBIO, volver a la version de arriba si hace falta...

function mergeConfig() {
  var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var output;

  if (isObject(target) && isObject(source)) {
    output = Object.assign({}, target);
    Object.keys(source).forEach(function (key, i) {
      if (key === 'index') return;

      if (isObject(source[key])) {
        if (!(key in target)) {
          Object.assign(output, _defineProperty({}, key, source[key]));
        } else {
          output[key] = mergeConfig(target[key], source[key]);
        }
      } else {
        if (isObject(target[key]) && target[key]["default"] !== undefined) {
          Object.assign(output, _defineProperty({}, key, mergeConfig(target[key], {
            value: source[key]
          })));
        } // DANGER: este "else if" era "else" pero se cargaba las "options" (del colorScale p.ej)
        // DOUBLE DANGER: estaba mirando !output[key] pero cosas como "" daban false cambio a ==null or undefined
        else if (output[key] === null || output[key] === undefined) {
            Object.assign(output, _defineProperty({}, key, source[key]));
          }
      }

      if (isObject(output[key])) {
        output[key].index = target[key] && target[key].index !== undefined ? target[key].index : source[key].index !== undefined ? source[key].index : i;
      }
    });
  } else {
    output = Object.assign({}, source);
    output.value = target;
  }

  output.exposed = source.exposed;

  if (target && target.exposed !== undefined) {
    // console.log("target.exposed",target,target.exposed) 
    output.exposed = target.exposed;
  }

  return output;
}

function stringifyConfig(config) {
  return JSON.stringify(_objectSpread2(_objectSpread2({}, config), {}, {
    type: config.type ? (Array.isArray(config.type) ? config.type : [config.type]).map(function (t) {
      return t.name;
    }) : "No types found! (probably wrong key)"
  }), null, 2);
}

function extractValues(target) {
  var values = Object.keys(target).reduce(function (out, k) {
    if (k === 'exposed' || k === 'index') return out;
    var ob = target[k];
    var val = ob.value !== undefined ? ob.value : ob["default"];

    if (isObject(ob)) {
      if (val === undefined) out[k] = extractValues(ob); // else out[k] = val
      else {
          if (validateOption(ob)) {
            out[k] = val;
          } else {
            console.error("configUtils:extractValues: WRONG TYPE excluded (using default):\nkey: ".concat(k, ",\nvalue: ").concat(val, ",\ndefinition: ").concat(stringifyConfig(ob)));
            out[k] = ob["default"];
          }
        }
    } else {
      // console.error("Esto no tendria que poder pasar nunca, no!?")
      console.error("configUtils:extractValues: WRONG CONFIG:\nkey: ".concat(k, ",\nvalue: ").concat(val, ",\ndefinition: ").concat(stringifyConfig(ob))); // console.log(`Option ${k} doesnt belong to this "level"`)
      // out[k] = ob
    }

    return out;
  }, {});
  return values;
}
function setDefaultValues(target) {
  var values = Object.keys(target).reduce(function (out, k) {
    if (k === 'exposed') return out;
    var ob = target[k];
    var val = ob.value !== undefined ? ob.value : ob["default"];
    if (val === undefined) out[k] = setDefaultValues(ob); // else out[k] = val
    else {
        if (validateOption(ob)) {
          ob.value = ob.value !== undefined ? ob.value : ob["default"];
          out[k] = ob;
        } else {
          console.error("configUtils:setDefaultValues: WRONG TYPE excluded:\nkey: ".concat(k, ",\nvalue: ").concat(val, ",\ndefinition: ").concat(stringifyConfig(ob)));
        }
      }
    return out;
  }, {});
  return values;
}
function filterNonDefaults(values, defaults) {
  var result = Object.keys(values).reduce(function (out, k) {
    var val = values[k];
    var def = defaults[k];

    if (isObject(val) && def && def["default"] === undefined) {
      var child = filterNonDefaults(val, def);
      if (Object.keys(child).length > 0) out[k] = child;
    } else {
      if (!def) console.error("configUtils:filterNonDefaults: WRONG CONFIG (probably wrong key):\nkey:".concat(k, "\nval:").concat(val, "\ndef:").concat(def));else if (JSON.stringify(val) !== JSON.stringify(def.value || def["default"])) {
        out[k] = {
          value: val
        };
      }
    }

    return out;
  }, {});
  return result;
}

function isOfType(val, t) {
  // val = t(val) || val //No me gusta mucho... Es para "convertir" los "400" en 400
  // return (val===null && t===null) || (val instanceof t || typeof val === t.name.toLowerCase())
  return val === null && t === null || val !== null && t !== null && (val instanceof t || _typeof(val) === t.name.toLowerCase());
}

function validateOption(opt) {
  if (opt.type) {
    var val = opt.value !== undefined ? opt.value : opt["default"];
    var types = Array.isArray(opt.type) ? opt.type : [opt.type];
    var validType = types.reduce(function (res, t) {
      return res || isOfType(val, t);
    }, false);
    var validValue = true;
    if (opt.options && isOfType(val, String)) validValue = opt.options.indexOf(val) >= 0;
    return validType && validValue;
  } else return false;
} // export function validateConfig(config){
//   Object.keys(config).forEach((k)=>{
//     let ob = config[k]
//     if(!ob){
//       console.log("ob undefined?!",ob,k)
//     } 
//     else if(ob.type) {
//       let typeMatch = ob.default instanceof ob.type || typeof ob.default === ob.type.name.toLowerCase()
//       console.log("TyepMatch:",k,ob.default,ob.type,typeMatch)
//     }
//     else if(typeof ob === 'object' && Object.keys(ob).length>0) {
//       validateConfig(ob)
//     }
//   })
// }


function flattenConfig(config) {
  var _this = this;

  var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'component';
  var arr = Object.keys(config).reduce(function (arr, k) {
    var ob = config[k];

    if (ob && k !== 'index') {
      var idx = config.index ? [config.index].flat() : [];
      idx.push(ob.index);

      if (ob && ob.type) {
        arr = arr.concat([{
          key: "".concat(namespace, ".").concat(k),
          value: ob,
          index: idx
        }]);
      } else if (ob && _typeof(ob) === 'object' && Object.keys(ob).length > 0) {
        arr = arr.concat([_this.flattenConfig(_objectSpread2(_objectSpread2({}, ob), {}, {
          index: idx
        }), "".concat(namespace, ".").concat(k))]);
      }
    }

    return arr;
  }, []);
  return arr.flat();
}
function unflattenConfig(configArray) {
  var out = configArray.reduce(function (ob, row) {
    var parts = row.key.split('.');
    var last = parts.pop();
    var pointer = parts.reduce(function (subob, part) {
      if (!subob[part]) subob[part] = {};
      return subob[part];
    }, ob);
    pointer[last] = row.value;
    return ob;
  }, {});
  return out;
}

var configUtils = /*#__PURE__*/Object.freeze({
	__proto__: null,
	isObject: isObject,
	mergeConfig: mergeConfig,
	extractValues: extractValues,
	setDefaultValues: setDefaultValues,
	filterNonDefaults: filterNonDefaults,
	flattenConfig: flattenConfig,
	unflattenConfig: unflattenConfig
});

var font1 = "data:font/ttf;base64,";

var font2 = "data:font/ttf;base64,";

var font3 = "data:font/ttf;base64,";

/**
 * https://opentype.js.org v1.3.3 | (c) Frederik De Bleser and other contributors | MIT License | Uses tiny-inflate by Devon Govett and string.prototype.codepointat polyfill by Mathias Bynens
 */

/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
  (function () {
    var defineProperty = function () {
      // IE 8 only supports `Object.defineProperty` on DOM elements
      try {
        var object = {};
        var $defineProperty = Object.defineProperty;
        var result = $defineProperty(object, object, object) && $defineProperty;
      } catch (error) {}

      return result;
    }();

    var codePointAt = function (position) {
      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var size = string.length; // `ToInteger`

      var index = position ? Number(position) : 0;

      if (index != index) {
        // better `isNaN`
        index = 0;
      } // Account for out-of-bounds indices:


      if (index < 0 || index >= size) {
        return undefined;
      } // Get the first code unit


      var first = string.charCodeAt(index);
      var second;

      if ( // check if it’s the start of a surrogate pair
      first >= 0xD800 && first <= 0xDBFF && // high surrogate
      size > index + 1 // there is a next code unit
      ) {
          second = string.charCodeAt(index + 1);

          if (second >= 0xDC00 && second <= 0xDFFF) {
            // low surrogate
            // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
          }
        }

      return first;
    };

    if (defineProperty) {
      defineProperty(String.prototype, 'codePointAt', {
        'value': codePointAt,
        'configurable': true,
        'writable': true
      });
    } else {
      String.prototype.codePointAt = codePointAt;
    }
  })();
}

var TINF_OK = 0;
var TINF_DATA_ERROR = -3;

function Tree() {
  this.table = new Uint16Array(16);
  /* table of code length counts */

  this.trans = new Uint16Array(288);
  /* code -> symbol translation table */
}

function Data(source, dest) {
  this.source = source;
  this.sourceIndex = 0;
  this.tag = 0;
  this.bitcount = 0;
  this.dest = dest;
  this.destLen = 0;
  this.ltree = new Tree();
  /* dynamic length/symbol tree */

  this.dtree = new Tree();
  /* dynamic distance tree */
}
/* --------------------------------------------------- *
 * -- uninitialized global data (static structures) -- *
 * --------------------------------------------------- */


var sltree = new Tree();
var sdtree = new Tree();
/* extra bits and base tables for length codes */

var length_bits = new Uint8Array(30);
var length_base = new Uint16Array(30);
/* extra bits and base tables for distance codes */

var dist_bits = new Uint8Array(30);
var dist_base = new Uint16Array(30);
/* special ordering of code length codes */

var clcidx = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
/* used by tinf_decode_trees, avoids allocations every call */

var code_tree = new Tree();
var lengths = new Uint8Array(288 + 32);
/* ----------------------- *
 * -- utility functions -- *
 * ----------------------- */

/* build extra bits and base tables */

function tinf_build_bits_base(bits, base, delta, first) {
  var i, sum;
  /* build bits table */

  for (i = 0; i < delta; ++i) {
    bits[i] = 0;
  }

  for (i = 0; i < 30 - delta; ++i) {
    bits[i + delta] = i / delta | 0;
  }
  /* build base table */


  for (sum = first, i = 0; i < 30; ++i) {
    base[i] = sum;
    sum += 1 << bits[i];
  }
}
/* build the fixed huffman trees */


function tinf_build_fixed_trees(lt, dt) {
  var i;
  /* build fixed length tree */

  for (i = 0; i < 7; ++i) {
    lt.table[i] = 0;
  }

  lt.table[7] = 24;
  lt.table[8] = 152;
  lt.table[9] = 112;

  for (i = 0; i < 24; ++i) {
    lt.trans[i] = 256 + i;
  }

  for (i = 0; i < 144; ++i) {
    lt.trans[24 + i] = i;
  }

  for (i = 0; i < 8; ++i) {
    lt.trans[24 + 144 + i] = 280 + i;
  }

  for (i = 0; i < 112; ++i) {
    lt.trans[24 + 144 + 8 + i] = 144 + i;
  }
  /* build fixed distance tree */


  for (i = 0; i < 5; ++i) {
    dt.table[i] = 0;
  }

  dt.table[5] = 32;

  for (i = 0; i < 32; ++i) {
    dt.trans[i] = i;
  }
}
/* given an array of code lengths, build a tree */


var offs = new Uint16Array(16);

function tinf_build_tree(t, lengths, off, num) {
  var i, sum;
  /* clear code length count table */

  for (i = 0; i < 16; ++i) {
    t.table[i] = 0;
  }
  /* scan symbol lengths, and sum code length counts */


  for (i = 0; i < num; ++i) {
    t.table[lengths[off + i]]++;
  }

  t.table[0] = 0;
  /* compute offset table for distribution sort */

  for (sum = 0, i = 0; i < 16; ++i) {
    offs[i] = sum;
    sum += t.table[i];
  }
  /* create code->symbol translation table (symbols sorted by code) */


  for (i = 0; i < num; ++i) {
    if (lengths[off + i]) {
      t.trans[offs[lengths[off + i]]++] = i;
    }
  }
}
/* ---------------------- *
 * -- decode functions -- *
 * ---------------------- */

/* get one bit from source stream */


function tinf_getbit(d) {
  /* check if tag is empty */
  if (!d.bitcount--) {
    /* load next tag */
    d.tag = d.source[d.sourceIndex++];
    d.bitcount = 7;
  }
  /* shift bit out of tag */


  var bit = d.tag & 1;
  d.tag >>>= 1;
  return bit;
}
/* read a num bit value from a stream and add base */


function tinf_read_bits(d, num, base) {
  if (!num) {
    return base;
  }

  while (d.bitcount < 24) {
    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
    d.bitcount += 8;
  }

  var val = d.tag & 0xffff >>> 16 - num;
  d.tag >>>= num;
  d.bitcount -= num;
  return val + base;
}
/* given a data stream and a tree, decode a symbol */


function tinf_decode_symbol(d, t) {
  while (d.bitcount < 24) {
    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
    d.bitcount += 8;
  }

  var sum = 0,
      cur = 0,
      len = 0;
  var tag = d.tag;
  /* get more bits while code value is above sum */

  do {
    cur = 2 * cur + (tag & 1);
    tag >>>= 1;
    ++len;
    sum += t.table[len];
    cur -= t.table[len];
  } while (cur >= 0);

  d.tag = tag;
  d.bitcount -= len;
  return t.trans[sum + cur];
}
/* given a data stream, decode dynamic trees from it */


function tinf_decode_trees(d, lt, dt) {
  var hlit, hdist, hclen;
  var i, num, length;
  /* get 5 bits HLIT (257-286) */

  hlit = tinf_read_bits(d, 5, 257);
  /* get 5 bits HDIST (1-32) */

  hdist = tinf_read_bits(d, 5, 1);
  /* get 4 bits HCLEN (4-19) */

  hclen = tinf_read_bits(d, 4, 4);

  for (i = 0; i < 19; ++i) {
    lengths[i] = 0;
  }
  /* read code lengths for code length alphabet */


  for (i = 0; i < hclen; ++i) {
    /* get 3 bits code length (0-7) */
    var clen = tinf_read_bits(d, 3, 0);
    lengths[clcidx[i]] = clen;
  }
  /* build code length tree */


  tinf_build_tree(code_tree, lengths, 0, 19);
  /* decode code lengths for the dynamic trees */

  for (num = 0; num < hlit + hdist;) {
    var sym = tinf_decode_symbol(d, code_tree);

    switch (sym) {
      case 16:
        /* copy previous code length 3-6 times (read 2 bits) */
        var prev = lengths[num - 1];

        for (length = tinf_read_bits(d, 2, 3); length; --length) {
          lengths[num++] = prev;
        }

        break;

      case 17:
        /* repeat code length 0 for 3-10 times (read 3 bits) */
        for (length = tinf_read_bits(d, 3, 3); length; --length) {
          lengths[num++] = 0;
        }

        break;

      case 18:
        /* repeat code length 0 for 11-138 times (read 7 bits) */
        for (length = tinf_read_bits(d, 7, 11); length; --length) {
          lengths[num++] = 0;
        }

        break;

      default:
        /* values 0-15 represent the actual code lengths */
        lengths[num++] = sym;
        break;
    }
  }
  /* build dynamic trees */


  tinf_build_tree(lt, lengths, 0, hlit);
  tinf_build_tree(dt, lengths, hlit, hdist);
}
/* ----------------------------- *
 * -- block inflate functions -- *
 * ----------------------------- */

/* given a stream and two trees, inflate a block of data */


function tinf_inflate_block_data(d, lt, dt) {
  while (1) {
    var sym = tinf_decode_symbol(d, lt);
    /* check for end of block */

    if (sym === 256) {
      return TINF_OK;
    }

    if (sym < 256) {
      d.dest[d.destLen++] = sym;
    } else {
      var length, dist, offs;
      var i;
      sym -= 257;
      /* possibly get more bits from length code */

      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);
      dist = tinf_decode_symbol(d, dt);
      /* possibly get more bits from distance code */

      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);
      /* copy match */

      for (i = offs; i < offs + length; ++i) {
        d.dest[d.destLen++] = d.dest[i];
      }
    }
  }
}
/* inflate an uncompressed block of data */


function tinf_inflate_uncompressed_block(d) {
  var length, invlength;
  var i;
  /* unread from bitbuffer */

  while (d.bitcount > 8) {
    d.sourceIndex--;
    d.bitcount -= 8;
  }
  /* get length */


  length = d.source[d.sourceIndex + 1];
  length = 256 * length + d.source[d.sourceIndex];
  /* get one's complement of length */

  invlength = d.source[d.sourceIndex + 3];
  invlength = 256 * invlength + d.source[d.sourceIndex + 2];
  /* check length */

  if (length !== (~invlength & 0x0000ffff)) {
    return TINF_DATA_ERROR;
  }

  d.sourceIndex += 4;
  /* copy block */

  for (i = length; i; --i) {
    d.dest[d.destLen++] = d.source[d.sourceIndex++];
  }
  /* make sure we start next block on a byte boundary */


  d.bitcount = 0;
  return TINF_OK;
}
/* inflate stream from source to dest */


function tinf_uncompress(source, dest) {
  var d = new Data(source, dest);
  var bfinal, btype, res;

  do {
    /* read final block flag */
    bfinal = tinf_getbit(d);
    /* read block type (2 bits) */

    btype = tinf_read_bits(d, 2, 0);
    /* decompress block */

    switch (btype) {
      case 0:
        /* decompress uncompressed block */
        res = tinf_inflate_uncompressed_block(d);
        break;

      case 1:
        /* decompress block with fixed huffman trees */
        res = tinf_inflate_block_data(d, sltree, sdtree);
        break;

      case 2:
        /* decompress block with dynamic huffman trees */
        tinf_decode_trees(d, d.ltree, d.dtree);
        res = tinf_inflate_block_data(d, d.ltree, d.dtree);
        break;

      default:
        res = TINF_DATA_ERROR;
    }

    if (res !== TINF_OK) {
      throw new Error('Data error');
    }
  } while (!bfinal);

  if (d.destLen < d.dest.length) {
    if (typeof d.dest.slice === 'function') {
      return d.dest.slice(0, d.destLen);
    } else {
      return d.dest.subarray(0, d.destLen);
    }
  }

  return d.dest;
}
/* -------------------- *
 * -- initialization -- *
 * -------------------- */

/* build fixed huffman trees */


tinf_build_fixed_trees(sltree, sdtree);
/* build extra bits and base tables */

tinf_build_bits_base(length_bits, length_base, 4, 3);
tinf_build_bits_base(dist_bits, dist_base, 2, 1);
/* fix a special case */

length_bits[28] = 0;
length_base[28] = 258;
var tinyInflate = tinf_uncompress; // The Bounding Box object

function derive(v0, v1, v2, v3, t) {
  return Math.pow(1 - t, 3) * v0 + 3 * Math.pow(1 - t, 2) * t * v1 + 3 * (1 - t) * Math.pow(t, 2) * v2 + Math.pow(t, 3) * v3;
}
/**
 * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.
 * It is used to calculate the bounding box of a glyph or text path.
 *
 * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.
 *
 * @exports opentype.BoundingBox
 * @class
 * @constructor
 */


function BoundingBox() {
  this.x1 = Number.NaN;
  this.y1 = Number.NaN;
  this.x2 = Number.NaN;
  this.y2 = Number.NaN;
}
/**
 * Returns true if the bounding box is empty, that is, no points have been added to the box yet.
 */


BoundingBox.prototype.isEmpty = function () {
  return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
};
/**
 * Add the point to the bounding box.
 * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.
 * @param {number} x - The X coordinate of the point.
 * @param {number} y - The Y coordinate of the point.
 */


BoundingBox.prototype.addPoint = function (x, y) {
  if (typeof x === 'number') {
    if (isNaN(this.x1) || isNaN(this.x2)) {
      this.x1 = x;
      this.x2 = x;
    }

    if (x < this.x1) {
      this.x1 = x;
    }

    if (x > this.x2) {
      this.x2 = x;
    }
  }

  if (typeof y === 'number') {
    if (isNaN(this.y1) || isNaN(this.y2)) {
      this.y1 = y;
      this.y2 = y;
    }

    if (y < this.y1) {
      this.y1 = y;
    }

    if (y > this.y2) {
      this.y2 = y;
    }
  }
};
/**
 * Add a X coordinate to the bounding box.
 * This extends the bounding box to include the X coordinate.
 * This function is used internally inside of addBezier.
 * @param {number} x - The X coordinate of the point.
 */


BoundingBox.prototype.addX = function (x) {
  this.addPoint(x, null);
};
/**
 * Add a Y coordinate to the bounding box.
 * This extends the bounding box to include the Y coordinate.
 * This function is used internally inside of addBezier.
 * @param {number} y - The Y coordinate of the point.
 */


BoundingBox.prototype.addY = function (y) {
  this.addPoint(null, y);
};
/**
 * Add a Bézier curve to the bounding box.
 * This extends the bounding box to include the entire Bézier.
 * @param {number} x0 - The starting X coordinate.
 * @param {number} y0 - The starting Y coordinate.
 * @param {number} x1 - The X coordinate of the first control point.
 * @param {number} y1 - The Y coordinate of the first control point.
 * @param {number} x2 - The X coordinate of the second control point.
 * @param {number} y2 - The Y coordinate of the second control point.
 * @param {number} x - The ending X coordinate.
 * @param {number} y - The ending Y coordinate.
 */


BoundingBox.prototype.addBezier = function (x0, y0, x1, y1, x2, y2, x, y) {
  // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html
  // and https://github.com/icons8/svg-path-bounding-box
  var p0 = [x0, y0];
  var p1 = [x1, y1];
  var p2 = [x2, y2];
  var p3 = [x, y];
  this.addPoint(x0, y0);
  this.addPoint(x, y);

  for (var i = 0; i <= 1; i++) {
    var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
    var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
    var c = 3 * p1[i] - 3 * p0[i];

    if (a === 0) {
      if (b === 0) {
        continue;
      }

      var t = -c / b;

      if (0 < t && t < 1) {
        if (i === 0) {
          this.addX(derive(p0[i], p1[i], p2[i], p3[i], t));
        }

        if (i === 1) {
          this.addY(derive(p0[i], p1[i], p2[i], p3[i], t));
        }
      }

      continue;
    }

    var b2ac = Math.pow(b, 2) - 4 * c * a;

    if (b2ac < 0) {
      continue;
    }

    var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);

    if (0 < t1 && t1 < 1) {
      if (i === 0) {
        this.addX(derive(p0[i], p1[i], p2[i], p3[i], t1));
      }

      if (i === 1) {
        this.addY(derive(p0[i], p1[i], p2[i], p3[i], t1));
      }
    }

    var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);

    if (0 < t2 && t2 < 1) {
      if (i === 0) {
        this.addX(derive(p0[i], p1[i], p2[i], p3[i], t2));
      }

      if (i === 1) {
        this.addY(derive(p0[i], p1[i], p2[i], p3[i], t2));
      }
    }
  }
};
/**
 * Add a quadratic curve to the bounding box.
 * This extends the bounding box to include the entire quadratic curve.
 * @param {number} x0 - The starting X coordinate.
 * @param {number} y0 - The starting Y coordinate.
 * @param {number} x1 - The X coordinate of the control point.
 * @param {number} y1 - The Y coordinate of the control point.
 * @param {number} x - The ending X coordinate.
 * @param {number} y - The ending Y coordinate.
 */


BoundingBox.prototype.addQuad = function (x0, y0, x1, y1, x, y) {
  var cp1x = x0 + 2 / 3 * (x1 - x0);
  var cp1y = y0 + 2 / 3 * (y1 - y0);
  var cp2x = cp1x + 1 / 3 * (x - x0);
  var cp2y = cp1y + 1 / 3 * (y - y0);
  this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);
}; // Geometric objects

/**
 * A bézier path containing a set of path commands similar to a SVG path.
 * Paths can be drawn on a context using `draw`.
 * @exports opentype.Path
 * @class
 * @constructor
 */


function Path() {
  this.commands = [];
  this.fill = 'black';
  this.stroke = null;
  this.strokeWidth = 1;
}
/**
 * @param  {number} x
 * @param  {number} y
 */


Path.prototype.moveTo = function (x, y) {
  this.commands.push({
    type: 'M',
    x: x,
    y: y
  });
};
/**
 * @param  {number} x
 * @param  {number} y
 */


Path.prototype.lineTo = function (x, y) {
  this.commands.push({
    type: 'L',
    x: x,
    y: y
  });
};
/**
 * Draws cubic curve
 * @function
 * curveTo
 * @memberof opentype.Path.prototype
 * @param  {number} x1 - x of control 1
 * @param  {number} y1 - y of control 1
 * @param  {number} x2 - x of control 2
 * @param  {number} y2 - y of control 2
 * @param  {number} x - x of path point
 * @param  {number} y - y of path point
 */

/**
 * Draws cubic curve
 * @function
 * bezierCurveTo
 * @memberof opentype.Path.prototype
 * @param  {number} x1 - x of control 1
 * @param  {number} y1 - y of control 1
 * @param  {number} x2 - x of control 2
 * @param  {number} y2 - y of control 2
 * @param  {number} x - x of path point
 * @param  {number} y - y of path point
 * @see curveTo
 */


Path.prototype.curveTo = Path.prototype.bezierCurveTo = function (x1, y1, x2, y2, x, y) {
  this.commands.push({
    type: 'C',
    x1: x1,
    y1: y1,
    x2: x2,
    y2: y2,
    x: x,
    y: y
  });
};
/**
 * Draws quadratic curve
 * @function
 * quadraticCurveTo
 * @memberof opentype.Path.prototype
 * @param  {number} x1 - x of control
 * @param  {number} y1 - y of control
 * @param  {number} x - x of path point
 * @param  {number} y - y of path point
 */

/**
 * Draws quadratic curve
 * @function
 * quadTo
 * @memberof opentype.Path.prototype
 * @param  {number} x1 - x of control
 * @param  {number} y1 - y of control
 * @param  {number} x - x of path point
 * @param  {number} y - y of path point
 */


Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function (x1, y1, x, y) {
  this.commands.push({
    type: 'Q',
    x1: x1,
    y1: y1,
    x: x,
    y: y
  });
};
/**
 * Closes the path
 * @function closePath
 * @memberof opentype.Path.prototype
 */

/**
 * Close the path
 * @function close
 * @memberof opentype.Path.prototype
 */


Path.prototype.close = Path.prototype.closePath = function () {
  this.commands.push({
    type: 'Z'
  });
};
/**
 * Add the given path or list of commands to the commands of this path.
 * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.
 */


Path.prototype.extend = function (pathOrCommands) {
  if (pathOrCommands.commands) {
    pathOrCommands = pathOrCommands.commands;
  } else if (pathOrCommands instanceof BoundingBox) {
    var box = pathOrCommands;
    this.moveTo(box.x1, box.y1);
    this.lineTo(box.x2, box.y1);
    this.lineTo(box.x2, box.y2);
    this.lineTo(box.x1, box.y2);
    this.close();
    return;
  }

  Array.prototype.push.apply(this.commands, pathOrCommands);
};
/**
 * Calculate the bounding box of the path.
 * @returns {opentype.BoundingBox}
 */


Path.prototype.getBoundingBox = function () {
  var box = new BoundingBox();
  var startX = 0;
  var startY = 0;
  var prevX = 0;
  var prevY = 0;

  for (var i = 0; i < this.commands.length; i++) {
    var cmd = this.commands[i];

    switch (cmd.type) {
      case 'M':
        box.addPoint(cmd.x, cmd.y);
        startX = prevX = cmd.x;
        startY = prevY = cmd.y;
        break;

      case 'L':
        box.addPoint(cmd.x, cmd.y);
        prevX = cmd.x;
        prevY = cmd.y;
        break;

      case 'Q':
        box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);
        prevX = cmd.x;
        prevY = cmd.y;
        break;

      case 'C':
        box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
        prevX = cmd.x;
        prevY = cmd.y;
        break;

      case 'Z':
        prevX = startX;
        prevY = startY;
        break;

      default:
        throw new Error('Unexpected path command ' + cmd.type);
    }
  }

  if (box.isEmpty()) {
    box.addPoint(0, 0);
  }

  return box;
};
/**
 * Draw the path to a 2D context.
 * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.
 */


Path.prototype.draw = function (ctx) {
  ctx.beginPath();

  for (var i = 0; i < this.commands.length; i += 1) {
    var cmd = this.commands[i];

    if (cmd.type === 'M') {
      ctx.moveTo(cmd.x, cmd.y);
    } else if (cmd.type === 'L') {
      ctx.lineTo(cmd.x, cmd.y);
    } else if (cmd.type === 'C') {
      ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
    } else if (cmd.type === 'Q') {
      ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
    } else if (cmd.type === 'Z') {
      ctx.closePath();
    }
  }

  if (this.fill) {
    ctx.fillStyle = this.fill;
    ctx.fill();
  }

  if (this.stroke) {
    ctx.strokeStyle = this.stroke;
    ctx.lineWidth = this.strokeWidth;
    ctx.stroke();
  }
};
/**
 * Convert the Path to a string of path data instructions
 * See http://www.w3.org/TR/SVG/paths.html#PathData
 * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
 * @return {string}
 */


Path.prototype.toPathData = function (decimalPlaces) {
  decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;

  function floatToString(v) {
    if (Math.round(v) === v) {
      return '' + Math.round(v);
    } else {
      return v.toFixed(decimalPlaces);
    }
  }

  function packValues() {
    var arguments$1 = arguments;
    var s = '';

    for (var i = 0; i < arguments.length; i += 1) {
      var v = arguments$1[i];

      if (v >= 0 && i > 0) {
        s += ' ';
      }

      s += floatToString(v);
    }

    return s;
  }

  var d = '';

  for (var i = 0; i < this.commands.length; i += 1) {
    var cmd = this.commands[i];

    if (cmd.type === 'M') {
      d += 'M' + packValues(cmd.x, cmd.y);
    } else if (cmd.type === 'L') {
      d += 'L' + packValues(cmd.x, cmd.y);
    } else if (cmd.type === 'C') {
      d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
    } else if (cmd.type === 'Q') {
      d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);
    } else if (cmd.type === 'Z') {
      d += 'Z';
    }
  }

  return d;
};
/**
 * Convert the path to an SVG <path> element, as a string.
 * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
 * @return {string}
 */


Path.prototype.toSVG = function (decimalPlaces) {
  var svg = '<path d="';
  svg += this.toPathData(decimalPlaces);
  svg += '"';

  if (this.fill && this.fill !== 'black') {
    if (this.fill === null) {
      svg += ' fill="none"';
    } else {
      svg += ' fill="' + this.fill + '"';
    }
  }

  if (this.stroke) {
    svg += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"';
  }

  svg += '/>';
  return svg;
};
/**
 * Convert the path to a DOM element.
 * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
 * @return {SVGPathElement}
 */


Path.prototype.toDOMElement = function (decimalPlaces) {
  var temporaryPath = this.toPathData(decimalPlaces);
  var newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  newPath.setAttribute('d', temporaryPath);
  return newPath;
}; // Run-time checking of preconditions.


function fail(message) {
  throw new Error(message);
} // Precondition function that checks if the given predicate is true.
// If not, it will throw an error.


function argument(predicate, message) {
  if (!predicate) {
    fail(message);
  }
}

var check = {
  fail: fail,
  argument: argument,
  assert: argument
}; // Data types used in the OpenType font file.

var LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15

var LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31

/**
 * @exports opentype.decode
 * @class
 */

var decode = {};
/**
 * @exports opentype.encode
 * @class
 */

var encode = {};
/**
 * @exports opentype.sizeOf
 * @class
 */

var sizeOf = {}; // Return a function that always returns the same value.

function constant$4(v) {
  return function () {
    return v;
  };
} // OpenType data types //////////////////////////////////////////////////////

/**
 * Convert an 8-bit unsigned integer to a list of 1 byte.
 * @param {number}
 * @returns {Array}
 */


encode.BYTE = function (v) {
  check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');
  return [v];
};
/**
 * @constant
 * @type {number}
 */


sizeOf.BYTE = constant$4(1);
/**
 * Convert a 8-bit signed integer to a list of 1 byte.
 * @param {string}
 * @returns {Array}
 */

encode.CHAR = function (v) {
  return [v.charCodeAt(0)];
};
/**
 * @constant
 * @type {number}
 */


sizeOf.CHAR = constant$4(1);
/**
 * Convert an ASCII string to a list of bytes.
 * @param {string}
 * @returns {Array}
 */

encode.CHARARRAY = function (v) {
  var b = [];

  for (var i = 0; i < v.length; i += 1) {
    b[i] = v.charCodeAt(i);
  }

  return b;
};
/**
 * @param {Array}
 * @returns {number}
 */


sizeOf.CHARARRAY = function (v) {
  return v.length;
};
/**
 * Convert a 16-bit unsigned integer to a list of 2 bytes.
 * @param {number}
 * @returns {Array}
 */


encode.USHORT = function (v) {
  return [v >> 8 & 0xFF, v & 0xFF];
};
/**
 * @constant
 * @type {number}
 */


sizeOf.USHORT = constant$4(2);
/**
 * Convert a 16-bit signed integer to a list of 2 bytes.
 * @param {number}
 * @returns {Array}
 */

encode.SHORT = function (v) {
  // Two's complement
  if (v >= LIMIT16) {
    v = -(2 * LIMIT16 - v);
  }

  return [v >> 8 & 0xFF, v & 0xFF];
};
/**
 * @constant
 * @type {number}
 */


sizeOf.SHORT = constant$4(2);
/**
 * Convert a 24-bit unsigned integer to a list of 3 bytes.
 * @param {number}
 * @returns {Array}
 */

encode.UINT24 = function (v) {
  return [v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];
};
/**
 * @constant
 * @type {number}
 */


sizeOf.UINT24 = constant$4(3);
/**
 * Convert a 32-bit unsigned integer to a list of 4 bytes.
 * @param {number}
 * @returns {Array}
 */

encode.ULONG = function (v) {
  return [v >> 24 & 0xFF, v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];
};
/**
 * @constant
 * @type {number}
 */


sizeOf.ULONG = constant$4(4);
/**
 * Convert a 32-bit unsigned integer to a list of 4 bytes.
 * @param {number}
 * @returns {Array}
 */

encode.LONG = function (v) {
  // Two's complement
  if (v >= LIMIT32) {
    v = -(2 * LIMIT32 - v);
  }

  return [v >> 24 & 0xFF, v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];
};
/**
 * @constant
 * @type {number}
 */


sizeOf.LONG = constant$4(4);
encode.FIXED = encode.ULONG;
sizeOf.FIXED = sizeOf.ULONG;
encode.FWORD = encode.SHORT;
sizeOf.FWORD = sizeOf.SHORT;
encode.UFWORD = encode.USHORT;
sizeOf.UFWORD = sizeOf.USHORT;
/**
 * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.
 * @param {number}
 * @returns {Array}
 */

encode.LONGDATETIME = function (v) {
  return [0, 0, 0, 0, v >> 24 & 0xFF, v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];
};
/**
 * @constant
 * @type {number}
 */


sizeOf.LONGDATETIME = constant$4(8);
/**
 * Convert a 4-char tag to a list of 4 bytes.
 * @param {string}
 * @returns {Array}
 */

encode.TAG = function (v) {
  check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');
  return [v.charCodeAt(0), v.charCodeAt(1), v.charCodeAt(2), v.charCodeAt(3)];
};
/**
 * @constant
 * @type {number}
 */


sizeOf.TAG = constant$4(4); // CFF data types ///////////////////////////////////////////////////////////

encode.Card8 = encode.BYTE;
sizeOf.Card8 = sizeOf.BYTE;
encode.Card16 = encode.USHORT;
sizeOf.Card16 = sizeOf.USHORT;
encode.OffSize = encode.BYTE;
sizeOf.OffSize = sizeOf.BYTE;
encode.SID = encode.USHORT;
sizeOf.SID = sizeOf.USHORT; // Convert a numeric operand or charstring number to a variable-size list of bytes.

/**
 * Convert a numeric operand or charstring number to a variable-size list of bytes.
 * @param {number}
 * @returns {Array}
 */

encode.NUMBER = function (v) {
  if (v >= -107 && v <= 107) {
    return [v + 139];
  } else if (v >= 108 && v <= 1131) {
    v = v - 108;
    return [(v >> 8) + 247, v & 0xFF];
  } else if (v >= -1131 && v <= -108) {
    v = -v - 108;
    return [(v >> 8) + 251, v & 0xFF];
  } else if (v >= -32768 && v <= 32767) {
    return encode.NUMBER16(v);
  } else {
    return encode.NUMBER32(v);
  }
};
/**
 * @param {number}
 * @returns {number}
 */


sizeOf.NUMBER = function (v) {
  return encode.NUMBER(v).length;
};
/**
 * Convert a signed number between -32768 and +32767 to a three-byte value.
 * This ensures we always use three bytes, but is not the most compact format.
 * @param {number}
 * @returns {Array}
 */


encode.NUMBER16 = function (v) {
  return [28, v >> 8 & 0xFF, v & 0xFF];
};
/**
 * @constant
 * @type {number}
 */


sizeOf.NUMBER16 = constant$4(3);
/**
 * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.
 * This is useful if you want to be sure you always use four bytes,
 * at the expense of wasting a few bytes for smaller numbers.
 * @param {number}
 * @returns {Array}
 */

encode.NUMBER32 = function (v) {
  return [29, v >> 24 & 0xFF, v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];
};
/**
 * @constant
 * @type {number}
 */


sizeOf.NUMBER32 = constant$4(5);
/**
 * @param {number}
 * @returns {Array}
 */

encode.REAL = function (v) {
  var value = v.toString(); // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)
  // This code converts it back to a number without the epsilon.

  var m = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(value);

  if (m) {
    var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));
    value = (Math.round(v * epsilon) / epsilon).toString();
  }

  var nibbles = '';

  for (var i = 0, ii = value.length; i < ii; i += 1) {
    var c = value[i];

    if (c === 'e') {
      nibbles += value[++i] === '-' ? 'c' : 'b';
    } else if (c === '.') {
      nibbles += 'a';
    } else if (c === '-') {
      nibbles += 'e';
    } else {
      nibbles += c;
    }
  }

  nibbles += nibbles.length & 1 ? 'f' : 'ff';
  var out = [30];

  for (var i$1 = 0, ii$1 = nibbles.length; i$1 < ii$1; i$1 += 2) {
    out.push(parseInt(nibbles.substr(i$1, 2), 16));
  }

  return out;
};
/**
 * @param {number}
 * @returns {number}
 */


sizeOf.REAL = function (v) {
  return encode.REAL(v).length;
};

encode.NAME = encode.CHARARRAY;
sizeOf.NAME = sizeOf.CHARARRAY;
encode.STRING = encode.CHARARRAY;
sizeOf.STRING = sizeOf.CHARARRAY;
/**
 * @param {DataView} data
 * @param {number} offset
 * @param {number} numBytes
 * @returns {string}
 */

decode.UTF8 = function (data, offset, numBytes) {
  var codePoints = [];
  var numChars = numBytes;

  for (var j = 0; j < numChars; j++, offset += 1) {
    codePoints[j] = data.getUint8(offset);
  }

  return String.fromCharCode.apply(null, codePoints);
};
/**
 * @param {DataView} data
 * @param {number} offset
 * @param {number} numBytes
 * @returns {string}
 */


decode.UTF16 = function (data, offset, numBytes) {
  var codePoints = [];
  var numChars = numBytes / 2;

  for (var j = 0; j < numChars; j++, offset += 2) {
    codePoints[j] = data.getUint16(offset);
  }

  return String.fromCharCode.apply(null, codePoints);
};
/**
 * Convert a JavaScript string to UTF16-BE.
 * @param {string}
 * @returns {Array}
 */


encode.UTF16 = function (v) {
  var b = [];

  for (var i = 0; i < v.length; i += 1) {
    var codepoint = v.charCodeAt(i);
    b[b.length] = codepoint >> 8 & 0xFF;
    b[b.length] = codepoint & 0xFF;
  }

  return b;
};
/**
 * @param {string}
 * @returns {number}
 */


sizeOf.UTF16 = function (v) {
  return v.length * 2;
}; // Data for converting old eight-bit Macintosh encodings to Unicode.
// This representation is optimized for decoding; encoding is slower
// and needs more memory. The assumption is that all opentype.js users
// want to open fonts, but saving a font will be comparatively rare
// so it can be more expensive. Keyed by IANA character set name.
//
// Python script for generating these strings:
//
//     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])
//     print(s.encode('utf-8'))

/**
 * @private
 */


var eightBitMacEncodings = {
  'x-mac-croatian': // Python: 'mac_croatian'
  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' + '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',
  'x-mac-cyrillic': // Python: 'mac_cyrillic'
  'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' + 'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',
  'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT
  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' + 'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',
  'x-mac-greek': // Python: 'mac_greek'
  'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' + 'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\u00AD',
  'x-mac-icelandic': // Python: 'mac_iceland'
  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' + '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
  'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT
  'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' + 'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',
  'x-mac-ce': // Python: 'mac_latin2'
  'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' + 'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',
  macintosh: // Python: 'mac_roman'
  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' + '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
  'x-mac-romanian': // Python: 'mac_romanian'
  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' + '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
  'x-mac-turkish': // Python: 'mac_turkish'
  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' + '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'
};
/**
 * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript
 * string, or 'undefined' if the encoding is unsupported. For example, we do
 * not support Chinese, Japanese or Korean because these would need large
 * mapping tables.
 * @param {DataView} dataView
 * @param {number} offset
 * @param {number} dataLength
 * @param {string} encoding
 * @returns {string}
 */

decode.MACSTRING = function (dataView, offset, dataLength, encoding) {
  var table = eightBitMacEncodings[encoding];

  if (table === undefined) {
    return undefined;
  }

  var result = '';

  for (var i = 0; i < dataLength; i++) {
    var c = dataView.getUint8(offset + i); // In all eight-bit Mac encodings, the characters 0x00..0x7F are
    // mapped to U+0000..U+007F; we only need to look up the others.

    if (c <= 0x7F) {
      result += String.fromCharCode(c);
    } else {
      result += table[c & 0x7F];
    }
  }

  return result;
}; // Helper function for encode.MACSTRING. Returns a dictionary for mapping
// Unicode character codes to their 8-bit MacOS equivalent. This table
// is not exactly a super cheap data structure, but we do not care because
// encoding Macintosh strings is only rarely needed in typical applications.


var macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();
var macEncodingCacheKeys;

var getMacEncodingTable = function (encoding) {
  // Since we use encoding as a cache key for WeakMap, it has to be
  // a String object and not a literal. And at least on NodeJS 2.10.1,
  // WeakMap requires that the same String instance is passed for cache hits.
  if (!macEncodingCacheKeys) {
    macEncodingCacheKeys = {};

    for (var e in eightBitMacEncodings) {
      /*jshint -W053 */
      // Suppress "Do not use String as a constructor."
      macEncodingCacheKeys[e] = new String(e);
    }
  }

  var cacheKey = macEncodingCacheKeys[encoding];

  if (cacheKey === undefined) {
    return undefined;
  } // We can't do "if (cache.has(key)) {return cache.get(key)}" here:
  // since garbage collection may run at any time, it could also kick in
  // between the calls to cache.has() and cache.get(). In that case,
  // we would return 'undefined' even though we do support the encoding.


  if (macEncodingTableCache) {
    var cachedTable = macEncodingTableCache.get(cacheKey);

    if (cachedTable !== undefined) {
      return cachedTable;
    }
  }

  var decodingTable = eightBitMacEncodings[encoding];

  if (decodingTable === undefined) {
    return undefined;
  }

  var encodingTable = {};

  for (var i = 0; i < decodingTable.length; i++) {
    encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;
  }

  if (macEncodingTableCache) {
    macEncodingTableCache.set(cacheKey, encodingTable);
  }

  return encodingTable;
};
/**
 * Encodes an old-style Macintosh string. Returns a byte array upon success.
 * If the requested encoding is unsupported, or if the input string contains
 * a character that cannot be expressed in the encoding, the function returns
 * 'undefined'.
 * @param {string} str
 * @param {string} encoding
 * @returns {Array}
 */


encode.MACSTRING = function (str, encoding) {
  var table = getMacEncodingTable(encoding);

  if (table === undefined) {
    return undefined;
  }

  var result = [];

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i); // In all eight-bit Mac encodings, the characters 0x00..0x7F are
    // mapped to U+0000..U+007F; we only need to look up the others.

    if (c >= 0x80) {
      c = table[c];

      if (c === undefined) {
        // str contains a Unicode character that cannot be encoded
        // in the requested encoding.
        return undefined;
      }
    }

    result[i] = c; // result.push(c);
  }

  return result;
};
/**
 * @param {string} str
 * @param {string} encoding
 * @returns {number}
 */


sizeOf.MACSTRING = function (str, encoding) {
  var b = encode.MACSTRING(str, encoding);

  if (b !== undefined) {
    return b.length;
  } else {
    return 0;
  }
}; // Helper for encode.VARDELTAS


function isByteEncodable(value) {
  return value >= -128 && value <= 127;
} // Helper for encode.VARDELTAS


function encodeVarDeltaRunAsZeroes(deltas, pos, result) {
  var runLength = 0;
  var numDeltas = deltas.length;

  while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {
    ++pos;
    ++runLength;
  }

  result.push(0x80 | runLength - 1);
  return pos;
} // Helper for encode.VARDELTAS


function encodeVarDeltaRunAsBytes(deltas, offset, result) {
  var runLength = 0;
  var numDeltas = deltas.length;
  var pos = offset;

  while (pos < numDeltas && runLength < 64) {
    var value = deltas[pos];

    if (!isByteEncodable(value)) {
      break;
    } // Within a byte-encoded run of deltas, a single zero is best
    // stored literally as 0x00 value. However, if we have two or
    // more zeroes in a sequence, it is better to start a new run.
    // Fore example, the sequence of deltas [15, 15, 0, 15, 15]
    // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero
    // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)
    // when starting a new run.


    if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {
      break;
    }

    ++pos;
    ++runLength;
  }

  result.push(runLength - 1);

  for (var i = offset; i < pos; ++i) {
    result.push(deltas[i] + 256 & 0xff);
  }

  return pos;
} // Helper for encode.VARDELTAS


function encodeVarDeltaRunAsWords(deltas, offset, result) {
  var runLength = 0;
  var numDeltas = deltas.length;
  var pos = offset;

  while (pos < numDeltas && runLength < 64) {
    var value = deltas[pos]; // Within a word-encoded run of deltas, it is easiest to start
    // a new run (with a different encoding) whenever we encounter
    // a zero value. For example, the sequence [0x6666, 0, 0x7777]
    // needs 7 bytes when storing the zero inside the current run
    // (42 66 66 00 00 77 77), and equally 7 bytes when starting a
    // new run (40 66 66 80 40 77 77).

    if (value === 0) {
      break;
    } // Within a word-encoded run of deltas, a single value in the
    // range (-128..127) should be encoded within the current run
    // because it is more compact. For example, the sequence
    // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value
    // literally (42 66 66 00 02 77 77), but 8 bytes when starting
    // a new run (40 66 66 00 02 40 77 77).


    if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {
      break;
    }

    ++pos;
    ++runLength;
  }

  result.push(0x40 | runLength - 1);

  for (var i = offset; i < pos; ++i) {
    var val = deltas[i];
    result.push(val + 0x10000 >> 8 & 0xff, val + 0x100 & 0xff);
  }

  return pos;
}
/**
 * Encode a list of variation adjustment deltas.
 *
 * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.
 * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted
 * when generating instances of variation fonts.
 *
 * @see https://www.microsoft.com/typography/otspec/gvar.htm
 * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html
 * @param {Array}
 * @return {Array}
 */


encode.VARDELTAS = function (deltas) {
  var pos = 0;
  var result = [];

  while (pos < deltas.length) {
    var value = deltas[pos];

    if (value === 0) {
      pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);
    } else if (value >= -128 && value <= 127) {
      pos = encodeVarDeltaRunAsBytes(deltas, pos, result);
    } else {
      pos = encodeVarDeltaRunAsWords(deltas, pos, result);
    }
  }

  return result;
}; // Convert a list of values to a CFF INDEX structure.
// The values should be objects containing name / type / value.

/**
 * @param {Array} l
 * @returns {Array}
 */


encode.INDEX = function (l) {
  //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,
  //    i, v;
  // Because we have to know which data type to use to encode the offsets,
  // we have to go through the values twice: once to encode the data and
  // calculate the offsets, then again to encode the offsets using the fitting data type.
  var offset = 1; // First offset is always 1.

  var offsets = [offset];
  var data = [];

  for (var i = 0; i < l.length; i += 1) {
    var v = encode.OBJECT(l[i]);
    Array.prototype.push.apply(data, v);
    offset += v.length;
    offsets.push(offset);
  }

  if (data.length === 0) {
    return [0, 0];
  }

  var encodedOffsets = [];
  var offSize = 1 + Math.floor(Math.log(offset) / Math.log(2)) / 8 | 0;
  var offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];

  for (var i$1 = 0; i$1 < offsets.length; i$1 += 1) {
    var encodedOffset = offsetEncoder(offsets[i$1]);
    Array.prototype.push.apply(encodedOffsets, encodedOffset);
  }

  return Array.prototype.concat(encode.Card16(l.length), encode.OffSize(offSize), encodedOffsets, data);
};
/**
 * @param {Array}
 * @returns {number}
 */


sizeOf.INDEX = function (v) {
  return encode.INDEX(v).length;
};
/**
 * Convert an object to a CFF DICT structure.
 * The keys should be numeric.
 * The values should be objects containing name / type / value.
 * @param {Object} m
 * @returns {Array}
 */


encode.DICT = function (m) {
  var d = [];
  var keys = Object.keys(m);
  var length = keys.length;

  for (var i = 0; i < length; i += 1) {
    // Object.keys() return string keys, but our keys are always numeric.
    var k = parseInt(keys[i], 0);
    var v = m[k]; // Value comes before the key.

    d = d.concat(encode.OPERAND(v.value, v.type));
    d = d.concat(encode.OPERATOR(k));
  }

  return d;
};
/**
 * @param {Object}
 * @returns {number}
 */


sizeOf.DICT = function (m) {
  return encode.DICT(m).length;
};
/**
 * @param {number}
 * @returns {Array}
 */


encode.OPERATOR = function (v) {
  if (v < 1200) {
    return [v];
  } else {
    return [12, v - 1200];
  }
};
/**
 * @param {Array} v
 * @param {string}
 * @returns {Array}
 */


encode.OPERAND = function (v, type) {
  var d = [];

  if (Array.isArray(type)) {
    for (var i = 0; i < type.length; i += 1) {
      check.argument(v.length === type.length, 'Not enough arguments given for type' + type);
      d = d.concat(encode.OPERAND(v[i], type[i]));
    }
  } else {
    if (type === 'SID') {
      d = d.concat(encode.NUMBER(v));
    } else if (type === 'offset') {
      // We make it easy for ourselves and always encode offsets as
      // 4 bytes. This makes offset calculation for the top dict easier.
      d = d.concat(encode.NUMBER32(v));
    } else if (type === 'number') {
      d = d.concat(encode.NUMBER(v));
    } else if (type === 'real') {
      d = d.concat(encode.REAL(v));
    } else {
      throw new Error('Unknown operand type ' + type); // FIXME Add support for booleans
    }
  }

  return d;
};

encode.OP = encode.BYTE;
sizeOf.OP = sizeOf.BYTE; // memoize charstring encoding using WeakMap if available

var wmm = typeof WeakMap === 'function' && new WeakMap();
/**
 * Convert a list of CharString operations to bytes.
 * @param {Array}
 * @returns {Array}
 */

encode.CHARSTRING = function (ops) {
  // See encode.MACSTRING for why we don't do "if (wmm && wmm.has(ops))".
  if (wmm) {
    var cachedValue = wmm.get(ops);

    if (cachedValue !== undefined) {
      return cachedValue;
    }
  }

  var d = [];
  var length = ops.length;

  for (var i = 0; i < length; i += 1) {
    var op = ops[i];
    d = d.concat(encode[op.type](op.value));
  }

  if (wmm) {
    wmm.set(ops, d);
  }

  return d;
};
/**
 * @param {Array}
 * @returns {number}
 */


sizeOf.CHARSTRING = function (ops) {
  return encode.CHARSTRING(ops).length;
}; // Utility functions ////////////////////////////////////////////////////////

/**
 * Convert an object containing name / type / value to bytes.
 * @param {Object}
 * @returns {Array}
 */


encode.OBJECT = function (v) {
  var encodingFunction = encode[v.type];
  check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);
  return encodingFunction(v.value);
};
/**
 * @param {Object}
 * @returns {number}
 */


sizeOf.OBJECT = function (v) {
  var sizeOfFunction = sizeOf[v.type];
  check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);
  return sizeOfFunction(v.value);
};
/**
 * Convert a table object to bytes.
 * A table contains a list of fields containing the metadata (name, type and default value).
 * The table itself has the field values set as attributes.
 * @param {opentype.Table}
 * @returns {Array}
 */


encode.TABLE = function (table) {
  var d = [];
  var length = table.fields.length;
  var subtables = [];
  var subtableOffsets = [];

  for (var i = 0; i < length; i += 1) {
    var field = table.fields[i];
    var encodingFunction = encode[field.type];
    check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');
    var value = table[field.name];

    if (value === undefined) {
      value = field.value;
    }

    var bytes = encodingFunction(value);

    if (field.type === 'TABLE') {
      subtableOffsets.push(d.length);
      d = d.concat([0, 0]);
      subtables.push(bytes);
    } else {
      d = d.concat(bytes);
    }
  }

  for (var i$1 = 0; i$1 < subtables.length; i$1 += 1) {
    var o = subtableOffsets[i$1];
    var offset = d.length;
    check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');
    d[o] = offset >> 8;
    d[o + 1] = offset & 0xff;
    d = d.concat(subtables[i$1]);
  }

  return d;
};
/**
 * @param {opentype.Table}
 * @returns {number}
 */


sizeOf.TABLE = function (table) {
  var numBytes = 0;
  var length = table.fields.length;

  for (var i = 0; i < length; i += 1) {
    var field = table.fields[i];
    var sizeOfFunction = sizeOf[field.type];
    check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');
    var value = table[field.name];

    if (value === undefined) {
      value = field.value;
    }

    numBytes += sizeOfFunction(value); // Subtables take 2 more bytes for offsets.

    if (field.type === 'TABLE') {
      numBytes += 2;
    }
  }

  return numBytes;
};

encode.RECORD = encode.TABLE;
sizeOf.RECORD = sizeOf.TABLE; // Merge in a list of bytes.

encode.LITERAL = function (v) {
  return v;
};

sizeOf.LITERAL = function (v) {
  return v.length;
}; // Table metadata

/**
 * @exports opentype.Table
 * @class
 * @param {string} tableName
 * @param {Array} fields
 * @param {Object} options
 * @constructor
 */


function Table(tableName, fields, options) {
  for (var i = 0; i < fields.length; i += 1) {
    var field = fields[i];
    this[field.name] = field.value;
  }

  this.tableName = tableName;
  this.fields = fields;

  if (options) {
    var optionKeys = Object.keys(options);

    for (var i$1 = 0; i$1 < optionKeys.length; i$1 += 1) {
      var k = optionKeys[i$1];
      var v = options[k];

      if (this[k] !== undefined) {
        this[k] = v;
      }
    }
  }
}
/**
 * Encodes the table and returns an array of bytes
 * @return {Array}
 */


Table.prototype.encode = function () {
  return encode.TABLE(this);
};
/**
 * Get the size of the table.
 * @return {number}
 */


Table.prototype.sizeOf = function () {
  return sizeOf.TABLE(this);
};
/**
 * @private
 */


function ushortList(itemName, list, count) {
  if (count === undefined) {
    count = list.length;
  }

  var fields = new Array(list.length + 1);
  fields[0] = {
    name: itemName + 'Count',
    type: 'USHORT',
    value: count
  };

  for (var i = 0; i < list.length; i++) {
    fields[i + 1] = {
      name: itemName + i,
      type: 'USHORT',
      value: list[i]
    };
  }

  return fields;
}
/**
 * @private
 */


function tableList(itemName, records, itemCallback) {
  var count = records.length;
  var fields = new Array(count + 1);
  fields[0] = {
    name: itemName + 'Count',
    type: 'USHORT',
    value: count
  };

  for (var i = 0; i < count; i++) {
    fields[i + 1] = {
      name: itemName + i,
      type: 'TABLE',
      value: itemCallback(records[i], i)
    };
  }

  return fields;
}
/**
 * @private
 */


function recordList(itemName, records, itemCallback) {
  var count = records.length;
  var fields = [];
  fields[0] = {
    name: itemName + 'Count',
    type: 'USHORT',
    value: count
  };

  for (var i = 0; i < count; i++) {
    fields = fields.concat(itemCallback(records[i], i));
  }

  return fields;
} // Common Layout Tables

/**
 * @exports opentype.Coverage
 * @class
 * @param {opentype.Table}
 * @constructor
 * @extends opentype.Table
 */


function Coverage(coverageTable) {
  if (coverageTable.format === 1) {
    Table.call(this, 'coverageTable', [{
      name: 'coverageFormat',
      type: 'USHORT',
      value: 1
    }].concat(ushortList('glyph', coverageTable.glyphs)));
  } else {
    check.assert(false, 'Can\'t create coverage table format 2 yet.');
  }
}

Coverage.prototype = Object.create(Table.prototype);
Coverage.prototype.constructor = Coverage;

function ScriptList(scriptListTable) {
  Table.call(this, 'scriptListTable', recordList('scriptRecord', scriptListTable, function (scriptRecord, i) {
    var script = scriptRecord.script;
    var defaultLangSys = script.defaultLangSys;
    check.assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');
    return [{
      name: 'scriptTag' + i,
      type: 'TAG',
      value: scriptRecord.tag
    }, {
      name: 'script' + i,
      type: 'TABLE',
      value: new Table('scriptTable', [{
        name: 'defaultLangSys',
        type: 'TABLE',
        value: new Table('defaultLangSys', [{
          name: 'lookupOrder',
          type: 'USHORT',
          value: 0
        }, {
          name: 'reqFeatureIndex',
          type: 'USHORT',
          value: defaultLangSys.reqFeatureIndex
        }].concat(ushortList('featureIndex', defaultLangSys.featureIndexes)))
      }].concat(recordList('langSys', script.langSysRecords, function (langSysRecord, i) {
        var langSys = langSysRecord.langSys;
        return [{
          name: 'langSysTag' + i,
          type: 'TAG',
          value: langSysRecord.tag
        }, {
          name: 'langSys' + i,
          type: 'TABLE',
          value: new Table('langSys', [{
            name: 'lookupOrder',
            type: 'USHORT',
            value: 0
          }, {
            name: 'reqFeatureIndex',
            type: 'USHORT',
            value: langSys.reqFeatureIndex
          }].concat(ushortList('featureIndex', langSys.featureIndexes)))
        }];
      })))
    }];
  }));
}

ScriptList.prototype = Object.create(Table.prototype);
ScriptList.prototype.constructor = ScriptList;
/**
 * @exports opentype.FeatureList
 * @class
 * @param {opentype.Table}
 * @constructor
 * @extends opentype.Table
 */

function FeatureList(featureListTable) {
  Table.call(this, 'featureListTable', recordList('featureRecord', featureListTable, function (featureRecord, i) {
    var feature = featureRecord.feature;
    return [{
      name: 'featureTag' + i,
      type: 'TAG',
      value: featureRecord.tag
    }, {
      name: 'feature' + i,
      type: 'TABLE',
      value: new Table('featureTable', [{
        name: 'featureParams',
        type: 'USHORT',
        value: feature.featureParams
      }].concat(ushortList('lookupListIndex', feature.lookupListIndexes)))
    }];
  }));
}

FeatureList.prototype = Object.create(Table.prototype);
FeatureList.prototype.constructor = FeatureList;
/**
 * @exports opentype.LookupList
 * @class
 * @param {opentype.Table}
 * @param {Object}
 * @constructor
 * @extends opentype.Table
 */

function LookupList(lookupListTable, subtableMakers) {
  Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function (lookupTable) {
    var subtableCallback = subtableMakers[lookupTable.lookupType];
    check.assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');
    return new Table('lookupTable', [{
      name: 'lookupType',
      type: 'USHORT',
      value: lookupTable.lookupType
    }, {
      name: 'lookupFlag',
      type: 'USHORT',
      value: lookupTable.lookupFlag
    }].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));
  }));
}

LookupList.prototype = Object.create(Table.prototype);
LookupList.prototype.constructor = LookupList; // Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)
// Don't use offsets inside Records (probable bug), only in Tables.

var table = {
  Table: Table,
  Record: Table,
  Coverage: Coverage,
  ScriptList: ScriptList,
  FeatureList: FeatureList,
  LookupList: LookupList,
  ushortList: ushortList,
  tableList: tableList,
  recordList: recordList
}; // Parsing utility functions
// Retrieve an unsigned byte from the DataView.

function getByte(dataView, offset) {
  return dataView.getUint8(offset);
} // Retrieve an unsigned 16-bit short from the DataView.
// The value is stored in big endian.


function getUShort(dataView, offset) {
  return dataView.getUint16(offset, false);
} // Retrieve a signed 16-bit short from the DataView.
// The value is stored in big endian.


function getShort(dataView, offset) {
  return dataView.getInt16(offset, false);
} // Retrieve an unsigned 32-bit long from the DataView.
// The value is stored in big endian.


function getULong(dataView, offset) {
  return dataView.getUint32(offset, false);
} // Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.
// The value is stored in big endian.


function getFixed(dataView, offset) {
  var decimal = dataView.getInt16(offset, false);
  var fraction = dataView.getUint16(offset + 2, false);
  return decimal + fraction / 65535;
} // Retrieve a 4-character tag from the DataView.
// Tags are used to identify tables.


function getTag(dataView, offset) {
  var tag = '';

  for (var i = offset; i < offset + 4; i += 1) {
    tag += String.fromCharCode(dataView.getInt8(i));
  }

  return tag;
} // Retrieve an offset from the DataView.
// Offsets are 1 to 4 bytes in length, depending on the offSize argument.


function getOffset(dataView, offset, offSize) {
  var v = 0;

  for (var i = 0; i < offSize; i += 1) {
    v <<= 8;
    v += dataView.getUint8(offset + i);
  }

  return v;
} // Retrieve a number of bytes from start offset to the end offset from the DataView.


function getBytes(dataView, startOffset, endOffset) {
  var bytes = [];

  for (var i = startOffset; i < endOffset; i += 1) {
    bytes.push(dataView.getUint8(i));
  }

  return bytes;
} // Convert the list of bytes to a string.


function bytesToString(bytes) {
  var s = '';

  for (var i = 0; i < bytes.length; i += 1) {
    s += String.fromCharCode(bytes[i]);
  }

  return s;
}

var typeOffsets = {
  byte: 1,
  uShort: 2,
  short: 2,
  uLong: 4,
  fixed: 4,
  longDateTime: 8,
  tag: 4
}; // A stateful parser that changes the offset whenever a value is retrieved.
// The data is a DataView.

function Parser(data, offset) {
  this.data = data;
  this.offset = offset;
  this.relativeOffset = 0;
}

Parser.prototype.parseByte = function () {
  var v = this.data.getUint8(this.offset + this.relativeOffset);
  this.relativeOffset += 1;
  return v;
};

Parser.prototype.parseChar = function () {
  var v = this.data.getInt8(this.offset + this.relativeOffset);
  this.relativeOffset += 1;
  return v;
};

Parser.prototype.parseCard8 = Parser.prototype.parseByte;

Parser.prototype.parseUShort = function () {
  var v = this.data.getUint16(this.offset + this.relativeOffset);
  this.relativeOffset += 2;
  return v;
};

Parser.prototype.parseCard16 = Parser.prototype.parseUShort;
Parser.prototype.parseSID = Parser.prototype.parseUShort;
Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;

Parser.prototype.parseShort = function () {
  var v = this.data.getInt16(this.offset + this.relativeOffset);
  this.relativeOffset += 2;
  return v;
};

Parser.prototype.parseF2Dot14 = function () {
  var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
  this.relativeOffset += 2;
  return v;
};

Parser.prototype.parseULong = function () {
  var v = getULong(this.data, this.offset + this.relativeOffset);
  this.relativeOffset += 4;
  return v;
};

Parser.prototype.parseOffset32 = Parser.prototype.parseULong;

Parser.prototype.parseFixed = function () {
  var v = getFixed(this.data, this.offset + this.relativeOffset);
  this.relativeOffset += 4;
  return v;
};

Parser.prototype.parseString = function (length) {
  var dataView = this.data;
  var offset = this.offset + this.relativeOffset;
  var string = '';
  this.relativeOffset += length;

  for (var i = 0; i < length; i++) {
    string += String.fromCharCode(dataView.getUint8(offset + i));
  }

  return string;
};

Parser.prototype.parseTag = function () {
  return this.parseString(4);
}; // LONGDATETIME is a 64-bit integer.
// JavaScript and unix timestamps traditionally use 32 bits, so we
// only take the last 32 bits.
// + Since until 2038 those bits will be filled by zeros we can ignore them.


Parser.prototype.parseLongDateTime = function () {
  var v = getULong(this.data, this.offset + this.relativeOffset + 4); // Subtract seconds between 01/01/1904 and 01/01/1970
  // to convert Apple Mac timestamp to Standard Unix timestamp

  v -= 2082844800;
  this.relativeOffset += 8;
  return v;
};

Parser.prototype.parseVersion = function (minorBase) {
  var major = getUShort(this.data, this.offset + this.relativeOffset); // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1
  // Default returns the correct number if minor = 0xN000 where N is 0-9
  // Set minorBase to 1 for tables that use minor = N where N is 0-9

  var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);
  this.relativeOffset += 4;

  if (minorBase === undefined) {
    minorBase = 0x1000;
  }

  return major + minor / minorBase / 10;
};

Parser.prototype.skip = function (type, amount) {
  if (amount === undefined) {
    amount = 1;
  }

  this.relativeOffset += typeOffsets[type] * amount;
}; ///// Parsing lists and records ///////////////////////////////
// Parse a list of 32 bit unsigned integers.


Parser.prototype.parseULongList = function (count) {
  if (count === undefined) {
    count = this.parseULong();
  }

  var offsets = new Array(count);
  var dataView = this.data;
  var offset = this.offset + this.relativeOffset;

  for (var i = 0; i < count; i++) {
    offsets[i] = dataView.getUint32(offset);
    offset += 4;
  }

  this.relativeOffset += count * 4;
  return offsets;
}; // Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream
// or provided as an argument.


Parser.prototype.parseOffset16List = Parser.prototype.parseUShortList = function (count) {
  if (count === undefined) {
    count = this.parseUShort();
  }

  var offsets = new Array(count);
  var dataView = this.data;
  var offset = this.offset + this.relativeOffset;

  for (var i = 0; i < count; i++) {
    offsets[i] = dataView.getUint16(offset);
    offset += 2;
  }

  this.relativeOffset += count * 2;
  return offsets;
}; // Parses a list of 16 bit signed integers.


Parser.prototype.parseShortList = function (count) {
  var list = new Array(count);
  var dataView = this.data;
  var offset = this.offset + this.relativeOffset;

  for (var i = 0; i < count; i++) {
    list[i] = dataView.getInt16(offset);
    offset += 2;
  }

  this.relativeOffset += count * 2;
  return list;
}; // Parses a list of bytes.


Parser.prototype.parseByteList = function (count) {
  var list = new Array(count);
  var dataView = this.data;
  var offset = this.offset + this.relativeOffset;

  for (var i = 0; i < count; i++) {
    list[i] = dataView.getUint8(offset++);
  }

  this.relativeOffset += count;
  return list;
};
/**
 * Parse a list of items.
 * Record count is optional, if omitted it is read from the stream.
 * itemCallback is one of the Parser methods.
 */


Parser.prototype.parseList = function (count, itemCallback) {
  if (!itemCallback) {
    itemCallback = count;
    count = this.parseUShort();
  }

  var list = new Array(count);

  for (var i = 0; i < count; i++) {
    list[i] = itemCallback.call(this);
  }

  return list;
};

Parser.prototype.parseList32 = function (count, itemCallback) {
  if (!itemCallback) {
    itemCallback = count;
    count = this.parseULong();
  }

  var list = new Array(count);

  for (var i = 0; i < count; i++) {
    list[i] = itemCallback.call(this);
  }

  return list;
};
/**
 * Parse a list of records.
 * Record count is optional, if omitted it is read from the stream.
 * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
 */


Parser.prototype.parseRecordList = function (count, recordDescription) {
  // If the count argument is absent, read it in the stream.
  if (!recordDescription) {
    recordDescription = count;
    count = this.parseUShort();
  }

  var records = new Array(count);
  var fields = Object.keys(recordDescription);

  for (var i = 0; i < count; i++) {
    var rec = {};

    for (var j = 0; j < fields.length; j++) {
      var fieldName = fields[j];
      var fieldType = recordDescription[fieldName];
      rec[fieldName] = fieldType.call(this);
    }

    records[i] = rec;
  }

  return records;
};

Parser.prototype.parseRecordList32 = function (count, recordDescription) {
  // If the count argument is absent, read it in the stream.
  if (!recordDescription) {
    recordDescription = count;
    count = this.parseULong();
  }

  var records = new Array(count);
  var fields = Object.keys(recordDescription);

  for (var i = 0; i < count; i++) {
    var rec = {};

    for (var j = 0; j < fields.length; j++) {
      var fieldName = fields[j];
      var fieldType = recordDescription[fieldName];
      rec[fieldName] = fieldType.call(this);
    }

    records[i] = rec;
  }

  return records;
}; // Parse a data structure into an object
// Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }


Parser.prototype.parseStruct = function (description) {
  if (typeof description === 'function') {
    return description.call(this);
  } else {
    var fields = Object.keys(description);
    var struct = {};

    for (var j = 0; j < fields.length; j++) {
      var fieldName = fields[j];
      var fieldType = description[fieldName];
      struct[fieldName] = fieldType.call(this);
    }

    return struct;
  }
};
/**
 * Parse a GPOS valueRecord
 * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
 * valueFormat is optional, if omitted it is read from the stream.
 */


Parser.prototype.parseValueRecord = function (valueFormat) {
  if (valueFormat === undefined) {
    valueFormat = this.parseUShort();
  }

  if (valueFormat === 0) {
    // valueFormat2 in kerning pairs is most often 0
    // in this case return undefined instead of an empty object, to save space
    return;
  }

  var valueRecord = {};

  if (valueFormat & 0x0001) {
    valueRecord.xPlacement = this.parseShort();
  }

  if (valueFormat & 0x0002) {
    valueRecord.yPlacement = this.parseShort();
  }

  if (valueFormat & 0x0004) {
    valueRecord.xAdvance = this.parseShort();
  }

  if (valueFormat & 0x0008) {
    valueRecord.yAdvance = this.parseShort();
  } // Device table (non-variable font) / VariationIndex table (variable font) not supported
  // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls


  if (valueFormat & 0x0010) {
    valueRecord.xPlaDevice = undefined;
    this.parseShort();
  }

  if (valueFormat & 0x0020) {
    valueRecord.yPlaDevice = undefined;
    this.parseShort();
  }

  if (valueFormat & 0x0040) {
    valueRecord.xAdvDevice = undefined;
    this.parseShort();
  }

  if (valueFormat & 0x0080) {
    valueRecord.yAdvDevice = undefined;
    this.parseShort();
  }

  return valueRecord;
};
/**
 * Parse a list of GPOS valueRecords
 * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
 * valueFormat and valueCount are read from the stream.
 */


Parser.prototype.parseValueRecordList = function () {
  var valueFormat = this.parseUShort();
  var valueCount = this.parseUShort();
  var values = new Array(valueCount);

  for (var i = 0; i < valueCount; i++) {
    values[i] = this.parseValueRecord(valueFormat);
  }

  return values;
};

Parser.prototype.parsePointer = function (description) {
  var structOffset = this.parseOffset16();

  if (structOffset > 0) {
    // NULL offset => return undefined
    return new Parser(this.data, this.offset + structOffset).parseStruct(description);
  }

  return undefined;
};

Parser.prototype.parsePointer32 = function (description) {
  var structOffset = this.parseOffset32();

  if (structOffset > 0) {
    // NULL offset => return undefined
    return new Parser(this.data, this.offset + structOffset).parseStruct(description);
  }

  return undefined;
};
/**
 * Parse a list of offsets to lists of 16-bit integers,
 * or a list of offsets to lists of offsets to any kind of items.
 * If itemCallback is not provided, a list of list of UShort is assumed.
 * If provided, itemCallback is called on each item and must parse the item.
 * See examples in tables/gsub.js
 */


Parser.prototype.parseListOfLists = function (itemCallback) {
  var offsets = this.parseOffset16List();
  var count = offsets.length;
  var relativeOffset = this.relativeOffset;
  var list = new Array(count);

  for (var i = 0; i < count; i++) {
    var start = offsets[i];

    if (start === 0) {
      // NULL offset
      // Add i as owned property to list. Convenient with assert.
      list[i] = undefined;
      continue;
    }

    this.relativeOffset = start;

    if (itemCallback) {
      var subOffsets = this.parseOffset16List();
      var subList = new Array(subOffsets.length);

      for (var j = 0; j < subOffsets.length; j++) {
        this.relativeOffset = start + subOffsets[j];
        subList[j] = itemCallback.call(this);
      }

      list[i] = subList;
    } else {
      list[i] = this.parseUShortList();
    }
  }

  this.relativeOffset = relativeOffset;
  return list;
}; ///// Complex tables parsing //////////////////////////////////
// Parse a coverage table in a GSUB, GPOS or GDEF table.
// https://www.microsoft.com/typography/OTSPEC/chapter2.htm
// parser.offset must point to the start of the table containing the coverage.


Parser.prototype.parseCoverage = function () {
  var startOffset = this.offset + this.relativeOffset;
  var format = this.parseUShort();
  var count = this.parseUShort();

  if (format === 1) {
    return {
      format: 1,
      glyphs: this.parseUShortList(count)
    };
  } else if (format === 2) {
    var ranges = new Array(count);

    for (var i = 0; i < count; i++) {
      ranges[i] = {
        start: this.parseUShort(),
        end: this.parseUShort(),
        index: this.parseUShort()
      };
    }

    return {
      format: 2,
      ranges: ranges
    };
  }

  throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');
}; // Parse a Class Definition Table in a GSUB, GPOS or GDEF table.
// https://www.microsoft.com/typography/OTSPEC/chapter2.htm


Parser.prototype.parseClassDef = function () {
  var startOffset = this.offset + this.relativeOffset;
  var format = this.parseUShort();

  if (format === 1) {
    return {
      format: 1,
      startGlyph: this.parseUShort(),
      classes: this.parseUShortList()
    };
  } else if (format === 2) {
    return {
      format: 2,
      ranges: this.parseRecordList({
        start: Parser.uShort,
        end: Parser.uShort,
        classId: Parser.uShort
      })
    };
  }

  throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');
}; ///// Static methods ///////////////////////////////////
// These convenience methods can be used as callbacks and should be called with "this" context set to a Parser instance.


Parser.list = function (count, itemCallback) {
  return function () {
    return this.parseList(count, itemCallback);
  };
};

Parser.list32 = function (count, itemCallback) {
  return function () {
    return this.parseList32(count, itemCallback);
  };
};

Parser.recordList = function (count, recordDescription) {
  return function () {
    return this.parseRecordList(count, recordDescription);
  };
};

Parser.recordList32 = function (count, recordDescription) {
  return function () {
    return this.parseRecordList32(count, recordDescription);
  };
};

Parser.pointer = function (description) {
  return function () {
    return this.parsePointer(description);
  };
};

Parser.pointer32 = function (description) {
  return function () {
    return this.parsePointer32(description);
  };
};

Parser.tag = Parser.prototype.parseTag;
Parser.byte = Parser.prototype.parseByte;
Parser.uShort = Parser.offset16 = Parser.prototype.parseUShort;
Parser.uShortList = Parser.prototype.parseUShortList;
Parser.uLong = Parser.offset32 = Parser.prototype.parseULong;
Parser.uLongList = Parser.prototype.parseULongList;
Parser.struct = Parser.prototype.parseStruct;
Parser.coverage = Parser.prototype.parseCoverage;
Parser.classDef = Parser.prototype.parseClassDef; ///// Script, Feature, Lookup lists ///////////////////////////////////////////////
// https://www.microsoft.com/typography/OTSPEC/chapter2.htm

var langSysTable = {
  reserved: Parser.uShort,
  reqFeatureIndex: Parser.uShort,
  featureIndexes: Parser.uShortList
};

Parser.prototype.parseScriptList = function () {
  return this.parsePointer(Parser.recordList({
    tag: Parser.tag,
    script: Parser.pointer({
      defaultLangSys: Parser.pointer(langSysTable),
      langSysRecords: Parser.recordList({
        tag: Parser.tag,
        langSys: Parser.pointer(langSysTable)
      })
    })
  })) || [];
};

Parser.prototype.parseFeatureList = function () {
  return this.parsePointer(Parser.recordList({
    tag: Parser.tag,
    feature: Parser.pointer({
      featureParams: Parser.offset16,
      lookupListIndexes: Parser.uShortList
    })
  })) || [];
};

Parser.prototype.parseLookupList = function (lookupTableParsers) {
  return this.parsePointer(Parser.list(Parser.pointer(function () {
    var lookupType = this.parseUShort();
    check.argument(1 <= lookupType && lookupType <= 9, 'GPOS/GSUB lookup type ' + lookupType + ' unknown.');
    var lookupFlag = this.parseUShort();
    var useMarkFilteringSet = lookupFlag & 0x10;
    return {
      lookupType: lookupType,
      lookupFlag: lookupFlag,
      subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),
      markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined
    };
  }))) || [];
};

Parser.prototype.parseFeatureVariationsList = function () {
  return this.parsePointer32(function () {
    var majorVersion = this.parseUShort();
    var minorVersion = this.parseUShort();
    check.argument(majorVersion === 1 && minorVersion < 1, 'GPOS/GSUB feature variations table unknown.');
    var featureVariations = this.parseRecordList32({
      conditionSetOffset: Parser.offset32,
      featureTableSubstitutionOffset: Parser.offset32
    });
    return featureVariations;
  }) || [];
};

var parse = {
  getByte: getByte,
  getCard8: getByte,
  getUShort: getUShort,
  getCard16: getUShort,
  getShort: getShort,
  getULong: getULong,
  getFixed: getFixed,
  getTag: getTag,
  getOffset: getOffset,
  getBytes: getBytes,
  bytesToString: bytesToString,
  Parser: Parser
}; // The `cmap` table stores the mappings from characters to glyphs.

function parseCmapTableFormat12(cmap, p) {
  //Skip reserved.
  p.parseUShort(); // Length in bytes of the sub-tables.

  cmap.length = p.parseULong();
  cmap.language = p.parseULong();
  var groupCount;
  cmap.groupCount = groupCount = p.parseULong();
  cmap.glyphIndexMap = {};

  for (var i = 0; i < groupCount; i += 1) {
    var startCharCode = p.parseULong();
    var endCharCode = p.parseULong();
    var startGlyphId = p.parseULong();

    for (var c = startCharCode; c <= endCharCode; c += 1) {
      cmap.glyphIndexMap[c] = startGlyphId;
      startGlyphId++;
    }
  }
}

function parseCmapTableFormat4(cmap, p, data, start, offset) {
  // Length in bytes of the sub-tables.
  cmap.length = p.parseUShort();
  cmap.language = p.parseUShort(); // segCount is stored x 2.

  var segCount;
  cmap.segCount = segCount = p.parseUShort() >> 1; // Skip searchRange, entrySelector, rangeShift.

  p.skip('uShort', 3); // The "unrolled" mapping from character codes to glyph indices.

  cmap.glyphIndexMap = {};
  var endCountParser = new parse.Parser(data, start + offset + 14);
  var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);
  var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);
  var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);
  var glyphIndexOffset = start + offset + 16 + segCount * 8;

  for (var i = 0; i < segCount - 1; i += 1) {
    var glyphIndex = void 0;
    var endCount = endCountParser.parseUShort();
    var startCount = startCountParser.parseUShort();
    var idDelta = idDeltaParser.parseShort();
    var idRangeOffset = idRangeOffsetParser.parseUShort();

    for (var c = startCount; c <= endCount; c += 1) {
      if (idRangeOffset !== 0) {
        // The idRangeOffset is relative to the current position in the idRangeOffset array.
        // Take the current offset in the idRangeOffset array.
        glyphIndexOffset = idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2; // Add the value of the idRangeOffset, which will move us into the glyphIndex array.

        glyphIndexOffset += idRangeOffset; // Then add the character index of the current segment, multiplied by 2 for USHORTs.

        glyphIndexOffset += (c - startCount) * 2;
        glyphIndex = parse.getUShort(data, glyphIndexOffset);

        if (glyphIndex !== 0) {
          glyphIndex = glyphIndex + idDelta & 0xFFFF;
        }
      } else {
        glyphIndex = c + idDelta & 0xFFFF;
      }

      cmap.glyphIndexMap[c] = glyphIndex;
    }
  }
} // Parse the `cmap` table. This table stores the mappings from characters to glyphs.
// There are many available formats, but we only support the Windows format 4 and 12.
// This function returns a `CmapEncoding` object or null if no supported format could be found.


function parseCmapTable(data, start) {
  var cmap = {};
  cmap.version = parse.getUShort(data, start);
  check.argument(cmap.version === 0, 'cmap table version should be 0.'); // The cmap table can contain many sub-tables, each with their own format.
  // We're only interested in a "platform 0" (Unicode format) and "platform 3" (Windows format) table.

  cmap.numTables = parse.getUShort(data, start + 2);
  var offset = -1;

  for (var i = cmap.numTables - 1; i >= 0; i -= 1) {
    var platformId = parse.getUShort(data, start + 4 + i * 8);
    var encodingId = parse.getUShort(data, start + 4 + i * 8 + 2);

    if (platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10) || platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4)) {
      offset = parse.getULong(data, start + 4 + i * 8 + 4);
      break;
    }
  }

  if (offset === -1) {
    // There is no cmap table in the font that we support.
    throw new Error('No valid cmap sub-tables found.');
  }

  var p = new parse.Parser(data, start + offset);
  cmap.format = p.parseUShort();

  if (cmap.format === 12) {
    parseCmapTableFormat12(cmap, p);
  } else if (cmap.format === 4) {
    parseCmapTableFormat4(cmap, p, data, start, offset);
  } else {
    throw new Error('Only format 4 and 12 cmap tables are supported (found format ' + cmap.format + ').');
  }

  return cmap;
}

function addSegment(t, code, glyphIndex) {
  t.segments.push({
    end: code,
    start: code,
    delta: -(code - glyphIndex),
    offset: 0,
    glyphIndex: glyphIndex
  });
}

function addTerminatorSegment(t) {
  t.segments.push({
    end: 0xFFFF,
    start: 0xFFFF,
    delta: 1,
    offset: 0
  });
} // Make cmap table, format 4 by default, 12 if needed only


function makeCmapTable(glyphs) {
  // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)
  var isPlan0Only = true;
  var i; // Check if we need to add cmap format 12 or if format 4 only is fine

  for (i = glyphs.length - 1; i > 0; i -= 1) {
    var g = glyphs.get(i);

    if (g.unicode > 65535) {
      console.log('Adding CMAP format 12 (needed!)');
      isPlan0Only = false;
      break;
    }
  }

  var cmapTable = [{
    name: 'version',
    type: 'USHORT',
    value: 0
  }, {
    name: 'numTables',
    type: 'USHORT',
    value: isPlan0Only ? 1 : 2
  }, // CMAP 4 header
  {
    name: 'platformID',
    type: 'USHORT',
    value: 3
  }, {
    name: 'encodingID',
    type: 'USHORT',
    value: 1
  }, {
    name: 'offset',
    type: 'ULONG',
    value: isPlan0Only ? 12 : 12 + 8
  }];

  if (!isPlan0Only) {
    cmapTable = cmapTable.concat([// CMAP 12 header
    {
      name: 'cmap12PlatformID',
      type: 'USHORT',
      value: 3
    }, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere
    {
      name: 'cmap12EncodingID',
      type: 'USHORT',
      value: 10
    }, {
      name: 'cmap12Offset',
      type: 'ULONG',
      value: 0
    }]);
  }

  cmapTable = cmapTable.concat([// CMAP 4 Subtable
  {
    name: 'format',
    type: 'USHORT',
    value: 4
  }, {
    name: 'cmap4Length',
    type: 'USHORT',
    value: 0
  }, {
    name: 'language',
    type: 'USHORT',
    value: 0
  }, {
    name: 'segCountX2',
    type: 'USHORT',
    value: 0
  }, {
    name: 'searchRange',
    type: 'USHORT',
    value: 0
  }, {
    name: 'entrySelector',
    type: 'USHORT',
    value: 0
  }, {
    name: 'rangeShift',
    type: 'USHORT',
    value: 0
  }]);
  var t = new table.Table('cmap', cmapTable);
  t.segments = [];

  for (i = 0; i < glyphs.length; i += 1) {
    var glyph = glyphs.get(i);

    for (var j = 0; j < glyph.unicodes.length; j += 1) {
      addSegment(t, glyph.unicodes[j], i);
    }

    t.segments = t.segments.sort(function (a, b) {
      return a.start - b.start;
    });
  }

  addTerminatorSegment(t);
  var segCount = t.segments.length;
  var segCountToRemove = 0; // CMAP 4
  // Set up parallel segment arrays.

  var endCounts = [];
  var startCounts = [];
  var idDeltas = [];
  var idRangeOffsets = [];
  var glyphIds = []; // CMAP 12

  var cmap12Groups = []; // Reminder this loop is not following the specification at 100%
  // The specification -> find suites of characters and make a group
  // Here we're doing one group for each letter
  // Doing as the spec can save 8 times (or more) space

  for (i = 0; i < segCount; i += 1) {
    var segment = t.segments[i]; // CMAP 4

    if (segment.end <= 65535 && segment.start <= 65535) {
      endCounts = endCounts.concat({
        name: 'end_' + i,
        type: 'USHORT',
        value: segment.end
      });
      startCounts = startCounts.concat({
        name: 'start_' + i,
        type: 'USHORT',
        value: segment.start
      });
      idDeltas = idDeltas.concat({
        name: 'idDelta_' + i,
        type: 'SHORT',
        value: segment.delta
      });
      idRangeOffsets = idRangeOffsets.concat({
        name: 'idRangeOffset_' + i,
        type: 'USHORT',
        value: segment.offset
      });

      if (segment.glyphId !== undefined) {
        glyphIds = glyphIds.concat({
          name: 'glyph_' + i,
          type: 'USHORT',
          value: segment.glyphId
        });
      }
    } else {
      // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12
      segCountToRemove += 1;
    } // CMAP 12
    // Skip Terminator Segment


    if (!isPlan0Only && segment.glyphIndex !== undefined) {
      cmap12Groups = cmap12Groups.concat({
        name: 'cmap12Start_' + i,
        type: 'ULONG',
        value: segment.start
      });
      cmap12Groups = cmap12Groups.concat({
        name: 'cmap12End_' + i,
        type: 'ULONG',
        value: segment.end
      });
      cmap12Groups = cmap12Groups.concat({
        name: 'cmap12Glyph_' + i,
        type: 'ULONG',
        value: segment.glyphIndex
      });
    }
  } // CMAP 4 Subtable


  t.segCountX2 = (segCount - segCountToRemove) * 2;
  t.searchRange = Math.pow(2, Math.floor(Math.log(segCount - segCountToRemove) / Math.log(2))) * 2;
  t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);
  t.rangeShift = t.segCountX2 - t.searchRange;
  t.fields = t.fields.concat(endCounts);
  t.fields.push({
    name: 'reservedPad',
    type: 'USHORT',
    value: 0
  });
  t.fields = t.fields.concat(startCounts);
  t.fields = t.fields.concat(idDeltas);
  t.fields = t.fields.concat(idRangeOffsets);
  t.fields = t.fields.concat(glyphIds);
  t.cmap4Length = 14 + // Subtable header
  endCounts.length * 2 + 2 + // reservedPad
  startCounts.length * 2 + idDeltas.length * 2 + idRangeOffsets.length * 2 + glyphIds.length * 2;

  if (!isPlan0Only) {
    // CMAP 12 Subtable
    var cmap12Length = 16 + // Subtable header
    cmap12Groups.length * 4;
    t.cmap12Offset = 12 + 2 * 2 + 4 + t.cmap4Length;
    t.fields = t.fields.concat([{
      name: 'cmap12Format',
      type: 'USHORT',
      value: 12
    }, {
      name: 'cmap12Reserved',
      type: 'USHORT',
      value: 0
    }, {
      name: 'cmap12Length',
      type: 'ULONG',
      value: cmap12Length
    }, {
      name: 'cmap12Language',
      type: 'ULONG',
      value: 0
    }, {
      name: 'cmap12nGroups',
      type: 'ULONG',
      value: cmap12Groups.length / 3
    }]);
    t.fields = t.fields.concat(cmap12Groups);
  }

  return t;
}

var cmap = {
  parse: parseCmapTable,
  make: makeCmapTable
}; // Glyph encoding

var cffStandardStrings = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000', '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];
var cffStandardEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];
var cffExpertEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];
var standardNames = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];
/**
 * This is the encoding used for fonts created from scratch.
 * It loops through all glyphs and finds the appropriate unicode value.
 * Since it's linear time, other encodings will be faster.
 * @exports opentype.DefaultEncoding
 * @class
 * @constructor
 * @param {opentype.Font}
 */

function DefaultEncoding(font) {
  this.font = font;
}

DefaultEncoding.prototype.charToGlyphIndex = function (c) {
  var code = c.codePointAt(0);
  var glyphs = this.font.glyphs;

  if (glyphs) {
    for (var i = 0; i < glyphs.length; i += 1) {
      var glyph = glyphs.get(i);

      for (var j = 0; j < glyph.unicodes.length; j += 1) {
        if (glyph.unicodes[j] === code) {
          return i;
        }
      }
    }
  }

  return null;
};
/**
 * @exports opentype.CmapEncoding
 * @class
 * @constructor
 * @param {Object} cmap - a object with the cmap encoded data
 */


function CmapEncoding(cmap) {
  this.cmap = cmap;
}
/**
 * @param  {string} c - the character
 * @return {number} The glyph index.
 */


CmapEncoding.prototype.charToGlyphIndex = function (c) {
  return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;
};
/**
 * @exports opentype.CffEncoding
 * @class
 * @constructor
 * @param {string} encoding - The encoding
 * @param {Array} charset - The character set.
 */


function CffEncoding(encoding, charset) {
  this.encoding = encoding;
  this.charset = charset;
}
/**
 * @param  {string} s - The character
 * @return {number} The index.
 */


CffEncoding.prototype.charToGlyphIndex = function (s) {
  var code = s.codePointAt(0);
  var charName = this.encoding[code];
  return this.charset.indexOf(charName);
};
/**
 * @exports opentype.GlyphNames
 * @class
 * @constructor
 * @param {Object} post
 */


function GlyphNames(post) {
  switch (post.version) {
    case 1:
      this.names = standardNames.slice();
      break;

    case 2:
      this.names = new Array(post.numberOfGlyphs);

      for (var i = 0; i < post.numberOfGlyphs; i++) {
        if (post.glyphNameIndex[i] < standardNames.length) {
          this.names[i] = standardNames[post.glyphNameIndex[i]];
        } else {
          this.names[i] = post.names[post.glyphNameIndex[i] - standardNames.length];
        }
      }

      break;

    case 2.5:
      this.names = new Array(post.numberOfGlyphs);

      for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {
        this.names[i$1] = standardNames[i$1 + post.glyphNameIndex[i$1]];
      }

      break;

    case 3:
      this.names = [];
      break;

    default:
      this.names = [];
      break;
  }
}
/**
 * Gets the index of a glyph by name.
 * @param  {string} name - The glyph name
 * @return {number} The index
 */


GlyphNames.prototype.nameToGlyphIndex = function (name) {
  return this.names.indexOf(name);
};
/**
 * @param  {number} gid
 * @return {string}
 */


GlyphNames.prototype.glyphIndexToName = function (gid) {
  return this.names[gid];
};

function addGlyphNamesAll(font) {
  var glyph;
  var glyphIndexMap = font.tables.cmap.glyphIndexMap;
  var charCodes = Object.keys(glyphIndexMap);

  for (var i = 0; i < charCodes.length; i += 1) {
    var c = charCodes[i];
    var glyphIndex = glyphIndexMap[c];
    glyph = font.glyphs.get(glyphIndex);
    glyph.addUnicode(parseInt(c));
  }

  for (var i$1 = 0; i$1 < font.glyphs.length; i$1 += 1) {
    glyph = font.glyphs.get(i$1);

    if (font.cffEncoding) {
      if (font.isCIDFont) {
        glyph.name = 'gid' + i$1;
      } else {
        glyph.name = font.cffEncoding.charset[i$1];
      }
    } else if (font.glyphNames.names) {
      glyph.name = font.glyphNames.glyphIndexToName(i$1);
    }
  }
}

function addGlyphNamesToUnicodeMap(font) {
  font._IndexToUnicodeMap = {};
  var glyphIndexMap = font.tables.cmap.glyphIndexMap;
  var charCodes = Object.keys(glyphIndexMap);

  for (var i = 0; i < charCodes.length; i += 1) {
    var c = charCodes[i];
    var glyphIndex = glyphIndexMap[c];

    if (font._IndexToUnicodeMap[glyphIndex] === undefined) {
      font._IndexToUnicodeMap[glyphIndex] = {
        unicodes: [parseInt(c)]
      };
    } else {
      font._IndexToUnicodeMap[glyphIndex].unicodes.push(parseInt(c));
    }
  }
}
/**
 * @alias opentype.addGlyphNames
 * @param {opentype.Font}
 * @param {Object}
 */


function addGlyphNames(font, opt) {
  if (opt.lowMemory) {
    addGlyphNamesToUnicodeMap(font);
  } else {
    addGlyphNamesAll(font);
  }
} // Drawing utility functions.
// Draw a line on the given context from point `x1,y1` to point `x2,y2`.


function line(ctx, x1, y1, x2, y2) {
  ctx.beginPath();
  ctx.moveTo(x1, y1);
  ctx.lineTo(x2, y2);
  ctx.stroke();
}

var draw = {
  line: line
}; // The Glyph object
// import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency

function getPathDefinition(glyph, path) {
  var _path = path || new Path();

  return {
    configurable: true,
    get: function () {
      if (typeof _path === 'function') {
        _path = _path();
      }

      return _path;
    },
    set: function (p) {
      _path = p;
    }
  };
}
/**
 * @typedef GlyphOptions
 * @type Object
 * @property {string} [name] - The glyph name
 * @property {number} [unicode]
 * @property {Array} [unicodes]
 * @property {number} [xMin]
 * @property {number} [yMin]
 * @property {number} [xMax]
 * @property {number} [yMax]
 * @property {number} [advanceWidth]
 */
// A Glyph is an individual mark that often corresponds to a character.
// Some glyphs, such as ligatures, are a combination of many characters.
// Glyphs are the basic building blocks of a font.
//
// The `Glyph` class contains utility methods for drawing the path and its points.

/**
 * @exports opentype.Glyph
 * @class
 * @param {GlyphOptions}
 * @constructor
 */


function Glyph(options) {
  // By putting all the code on a prototype function (which is only declared once)
  // we reduce the memory requirements for larger fonts by some 2%
  this.bindConstructorValues(options);
}
/**
 * @param  {GlyphOptions}
 */


Glyph.prototype.bindConstructorValues = function (options) {
  this.index = options.index || 0; // These three values cannot be deferred for memory optimization:

  this.name = options.name || null;
  this.unicode = options.unicode || undefined;
  this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : []; // But by binding these values only when necessary, we reduce can
  // the memory requirements by almost 3% for larger fonts.

  if ('xMin' in options) {
    this.xMin = options.xMin;
  }

  if ('yMin' in options) {
    this.yMin = options.yMin;
  }

  if ('xMax' in options) {
    this.xMax = options.xMax;
  }

  if ('yMax' in options) {
    this.yMax = options.yMax;
  }

  if ('advanceWidth' in options) {
    this.advanceWidth = options.advanceWidth;
  } // The path for a glyph is the most memory intensive, and is bound as a value
  // with a getter/setter to ensure we actually do path parsing only once the
  // path is actually needed by anything.


  Object.defineProperty(this, 'path', getPathDefinition(this, options.path));
};
/**
 * @param {number}
 */


Glyph.prototype.addUnicode = function (unicode) {
  if (this.unicodes.length === 0) {
    this.unicode = unicode;
  }

  this.unicodes.push(unicode);
};
/**
 * Calculate the minimum bounding box for this glyph.
 * @return {opentype.BoundingBox}
 */


Glyph.prototype.getBoundingBox = function () {
  return this.path.getBoundingBox();
};
/**
 * Convert the glyph to a Path we can draw on a drawing context.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {Object=} options - xScale, yScale to stretch the glyph.
 * @param  {opentype.Font} if hinting is to be used, the font
 * @return {opentype.Path}
 */


Glyph.prototype.getPath = function (x, y, fontSize, options, font) {
  x = x !== undefined ? x : 0;
  y = y !== undefined ? y : 0;
  fontSize = fontSize !== undefined ? fontSize : 72;
  var commands;
  var hPoints;

  if (!options) {
    options = {};
  }

  var xScale = options.xScale;
  var yScale = options.yScale;

  if (options.hinting && font && font.hinting) {
    // in case of hinting, the hinting engine takes care
    // of scaling the points (not the path) before hinting.
    hPoints = this.path && font.hinting.exec(this, fontSize); // in case the hinting engine failed hPoints is undefined
    // and thus reverts to plain rending
  }

  if (hPoints) {
    // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency
    commands = font.hinting.getCommands(hPoints);
    x = Math.round(x);
    y = Math.round(y); // TODO in case of hinting xyScaling is not yet supported

    xScale = yScale = 1;
  } else {
    commands = this.path.commands;
    var scale = 1 / (this.path.unitsPerEm || 1000) * fontSize;

    if (xScale === undefined) {
      xScale = scale;
    }

    if (yScale === undefined) {
      yScale = scale;
    }
  }

  var p = new Path();

  for (var i = 0; i < commands.length; i += 1) {
    var cmd = commands[i];

    if (cmd.type === 'M') {
      p.moveTo(x + cmd.x * xScale, y + -cmd.y * yScale);
    } else if (cmd.type === 'L') {
      p.lineTo(x + cmd.x * xScale, y + -cmd.y * yScale);
    } else if (cmd.type === 'Q') {
      p.quadraticCurveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);
    } else if (cmd.type === 'C') {
      p.curveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x2 * xScale, y + -cmd.y2 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);
    } else if (cmd.type === 'Z') {
      p.closePath();
    }
  }

  return p;
};
/**
 * Split the glyph into contours.
 * This function is here for backwards compatibility, and to
 * provide raw access to the TrueType glyph outlines.
 * @return {Array}
 */


Glyph.prototype.getContours = function () {
  if (this.points === undefined) {
    return [];
  }

  var contours = [];
  var currentContour = [];

  for (var i = 0; i < this.points.length; i += 1) {
    var pt = this.points[i];
    currentContour.push(pt);

    if (pt.lastPointOfContour) {
      contours.push(currentContour);
      currentContour = [];
    }
  }

  check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
  return contours;
};
/**
 * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.
 * @return {Object}
 */


Glyph.prototype.getMetrics = function () {
  var commands = this.path.commands;
  var xCoords = [];
  var yCoords = [];

  for (var i = 0; i < commands.length; i += 1) {
    var cmd = commands[i];

    if (cmd.type !== 'Z') {
      xCoords.push(cmd.x);
      yCoords.push(cmd.y);
    }

    if (cmd.type === 'Q' || cmd.type === 'C') {
      xCoords.push(cmd.x1);
      yCoords.push(cmd.y1);
    }

    if (cmd.type === 'C') {
      xCoords.push(cmd.x2);
      yCoords.push(cmd.y2);
    }
  }

  var metrics = {
    xMin: Math.min.apply(null, xCoords),
    yMin: Math.min.apply(null, yCoords),
    xMax: Math.max.apply(null, xCoords),
    yMax: Math.max.apply(null, yCoords),
    leftSideBearing: this.leftSideBearing
  };

  if (!isFinite(metrics.xMin)) {
    metrics.xMin = 0;
  }

  if (!isFinite(metrics.xMax)) {
    metrics.xMax = this.advanceWidth;
  }

  if (!isFinite(metrics.yMin)) {
    metrics.yMin = 0;
  }

  if (!isFinite(metrics.yMax)) {
    metrics.yMax = 0;
  }

  metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);
  return metrics;
};
/**
 * Draw the glyph on the given context.
 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {Object=} options - xScale, yScale to stretch the glyph.
 */


Glyph.prototype.draw = function (ctx, x, y, fontSize, options) {
  this.getPath(x, y, fontSize, options).draw(ctx);
};
/**
 * Draw the points of the glyph.
 * On-curve points will be drawn in blue, off-curve points will be drawn in red.
 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 */


Glyph.prototype.drawPoints = function (ctx, x, y, fontSize) {
  function drawCircles(l, x, y, scale) {
    ctx.beginPath();

    for (var j = 0; j < l.length; j += 1) {
      ctx.moveTo(x + l[j].x * scale, y + l[j].y * scale);
      ctx.arc(x + l[j].x * scale, y + l[j].y * scale, 2, 0, Math.PI * 2, false);
    }

    ctx.closePath();
    ctx.fill();
  }

  x = x !== undefined ? x : 0;
  y = y !== undefined ? y : 0;
  fontSize = fontSize !== undefined ? fontSize : 24;
  var scale = 1 / this.path.unitsPerEm * fontSize;
  var blueCircles = [];
  var redCircles = [];
  var path = this.path;

  for (var i = 0; i < path.commands.length; i += 1) {
    var cmd = path.commands[i];

    if (cmd.x !== undefined) {
      blueCircles.push({
        x: cmd.x,
        y: -cmd.y
      });
    }

    if (cmd.x1 !== undefined) {
      redCircles.push({
        x: cmd.x1,
        y: -cmd.y1
      });
    }

    if (cmd.x2 !== undefined) {
      redCircles.push({
        x: cmd.x2,
        y: -cmd.y2
      });
    }
  }

  ctx.fillStyle = 'blue';
  drawCircles(blueCircles, x, y, scale);
  ctx.fillStyle = 'red';
  drawCircles(redCircles, x, y, scale);
};
/**
 * Draw lines indicating important font measurements.
 * Black lines indicate the origin of the coordinate system (point 0,0).
 * Blue lines indicate the glyph bounding box.
 * Green line indicates the advance width of the glyph.
 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 */


Glyph.prototype.drawMetrics = function (ctx, x, y, fontSize) {
  var scale;
  x = x !== undefined ? x : 0;
  y = y !== undefined ? y : 0;
  fontSize = fontSize !== undefined ? fontSize : 24;
  scale = 1 / this.path.unitsPerEm * fontSize;
  ctx.lineWidth = 1; // Draw the origin

  ctx.strokeStyle = 'black';
  draw.line(ctx, x, -10000, x, 10000);
  draw.line(ctx, -10000, y, 10000, y); // This code is here due to memory optimization: by not using
  // defaults in the constructor, we save a notable amount of memory.

  var xMin = this.xMin || 0;
  var yMin = this.yMin || 0;
  var xMax = this.xMax || 0;
  var yMax = this.yMax || 0;
  var advanceWidth = this.advanceWidth || 0; // Draw the glyph box

  ctx.strokeStyle = 'blue';
  draw.line(ctx, x + xMin * scale, -10000, x + xMin * scale, 10000);
  draw.line(ctx, x + xMax * scale, -10000, x + xMax * scale, 10000);
  draw.line(ctx, -10000, y + -yMin * scale, 10000, y + -yMin * scale);
  draw.line(ctx, -10000, y + -yMax * scale, 10000, y + -yMax * scale); // Draw the advance width

  ctx.strokeStyle = 'green';
  draw.line(ctx, x + advanceWidth * scale, -10000, x + advanceWidth * scale, 10000);
}; // The GlyphSet object
// Define a property on the glyph that depends on the path being loaded.


function defineDependentProperty(glyph, externalName, internalName) {
  Object.defineProperty(glyph, externalName, {
    get: function () {
      // Request the path property to make sure the path is loaded.
      glyph.path; // jshint ignore:line

      return glyph[internalName];
    },
    set: function (newValue) {
      glyph[internalName] = newValue;
    },
    enumerable: true,
    configurable: true
  });
}
/**
 * A GlyphSet represents all glyphs available in the font, but modelled using
 * a deferred glyph loader, for retrieving glyphs only once they are absolutely
 * necessary, to keep the memory footprint down.
 * @exports opentype.GlyphSet
 * @class
 * @param {opentype.Font}
 * @param {Array}
 */


function GlyphSet(font, glyphs) {
  this.font = font;
  this.glyphs = {};

  if (Array.isArray(glyphs)) {
    for (var i = 0; i < glyphs.length; i++) {
      var glyph = glyphs[i];
      glyph.path.unitsPerEm = font.unitsPerEm;
      this.glyphs[i] = glyph;
    }
  }

  this.length = glyphs && glyphs.length || 0;
}
/**
 * @param  {number} index
 * @return {opentype.Glyph}
 */


GlyphSet.prototype.get = function (index) {
  // this.glyphs[index] is 'undefined' when low memory mode is on. glyph is pushed on request only.
  if (this.glyphs[index] === undefined) {
    this.font._push(index);

    if (typeof this.glyphs[index] === 'function') {
      this.glyphs[index] = this.glyphs[index]();
    }

    var glyph = this.glyphs[index];
    var unicodeObj = this.font._IndexToUnicodeMap[index];

    if (unicodeObj) {
      for (var j = 0; j < unicodeObj.unicodes.length; j++) {
        glyph.addUnicode(unicodeObj.unicodes[j]);
      }
    }

    if (this.font.cffEncoding) {
      if (this.font.isCIDFont) {
        glyph.name = 'gid' + index;
      } else {
        glyph.name = this.font.cffEncoding.charset[index];
      }
    } else if (this.font.glyphNames.names) {
      glyph.name = this.font.glyphNames.glyphIndexToName(index);
    }

    this.glyphs[index].advanceWidth = this.font._hmtxTableData[index].advanceWidth;
    this.glyphs[index].leftSideBearing = this.font._hmtxTableData[index].leftSideBearing;
  } else {
    if (typeof this.glyphs[index] === 'function') {
      this.glyphs[index] = this.glyphs[index]();
    }
  }

  return this.glyphs[index];
};
/**
 * @param  {number} index
 * @param  {Object}
 */


GlyphSet.prototype.push = function (index, loader) {
  this.glyphs[index] = loader;
  this.length++;
};
/**
 * @alias opentype.glyphLoader
 * @param  {opentype.Font} font
 * @param  {number} index
 * @return {opentype.Glyph}
 */


function glyphLoader(font, index) {
  return new Glyph({
    index: index,
    font: font
  });
}
/**
 * Generate a stub glyph that can be filled with all metadata *except*
 * the "points" and "path" properties, which must be loaded only once
 * the glyph's path is actually requested for text shaping.
 * @alias opentype.ttfGlyphLoader
 * @param  {opentype.Font} font
 * @param  {number} index
 * @param  {Function} parseGlyph
 * @param  {Object} data
 * @param  {number} position
 * @param  {Function} buildPath
 * @return {opentype.Glyph}
 */


function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {
  return function () {
    var glyph = new Glyph({
      index: index,
      font: font
    });

    glyph.path = function () {
      parseGlyph(glyph, data, position);
      var path = buildPath(font.glyphs, glyph);
      path.unitsPerEm = font.unitsPerEm;
      return path;
    };

    defineDependentProperty(glyph, 'xMin', '_xMin');
    defineDependentProperty(glyph, 'xMax', '_xMax');
    defineDependentProperty(glyph, 'yMin', '_yMin');
    defineDependentProperty(glyph, 'yMax', '_yMax');
    return glyph;
  };
}
/**
 * @alias opentype.cffGlyphLoader
 * @param  {opentype.Font} font
 * @param  {number} index
 * @param  {Function} parseCFFCharstring
 * @param  {string} charstring
 * @return {opentype.Glyph}
 */


function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {
  return function () {
    var glyph = new Glyph({
      index: index,
      font: font
    });

    glyph.path = function () {
      var path = parseCFFCharstring(font, glyph, charstring);
      path.unitsPerEm = font.unitsPerEm;
      return path;
    };

    return glyph;
  };
}

var glyphset = {
  GlyphSet: GlyphSet,
  glyphLoader: glyphLoader,
  ttfGlyphLoader: ttfGlyphLoader,
  cffGlyphLoader: cffGlyphLoader
}; // The `CFF` table contains the glyph outlines in PostScript format.
// Custom equals function that can also check lists.

function equals(a, b) {
  if (a === b) {
    return true;
  } else if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) {
      return false;
    }

    for (var i = 0; i < a.length; i += 1) {
      if (!equals(a[i], b[i])) {
        return false;
      }
    }

    return true;
  } else {
    return false;
  }
} // Subroutines are encoded using the negative half of the number space.
// See type 2 chapter 4.7 "Subroutine operators".


function calcCFFSubroutineBias(subrs) {
  var bias;

  if (subrs.length < 1240) {
    bias = 107;
  } else if (subrs.length < 33900) {
    bias = 1131;
  } else {
    bias = 32768;
  }

  return bias;
} // Parse a `CFF` INDEX array.
// An index array consists of a list of offsets, then a list of objects at those offsets.


function parseCFFIndex(data, start, conversionFn) {
  var offsets = [];
  var objects = [];
  var count = parse.getCard16(data, start);
  var objectOffset;
  var endOffset;

  if (count !== 0) {
    var offsetSize = parse.getByte(data, start + 2);
    objectOffset = start + (count + 1) * offsetSize + 2;
    var pos = start + 3;

    for (var i = 0; i < count + 1; i += 1) {
      offsets.push(parse.getOffset(data, pos, offsetSize));
      pos += offsetSize;
    } // The total size of the index array is 4 header bytes + the value of the last offset.


    endOffset = objectOffset + offsets[count];
  } else {
    endOffset = start + 2;
  }

  for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {
    var value = parse.getBytes(data, objectOffset + offsets[i$1], objectOffset + offsets[i$1 + 1]);

    if (conversionFn) {
      value = conversionFn(value);
    }

    objects.push(value);
  }

  return {
    objects: objects,
    startOffset: start,
    endOffset: endOffset
  };
}

function parseCFFIndexLowMemory(data, start) {
  var offsets = [];
  var count = parse.getCard16(data, start);
  var objectOffset;
  var endOffset;

  if (count !== 0) {
    var offsetSize = parse.getByte(data, start + 2);
    objectOffset = start + (count + 1) * offsetSize + 2;
    var pos = start + 3;

    for (var i = 0; i < count + 1; i += 1) {
      offsets.push(parse.getOffset(data, pos, offsetSize));
      pos += offsetSize;
    } // The total size of the index array is 4 header bytes + the value of the last offset.


    endOffset = objectOffset + offsets[count];
  } else {
    endOffset = start + 2;
  }

  return {
    offsets: offsets,
    startOffset: start,
    endOffset: endOffset
  };
}

function getCffIndexObject(i, offsets, data, start, conversionFn) {
  var count = parse.getCard16(data, start);
  var objectOffset = 0;

  if (count !== 0) {
    var offsetSize = parse.getByte(data, start + 2);
    objectOffset = start + (count + 1) * offsetSize + 2;
  }

  var value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);

  if (conversionFn) {
    value = conversionFn(value);
  }

  return value;
} // Parse a `CFF` DICT real value.


function parseFloatOperand(parser) {
  var s = '';
  var eof = 15;
  var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];

  while (true) {
    var b = parser.parseByte();
    var n1 = b >> 4;
    var n2 = b & 15;

    if (n1 === eof) {
      break;
    }

    s += lookup[n1];

    if (n2 === eof) {
      break;
    }

    s += lookup[n2];
  }

  return parseFloat(s);
} // Parse a `CFF` DICT operand.


function parseOperand(parser, b0) {
  var b1;
  var b2;
  var b3;
  var b4;

  if (b0 === 28) {
    b1 = parser.parseByte();
    b2 = parser.parseByte();
    return b1 << 8 | b2;
  }

  if (b0 === 29) {
    b1 = parser.parseByte();
    b2 = parser.parseByte();
    b3 = parser.parseByte();
    b4 = parser.parseByte();
    return b1 << 24 | b2 << 16 | b3 << 8 | b4;
  }

  if (b0 === 30) {
    return parseFloatOperand(parser);
  }

  if (b0 >= 32 && b0 <= 246) {
    return b0 - 139;
  }

  if (b0 >= 247 && b0 <= 250) {
    b1 = parser.parseByte();
    return (b0 - 247) * 256 + b1 + 108;
  }

  if (b0 >= 251 && b0 <= 254) {
    b1 = parser.parseByte();
    return -(b0 - 251) * 256 - b1 - 108;
  }

  throw new Error('Invalid b0 ' + b0);
} // Convert the entries returned by `parseDict` to a proper dictionary.
// If a value is a list of one, it is unpacked.


function entriesToObject(entries) {
  var o = {};

  for (var i = 0; i < entries.length; i += 1) {
    var key = entries[i][0];
    var values = entries[i][1];
    var value = void 0;

    if (values.length === 1) {
      value = values[0];
    } else {
      value = values;
    }

    if (o.hasOwnProperty(key) && !isNaN(o[key])) {
      throw new Error('Object ' + o + ' already has key ' + key);
    }

    o[key] = value;
  }

  return o;
} // Parse a `CFF` DICT object.
// A dictionary contains key-value pairs in a compact tokenized format.


function parseCFFDict(data, start, size) {
  start = start !== undefined ? start : 0;
  var parser = new parse.Parser(data, start);
  var entries = [];
  var operands = [];
  size = size !== undefined ? size : data.length;

  while (parser.relativeOffset < size) {
    var op = parser.parseByte(); // The first byte for each dict item distinguishes between operator (key) and operand (value).
    // Values <= 21 are operators.

    if (op <= 21) {
      // Two-byte operators have an initial escape byte of 12.
      if (op === 12) {
        op = 1200 + parser.parseByte();
      }

      entries.push([op, operands]);
      operands = [];
    } else {
      // Since the operands (values) come before the operators (keys), we store all operands in a list
      // until we encounter an operator.
      operands.push(parseOperand(parser, op));
    }
  }

  return entriesToObject(entries);
} // Given a String Index (SID), return the value of the string.
// Strings below index 392 are standard CFF strings and are not encoded in the font.


function getCFFString(strings, index) {
  if (index <= 390) {
    index = cffStandardStrings[index];
  } else {
    index = strings[index - 391];
  }

  return index;
} // Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.
// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.


function interpretDict(dict, meta, strings) {
  var newDict = {};
  var value; // Because we also want to include missing values, we start out from the meta list
  // and lookup values in the dict.

  for (var i = 0; i < meta.length; i += 1) {
    var m = meta[i];

    if (Array.isArray(m.type)) {
      var values = [];
      values.length = m.type.length;

      for (var j = 0; j < m.type.length; j++) {
        value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;

        if (value === undefined) {
          value = m.value !== undefined && m.value[j] !== undefined ? m.value[j] : null;
        }

        if (m.type[j] === 'SID') {
          value = getCFFString(strings, value);
        }

        values[j] = value;
      }

      newDict[m.name] = values;
    } else {
      value = dict[m.op];

      if (value === undefined) {
        value = m.value !== undefined ? m.value : null;
      }

      if (m.type === 'SID') {
        value = getCFFString(strings, value);
      }

      newDict[m.name] = value;
    }
  }

  return newDict;
} // Parse the CFF header.


function parseCFFHeader(data, start) {
  var header = {};
  header.formatMajor = parse.getCard8(data, start);
  header.formatMinor = parse.getCard8(data, start + 1);
  header.size = parse.getCard8(data, start + 2);
  header.offsetSize = parse.getCard8(data, start + 3);
  header.startOffset = start;
  header.endOffset = start + 4;
  return header;
}

var TOP_DICT_META = [{
  name: 'version',
  op: 0,
  type: 'SID'
}, {
  name: 'notice',
  op: 1,
  type: 'SID'
}, {
  name: 'copyright',
  op: 1200,
  type: 'SID'
}, {
  name: 'fullName',
  op: 2,
  type: 'SID'
}, {
  name: 'familyName',
  op: 3,
  type: 'SID'
}, {
  name: 'weight',
  op: 4,
  type: 'SID'
}, {
  name: 'isFixedPitch',
  op: 1201,
  type: 'number',
  value: 0
}, {
  name: 'italicAngle',
  op: 1202,
  type: 'number',
  value: 0
}, {
  name: 'underlinePosition',
  op: 1203,
  type: 'number',
  value: -100
}, {
  name: 'underlineThickness',
  op: 1204,
  type: 'number',
  value: 50
}, {
  name: 'paintType',
  op: 1205,
  type: 'number',
  value: 0
}, {
  name: 'charstringType',
  op: 1206,
  type: 'number',
  value: 2
}, {
  name: 'fontMatrix',
  op: 1207,
  type: ['real', 'real', 'real', 'real', 'real', 'real'],
  value: [0.001, 0, 0, 0.001, 0, 0]
}, {
  name: 'uniqueId',
  op: 13,
  type: 'number'
}, {
  name: 'fontBBox',
  op: 5,
  type: ['number', 'number', 'number', 'number'],
  value: [0, 0, 0, 0]
}, {
  name: 'strokeWidth',
  op: 1208,
  type: 'number',
  value: 0
}, {
  name: 'xuid',
  op: 14,
  type: [],
  value: null
}, {
  name: 'charset',
  op: 15,
  type: 'offset',
  value: 0
}, {
  name: 'encoding',
  op: 16,
  type: 'offset',
  value: 0
}, {
  name: 'charStrings',
  op: 17,
  type: 'offset',
  value: 0
}, {
  name: 'private',
  op: 18,
  type: ['number', 'offset'],
  value: [0, 0]
}, {
  name: 'ros',
  op: 1230,
  type: ['SID', 'SID', 'number']
}, {
  name: 'cidFontVersion',
  op: 1231,
  type: 'number',
  value: 0
}, {
  name: 'cidFontRevision',
  op: 1232,
  type: 'number',
  value: 0
}, {
  name: 'cidFontType',
  op: 1233,
  type: 'number',
  value: 0
}, {
  name: 'cidCount',
  op: 1234,
  type: 'number',
  value: 8720
}, {
  name: 'uidBase',
  op: 1235,
  type: 'number'
}, {
  name: 'fdArray',
  op: 1236,
  type: 'offset'
}, {
  name: 'fdSelect',
  op: 1237,
  type: 'offset'
}, {
  name: 'fontName',
  op: 1238,
  type: 'SID'
}];
var PRIVATE_DICT_META = [{
  name: 'subrs',
  op: 19,
  type: 'offset',
  value: 0
}, {
  name: 'defaultWidthX',
  op: 20,
  type: 'number',
  value: 0
}, {
  name: 'nominalWidthX',
  op: 21,
  type: 'number',
  value: 0
}]; // Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.
// The top dictionary contains the essential metadata for the font, together with the private dictionary.

function parseCFFTopDict(data, strings) {
  var dict = parseCFFDict(data, 0, data.byteLength);
  return interpretDict(dict, TOP_DICT_META, strings);
} // Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.


function parseCFFPrivateDict(data, start, size, strings) {
  var dict = parseCFFDict(data, start, size);
  return interpretDict(dict, PRIVATE_DICT_META, strings);
} // Returns a list of "Top DICT"s found using an INDEX list.
// Used to read both the usual high-level Top DICTs and also the FDArray
// discovered inside CID-keyed fonts.  When a Top DICT has a reference to
// a Private DICT that is read and saved into the Top DICT.
//
// In addition to the expected/optional values as outlined in TOP_DICT_META
// the following values might be saved into the Top DICT.
//
//    _subrs []        array of local CFF subroutines from Private DICT
//    _subrsBias       bias value computed from number of subroutines
//                      (see calcCFFSubroutineBias() and parseCFFCharstring())
//    _defaultWidthX   default widths for CFF characters
//    _nominalWidthX   bias added to width embedded within glyph description
//
//    _privateDict     saved copy of parsed Private DICT from Top DICT


function gatherCFFTopDicts(data, start, cffIndex, strings) {
  var topDictArray = [];

  for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {
    var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);
    var topDict = parseCFFTopDict(topDictData, strings);
    topDict._subrs = [];
    topDict._subrsBias = 0;
    var privateSize = topDict.private[0];
    var privateOffset = topDict.private[1];

    if (privateSize !== 0 && privateOffset !== 0) {
      var privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);
      topDict._defaultWidthX = privateDict.defaultWidthX;
      topDict._nominalWidthX = privateDict.nominalWidthX;

      if (privateDict.subrs !== 0) {
        var subrOffset = privateOffset + privateDict.subrs;
        var subrIndex = parseCFFIndex(data, subrOffset + start);
        topDict._subrs = subrIndex.objects;
        topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);
      }

      topDict._privateDict = privateDict;
    }

    topDictArray.push(topDict);
  }

  return topDictArray;
} // Parse the CFF charset table, which contains internal names for all the glyphs.
// This function will return a list of glyph names.
// See Adobe TN #5176 chapter 13, "Charsets".


function parseCFFCharset(data, start, nGlyphs, strings) {
  var sid;
  var count;
  var parser = new parse.Parser(data, start); // The .notdef glyph is not included, so subtract 1.

  nGlyphs -= 1;
  var charset = ['.notdef'];
  var format = parser.parseCard8();

  if (format === 0) {
    for (var i = 0; i < nGlyphs; i += 1) {
      sid = parser.parseSID();
      charset.push(getCFFString(strings, sid));
    }
  } else if (format === 1) {
    while (charset.length <= nGlyphs) {
      sid = parser.parseSID();
      count = parser.parseCard8();

      for (var i$1 = 0; i$1 <= count; i$1 += 1) {
        charset.push(getCFFString(strings, sid));
        sid += 1;
      }
    }
  } else if (format === 2) {
    while (charset.length <= nGlyphs) {
      sid = parser.parseSID();
      count = parser.parseCard16();

      for (var i$2 = 0; i$2 <= count; i$2 += 1) {
        charset.push(getCFFString(strings, sid));
        sid += 1;
      }
    }
  } else {
    throw new Error('Unknown charset format ' + format);
  }

  return charset;
} // Parse the CFF encoding data. Only one encoding can be specified per font.
// See Adobe TN #5176 chapter 12, "Encodings".


function parseCFFEncoding(data, start, charset) {
  var code;
  var enc = {};
  var parser = new parse.Parser(data, start);
  var format = parser.parseCard8();

  if (format === 0) {
    var nCodes = parser.parseCard8();

    for (var i = 0; i < nCodes; i += 1) {
      code = parser.parseCard8();
      enc[code] = i;
    }
  } else if (format === 1) {
    var nRanges = parser.parseCard8();
    code = 1;

    for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {
      var first = parser.parseCard8();
      var nLeft = parser.parseCard8();

      for (var j = first; j <= first + nLeft; j += 1) {
        enc[j] = code;
        code += 1;
      }
    }
  } else {
    throw new Error('Unknown encoding format ' + format);
  }

  return new CffEncoding(enc, charset);
} // Take in charstring code and return a Glyph object.
// The encoding is described in the Type 2 Charstring Format
// https://www.microsoft.com/typography/OTSPEC/charstr2.htm


function parseCFFCharstring(font, glyph, code) {
  var c1x;
  var c1y;
  var c2x;
  var c2y;
  var p = new Path();
  var stack = [];
  var nStems = 0;
  var haveWidth = false;
  var open = false;
  var x = 0;
  var y = 0;
  var subrs;
  var subrsBias;
  var defaultWidthX;
  var nominalWidthX;

  if (font.isCIDFont) {
    var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];
    var fdDict = font.tables.cff.topDict._fdArray[fdIndex];
    subrs = fdDict._subrs;
    subrsBias = fdDict._subrsBias;
    defaultWidthX = fdDict._defaultWidthX;
    nominalWidthX = fdDict._nominalWidthX;
  } else {
    subrs = font.tables.cff.topDict._subrs;
    subrsBias = font.tables.cff.topDict._subrsBias;
    defaultWidthX = font.tables.cff.topDict._defaultWidthX;
    nominalWidthX = font.tables.cff.topDict._nominalWidthX;
  }

  var width = defaultWidthX;

  function newContour(x, y) {
    if (open) {
      p.closePath();
    }

    p.moveTo(x, y);
    open = true;
  }

  function parseStems() {
    var hasWidthArg; // The number of stem operators on the stack is always even.
    // If the value is uneven, that means a width is specified.

    hasWidthArg = stack.length % 2 !== 0;

    if (hasWidthArg && !haveWidth) {
      width = stack.shift() + nominalWidthX;
    }

    nStems += stack.length >> 1;
    stack.length = 0;
    haveWidth = true;
  }

  function parse(code) {
    var b1;
    var b2;
    var b3;
    var b4;
    var codeIndex;
    var subrCode;
    var jpx;
    var jpy;
    var c3x;
    var c3y;
    var c4x;
    var c4y;
    var i = 0;

    while (i < code.length) {
      var v = code[i];
      i += 1;

      switch (v) {
        case 1:
          // hstem
          parseStems();
          break;

        case 3:
          // vstem
          parseStems();
          break;

        case 4:
          // vmoveto
          if (stack.length > 1 && !haveWidth) {
            width = stack.shift() + nominalWidthX;
            haveWidth = true;
          }

          y += stack.pop();
          newContour(x, y);
          break;

        case 5:
          // rlineto
          while (stack.length > 0) {
            x += stack.shift();
            y += stack.shift();
            p.lineTo(x, y);
          }

          break;

        case 6:
          // hlineto
          while (stack.length > 0) {
            x += stack.shift();
            p.lineTo(x, y);

            if (stack.length === 0) {
              break;
            }

            y += stack.shift();
            p.lineTo(x, y);
          }

          break;

        case 7:
          // vlineto
          while (stack.length > 0) {
            y += stack.shift();
            p.lineTo(x, y);

            if (stack.length === 0) {
              break;
            }

            x += stack.shift();
            p.lineTo(x, y);
          }

          break;

        case 8:
          // rrcurveto
          while (stack.length > 0) {
            c1x = x + stack.shift();
            c1y = y + stack.shift();
            c2x = c1x + stack.shift();
            c2y = c1y + stack.shift();
            x = c2x + stack.shift();
            y = c2y + stack.shift();
            p.curveTo(c1x, c1y, c2x, c2y, x, y);
          }

          break;

        case 10:
          // callsubr
          codeIndex = stack.pop() + subrsBias;
          subrCode = subrs[codeIndex];

          if (subrCode) {
            parse(subrCode);
          }

          break;

        case 11:
          // return
          return;

        case 12:
          // flex operators
          v = code[i];
          i += 1;

          switch (v) {
            case 35:
              // flex
              // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-
              c1x = x + stack.shift(); // dx1

              c1y = y + stack.shift(); // dy1

              c2x = c1x + stack.shift(); // dx2

              c2y = c1y + stack.shift(); // dy2

              jpx = c2x + stack.shift(); // dx3

              jpy = c2y + stack.shift(); // dy3

              c3x = jpx + stack.shift(); // dx4

              c3y = jpy + stack.shift(); // dy4

              c4x = c3x + stack.shift(); // dx5

              c4y = c3y + stack.shift(); // dy5

              x = c4x + stack.shift(); // dx6

              y = c4y + stack.shift(); // dy6

              stack.shift(); // flex depth

              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
              p.curveTo(c3x, c3y, c4x, c4y, x, y);
              break;

            case 34:
              // hflex
              // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-
              c1x = x + stack.shift(); // dx1

              c1y = y; // dy1

              c2x = c1x + stack.shift(); // dx2

              c2y = c1y + stack.shift(); // dy2

              jpx = c2x + stack.shift(); // dx3

              jpy = c2y; // dy3

              c3x = jpx + stack.shift(); // dx4

              c3y = c2y; // dy4

              c4x = c3x + stack.shift(); // dx5

              c4y = y; // dy5

              x = c4x + stack.shift(); // dx6

              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
              p.curveTo(c3x, c3y, c4x, c4y, x, y);
              break;

            case 36:
              // hflex1
              // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-
              c1x = x + stack.shift(); // dx1

              c1y = y + stack.shift(); // dy1

              c2x = c1x + stack.shift(); // dx2

              c2y = c1y + stack.shift(); // dy2

              jpx = c2x + stack.shift(); // dx3

              jpy = c2y; // dy3

              c3x = jpx + stack.shift(); // dx4

              c3y = c2y; // dy4

              c4x = c3x + stack.shift(); // dx5

              c4y = c3y + stack.shift(); // dy5

              x = c4x + stack.shift(); // dx6

              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
              p.curveTo(c3x, c3y, c4x, c4y, x, y);
              break;

            case 37:
              // flex1
              // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-
              c1x = x + stack.shift(); // dx1

              c1y = y + stack.shift(); // dy1

              c2x = c1x + stack.shift(); // dx2

              c2y = c1y + stack.shift(); // dy2

              jpx = c2x + stack.shift(); // dx3

              jpy = c2y + stack.shift(); // dy3

              c3x = jpx + stack.shift(); // dx4

              c3y = jpy + stack.shift(); // dy4

              c4x = c3x + stack.shift(); // dx5

              c4y = c3y + stack.shift(); // dy5

              if (Math.abs(c4x - x) > Math.abs(c4y - y)) {
                x = c4x + stack.shift();
              } else {
                y = c4y + stack.shift();
              }

              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
              p.curveTo(c3x, c3y, c4x, c4y, x, y);
              break;

            default:
              console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);
              stack.length = 0;
          }

          break;

        case 14:
          // endchar
          if (stack.length > 0 && !haveWidth) {
            width = stack.shift() + nominalWidthX;
            haveWidth = true;
          }

          if (open) {
            p.closePath();
            open = false;
          }

          break;

        case 18:
          // hstemhm
          parseStems();
          break;

        case 19: // hintmask

        case 20:
          // cntrmask
          parseStems();
          i += nStems + 7 >> 3;
          break;

        case 21:
          // rmoveto
          if (stack.length > 2 && !haveWidth) {
            width = stack.shift() + nominalWidthX;
            haveWidth = true;
          }

          y += stack.pop();
          x += stack.pop();
          newContour(x, y);
          break;

        case 22:
          // hmoveto
          if (stack.length > 1 && !haveWidth) {
            width = stack.shift() + nominalWidthX;
            haveWidth = true;
          }

          x += stack.pop();
          newContour(x, y);
          break;

        case 23:
          // vstemhm
          parseStems();
          break;

        case 24:
          // rcurveline
          while (stack.length > 2) {
            c1x = x + stack.shift();
            c1y = y + stack.shift();
            c2x = c1x + stack.shift();
            c2y = c1y + stack.shift();
            x = c2x + stack.shift();
            y = c2y + stack.shift();
            p.curveTo(c1x, c1y, c2x, c2y, x, y);
          }

          x += stack.shift();
          y += stack.shift();
          p.lineTo(x, y);
          break;

        case 25:
          // rlinecurve
          while (stack.length > 6) {
            x += stack.shift();
            y += stack.shift();
            p.lineTo(x, y);
          }

          c1x = x + stack.shift();
          c1y = y + stack.shift();
          c2x = c1x + stack.shift();
          c2y = c1y + stack.shift();
          x = c2x + stack.shift();
          y = c2y + stack.shift();
          p.curveTo(c1x, c1y, c2x, c2y, x, y);
          break;

        case 26:
          // vvcurveto
          if (stack.length % 2) {
            x += stack.shift();
          }

          while (stack.length > 0) {
            c1x = x;
            c1y = y + stack.shift();
            c2x = c1x + stack.shift();
            c2y = c1y + stack.shift();
            x = c2x;
            y = c2y + stack.shift();
            p.curveTo(c1x, c1y, c2x, c2y, x, y);
          }

          break;

        case 27:
          // hhcurveto
          if (stack.length % 2) {
            y += stack.shift();
          }

          while (stack.length > 0) {
            c1x = x + stack.shift();
            c1y = y;
            c2x = c1x + stack.shift();
            c2y = c1y + stack.shift();
            x = c2x + stack.shift();
            y = c2y;
            p.curveTo(c1x, c1y, c2x, c2y, x, y);
          }

          break;

        case 28:
          // shortint
          b1 = code[i];
          b2 = code[i + 1];
          stack.push((b1 << 24 | b2 << 16) >> 16);
          i += 2;
          break;

        case 29:
          // callgsubr
          codeIndex = stack.pop() + font.gsubrsBias;
          subrCode = font.gsubrs[codeIndex];

          if (subrCode) {
            parse(subrCode);
          }

          break;

        case 30:
          // vhcurveto
          while (stack.length > 0) {
            c1x = x;
            c1y = y + stack.shift();
            c2x = c1x + stack.shift();
            c2y = c1y + stack.shift();
            x = c2x + stack.shift();
            y = c2y + (stack.length === 1 ? stack.shift() : 0);
            p.curveTo(c1x, c1y, c2x, c2y, x, y);

            if (stack.length === 0) {
              break;
            }

            c1x = x + stack.shift();
            c1y = y;
            c2x = c1x + stack.shift();
            c2y = c1y + stack.shift();
            y = c2y + stack.shift();
            x = c2x + (stack.length === 1 ? stack.shift() : 0);
            p.curveTo(c1x, c1y, c2x, c2y, x, y);
          }

          break;

        case 31:
          // hvcurveto
          while (stack.length > 0) {
            c1x = x + stack.shift();
            c1y = y;
            c2x = c1x + stack.shift();
            c2y = c1y + stack.shift();
            y = c2y + stack.shift();
            x = c2x + (stack.length === 1 ? stack.shift() : 0);
            p.curveTo(c1x, c1y, c2x, c2y, x, y);

            if (stack.length === 0) {
              break;
            }

            c1x = x;
            c1y = y + stack.shift();
            c2x = c1x + stack.shift();
            c2y = c1y + stack.shift();
            x = c2x + stack.shift();
            y = c2y + (stack.length === 1 ? stack.shift() : 0);
            p.curveTo(c1x, c1y, c2x, c2y, x, y);
          }

          break;

        default:
          if (v < 32) {
            console.log('Glyph ' + glyph.index + ': unknown operator ' + v);
          } else if (v < 247) {
            stack.push(v - 139);
          } else if (v < 251) {
            b1 = code[i];
            i += 1;
            stack.push((v - 247) * 256 + b1 + 108);
          } else if (v < 255) {
            b1 = code[i];
            i += 1;
            stack.push(-(v - 251) * 256 - b1 - 108);
          } else {
            b1 = code[i];
            b2 = code[i + 1];
            b3 = code[i + 2];
            b4 = code[i + 3];
            i += 4;
            stack.push((b1 << 24 | b2 << 16 | b3 << 8 | b4) / 65536);
          }

      }
    }
  }

  parse(code);
  glyph.advanceWidth = width;
  return p;
}

function parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {
  var fdSelect = [];
  var fdIndex;
  var parser = new parse.Parser(data, start);
  var format = parser.parseCard8();

  if (format === 0) {
    // Simple list of nGlyphs elements
    for (var iGid = 0; iGid < nGlyphs; iGid++) {
      fdIndex = parser.parseCard8();

      if (fdIndex >= fdArrayCount) {
        throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
      }

      fdSelect.push(fdIndex);
    }
  } else if (format === 3) {
    // Ranges
    var nRanges = parser.parseCard16();
    var first = parser.parseCard16();

    if (first !== 0) {
      throw new Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + first);
    }

    var next;

    for (var iRange = 0; iRange < nRanges; iRange++) {
      fdIndex = parser.parseCard8();
      next = parser.parseCard16();

      if (fdIndex >= fdArrayCount) {
        throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
      }

      if (next > nGlyphs) {
        throw new Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + next);
      }

      for (; first < next; first++) {
        fdSelect.push(fdIndex);
      }

      first = next;
    }

    if (next !== nGlyphs) {
      throw new Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + next);
    }
  } else {
    throw new Error('CFF Table CID Font FDSelect table has unsupported format ' + format);
  }

  return fdSelect;
} // Parse the `CFF` table, which contains the glyph outlines in PostScript format.


function parseCFFTable(data, start, font, opt) {
  font.tables.cff = {};
  var header = parseCFFHeader(data, start);
  var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);
  var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);
  var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);
  var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);
  font.gsubrs = globalSubrIndex.objects;
  font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);
  var topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);

  if (topDictArray.length !== 1) {
    throw new Error('CFF table has too many fonts in \'FontSet\' - count of fonts NameIndex.length = ' + topDictArray.length);
  }

  var topDict = topDictArray[0];
  font.tables.cff.topDict = topDict;

  if (topDict._privateDict) {
    font.defaultWidthX = topDict._privateDict.defaultWidthX;
    font.nominalWidthX = topDict._privateDict.nominalWidthX;
  }

  if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {
    font.isCIDFont = true;
  }

  if (font.isCIDFont) {
    var fdArrayOffset = topDict.fdArray;
    var fdSelectOffset = topDict.fdSelect;

    if (fdArrayOffset === 0 || fdSelectOffset === 0) {
      throw new Error('Font is marked as a CID font, but FDArray and/or FDSelect information is missing');
    }

    fdArrayOffset += start;
    var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);
    var fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);
    topDict._fdArray = fdArray;
    fdSelectOffset += start;
    topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);
  }

  var privateDictOffset = start + topDict.private[1];
  var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);
  font.defaultWidthX = privateDict.defaultWidthX;
  font.nominalWidthX = privateDict.nominalWidthX;

  if (privateDict.subrs !== 0) {
    var subrOffset = privateDictOffset + privateDict.subrs;
    var subrIndex = parseCFFIndex(data, subrOffset);
    font.subrs = subrIndex.objects;
    font.subrsBias = calcCFFSubroutineBias(font.subrs);
  } else {
    font.subrs = [];
    font.subrsBias = 0;
  } // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.


  var charStringsIndex;

  if (opt.lowMemory) {
    charStringsIndex = parseCFFIndexLowMemory(data, start + topDict.charStrings);
    font.nGlyphs = charStringsIndex.offsets.length;
  } else {
    charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);
    font.nGlyphs = charStringsIndex.objects.length;
  }

  var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);

  if (topDict.encoding === 0) {
    // Standard encoding
    font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);
  } else if (topDict.encoding === 1) {
    // Expert encoding
    font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);
  } else {
    font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);
  } // Prefer the CMAP encoding to the CFF encoding.


  font.encoding = font.encoding || font.cffEncoding;
  font.glyphs = new glyphset.GlyphSet(font);

  if (opt.lowMemory) {
    font._push = function (i) {
      var charString = getCffIndexObject(i, charStringsIndex.offsets, data, start + topDict.charStrings);
      font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));
    };
  } else {
    for (var i = 0; i < font.nGlyphs; i += 1) {
      var charString = charStringsIndex.objects[i];
      font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));
    }
  }
} // Convert a string to a String ID (SID).
// The list of strings is modified in place.


function encodeString(s, strings) {
  var sid; // Is the string in the CFF standard strings?

  var i = cffStandardStrings.indexOf(s);

  if (i >= 0) {
    sid = i;
  } // Is the string already in the string index?


  i = strings.indexOf(s);

  if (i >= 0) {
    sid = i + cffStandardStrings.length;
  } else {
    sid = cffStandardStrings.length + strings.length;
    strings.push(s);
  }

  return sid;
}

function makeHeader() {
  return new table.Record('Header', [{
    name: 'major',
    type: 'Card8',
    value: 1
  }, {
    name: 'minor',
    type: 'Card8',
    value: 0
  }, {
    name: 'hdrSize',
    type: 'Card8',
    value: 4
  }, {
    name: 'major',
    type: 'Card8',
    value: 1
  }]);
}

function makeNameIndex(fontNames) {
  var t = new table.Record('Name INDEX', [{
    name: 'names',
    type: 'INDEX',
    value: []
  }]);
  t.names = [];

  for (var i = 0; i < fontNames.length; i += 1) {
    t.names.push({
      name: 'name_' + i,
      type: 'NAME',
      value: fontNames[i]
    });
  }

  return t;
} // Given a dictionary's metadata, create a DICT structure.


function makeDict(meta, attrs, strings) {
  var m = {};

  for (var i = 0; i < meta.length; i += 1) {
    var entry = meta[i];
    var value = attrs[entry.name];

    if (value !== undefined && !equals(value, entry.value)) {
      if (entry.type === 'SID') {
        value = encodeString(value, strings);
      }

      m[entry.op] = {
        name: entry.name,
        type: entry.type,
        value: value
      };
    }
  }

  return m;
} // The Top DICT houses the global font attributes.


function makeTopDict(attrs, strings) {
  var t = new table.Record('Top DICT', [{
    name: 'dict',
    type: 'DICT',
    value: {}
  }]);
  t.dict = makeDict(TOP_DICT_META, attrs, strings);
  return t;
}

function makeTopDictIndex(topDict) {
  var t = new table.Record('Top DICT INDEX', [{
    name: 'topDicts',
    type: 'INDEX',
    value: []
  }]);
  t.topDicts = [{
    name: 'topDict_0',
    type: 'TABLE',
    value: topDict
  }];
  return t;
}

function makeStringIndex(strings) {
  var t = new table.Record('String INDEX', [{
    name: 'strings',
    type: 'INDEX',
    value: []
  }]);
  t.strings = [];

  for (var i = 0; i < strings.length; i += 1) {
    t.strings.push({
      name: 'string_' + i,
      type: 'STRING',
      value: strings[i]
    });
  }

  return t;
}

function makeGlobalSubrIndex() {
  // Currently we don't use subroutines.
  return new table.Record('Global Subr INDEX', [{
    name: 'subrs',
    type: 'INDEX',
    value: []
  }]);
}

function makeCharsets(glyphNames, strings) {
  var t = new table.Record('Charsets', [{
    name: 'format',
    type: 'Card8',
    value: 0
  }]);

  for (var i = 0; i < glyphNames.length; i += 1) {
    var glyphName = glyphNames[i];
    var glyphSID = encodeString(glyphName, strings);
    t.fields.push({
      name: 'glyph_' + i,
      type: 'SID',
      value: glyphSID
    });
  }

  return t;
}

function glyphToOps(glyph) {
  var ops = [];
  var path = glyph.path;
  ops.push({
    name: 'width',
    type: 'NUMBER',
    value: glyph.advanceWidth
  });
  var x = 0;
  var y = 0;

  for (var i = 0; i < path.commands.length; i += 1) {
    var dx = void 0;
    var dy = void 0;
    var cmd = path.commands[i];

    if (cmd.type === 'Q') {
      // CFF only supports bézier curves, so convert the quad to a bézier.
      var _13 = 1 / 3;

      var _23 = 2 / 3; // We're going to create a new command so we don't change the original path.


      cmd = {
        type: 'C',
        x: cmd.x,
        y: cmd.y,
        x1: _13 * x + _23 * cmd.x1,
        y1: _13 * y + _23 * cmd.y1,
        x2: _13 * cmd.x + _23 * cmd.x1,
        y2: _13 * cmd.y + _23 * cmd.y1
      };
    }

    if (cmd.type === 'M') {
      dx = Math.round(cmd.x - x);
      dy = Math.round(cmd.y - y);
      ops.push({
        name: 'dx',
        type: 'NUMBER',
        value: dx
      });
      ops.push({
        name: 'dy',
        type: 'NUMBER',
        value: dy
      });
      ops.push({
        name: 'rmoveto',
        type: 'OP',
        value: 21
      });
      x = Math.round(cmd.x);
      y = Math.round(cmd.y);
    } else if (cmd.type === 'L') {
      dx = Math.round(cmd.x - x);
      dy = Math.round(cmd.y - y);
      ops.push({
        name: 'dx',
        type: 'NUMBER',
        value: dx
      });
      ops.push({
        name: 'dy',
        type: 'NUMBER',
        value: dy
      });
      ops.push({
        name: 'rlineto',
        type: 'OP',
        value: 5
      });
      x = Math.round(cmd.x);
      y = Math.round(cmd.y);
    } else if (cmd.type === 'C') {
      var dx1 = Math.round(cmd.x1 - x);
      var dy1 = Math.round(cmd.y1 - y);
      var dx2 = Math.round(cmd.x2 - cmd.x1);
      var dy2 = Math.round(cmd.y2 - cmd.y1);
      dx = Math.round(cmd.x - cmd.x2);
      dy = Math.round(cmd.y - cmd.y2);
      ops.push({
        name: 'dx1',
        type: 'NUMBER',
        value: dx1
      });
      ops.push({
        name: 'dy1',
        type: 'NUMBER',
        value: dy1
      });
      ops.push({
        name: 'dx2',
        type: 'NUMBER',
        value: dx2
      });
      ops.push({
        name: 'dy2',
        type: 'NUMBER',
        value: dy2
      });
      ops.push({
        name: 'dx',
        type: 'NUMBER',
        value: dx
      });
      ops.push({
        name: 'dy',
        type: 'NUMBER',
        value: dy
      });
      ops.push({
        name: 'rrcurveto',
        type: 'OP',
        value: 8
      });
      x = Math.round(cmd.x);
      y = Math.round(cmd.y);
    } // Contours are closed automatically.

  }

  ops.push({
    name: 'endchar',
    type: 'OP',
    value: 14
  });
  return ops;
}

function makeCharStringsIndex(glyphs) {
  var t = new table.Record('CharStrings INDEX', [{
    name: 'charStrings',
    type: 'INDEX',
    value: []
  }]);

  for (var i = 0; i < glyphs.length; i += 1) {
    var glyph = glyphs.get(i);
    var ops = glyphToOps(glyph);
    t.charStrings.push({
      name: glyph.name,
      type: 'CHARSTRING',
      value: ops
    });
  }

  return t;
}

function makePrivateDict(attrs, strings) {
  var t = new table.Record('Private DICT', [{
    name: 'dict',
    type: 'DICT',
    value: {}
  }]);
  t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);
  return t;
}

function makeCFFTable(glyphs, options) {
  var t = new table.Table('CFF ', [{
    name: 'header',
    type: 'RECORD'
  }, {
    name: 'nameIndex',
    type: 'RECORD'
  }, {
    name: 'topDictIndex',
    type: 'RECORD'
  }, {
    name: 'stringIndex',
    type: 'RECORD'
  }, {
    name: 'globalSubrIndex',
    type: 'RECORD'
  }, {
    name: 'charsets',
    type: 'RECORD'
  }, {
    name: 'charStringsIndex',
    type: 'RECORD'
  }, {
    name: 'privateDict',
    type: 'RECORD'
  }]);
  var fontScale = 1 / options.unitsPerEm; // We use non-zero values for the offsets so that the DICT encodes them.
  // This is important because the size of the Top DICT plays a role in offset calculation,
  // and the size shouldn't change after we've written correct offsets.

  var attrs = {
    version: options.version,
    fullName: options.fullName,
    familyName: options.familyName,
    weight: options.weightName,
    fontBBox: options.fontBBox || [0, 0, 0, 0],
    fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],
    charset: 999,
    encoding: 0,
    charStrings: 999,
    private: [0, 999]
  };
  var privateAttrs = {};
  var glyphNames = [];
  var glyph; // Skip first glyph (.notdef)

  for (var i = 1; i < glyphs.length; i += 1) {
    glyph = glyphs.get(i);
    glyphNames.push(glyph.name);
  }

  var strings = [];
  t.header = makeHeader();
  t.nameIndex = makeNameIndex([options.postScriptName]);
  var topDict = makeTopDict(attrs, strings);
  t.topDictIndex = makeTopDictIndex(topDict);
  t.globalSubrIndex = makeGlobalSubrIndex();
  t.charsets = makeCharsets(glyphNames, strings);
  t.charStringsIndex = makeCharStringsIndex(glyphs);
  t.privateDict = makePrivateDict(privateAttrs, strings); // Needs to come at the end, to encode all custom strings used in the font.

  t.stringIndex = makeStringIndex(strings);
  var startOffset = t.header.sizeOf() + t.nameIndex.sizeOf() + t.topDictIndex.sizeOf() + t.stringIndex.sizeOf() + t.globalSubrIndex.sizeOf();
  attrs.charset = startOffset; // We use the CFF standard encoding; proper encoding will be handled in cmap.

  attrs.encoding = 0;
  attrs.charStrings = attrs.charset + t.charsets.sizeOf();
  attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf(); // Recreate the Top DICT INDEX with the correct offsets.

  topDict = makeTopDict(attrs, strings);
  t.topDictIndex = makeTopDictIndex(topDict);
  return t;
}

var cff = {
  parse: parseCFFTable,
  make: makeCFFTable
}; // The `head` table contains global information about the font.
// Parse the header `head` table

function parseHeadTable(data, start) {
  var head = {};
  var p = new parse.Parser(data, start);
  head.version = p.parseVersion();
  head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;
  head.checkSumAdjustment = p.parseULong();
  head.magicNumber = p.parseULong();
  check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');
  head.flags = p.parseUShort();
  head.unitsPerEm = p.parseUShort();
  head.created = p.parseLongDateTime();
  head.modified = p.parseLongDateTime();
  head.xMin = p.parseShort();
  head.yMin = p.parseShort();
  head.xMax = p.parseShort();
  head.yMax = p.parseShort();
  head.macStyle = p.parseUShort();
  head.lowestRecPPEM = p.parseUShort();
  head.fontDirectionHint = p.parseShort();
  head.indexToLocFormat = p.parseShort();
  head.glyphDataFormat = p.parseShort();
  return head;
}

function makeHeadTable(options) {
  // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970
  var timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;
  var createdTimestamp = timestamp;

  if (options.createdTimestamp) {
    createdTimestamp = options.createdTimestamp + 2082844800;
  }

  return new table.Table('head', [{
    name: 'version',
    type: 'FIXED',
    value: 0x00010000
  }, {
    name: 'fontRevision',
    type: 'FIXED',
    value: 0x00010000
  }, {
    name: 'checkSumAdjustment',
    type: 'ULONG',
    value: 0
  }, {
    name: 'magicNumber',
    type: 'ULONG',
    value: 0x5F0F3CF5
  }, {
    name: 'flags',
    type: 'USHORT',
    value: 0
  }, {
    name: 'unitsPerEm',
    type: 'USHORT',
    value: 1000
  }, {
    name: 'created',
    type: 'LONGDATETIME',
    value: createdTimestamp
  }, {
    name: 'modified',
    type: 'LONGDATETIME',
    value: timestamp
  }, {
    name: 'xMin',
    type: 'SHORT',
    value: 0
  }, {
    name: 'yMin',
    type: 'SHORT',
    value: 0
  }, {
    name: 'xMax',
    type: 'SHORT',
    value: 0
  }, {
    name: 'yMax',
    type: 'SHORT',
    value: 0
  }, {
    name: 'macStyle',
    type: 'USHORT',
    value: 0
  }, {
    name: 'lowestRecPPEM',
    type: 'USHORT',
    value: 0
  }, {
    name: 'fontDirectionHint',
    type: 'SHORT',
    value: 2
  }, {
    name: 'indexToLocFormat',
    type: 'SHORT',
    value: 0
  }, {
    name: 'glyphDataFormat',
    type: 'SHORT',
    value: 0
  }], options);
}

var head = {
  parse: parseHeadTable,
  make: makeHeadTable
}; // The `hhea` table contains information for horizontal layout.
// Parse the horizontal header `hhea` table

function parseHheaTable(data, start) {
  var hhea = {};
  var p = new parse.Parser(data, start);
  hhea.version = p.parseVersion();
  hhea.ascender = p.parseShort();
  hhea.descender = p.parseShort();
  hhea.lineGap = p.parseShort();
  hhea.advanceWidthMax = p.parseUShort();
  hhea.minLeftSideBearing = p.parseShort();
  hhea.minRightSideBearing = p.parseShort();
  hhea.xMaxExtent = p.parseShort();
  hhea.caretSlopeRise = p.parseShort();
  hhea.caretSlopeRun = p.parseShort();
  hhea.caretOffset = p.parseShort();
  p.relativeOffset += 8;
  hhea.metricDataFormat = p.parseShort();
  hhea.numberOfHMetrics = p.parseUShort();
  return hhea;
}

function makeHheaTable(options) {
  return new table.Table('hhea', [{
    name: 'version',
    type: 'FIXED',
    value: 0x00010000
  }, {
    name: 'ascender',
    type: 'FWORD',
    value: 0
  }, {
    name: 'descender',
    type: 'FWORD',
    value: 0
  }, {
    name: 'lineGap',
    type: 'FWORD',
    value: 0
  }, {
    name: 'advanceWidthMax',
    type: 'UFWORD',
    value: 0
  }, {
    name: 'minLeftSideBearing',
    type: 'FWORD',
    value: 0
  }, {
    name: 'minRightSideBearing',
    type: 'FWORD',
    value: 0
  }, {
    name: 'xMaxExtent',
    type: 'FWORD',
    value: 0
  }, {
    name: 'caretSlopeRise',
    type: 'SHORT',
    value: 1
  }, {
    name: 'caretSlopeRun',
    type: 'SHORT',
    value: 0
  }, {
    name: 'caretOffset',
    type: 'SHORT',
    value: 0
  }, {
    name: 'reserved1',
    type: 'SHORT',
    value: 0
  }, {
    name: 'reserved2',
    type: 'SHORT',
    value: 0
  }, {
    name: 'reserved3',
    type: 'SHORT',
    value: 0
  }, {
    name: 'reserved4',
    type: 'SHORT',
    value: 0
  }, {
    name: 'metricDataFormat',
    type: 'SHORT',
    value: 0
  }, {
    name: 'numberOfHMetrics',
    type: 'USHORT',
    value: 0
  }], options);
}

var hhea = {
  parse: parseHheaTable,
  make: makeHheaTable
}; // The `hmtx` table contains the horizontal metrics for all glyphs.

function parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs) {
  var advanceWidth;
  var leftSideBearing;
  var p = new parse.Parser(data, start);

  for (var i = 0; i < numGlyphs; i += 1) {
    // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
    if (i < numMetrics) {
      advanceWidth = p.parseUShort();
      leftSideBearing = p.parseShort();
    }

    var glyph = glyphs.get(i);
    glyph.advanceWidth = advanceWidth;
    glyph.leftSideBearing = leftSideBearing;
  }
}

function parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs) {
  font._hmtxTableData = {};
  var advanceWidth;
  var leftSideBearing;
  var p = new parse.Parser(data, start);

  for (var i = 0; i < numGlyphs; i += 1) {
    // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
    if (i < numMetrics) {
      advanceWidth = p.parseUShort();
      leftSideBearing = p.parseShort();
    }

    font._hmtxTableData[i] = {
      advanceWidth: advanceWidth,
      leftSideBearing: leftSideBearing
    };
  }
} // Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.
// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.


function parseHmtxTable(font, data, start, numMetrics, numGlyphs, glyphs, opt) {
  if (opt.lowMemory) {
    parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs);
  } else {
    parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs);
  }
}

function makeHmtxTable(glyphs) {
  var t = new table.Table('hmtx', []);

  for (var i = 0; i < glyphs.length; i += 1) {
    var glyph = glyphs.get(i);
    var advanceWidth = glyph.advanceWidth || 0;
    var leftSideBearing = glyph.leftSideBearing || 0;
    t.fields.push({
      name: 'advanceWidth_' + i,
      type: 'USHORT',
      value: advanceWidth
    });
    t.fields.push({
      name: 'leftSideBearing_' + i,
      type: 'SHORT',
      value: leftSideBearing
    });
  }

  return t;
}

var hmtx = {
  parse: parseHmtxTable,
  make: makeHmtxTable
}; // The `ltag` table stores IETF BCP-47 language tags. It allows supporting

function makeLtagTable(tags) {
  var result = new table.Table('ltag', [{
    name: 'version',
    type: 'ULONG',
    value: 1
  }, {
    name: 'flags',
    type: 'ULONG',
    value: 0
  }, {
    name: 'numTags',
    type: 'ULONG',
    value: tags.length
  }]);
  var stringPool = '';
  var stringPoolOffset = 12 + tags.length * 4;

  for (var i = 0; i < tags.length; ++i) {
    var pos = stringPool.indexOf(tags[i]);

    if (pos < 0) {
      pos = stringPool.length;
      stringPool += tags[i];
    }

    result.fields.push({
      name: 'offset ' + i,
      type: 'USHORT',
      value: stringPoolOffset + pos
    });
    result.fields.push({
      name: 'length ' + i,
      type: 'USHORT',
      value: tags[i].length
    });
  }

  result.fields.push({
    name: 'stringPool',
    type: 'CHARARRAY',
    value: stringPool
  });
  return result;
}

function parseLtagTable(data, start) {
  var p = new parse.Parser(data, start);
  var tableVersion = p.parseULong();
  check.argument(tableVersion === 1, 'Unsupported ltag table version.'); // The 'ltag' specification does not define any flags; skip the field.

  p.skip('uLong', 1);
  var numTags = p.parseULong();
  var tags = [];

  for (var i = 0; i < numTags; i++) {
    var tag = '';
    var offset = start + p.parseUShort();
    var length = p.parseUShort();

    for (var j = offset; j < offset + length; ++j) {
      tag += String.fromCharCode(data.getInt8(j));
    }

    tags.push(tag);
  }

  return tags;
}

var ltag = {
  make: makeLtagTable,
  parse: parseLtagTable
}; // The `maxp` table establishes the memory requirements for the font.
// Parse the maximum profile `maxp` table.

function parseMaxpTable(data, start) {
  var maxp = {};
  var p = new parse.Parser(data, start);
  maxp.version = p.parseVersion();
  maxp.numGlyphs = p.parseUShort();

  if (maxp.version === 1.0) {
    maxp.maxPoints = p.parseUShort();
    maxp.maxContours = p.parseUShort();
    maxp.maxCompositePoints = p.parseUShort();
    maxp.maxCompositeContours = p.parseUShort();
    maxp.maxZones = p.parseUShort();
    maxp.maxTwilightPoints = p.parseUShort();
    maxp.maxStorage = p.parseUShort();
    maxp.maxFunctionDefs = p.parseUShort();
    maxp.maxInstructionDefs = p.parseUShort();
    maxp.maxStackElements = p.parseUShort();
    maxp.maxSizeOfInstructions = p.parseUShort();
    maxp.maxComponentElements = p.parseUShort();
    maxp.maxComponentDepth = p.parseUShort();
  }

  return maxp;
}

function makeMaxpTable(numGlyphs) {
  return new table.Table('maxp', [{
    name: 'version',
    type: 'FIXED',
    value: 0x00005000
  }, {
    name: 'numGlyphs',
    type: 'USHORT',
    value: numGlyphs
  }]);
}

var maxp = {
  parse: parseMaxpTable,
  make: makeMaxpTable
}; // The `name` naming table.
// NameIDs for the name table.

var nameTableNames = ['copyright', // 0
'fontFamily', // 1
'fontSubfamily', // 2
'uniqueID', // 3
'fullName', // 4
'version', // 5
'postScriptName', // 6
'trademark', // 7
'manufacturer', // 8
'designer', // 9
'description', // 10
'manufacturerURL', // 11
'designerURL', // 12
'license', // 13
'licenseURL', // 14
'reserved', // 15
'preferredFamily', // 16
'preferredSubfamily', // 17
'compatibleFullName', // 18
'sampleText', // 19
'postScriptFindFontName', // 20
'wwsFamily', // 21
'wwsSubfamily' // 22
];
var macLanguages = {
  0: 'en',
  1: 'fr',
  2: 'de',
  3: 'it',
  4: 'nl',
  5: 'sv',
  6: 'es',
  7: 'da',
  8: 'pt',
  9: 'no',
  10: 'he',
  11: 'ja',
  12: 'ar',
  13: 'fi',
  14: 'el',
  15: 'is',
  16: 'mt',
  17: 'tr',
  18: 'hr',
  19: 'zh-Hant',
  20: 'ur',
  21: 'hi',
  22: 'th',
  23: 'ko',
  24: 'lt',
  25: 'pl',
  26: 'hu',
  27: 'es',
  28: 'lv',
  29: 'se',
  30: 'fo',
  31: 'fa',
  32: 'ru',
  33: 'zh',
  34: 'nl-BE',
  35: 'ga',
  36: 'sq',
  37: 'ro',
  38: 'cz',
  39: 'sk',
  40: 'si',
  41: 'yi',
  42: 'sr',
  43: 'mk',
  44: 'bg',
  45: 'uk',
  46: 'be',
  47: 'uz',
  48: 'kk',
  49: 'az-Cyrl',
  50: 'az-Arab',
  51: 'hy',
  52: 'ka',
  53: 'mo',
  54: 'ky',
  55: 'tg',
  56: 'tk',
  57: 'mn-CN',
  58: 'mn',
  59: 'ps',
  60: 'ks',
  61: 'ku',
  62: 'sd',
  63: 'bo',
  64: 'ne',
  65: 'sa',
  66: 'mr',
  67: 'bn',
  68: 'as',
  69: 'gu',
  70: 'pa',
  71: 'or',
  72: 'ml',
  73: 'kn',
  74: 'ta',
  75: 'te',
  76: 'si',
  77: 'my',
  78: 'km',
  79: 'lo',
  80: 'vi',
  81: 'id',
  82: 'tl',
  83: 'ms',
  84: 'ms-Arab',
  85: 'am',
  86: 'ti',
  87: 'om',
  88: 'so',
  89: 'sw',
  90: 'rw',
  91: 'rn',
  92: 'ny',
  93: 'mg',
  94: 'eo',
  128: 'cy',
  129: 'eu',
  130: 'ca',
  131: 'la',
  132: 'qu',
  133: 'gn',
  134: 'ay',
  135: 'tt',
  136: 'ug',
  137: 'dz',
  138: 'jv',
  139: 'su',
  140: 'gl',
  141: 'af',
  142: 'br',
  143: 'iu',
  144: 'gd',
  145: 'gv',
  146: 'ga',
  147: 'to',
  148: 'el-polyton',
  149: 'kl',
  150: 'az',
  151: 'nn'
}; // MacOS language ID → MacOS script ID
//
// Note that the script ID is not sufficient to determine what encoding
// to use in TrueType files. For some languages, MacOS used a modification
// of a mainstream script. For example, an Icelandic name would be stored
// with smRoman in the TrueType naming table, but the actual encoding
// is a special Icelandic version of the normal Macintosh Roman encoding.
// As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal
// Syllables but MacOS had run out of available script codes, so this was
// done as a (pretty radical) "modification" of Ethiopic.
//
// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt

var macLanguageToScript = {
  0: 0,
  // langEnglish → smRoman
  1: 0,
  // langFrench → smRoman
  2: 0,
  // langGerman → smRoman
  3: 0,
  // langItalian → smRoman
  4: 0,
  // langDutch → smRoman
  5: 0,
  // langSwedish → smRoman
  6: 0,
  // langSpanish → smRoman
  7: 0,
  // langDanish → smRoman
  8: 0,
  // langPortuguese → smRoman
  9: 0,
  // langNorwegian → smRoman
  10: 5,
  // langHebrew → smHebrew
  11: 1,
  // langJapanese → smJapanese
  12: 4,
  // langArabic → smArabic
  13: 0,
  // langFinnish → smRoman
  14: 6,
  // langGreek → smGreek
  15: 0,
  // langIcelandic → smRoman (modified)
  16: 0,
  // langMaltese → smRoman
  17: 0,
  // langTurkish → smRoman (modified)
  18: 0,
  // langCroatian → smRoman (modified)
  19: 2,
  // langTradChinese → smTradChinese
  20: 4,
  // langUrdu → smArabic
  21: 9,
  // langHindi → smDevanagari
  22: 21,
  // langThai → smThai
  23: 3,
  // langKorean → smKorean
  24: 29,
  // langLithuanian → smCentralEuroRoman
  25: 29,
  // langPolish → smCentralEuroRoman
  26: 29,
  // langHungarian → smCentralEuroRoman
  27: 29,
  // langEstonian → smCentralEuroRoman
  28: 29,
  // langLatvian → smCentralEuroRoman
  29: 0,
  // langSami → smRoman
  30: 0,
  // langFaroese → smRoman (modified)
  31: 4,
  // langFarsi → smArabic (modified)
  32: 7,
  // langRussian → smCyrillic
  33: 25,
  // langSimpChinese → smSimpChinese
  34: 0,
  // langFlemish → smRoman
  35: 0,
  // langIrishGaelic → smRoman (modified)
  36: 0,
  // langAlbanian → smRoman
  37: 0,
  // langRomanian → smRoman (modified)
  38: 29,
  // langCzech → smCentralEuroRoman
  39: 29,
  // langSlovak → smCentralEuroRoman
  40: 0,
  // langSlovenian → smRoman (modified)
  41: 5,
  // langYiddish → smHebrew
  42: 7,
  // langSerbian → smCyrillic
  43: 7,
  // langMacedonian → smCyrillic
  44: 7,
  // langBulgarian → smCyrillic
  45: 7,
  // langUkrainian → smCyrillic (modified)
  46: 7,
  // langByelorussian → smCyrillic
  47: 7,
  // langUzbek → smCyrillic
  48: 7,
  // langKazakh → smCyrillic
  49: 7,
  // langAzerbaijani → smCyrillic
  50: 4,
  // langAzerbaijanAr → smArabic
  51: 24,
  // langArmenian → smArmenian
  52: 23,
  // langGeorgian → smGeorgian
  53: 7,
  // langMoldavian → smCyrillic
  54: 7,
  // langKirghiz → smCyrillic
  55: 7,
  // langTajiki → smCyrillic
  56: 7,
  // langTurkmen → smCyrillic
  57: 27,
  // langMongolian → smMongolian
  58: 7,
  // langMongolianCyr → smCyrillic
  59: 4,
  // langPashto → smArabic
  60: 4,
  // langKurdish → smArabic
  61: 4,
  // langKashmiri → smArabic
  62: 4,
  // langSindhi → smArabic
  63: 26,
  // langTibetan → smTibetan
  64: 9,
  // langNepali → smDevanagari
  65: 9,
  // langSanskrit → smDevanagari
  66: 9,
  // langMarathi → smDevanagari
  67: 13,
  // langBengali → smBengali
  68: 13,
  // langAssamese → smBengali
  69: 11,
  // langGujarati → smGujarati
  70: 10,
  // langPunjabi → smGurmukhi
  71: 12,
  // langOriya → smOriya
  72: 17,
  // langMalayalam → smMalayalam
  73: 16,
  // langKannada → smKannada
  74: 14,
  // langTamil → smTamil
  75: 15,
  // langTelugu → smTelugu
  76: 18,
  // langSinhalese → smSinhalese
  77: 19,
  // langBurmese → smBurmese
  78: 20,
  // langKhmer → smKhmer
  79: 22,
  // langLao → smLao
  80: 30,
  // langVietnamese → smVietnamese
  81: 0,
  // langIndonesian → smRoman
  82: 0,
  // langTagalog → smRoman
  83: 0,
  // langMalayRoman → smRoman
  84: 4,
  // langMalayArabic → smArabic
  85: 28,
  // langAmharic → smEthiopic
  86: 28,
  // langTigrinya → smEthiopic
  87: 28,
  // langOromo → smEthiopic
  88: 0,
  // langSomali → smRoman
  89: 0,
  // langSwahili → smRoman
  90: 0,
  // langKinyarwanda → smRoman
  91: 0,
  // langRundi → smRoman
  92: 0,
  // langNyanja → smRoman
  93: 0,
  // langMalagasy → smRoman
  94: 0,
  // langEsperanto → smRoman
  128: 0,
  // langWelsh → smRoman (modified)
  129: 0,
  // langBasque → smRoman
  130: 0,
  // langCatalan → smRoman
  131: 0,
  // langLatin → smRoman
  132: 0,
  // langQuechua → smRoman
  133: 0,
  // langGuarani → smRoman
  134: 0,
  // langAymara → smRoman
  135: 7,
  // langTatar → smCyrillic
  136: 4,
  // langUighur → smArabic
  137: 26,
  // langDzongkha → smTibetan
  138: 0,
  // langJavaneseRom → smRoman
  139: 0,
  // langSundaneseRom → smRoman
  140: 0,
  // langGalician → smRoman
  141: 0,
  // langAfrikaans → smRoman
  142: 0,
  // langBreton → smRoman (modified)
  143: 28,
  // langInuktitut → smEthiopic (modified)
  144: 0,
  // langScottishGaelic → smRoman (modified)
  145: 0,
  // langManxGaelic → smRoman (modified)
  146: 0,
  // langIrishGaelicScript → smRoman (modified)
  147: 0,
  // langTongan → smRoman
  148: 6,
  // langGreekAncient → smRoman
  149: 0,
  // langGreenlandic → smRoman
  150: 0,
  // langAzerbaijanRoman → smRoman
  151: 0 // langNynorsk → smRoman

}; // While Microsoft indicates a region/country for all its language
// IDs, we omit the region code if it's equal to the "most likely
// region subtag" according to Unicode CLDR. For scripts, we omit
// the subtag if it is equal to the Suppress-Script entry in the
// IANA language subtag registry for IETF BCP 47.
//
// For example, Microsoft states that its language code 0x041A is
// Croatian in Croatia. We transform this to the BCP 47 language code 'hr'
// and not 'hr-HR' because Croatia is the default country for Croatian,
// according to Unicode CLDR. As another example, Microsoft states
// that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform
// this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script
// for the Croatian language, according to IANA.
//
// http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html
// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry

var windowsLanguages = {
  0x0436: 'af',
  0x041C: 'sq',
  0x0484: 'gsw',
  0x045E: 'am',
  0x1401: 'ar-DZ',
  0x3C01: 'ar-BH',
  0x0C01: 'ar',
  0x0801: 'ar-IQ',
  0x2C01: 'ar-JO',
  0x3401: 'ar-KW',
  0x3001: 'ar-LB',
  0x1001: 'ar-LY',
  0x1801: 'ary',
  0x2001: 'ar-OM',
  0x4001: 'ar-QA',
  0x0401: 'ar-SA',
  0x2801: 'ar-SY',
  0x1C01: 'aeb',
  0x3801: 'ar-AE',
  0x2401: 'ar-YE',
  0x042B: 'hy',
  0x044D: 'as',
  0x082C: 'az-Cyrl',
  0x042C: 'az',
  0x046D: 'ba',
  0x042D: 'eu',
  0x0423: 'be',
  0x0845: 'bn',
  0x0445: 'bn-IN',
  0x201A: 'bs-Cyrl',
  0x141A: 'bs',
  0x047E: 'br',
  0x0402: 'bg',
  0x0403: 'ca',
  0x0C04: 'zh-HK',
  0x1404: 'zh-MO',
  0x0804: 'zh',
  0x1004: 'zh-SG',
  0x0404: 'zh-TW',
  0x0483: 'co',
  0x041A: 'hr',
  0x101A: 'hr-BA',
  0x0405: 'cs',
  0x0406: 'da',
  0x048C: 'prs',
  0x0465: 'dv',
  0x0813: 'nl-BE',
  0x0413: 'nl',
  0x0C09: 'en-AU',
  0x2809: 'en-BZ',
  0x1009: 'en-CA',
  0x2409: 'en-029',
  0x4009: 'en-IN',
  0x1809: 'en-IE',
  0x2009: 'en-JM',
  0x4409: 'en-MY',
  0x1409: 'en-NZ',
  0x3409: 'en-PH',
  0x4809: 'en-SG',
  0x1C09: 'en-ZA',
  0x2C09: 'en-TT',
  0x0809: 'en-GB',
  0x0409: 'en',
  0x3009: 'en-ZW',
  0x0425: 'et',
  0x0438: 'fo',
  0x0464: 'fil',
  0x040B: 'fi',
  0x080C: 'fr-BE',
  0x0C0C: 'fr-CA',
  0x040C: 'fr',
  0x140C: 'fr-LU',
  0x180C: 'fr-MC',
  0x100C: 'fr-CH',
  0x0462: 'fy',
  0x0456: 'gl',
  0x0437: 'ka',
  0x0C07: 'de-AT',
  0x0407: 'de',
  0x1407: 'de-LI',
  0x1007: 'de-LU',
  0x0807: 'de-CH',
  0x0408: 'el',
  0x046F: 'kl',
  0x0447: 'gu',
  0x0468: 'ha',
  0x040D: 'he',
  0x0439: 'hi',
  0x040E: 'hu',
  0x040F: 'is',
  0x0470: 'ig',
  0x0421: 'id',
  0x045D: 'iu',
  0x085D: 'iu-Latn',
  0x083C: 'ga',
  0x0434: 'xh',
  0x0435: 'zu',
  0x0410: 'it',
  0x0810: 'it-CH',
  0x0411: 'ja',
  0x044B: 'kn',
  0x043F: 'kk',
  0x0453: 'km',
  0x0486: 'quc',
  0x0487: 'rw',
  0x0441: 'sw',
  0x0457: 'kok',
  0x0412: 'ko',
  0x0440: 'ky',
  0x0454: 'lo',
  0x0426: 'lv',
  0x0427: 'lt',
  0x082E: 'dsb',
  0x046E: 'lb',
  0x042F: 'mk',
  0x083E: 'ms-BN',
  0x043E: 'ms',
  0x044C: 'ml',
  0x043A: 'mt',
  0x0481: 'mi',
  0x047A: 'arn',
  0x044E: 'mr',
  0x047C: 'moh',
  0x0450: 'mn',
  0x0850: 'mn-CN',
  0x0461: 'ne',
  0x0414: 'nb',
  0x0814: 'nn',
  0x0482: 'oc',
  0x0448: 'or',
  0x0463: 'ps',
  0x0415: 'pl',
  0x0416: 'pt',
  0x0816: 'pt-PT',
  0x0446: 'pa',
  0x046B: 'qu-BO',
  0x086B: 'qu-EC',
  0x0C6B: 'qu',
  0x0418: 'ro',
  0x0417: 'rm',
  0x0419: 'ru',
  0x243B: 'smn',
  0x103B: 'smj-NO',
  0x143B: 'smj',
  0x0C3B: 'se-FI',
  0x043B: 'se',
  0x083B: 'se-SE',
  0x203B: 'sms',
  0x183B: 'sma-NO',
  0x1C3B: 'sms',
  0x044F: 'sa',
  0x1C1A: 'sr-Cyrl-BA',
  0x0C1A: 'sr',
  0x181A: 'sr-Latn-BA',
  0x081A: 'sr-Latn',
  0x046C: 'nso',
  0x0432: 'tn',
  0x045B: 'si',
  0x041B: 'sk',
  0x0424: 'sl',
  0x2C0A: 'es-AR',
  0x400A: 'es-BO',
  0x340A: 'es-CL',
  0x240A: 'es-CO',
  0x140A: 'es-CR',
  0x1C0A: 'es-DO',
  0x300A: 'es-EC',
  0x440A: 'es-SV',
  0x100A: 'es-GT',
  0x480A: 'es-HN',
  0x080A: 'es-MX',
  0x4C0A: 'es-NI',
  0x180A: 'es-PA',
  0x3C0A: 'es-PY',
  0x280A: 'es-PE',
  0x500A: 'es-PR',
  // Microsoft has defined two different language codes for
  // “Spanish with modern sorting” and “Spanish with traditional
  // sorting”. This makes sense for collation APIs, and it would be
  // possible to express this in BCP 47 language tags via Unicode
  // extensions (eg., es-u-co-trad is Spanish with traditional
  // sorting). However, for storing names in fonts, the distinction
  // does not make sense, so we give “es” in both cases.
  0x0C0A: 'es',
  0x040A: 'es',
  0x540A: 'es-US',
  0x380A: 'es-UY',
  0x200A: 'es-VE',
  0x081D: 'sv-FI',
  0x041D: 'sv',
  0x045A: 'syr',
  0x0428: 'tg',
  0x085F: 'tzm',
  0x0449: 'ta',
  0x0444: 'tt',
  0x044A: 'te',
  0x041E: 'th',
  0x0451: 'bo',
  0x041F: 'tr',
  0x0442: 'tk',
  0x0480: 'ug',
  0x0422: 'uk',
  0x042E: 'hsb',
  0x0420: 'ur',
  0x0843: 'uz-Cyrl',
  0x0443: 'uz',
  0x042A: 'vi',
  0x0452: 'cy',
  0x0488: 'wo',
  0x0485: 'sah',
  0x0478: 'ii',
  0x046A: 'yo'
}; // Returns a IETF BCP 47 language code, for example 'zh-Hant'
// for 'Chinese in the traditional script'.

function getLanguageCode(platformID, languageID, ltag) {
  switch (platformID) {
    case 0:
      // Unicode
      if (languageID === 0xFFFF) {
        return 'und';
      } else if (ltag) {
        return ltag[languageID];
      }

      break;

    case 1:
      // Macintosh
      return macLanguages[languageID];

    case 3:
      // Windows
      return windowsLanguages[languageID];
  }

  return undefined;
}

var utf16 = 'utf-16'; // MacOS script ID → encoding. This table stores the default case,
// which can be overridden by macLanguageEncodings.

var macScriptEncodings = {
  0: 'macintosh',
  // smRoman
  1: 'x-mac-japanese',
  // smJapanese
  2: 'x-mac-chinesetrad',
  // smTradChinese
  3: 'x-mac-korean',
  // smKorean
  6: 'x-mac-greek',
  // smGreek
  7: 'x-mac-cyrillic',
  // smCyrillic
  9: 'x-mac-devanagai',
  // smDevanagari
  10: 'x-mac-gurmukhi',
  // smGurmukhi
  11: 'x-mac-gujarati',
  // smGujarati
  12: 'x-mac-oriya',
  // smOriya
  13: 'x-mac-bengali',
  // smBengali
  14: 'x-mac-tamil',
  // smTamil
  15: 'x-mac-telugu',
  // smTelugu
  16: 'x-mac-kannada',
  // smKannada
  17: 'x-mac-malayalam',
  // smMalayalam
  18: 'x-mac-sinhalese',
  // smSinhalese
  19: 'x-mac-burmese',
  // smBurmese
  20: 'x-mac-khmer',
  // smKhmer
  21: 'x-mac-thai',
  // smThai
  22: 'x-mac-lao',
  // smLao
  23: 'x-mac-georgian',
  // smGeorgian
  24: 'x-mac-armenian',
  // smArmenian
  25: 'x-mac-chinesesimp',
  // smSimpChinese
  26: 'x-mac-tibetan',
  // smTibetan
  27: 'x-mac-mongolian',
  // smMongolian
  28: 'x-mac-ethiopic',
  // smEthiopic
  29: 'x-mac-ce',
  // smCentralEuroRoman
  30: 'x-mac-vietnamese',
  // smVietnamese
  31: 'x-mac-extarabic' // smExtArabic

}; // MacOS language ID → encoding. This table stores the exceptional
// cases, which override macScriptEncodings. For writing MacOS naming
// tables, we need to emit a MacOS script ID. Therefore, we cannot
// merge macScriptEncodings into macLanguageEncodings.
//
// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt

var macLanguageEncodings = {
  15: 'x-mac-icelandic',
  // langIcelandic
  17: 'x-mac-turkish',
  // langTurkish
  18: 'x-mac-croatian',
  // langCroatian
  24: 'x-mac-ce',
  // langLithuanian
  25: 'x-mac-ce',
  // langPolish
  26: 'x-mac-ce',
  // langHungarian
  27: 'x-mac-ce',
  // langEstonian
  28: 'x-mac-ce',
  // langLatvian
  30: 'x-mac-icelandic',
  // langFaroese
  37: 'x-mac-romanian',
  // langRomanian
  38: 'x-mac-ce',
  // langCzech
  39: 'x-mac-ce',
  // langSlovak
  40: 'x-mac-ce',
  // langSlovenian
  143: 'x-mac-inuit',
  // langInuktitut
  146: 'x-mac-gaelic' // langIrishGaelicScript

};

function getEncoding(platformID, encodingID, languageID) {
  switch (platformID) {
    case 0:
      // Unicode
      return utf16;

    case 1:
      // Apple Macintosh
      return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];

    case 3:
      // Microsoft Windows
      if (encodingID === 1 || encodingID === 10) {
        return utf16;
      }

      break;
  }

  return undefined;
} // Parse the naming `name` table.
// FIXME: Format 1 additional fields are not supported yet.
// ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].


function parseNameTable(data, start, ltag) {
  var name = {};
  var p = new parse.Parser(data, start);
  var format = p.parseUShort();
  var count = p.parseUShort();
  var stringOffset = p.offset + p.parseUShort();

  for (var i = 0; i < count; i++) {
    var platformID = p.parseUShort();
    var encodingID = p.parseUShort();
    var languageID = p.parseUShort();
    var nameID = p.parseUShort();
    var property = nameTableNames[nameID] || nameID;
    var byteLength = p.parseUShort();
    var offset = p.parseUShort();
    var language = getLanguageCode(platformID, languageID, ltag);
    var encoding = getEncoding(platformID, encodingID, languageID);

    if (encoding !== undefined && language !== undefined) {
      var text = void 0;

      if (encoding === utf16) {
        text = decode.UTF16(data, stringOffset + offset, byteLength);
      } else {
        text = decode.MACSTRING(data, stringOffset + offset, byteLength, encoding);
      }

      if (text) {
        var translations = name[property];

        if (translations === undefined) {
          translations = name[property] = {};
        }

        translations[language] = text;
      }
    }
  }

  var langTagCount = 0;

  if (format === 1) {
    // FIXME: Also handle Microsoft's 'name' table 1.
    langTagCount = p.parseUShort();
  }

  return name;
} // {23: 'foo'} → {'foo': 23}
// ['bar', 'baz'] → {'bar': 0, 'baz': 1}


function reverseDict(dict) {
  var result = {};

  for (var key in dict) {
    result[dict[key]] = parseInt(key);
  }

  return result;
}

function makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {
  return new table.Record('NameRecord', [{
    name: 'platformID',
    type: 'USHORT',
    value: platformID
  }, {
    name: 'encodingID',
    type: 'USHORT',
    value: encodingID
  }, {
    name: 'languageID',
    type: 'USHORT',
    value: languageID
  }, {
    name: 'nameID',
    type: 'USHORT',
    value: nameID
  }, {
    name: 'length',
    type: 'USHORT',
    value: length
  }, {
    name: 'offset',
    type: 'USHORT',
    value: offset
  }]);
} // Finds the position of needle in haystack, or -1 if not there.
// Like String.indexOf(), but for arrays.


function findSubArray(needle, haystack) {
  var needleLength = needle.length;
  var limit = haystack.length - needleLength + 1;

  loop: for (var pos = 0; pos < limit; pos++) {
    for (; pos < limit; pos++) {
      for (var k = 0; k < needleLength; k++) {
        if (haystack[pos + k] !== needle[k]) {
          continue loop;
        }
      }

      return pos;
    }
  }

  return -1;
}

function addStringToPool(s, pool) {
  var offset = findSubArray(s, pool);

  if (offset < 0) {
    offset = pool.length;
    var i = 0;
    var len = s.length;

    for (; i < len; ++i) {
      pool.push(s[i]);
    }
  }

  return offset;
}

function makeNameTable(names, ltag) {
  var nameID;
  var nameIDs = [];
  var namesWithNumericKeys = {};
  var nameTableIds = reverseDict(nameTableNames);

  for (var key in names) {
    var id = nameTableIds[key];

    if (id === undefined) {
      id = key;
    }

    nameID = parseInt(id);

    if (isNaN(nameID)) {
      throw new Error('Name table entry "' + key + '" does not exist, see nameTableNames for complete list.');
    }

    namesWithNumericKeys[nameID] = names[key];
    nameIDs.push(nameID);
  }

  var macLanguageIds = reverseDict(macLanguages);
  var windowsLanguageIds = reverseDict(windowsLanguages);
  var nameRecords = [];
  var stringPool = [];

  for (var i = 0; i < nameIDs.length; i++) {
    nameID = nameIDs[i];
    var translations = namesWithNumericKeys[nameID];

    for (var lang in translations) {
      var text = translations[lang]; // For MacOS, we try to emit the name in the form that was introduced
      // in the initial version of the TrueType spec (in the late 1980s).
      // However, this can fail for various reasons: the requested BCP 47
      // language code might not have an old-style Mac equivalent;
      // we might not have a codec for the needed character encoding;
      // or the name might contain characters that cannot be expressed
      // in the old-style Macintosh encoding. In case of failure, we emit
      // the name in a more modern fashion (Unicode encoding with BCP 47
      // language tags) that is recognized by MacOS 10.5, released in 2009.
      // If fonts were only read by operating systems, we could simply
      // emit all names in the modern form; this would be much easier.
      // However, there are many applications and libraries that read
      // 'name' tables directly, and these will usually only recognize
      // the ancient form (silently skipping the unrecognized names).

      var macPlatform = 1; // Macintosh

      var macLanguage = macLanguageIds[lang];
      var macScript = macLanguageToScript[macLanguage];
      var macEncoding = getEncoding(macPlatform, macScript, macLanguage);
      var macName = encode.MACSTRING(text, macEncoding);

      if (macName === undefined) {
        macPlatform = 0; // Unicode

        macLanguage = ltag.indexOf(lang);

        if (macLanguage < 0) {
          macLanguage = ltag.length;
          ltag.push(lang);
        }

        macScript = 4; // Unicode 2.0 and later

        macName = encode.UTF16(text);
      }

      var macNameOffset = addStringToPool(macName, stringPool);
      nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage, nameID, macName.length, macNameOffset));
      var winLanguage = windowsLanguageIds[lang];

      if (winLanguage !== undefined) {
        var winName = encode.UTF16(text);
        var winNameOffset = addStringToPool(winName, stringPool);
        nameRecords.push(makeNameRecord(3, 1, winLanguage, nameID, winName.length, winNameOffset));
      }
    }
  }

  nameRecords.sort(function (a, b) {
    return a.platformID - b.platformID || a.encodingID - b.encodingID || a.languageID - b.languageID || a.nameID - b.nameID;
  });
  var t = new table.Table('name', [{
    name: 'format',
    type: 'USHORT',
    value: 0
  }, {
    name: 'count',
    type: 'USHORT',
    value: nameRecords.length
  }, {
    name: 'stringOffset',
    type: 'USHORT',
    value: 6 + nameRecords.length * 12
  }]);

  for (var r = 0; r < nameRecords.length; r++) {
    t.fields.push({
      name: 'record_' + r,
      type: 'RECORD',
      value: nameRecords[r]
    });
  }

  t.fields.push({
    name: 'strings',
    type: 'LITERAL',
    value: stringPool
  });
  return t;
}

var _name = {
  parse: parseNameTable,
  make: makeNameTable
}; // The `OS/2` table contains metrics required in OpenType fonts.

var unicodeRanges = [{
  begin: 0x0000,
  end: 0x007F
}, // Basic Latin
{
  begin: 0x0080,
  end: 0x00FF
}, // Latin-1 Supplement
{
  begin: 0x0100,
  end: 0x017F
}, // Latin Extended-A
{
  begin: 0x0180,
  end: 0x024F
}, // Latin Extended-B
{
  begin: 0x0250,
  end: 0x02AF
}, // IPA Extensions
{
  begin: 0x02B0,
  end: 0x02FF
}, // Spacing Modifier Letters
{
  begin: 0x0300,
  end: 0x036F
}, // Combining Diacritical Marks
{
  begin: 0x0370,
  end: 0x03FF
}, // Greek and Coptic
{
  begin: 0x2C80,
  end: 0x2CFF
}, // Coptic
{
  begin: 0x0400,
  end: 0x04FF
}, // Cyrillic
{
  begin: 0x0530,
  end: 0x058F
}, // Armenian
{
  begin: 0x0590,
  end: 0x05FF
}, // Hebrew
{
  begin: 0xA500,
  end: 0xA63F
}, // Vai
{
  begin: 0x0600,
  end: 0x06FF
}, // Arabic
{
  begin: 0x07C0,
  end: 0x07FF
}, // NKo
{
  begin: 0x0900,
  end: 0x097F
}, // Devanagari
{
  begin: 0x0980,
  end: 0x09FF
}, // Bengali
{
  begin: 0x0A00,
  end: 0x0A7F
}, // Gurmukhi
{
  begin: 0x0A80,
  end: 0x0AFF
}, // Gujarati
{
  begin: 0x0B00,
  end: 0x0B7F
}, // Oriya
{
  begin: 0x0B80,
  end: 0x0BFF
}, // Tamil
{
  begin: 0x0C00,
  end: 0x0C7F
}, // Telugu
{
  begin: 0x0C80,
  end: 0x0CFF
}, // Kannada
{
  begin: 0x0D00,
  end: 0x0D7F
}, // Malayalam
{
  begin: 0x0E00,
  end: 0x0E7F
}, // Thai
{
  begin: 0x0E80,
  end: 0x0EFF
}, // Lao
{
  begin: 0x10A0,
  end: 0x10FF
}, // Georgian
{
  begin: 0x1B00,
  end: 0x1B7F
}, // Balinese
{
  begin: 0x1100,
  end: 0x11FF
}, // Hangul Jamo
{
  begin: 0x1E00,
  end: 0x1EFF
}, // Latin Extended Additional
{
  begin: 0x1F00,
  end: 0x1FFF
}, // Greek Extended
{
  begin: 0x2000,
  end: 0x206F
}, // General Punctuation
{
  begin: 0x2070,
  end: 0x209F
}, // Superscripts And Subscripts
{
  begin: 0x20A0,
  end: 0x20CF
}, // Currency Symbol
{
  begin: 0x20D0,
  end: 0x20FF
}, // Combining Diacritical Marks For Symbols
{
  begin: 0x2100,
  end: 0x214F
}, // Letterlike Symbols
{
  begin: 0x2150,
  end: 0x218F
}, // Number Forms
{
  begin: 0x2190,
  end: 0x21FF
}, // Arrows
{
  begin: 0x2200,
  end: 0x22FF
}, // Mathematical Operators
{
  begin: 0x2300,
  end: 0x23FF
}, // Miscellaneous Technical
{
  begin: 0x2400,
  end: 0x243F
}, // Control Pictures
{
  begin: 0x2440,
  end: 0x245F
}, // Optical Character Recognition
{
  begin: 0x2460,
  end: 0x24FF
}, // Enclosed Alphanumerics
{
  begin: 0x2500,
  end: 0x257F
}, // Box Drawing
{
  begin: 0x2580,
  end: 0x259F
}, // Block Elements
{
  begin: 0x25A0,
  end: 0x25FF
}, // Geometric Shapes
{
  begin: 0x2600,
  end: 0x26FF
}, // Miscellaneous Symbols
{
  begin: 0x2700,
  end: 0x27BF
}, // Dingbats
{
  begin: 0x3000,
  end: 0x303F
}, // CJK Symbols And Punctuation
{
  begin: 0x3040,
  end: 0x309F
}, // Hiragana
{
  begin: 0x30A0,
  end: 0x30FF
}, // Katakana
{
  begin: 0x3100,
  end: 0x312F
}, // Bopomofo
{
  begin: 0x3130,
  end: 0x318F
}, // Hangul Compatibility Jamo
{
  begin: 0xA840,
  end: 0xA87F
}, // Phags-pa
{
  begin: 0x3200,
  end: 0x32FF
}, // Enclosed CJK Letters And Months
{
  begin: 0x3300,
  end: 0x33FF
}, // CJK Compatibility
{
  begin: 0xAC00,
  end: 0xD7AF
}, // Hangul Syllables
{
  begin: 0xD800,
  end: 0xDFFF
}, // Non-Plane 0 *
{
  begin: 0x10900,
  end: 0x1091F
}, // Phoenicia
{
  begin: 0x4E00,
  end: 0x9FFF
}, // CJK Unified Ideographs
{
  begin: 0xE000,
  end: 0xF8FF
}, // Private Use Area (plane 0)
{
  begin: 0x31C0,
  end: 0x31EF
}, // CJK Strokes
{
  begin: 0xFB00,
  end: 0xFB4F
}, // Alphabetic Presentation Forms
{
  begin: 0xFB50,
  end: 0xFDFF
}, // Arabic Presentation Forms-A
{
  begin: 0xFE20,
  end: 0xFE2F
}, // Combining Half Marks
{
  begin: 0xFE10,
  end: 0xFE1F
}, // Vertical Forms
{
  begin: 0xFE50,
  end: 0xFE6F
}, // Small Form Variants
{
  begin: 0xFE70,
  end: 0xFEFF
}, // Arabic Presentation Forms-B
{
  begin: 0xFF00,
  end: 0xFFEF
}, // Halfwidth And Fullwidth Forms
{
  begin: 0xFFF0,
  end: 0xFFFF
}, // Specials
{
  begin: 0x0F00,
  end: 0x0FFF
}, // Tibetan
{
  begin: 0x0700,
  end: 0x074F
}, // Syriac
{
  begin: 0x0780,
  end: 0x07BF
}, // Thaana
{
  begin: 0x0D80,
  end: 0x0DFF
}, // Sinhala
{
  begin: 0x1000,
  end: 0x109F
}, // Myanmar
{
  begin: 0x1200,
  end: 0x137F
}, // Ethiopic
{
  begin: 0x13A0,
  end: 0x13FF
}, // Cherokee
{
  begin: 0x1400,
  end: 0x167F
}, // Unified Canadian Aboriginal Syllabics
{
  begin: 0x1680,
  end: 0x169F
}, // Ogham
{
  begin: 0x16A0,
  end: 0x16FF
}, // Runic
{
  begin: 0x1780,
  end: 0x17FF
}, // Khmer
{
  begin: 0x1800,
  end: 0x18AF
}, // Mongolian
{
  begin: 0x2800,
  end: 0x28FF
}, // Braille Patterns
{
  begin: 0xA000,
  end: 0xA48F
}, // Yi Syllables
{
  begin: 0x1700,
  end: 0x171F
}, // Tagalog
{
  begin: 0x10300,
  end: 0x1032F
}, // Old Italic
{
  begin: 0x10330,
  end: 0x1034F
}, // Gothic
{
  begin: 0x10400,
  end: 0x1044F
}, // Deseret
{
  begin: 0x1D000,
  end: 0x1D0FF
}, // Byzantine Musical Symbols
{
  begin: 0x1D400,
  end: 0x1D7FF
}, // Mathematical Alphanumeric Symbols
{
  begin: 0xFF000,
  end: 0xFFFFD
}, // Private Use (plane 15)
{
  begin: 0xFE00,
  end: 0xFE0F
}, // Variation Selectors
{
  begin: 0xE0000,
  end: 0xE007F
}, // Tags
{
  begin: 0x1900,
  end: 0x194F
}, // Limbu
{
  begin: 0x1950,
  end: 0x197F
}, // Tai Le
{
  begin: 0x1980,
  end: 0x19DF
}, // New Tai Lue
{
  begin: 0x1A00,
  end: 0x1A1F
}, // Buginese
{
  begin: 0x2C00,
  end: 0x2C5F
}, // Glagolitic
{
  begin: 0x2D30,
  end: 0x2D7F
}, // Tifinagh
{
  begin: 0x4DC0,
  end: 0x4DFF
}, // Yijing Hexagram Symbols
{
  begin: 0xA800,
  end: 0xA82F
}, // Syloti Nagri
{
  begin: 0x10000,
  end: 0x1007F
}, // Linear B Syllabary
{
  begin: 0x10140,
  end: 0x1018F
}, // Ancient Greek Numbers
{
  begin: 0x10380,
  end: 0x1039F
}, // Ugaritic
{
  begin: 0x103A0,
  end: 0x103DF
}, // Old Persian
{
  begin: 0x10450,
  end: 0x1047F
}, // Shavian
{
  begin: 0x10480,
  end: 0x104AF
}, // Osmanya
{
  begin: 0x10800,
  end: 0x1083F
}, // Cypriot Syllabary
{
  begin: 0x10A00,
  end: 0x10A5F
}, // Kharoshthi
{
  begin: 0x1D300,
  end: 0x1D35F
}, // Tai Xuan Jing Symbols
{
  begin: 0x12000,
  end: 0x123FF
}, // Cuneiform
{
  begin: 0x1D360,
  end: 0x1D37F
}, // Counting Rod Numerals
{
  begin: 0x1B80,
  end: 0x1BBF
}, // Sundanese
{
  begin: 0x1C00,
  end: 0x1C4F
}, // Lepcha
{
  begin: 0x1C50,
  end: 0x1C7F
}, // Ol Chiki
{
  begin: 0xA880,
  end: 0xA8DF
}, // Saurashtra
{
  begin: 0xA900,
  end: 0xA92F
}, // Kayah Li
{
  begin: 0xA930,
  end: 0xA95F
}, // Rejang
{
  begin: 0xAA00,
  end: 0xAA5F
}, // Cham
{
  begin: 0x10190,
  end: 0x101CF
}, // Ancient Symbols
{
  begin: 0x101D0,
  end: 0x101FF
}, // Phaistos Disc
{
  begin: 0x102A0,
  end: 0x102DF
}, // Carian
{
  begin: 0x1F030,
  end: 0x1F09F
} // Domino Tiles
];

function getUnicodeRange(unicode) {
  for (var i = 0; i < unicodeRanges.length; i += 1) {
    var range = unicodeRanges[i];

    if (unicode >= range.begin && unicode < range.end) {
      return i;
    }
  }

  return -1;
} // Parse the OS/2 and Windows metrics `OS/2` table


function parseOS2Table(data, start) {
  var os2 = {};
  var p = new parse.Parser(data, start);
  os2.version = p.parseUShort();
  os2.xAvgCharWidth = p.parseShort();
  os2.usWeightClass = p.parseUShort();
  os2.usWidthClass = p.parseUShort();
  os2.fsType = p.parseUShort();
  os2.ySubscriptXSize = p.parseShort();
  os2.ySubscriptYSize = p.parseShort();
  os2.ySubscriptXOffset = p.parseShort();
  os2.ySubscriptYOffset = p.parseShort();
  os2.ySuperscriptXSize = p.parseShort();
  os2.ySuperscriptYSize = p.parseShort();
  os2.ySuperscriptXOffset = p.parseShort();
  os2.ySuperscriptYOffset = p.parseShort();
  os2.yStrikeoutSize = p.parseShort();
  os2.yStrikeoutPosition = p.parseShort();
  os2.sFamilyClass = p.parseShort();
  os2.panose = [];

  for (var i = 0; i < 10; i++) {
    os2.panose[i] = p.parseByte();
  }

  os2.ulUnicodeRange1 = p.parseULong();
  os2.ulUnicodeRange2 = p.parseULong();
  os2.ulUnicodeRange3 = p.parseULong();
  os2.ulUnicodeRange4 = p.parseULong();
  os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());
  os2.fsSelection = p.parseUShort();
  os2.usFirstCharIndex = p.parseUShort();
  os2.usLastCharIndex = p.parseUShort();
  os2.sTypoAscender = p.parseShort();
  os2.sTypoDescender = p.parseShort();
  os2.sTypoLineGap = p.parseShort();
  os2.usWinAscent = p.parseUShort();
  os2.usWinDescent = p.parseUShort();

  if (os2.version >= 1) {
    os2.ulCodePageRange1 = p.parseULong();
    os2.ulCodePageRange2 = p.parseULong();
  }

  if (os2.version >= 2) {
    os2.sxHeight = p.parseShort();
    os2.sCapHeight = p.parseShort();
    os2.usDefaultChar = p.parseUShort();
    os2.usBreakChar = p.parseUShort();
    os2.usMaxContent = p.parseUShort();
  }

  return os2;
}

function makeOS2Table(options) {
  return new table.Table('OS/2', [{
    name: 'version',
    type: 'USHORT',
    value: 0x0003
  }, {
    name: 'xAvgCharWidth',
    type: 'SHORT',
    value: 0
  }, {
    name: 'usWeightClass',
    type: 'USHORT',
    value: 0
  }, {
    name: 'usWidthClass',
    type: 'USHORT',
    value: 0
  }, {
    name: 'fsType',
    type: 'USHORT',
    value: 0
  }, {
    name: 'ySubscriptXSize',
    type: 'SHORT',
    value: 650
  }, {
    name: 'ySubscriptYSize',
    type: 'SHORT',
    value: 699
  }, {
    name: 'ySubscriptXOffset',
    type: 'SHORT',
    value: 0
  }, {
    name: 'ySubscriptYOffset',
    type: 'SHORT',
    value: 140
  }, {
    name: 'ySuperscriptXSize',
    type: 'SHORT',
    value: 650
  }, {
    name: 'ySuperscriptYSize',
    type: 'SHORT',
    value: 699
  }, {
    name: 'ySuperscriptXOffset',
    type: 'SHORT',
    value: 0
  }, {
    name: 'ySuperscriptYOffset',
    type: 'SHORT',
    value: 479
  }, {
    name: 'yStrikeoutSize',
    type: 'SHORT',
    value: 49
  }, {
    name: 'yStrikeoutPosition',
    type: 'SHORT',
    value: 258
  }, {
    name: 'sFamilyClass',
    type: 'SHORT',
    value: 0
  }, {
    name: 'bFamilyType',
    type: 'BYTE',
    value: 0
  }, {
    name: 'bSerifStyle',
    type: 'BYTE',
    value: 0
  }, {
    name: 'bWeight',
    type: 'BYTE',
    value: 0
  }, {
    name: 'bProportion',
    type: 'BYTE',
    value: 0
  }, {
    name: 'bContrast',
    type: 'BYTE',
    value: 0
  }, {
    name: 'bStrokeVariation',
    type: 'BYTE',
    value: 0
  }, {
    name: 'bArmStyle',
    type: 'BYTE',
    value: 0
  }, {
    name: 'bLetterform',
    type: 'BYTE',
    value: 0
  }, {
    name: 'bMidline',
    type: 'BYTE',
    value: 0
  }, {
    name: 'bXHeight',
    type: 'BYTE',
    value: 0
  }, {
    name: 'ulUnicodeRange1',
    type: 'ULONG',
    value: 0
  }, {
    name: 'ulUnicodeRange2',
    type: 'ULONG',
    value: 0
  }, {
    name: 'ulUnicodeRange3',
    type: 'ULONG',
    value: 0
  }, {
    name: 'ulUnicodeRange4',
    type: 'ULONG',
    value: 0
  }, {
    name: 'achVendID',
    type: 'CHARARRAY',
    value: 'XXXX'
  }, {
    name: 'fsSelection',
    type: 'USHORT',
    value: 0
  }, {
    name: 'usFirstCharIndex',
    type: 'USHORT',
    value: 0
  }, {
    name: 'usLastCharIndex',
    type: 'USHORT',
    value: 0
  }, {
    name: 'sTypoAscender',
    type: 'SHORT',
    value: 0
  }, {
    name: 'sTypoDescender',
    type: 'SHORT',
    value: 0
  }, {
    name: 'sTypoLineGap',
    type: 'SHORT',
    value: 0
  }, {
    name: 'usWinAscent',
    type: 'USHORT',
    value: 0
  }, {
    name: 'usWinDescent',
    type: 'USHORT',
    value: 0
  }, {
    name: 'ulCodePageRange1',
    type: 'ULONG',
    value: 0
  }, {
    name: 'ulCodePageRange2',
    type: 'ULONG',
    value: 0
  }, {
    name: 'sxHeight',
    type: 'SHORT',
    value: 0
  }, {
    name: 'sCapHeight',
    type: 'SHORT',
    value: 0
  }, {
    name: 'usDefaultChar',
    type: 'USHORT',
    value: 0
  }, {
    name: 'usBreakChar',
    type: 'USHORT',
    value: 0
  }, {
    name: 'usMaxContext',
    type: 'USHORT',
    value: 0
  }], options);
}

var os2 = {
  parse: parseOS2Table,
  make: makeOS2Table,
  unicodeRanges: unicodeRanges,
  getUnicodeRange: getUnicodeRange
}; // The `post` table stores additional PostScript information, such as glyph names.
// Parse the PostScript `post` table

function parsePostTable(data, start) {
  var post = {};
  var p = new parse.Parser(data, start);
  post.version = p.parseVersion();
  post.italicAngle = p.parseFixed();
  post.underlinePosition = p.parseShort();
  post.underlineThickness = p.parseShort();
  post.isFixedPitch = p.parseULong();
  post.minMemType42 = p.parseULong();
  post.maxMemType42 = p.parseULong();
  post.minMemType1 = p.parseULong();
  post.maxMemType1 = p.parseULong();

  switch (post.version) {
    case 1:
      post.names = standardNames.slice();
      break;

    case 2:
      post.numberOfGlyphs = p.parseUShort();
      post.glyphNameIndex = new Array(post.numberOfGlyphs);

      for (var i = 0; i < post.numberOfGlyphs; i++) {
        post.glyphNameIndex[i] = p.parseUShort();
      }

      post.names = [];

      for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {
        if (post.glyphNameIndex[i$1] >= standardNames.length) {
          var nameLength = p.parseChar();
          post.names.push(p.parseString(nameLength));
        }
      }

      break;

    case 2.5:
      post.numberOfGlyphs = p.parseUShort();
      post.offset = new Array(post.numberOfGlyphs);

      for (var i$2 = 0; i$2 < post.numberOfGlyphs; i$2++) {
        post.offset[i$2] = p.parseChar();
      }

      break;
  }

  return post;
}

function makePostTable() {
  return new table.Table('post', [{
    name: 'version',
    type: 'FIXED',
    value: 0x00030000
  }, {
    name: 'italicAngle',
    type: 'FIXED',
    value: 0
  }, {
    name: 'underlinePosition',
    type: 'FWORD',
    value: 0
  }, {
    name: 'underlineThickness',
    type: 'FWORD',
    value: 0
  }, {
    name: 'isFixedPitch',
    type: 'ULONG',
    value: 0
  }, {
    name: 'minMemType42',
    type: 'ULONG',
    value: 0
  }, {
    name: 'maxMemType42',
    type: 'ULONG',
    value: 0
  }, {
    name: 'minMemType1',
    type: 'ULONG',
    value: 0
  }, {
    name: 'maxMemType1',
    type: 'ULONG',
    value: 0
  }]);
}

var post = {
  parse: parsePostTable,
  make: makePostTable
}; // The `GSUB` table contains ligatures, among other things.

var subtableParsers = new Array(9); // subtableParsers[0] is unused
// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS

subtableParsers[1] = function parseLookup1() {
  var start = this.offset + this.relativeOffset;
  var substFormat = this.parseUShort();

  if (substFormat === 1) {
    return {
      substFormat: 1,
      coverage: this.parsePointer(Parser.coverage),
      deltaGlyphId: this.parseUShort()
    };
  } else if (substFormat === 2) {
    return {
      substFormat: 2,
      coverage: this.parsePointer(Parser.coverage),
      substitute: this.parseOffset16List()
    };
  }

  check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');
}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS


subtableParsers[2] = function parseLookup2() {
  var substFormat = this.parseUShort();
  check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');
  return {
    substFormat: substFormat,
    coverage: this.parsePointer(Parser.coverage),
    sequences: this.parseListOfLists()
  };
}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS


subtableParsers[3] = function parseLookup3() {
  var substFormat = this.parseUShort();
  check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');
  return {
    substFormat: substFormat,
    coverage: this.parsePointer(Parser.coverage),
    alternateSets: this.parseListOfLists()
  };
}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS


subtableParsers[4] = function parseLookup4() {
  var substFormat = this.parseUShort();
  check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');
  return {
    substFormat: substFormat,
    coverage: this.parsePointer(Parser.coverage),
    ligatureSets: this.parseListOfLists(function () {
      return {
        ligGlyph: this.parseUShort(),
        components: this.parseUShortList(this.parseUShort() - 1)
      };
    })
  };
};

var lookupRecordDesc = {
  sequenceIndex: Parser.uShort,
  lookupListIndex: Parser.uShort
}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF

subtableParsers[5] = function parseLookup5() {
  var start = this.offset + this.relativeOffset;
  var substFormat = this.parseUShort();

  if (substFormat === 1) {
    return {
      substFormat: substFormat,
      coverage: this.parsePointer(Parser.coverage),
      ruleSets: this.parseListOfLists(function () {
        var glyphCount = this.parseUShort();
        var substCount = this.parseUShort();
        return {
          input: this.parseUShortList(glyphCount - 1),
          lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
        };
      })
    };
  } else if (substFormat === 2) {
    return {
      substFormat: substFormat,
      coverage: this.parsePointer(Parser.coverage),
      classDef: this.parsePointer(Parser.classDef),
      classSets: this.parseListOfLists(function () {
        var glyphCount = this.parseUShort();
        var substCount = this.parseUShort();
        return {
          classes: this.parseUShortList(glyphCount - 1),
          lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
        };
      })
    };
  } else if (substFormat === 3) {
    var glyphCount = this.parseUShort();
    var substCount = this.parseUShort();
    return {
      substFormat: substFormat,
      coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),
      lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
    };
  }

  check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');
}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC


subtableParsers[6] = function parseLookup6() {
  var start = this.offset + this.relativeOffset;
  var substFormat = this.parseUShort();

  if (substFormat === 1) {
    return {
      substFormat: 1,
      coverage: this.parsePointer(Parser.coverage),
      chainRuleSets: this.parseListOfLists(function () {
        return {
          backtrack: this.parseUShortList(),
          input: this.parseUShortList(this.parseShort() - 1),
          lookahead: this.parseUShortList(),
          lookupRecords: this.parseRecordList(lookupRecordDesc)
        };
      })
    };
  } else if (substFormat === 2) {
    return {
      substFormat: 2,
      coverage: this.parsePointer(Parser.coverage),
      backtrackClassDef: this.parsePointer(Parser.classDef),
      inputClassDef: this.parsePointer(Parser.classDef),
      lookaheadClassDef: this.parsePointer(Parser.classDef),
      chainClassSet: this.parseListOfLists(function () {
        return {
          backtrack: this.parseUShortList(),
          input: this.parseUShortList(this.parseShort() - 1),
          lookahead: this.parseUShortList(),
          lookupRecords: this.parseRecordList(lookupRecordDesc)
        };
      })
    };
  } else if (substFormat === 3) {
    return {
      substFormat: 3,
      backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
      inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),
      lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
      lookupRecords: this.parseRecordList(lookupRecordDesc)
    };
  }

  check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');
}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES


subtableParsers[7] = function parseLookup7() {
  // Extension Substitution subtable
  var substFormat = this.parseUShort();
  check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');
  var extensionLookupType = this.parseUShort();
  var extensionParser = new Parser(this.data, this.offset + this.parseULong());
  return {
    substFormat: 1,
    lookupType: extensionLookupType,
    extension: subtableParsers[extensionLookupType].call(extensionParser)
  };
}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS


subtableParsers[8] = function parseLookup8() {
  var substFormat = this.parseUShort();
  check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');
  return {
    substFormat: substFormat,
    coverage: this.parsePointer(Parser.coverage),
    backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
    lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
    substitutes: this.parseUShortList()
  };
}; // https://www.microsoft.com/typography/OTSPEC/gsub.htm


function parseGsubTable(data, start) {
  start = start || 0;
  var p = new Parser(data, start);
  var tableVersion = p.parseVersion(1);
  check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GSUB table version.');

  if (tableVersion === 1) {
    return {
      version: tableVersion,
      scripts: p.parseScriptList(),
      features: p.parseFeatureList(),
      lookups: p.parseLookupList(subtableParsers)
    };
  } else {
    return {
      version: tableVersion,
      scripts: p.parseScriptList(),
      features: p.parseFeatureList(),
      lookups: p.parseLookupList(subtableParsers),
      variations: p.parseFeatureVariationsList()
    };
  }
} // GSUB Writing //////////////////////////////////////////////


var subtableMakers = new Array(9);

subtableMakers[1] = function makeLookup1(subtable) {
  if (subtable.substFormat === 1) {
    return new table.Table('substitutionTable', [{
      name: 'substFormat',
      type: 'USHORT',
      value: 1
    }, {
      name: 'coverage',
      type: 'TABLE',
      value: new table.Coverage(subtable.coverage)
    }, {
      name: 'deltaGlyphID',
      type: 'USHORT',
      value: subtable.deltaGlyphId
    }]);
  } else {
    return new table.Table('substitutionTable', [{
      name: 'substFormat',
      type: 'USHORT',
      value: 2
    }, {
      name: 'coverage',
      type: 'TABLE',
      value: new table.Coverage(subtable.coverage)
    }].concat(table.ushortList('substitute', subtable.substitute)));
  }
};

subtableMakers[3] = function makeLookup3(subtable) {
  check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');
  return new table.Table('substitutionTable', [{
    name: 'substFormat',
    type: 'USHORT',
    value: 1
  }, {
    name: 'coverage',
    type: 'TABLE',
    value: new table.Coverage(subtable.coverage)
  }].concat(table.tableList('altSet', subtable.alternateSets, function (alternateSet) {
    return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));
  })));
};

subtableMakers[4] = function makeLookup4(subtable) {
  check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');
  return new table.Table('substitutionTable', [{
    name: 'substFormat',
    type: 'USHORT',
    value: 1
  }, {
    name: 'coverage',
    type: 'TABLE',
    value: new table.Coverage(subtable.coverage)
  }].concat(table.tableList('ligSet', subtable.ligatureSets, function (ligatureSet) {
    return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function (ligature) {
      return new table.Table('ligatureTable', [{
        name: 'ligGlyph',
        type: 'USHORT',
        value: ligature.ligGlyph
      }].concat(table.ushortList('component', ligature.components, ligature.components.length + 1)));
    }));
  })));
};

function makeGsubTable(gsub) {
  return new table.Table('GSUB', [{
    name: 'version',
    type: 'ULONG',
    value: 0x10000
  }, {
    name: 'scripts',
    type: 'TABLE',
    value: new table.ScriptList(gsub.scripts)
  }, {
    name: 'features',
    type: 'TABLE',
    value: new table.FeatureList(gsub.features)
  }, {
    name: 'lookups',
    type: 'TABLE',
    value: new table.LookupList(gsub.lookups, subtableMakers)
  }]);
}

var gsub = {
  parse: parseGsubTable,
  make: makeGsubTable
}; // The `GPOS` table contains kerning pairs, among other things.
// Parse the metadata `meta` table.
// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html

function parseMetaTable(data, start) {
  var p = new parse.Parser(data, start);
  var tableVersion = p.parseULong();
  check.argument(tableVersion === 1, 'Unsupported META table version.');
  p.parseULong(); // flags - currently unused and set to 0

  p.parseULong(); // tableOffset

  var numDataMaps = p.parseULong();
  var tags = {};

  for (var i = 0; i < numDataMaps; i++) {
    var tag = p.parseTag();
    var dataOffset = p.parseULong();
    var dataLength = p.parseULong();
    var text = decode.UTF8(data, start + dataOffset, dataLength);
    tags[tag] = text;
  }

  return tags;
}

function makeMetaTable(tags) {
  var numTags = Object.keys(tags).length;
  var stringPool = '';
  var stringPoolOffset = 16 + numTags * 12;
  var result = new table.Table('meta', [{
    name: 'version',
    type: 'ULONG',
    value: 1
  }, {
    name: 'flags',
    type: 'ULONG',
    value: 0
  }, {
    name: 'offset',
    type: 'ULONG',
    value: stringPoolOffset
  }, {
    name: 'numTags',
    type: 'ULONG',
    value: numTags
  }]);

  for (var tag in tags) {
    var pos = stringPool.length;
    stringPool += tags[tag];
    result.fields.push({
      name: 'tag ' + tag,
      type: 'TAG',
      value: tag
    });
    result.fields.push({
      name: 'offset ' + tag,
      type: 'ULONG',
      value: stringPoolOffset + pos
    });
    result.fields.push({
      name: 'length ' + tag,
      type: 'ULONG',
      value: tags[tag].length
    });
  }

  result.fields.push({
    name: 'stringPool',
    type: 'CHARARRAY',
    value: stringPool
  });
  return result;
}

var meta = {
  parse: parseMetaTable,
  make: makeMetaTable
}; // The `sfnt` wrapper provides organization for the tables in the font.

function log2(v) {
  return Math.log(v) / Math.log(2) | 0;
}

function computeCheckSum(bytes) {
  while (bytes.length % 4 !== 0) {
    bytes.push(0);
  }

  var sum = 0;

  for (var i = 0; i < bytes.length; i += 4) {
    sum += (bytes[i] << 24) + (bytes[i + 1] << 16) + (bytes[i + 2] << 8) + bytes[i + 3];
  }

  sum %= Math.pow(2, 32);
  return sum;
}

function makeTableRecord(tag, checkSum, offset, length) {
  return new table.Record('Table Record', [{
    name: 'tag',
    type: 'TAG',
    value: tag !== undefined ? tag : ''
  }, {
    name: 'checkSum',
    type: 'ULONG',
    value: checkSum !== undefined ? checkSum : 0
  }, {
    name: 'offset',
    type: 'ULONG',
    value: offset !== undefined ? offset : 0
  }, {
    name: 'length',
    type: 'ULONG',
    value: length !== undefined ? length : 0
  }]);
}

function makeSfntTable(tables) {
  var sfnt = new table.Table('sfnt', [{
    name: 'version',
    type: 'TAG',
    value: 'OTTO'
  }, {
    name: 'numTables',
    type: 'USHORT',
    value: 0
  }, {
    name: 'searchRange',
    type: 'USHORT',
    value: 0
  }, {
    name: 'entrySelector',
    type: 'USHORT',
    value: 0
  }, {
    name: 'rangeShift',
    type: 'USHORT',
    value: 0
  }]);
  sfnt.tables = tables;
  sfnt.numTables = tables.length;
  var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));
  sfnt.searchRange = 16 * highestPowerOf2;
  sfnt.entrySelector = log2(highestPowerOf2);
  sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;
  var recordFields = [];
  var tableFields = [];
  var offset = sfnt.sizeOf() + makeTableRecord().sizeOf() * sfnt.numTables;

  while (offset % 4 !== 0) {
    offset += 1;
    tableFields.push({
      name: 'padding',
      type: 'BYTE',
      value: 0
    });
  }

  for (var i = 0; i < tables.length; i += 1) {
    var t = tables[i];
    check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');
    var tableLength = t.sizeOf();
    var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);
    recordFields.push({
      name: tableRecord.tag + ' Table Record',
      type: 'RECORD',
      value: tableRecord
    });
    tableFields.push({
      name: t.tableName + ' table',
      type: 'RECORD',
      value: t
    });
    offset += tableLength;
    check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');

    while (offset % 4 !== 0) {
      offset += 1;
      tableFields.push({
        name: 'padding',
        type: 'BYTE',
        value: 0
      });
    }
  } // Table records need to be sorted alphabetically.


  recordFields.sort(function (r1, r2) {
    if (r1.value.tag > r2.value.tag) {
      return 1;
    } else {
      return -1;
    }
  });
  sfnt.fields = sfnt.fields.concat(recordFields);
  sfnt.fields = sfnt.fields.concat(tableFields);
  return sfnt;
} // Get the metrics for a character. If the string has more than one character
// this function returns metrics for the first available character.
// You can provide optional fallback metrics if no characters are available.


function metricsForChar(font, chars, notFoundMetrics) {
  for (var i = 0; i < chars.length; i += 1) {
    var glyphIndex = font.charToGlyphIndex(chars[i]);

    if (glyphIndex > 0) {
      var glyph = font.glyphs.get(glyphIndex);
      return glyph.getMetrics();
    }
  }

  return notFoundMetrics;
}

function average(vs) {
  var sum = 0;

  for (var i = 0; i < vs.length; i += 1) {
    sum += vs[i];
  }

  return sum / vs.length;
} // Convert the font object to a SFNT data structure.
// This structure contains all the necessary tables and metadata to create a binary OTF file.


function fontToSfntTable(font) {
  var xMins = [];
  var yMins = [];
  var xMaxs = [];
  var yMaxs = [];
  var advanceWidths = [];
  var leftSideBearings = [];
  var rightSideBearings = [];
  var firstCharIndex;
  var lastCharIndex = 0;
  var ulUnicodeRange1 = 0;
  var ulUnicodeRange2 = 0;
  var ulUnicodeRange3 = 0;
  var ulUnicodeRange4 = 0;

  for (var i = 0; i < font.glyphs.length; i += 1) {
    var glyph = font.glyphs.get(i);
    var unicode = glyph.unicode | 0;

    if (isNaN(glyph.advanceWidth)) {
      throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');
    }

    if (firstCharIndex > unicode || firstCharIndex === undefined) {
      // ignore .notdef char
      if (unicode > 0) {
        firstCharIndex = unicode;
      }
    }

    if (lastCharIndex < unicode) {
      lastCharIndex = unicode;
    }

    var position = os2.getUnicodeRange(unicode);

    if (position < 32) {
      ulUnicodeRange1 |= 1 << position;
    } else if (position < 64) {
      ulUnicodeRange2 |= 1 << position - 32;
    } else if (position < 96) {
      ulUnicodeRange3 |= 1 << position - 64;
    } else if (position < 123) {
      ulUnicodeRange4 |= 1 << position - 96;
    } else {
      throw new Error('Unicode ranges bits > 123 are reserved for internal usage');
    } // Skip non-important characters.


    if (glyph.name === '.notdef') {
      continue;
    }

    var metrics = glyph.getMetrics();
    xMins.push(metrics.xMin);
    yMins.push(metrics.yMin);
    xMaxs.push(metrics.xMax);
    yMaxs.push(metrics.yMax);
    leftSideBearings.push(metrics.leftSideBearing);
    rightSideBearings.push(metrics.rightSideBearing);
    advanceWidths.push(glyph.advanceWidth);
  }

  var globals = {
    xMin: Math.min.apply(null, xMins),
    yMin: Math.min.apply(null, yMins),
    xMax: Math.max.apply(null, xMaxs),
    yMax: Math.max.apply(null, yMaxs),
    advanceWidthMax: Math.max.apply(null, advanceWidths),
    advanceWidthAvg: average(advanceWidths),
    minLeftSideBearing: Math.min.apply(null, leftSideBearings),
    maxLeftSideBearing: Math.max.apply(null, leftSideBearings),
    minRightSideBearing: Math.min.apply(null, rightSideBearings)
  };
  globals.ascender = font.ascender;
  globals.descender = font.descender;
  var headTable = head.make({
    flags: 3,
    // 00000011 (baseline for font at y=0; left sidebearing point at x=0)
    unitsPerEm: font.unitsPerEm,
    xMin: globals.xMin,
    yMin: globals.yMin,
    xMax: globals.xMax,
    yMax: globals.yMax,
    lowestRecPPEM: 3,
    createdTimestamp: font.createdTimestamp
  });
  var hheaTable = hhea.make({
    ascender: globals.ascender,
    descender: globals.descender,
    advanceWidthMax: globals.advanceWidthMax,
    minLeftSideBearing: globals.minLeftSideBearing,
    minRightSideBearing: globals.minRightSideBearing,
    xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),
    numberOfHMetrics: font.glyphs.length
  });
  var maxpTable = maxp.make(font.glyphs.length);
  var os2Table = os2.make(Object.assign({
    xAvgCharWidth: Math.round(globals.advanceWidthAvg),
    usFirstCharIndex: firstCharIndex,
    usLastCharIndex: lastCharIndex,
    ulUnicodeRange1: ulUnicodeRange1,
    ulUnicodeRange2: ulUnicodeRange2,
    ulUnicodeRange3: ulUnicodeRange3,
    ulUnicodeRange4: ulUnicodeRange4,
    // See http://typophile.com/node/13081 for more info on vertical metrics.
    // We get metrics for typical characters (such as "x" for xHeight).
    // We provide some fallback characters if characters are unavailable: their
    // ordering was chosen experimentally.
    sTypoAscender: globals.ascender,
    sTypoDescender: globals.descender,
    sTypoLineGap: 0,
    usWinAscent: globals.yMax,
    usWinDescent: Math.abs(globals.yMin),
    ulCodePageRange1: 1,
    // FIXME: hard-code Latin 1 support for now
    sxHeight: metricsForChar(font, 'xyvw', {
      yMax: Math.round(globals.ascender / 2)
    }).yMax,
    sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,
    usDefaultChar: font.hasChar(' ') ? 32 : 0,
    // Use space as the default character, if available.
    usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.

  }, font.tables.os2));
  var hmtxTable = hmtx.make(font.glyphs);
  var cmapTable = cmap.make(font.glyphs);
  var englishFamilyName = font.getEnglishName('fontFamily');
  var englishStyleName = font.getEnglishName('fontSubfamily');
  var englishFullName = englishFamilyName + ' ' + englishStyleName;
  var postScriptName = font.getEnglishName('postScriptName');

  if (!postScriptName) {
    postScriptName = englishFamilyName.replace(/\s/g, '') + '-' + englishStyleName;
  }

  var names = {};

  for (var n in font.names) {
    names[n] = font.names[n];
  }

  if (!names.uniqueID) {
    names.uniqueID = {
      en: font.getEnglishName('manufacturer') + ':' + englishFullName
    };
  }

  if (!names.postScriptName) {
    names.postScriptName = {
      en: postScriptName
    };
  }

  if (!names.preferredFamily) {
    names.preferredFamily = font.names.fontFamily;
  }

  if (!names.preferredSubfamily) {
    names.preferredSubfamily = font.names.fontSubfamily;
  }

  var languageTags = [];

  var nameTable = _name.make(names, languageTags);

  var ltagTable = languageTags.length > 0 ? ltag.make(languageTags) : undefined;
  var postTable = post.make();
  var cffTable = cff.make(font.glyphs, {
    version: font.getEnglishName('version'),
    fullName: englishFullName,
    familyName: englishFamilyName,
    weightName: englishStyleName,
    postScriptName: postScriptName,
    unitsPerEm: font.unitsPerEm,
    fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]
  });
  var metaTable = font.metas && Object.keys(font.metas).length > 0 ? meta.make(font.metas) : undefined; // The order does not matter because makeSfntTable() will sort them.

  var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];

  if (ltagTable) {
    tables.push(ltagTable);
  } // Optional tables


  if (font.tables.gsub) {
    tables.push(gsub.make(font.tables.gsub));
  }

  if (metaTable) {
    tables.push(metaTable);
  }

  var sfntTable = makeSfntTable(tables); // Compute the font's checkSum and store it in head.checkSumAdjustment.

  var bytes = sfntTable.encode();
  var checkSum = computeCheckSum(bytes);
  var tableFields = sfntTable.fields;
  var checkSumAdjusted = false;

  for (var i$1 = 0; i$1 < tableFields.length; i$1 += 1) {
    if (tableFields[i$1].name === 'head table') {
      tableFields[i$1].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;
      checkSumAdjusted = true;
      break;
    }
  }

  if (!checkSumAdjusted) {
    throw new Error('Could not find head table with checkSum to adjust.');
  }

  return sfntTable;
}

var sfnt = {
  make: makeSfntTable,
  fontToTable: fontToSfntTable,
  computeCheckSum: computeCheckSum
}; // The Layout object is the prototype of Substitution objects, and provides

function searchTag(arr, tag) {
  /* jshint bitwise: false */
  var imin = 0;
  var imax = arr.length - 1;

  while (imin <= imax) {
    var imid = imin + imax >>> 1;
    var val = arr[imid].tag;

    if (val === tag) {
      return imid;
    } else if (val < tag) {
      imin = imid + 1;
    } else {
      imax = imid - 1;
    }
  } // Not found: return -1-insertion point


  return -imin - 1;
}

function binSearch(arr, value) {
  /* jshint bitwise: false */
  var imin = 0;
  var imax = arr.length - 1;

  while (imin <= imax) {
    var imid = imin + imax >>> 1;
    var val = arr[imid];

    if (val === value) {
      return imid;
    } else if (val < value) {
      imin = imid + 1;
    } else {
      imax = imid - 1;
    }
  } // Not found: return -1-insertion point


  return -imin - 1;
} // binary search in a list of ranges (coverage, class definition)


function searchRange(ranges, value) {
  // jshint bitwise: false
  var range;
  var imin = 0;
  var imax = ranges.length - 1;

  while (imin <= imax) {
    var imid = imin + imax >>> 1;
    range = ranges[imid];
    var start = range.start;

    if (start === value) {
      return range;
    } else if (start < value) {
      imin = imid + 1;
    } else {
      imax = imid - 1;
    }
  }

  if (imin > 0) {
    range = ranges[imin - 1];

    if (value > range.end) {
      return 0;
    }

    return range;
  }
}
/**
 * @exports opentype.Layout
 * @class
 */


function Layout(font, tableName) {
  this.font = font;
  this.tableName = tableName;
}

Layout.prototype = {
  /**
   * Binary search an object by "tag" property
   * @instance
   * @function searchTag
   * @memberof opentype.Layout
   * @param  {Array} arr
   * @param  {string} tag
   * @return {number}
   */
  searchTag: searchTag,

  /**
   * Binary search in a list of numbers
   * @instance
   * @function binSearch
   * @memberof opentype.Layout
   * @param  {Array} arr
   * @param  {number} value
   * @return {number}
   */
  binSearch: binSearch,

  /**
   * Get or create the Layout table (GSUB, GPOS etc).
   * @param  {boolean} create - Whether to create a new one.
   * @return {Object} The GSUB or GPOS table.
   */
  getTable: function (create) {
    var layout = this.font.tables[this.tableName];

    if (!layout && create) {
      layout = this.font.tables[this.tableName] = this.createDefaultTable();
    }

    return layout;
  },

  /**
   * Returns all scripts in the substitution table.
   * @instance
   * @return {Array}
   */
  getScriptNames: function () {
    var layout = this.getTable();

    if (!layout) {
      return [];
    }

    return layout.scripts.map(function (script) {
      return script.tag;
    });
  },

  /**
   * Returns the best bet for a script name.
   * Returns 'DFLT' if it exists.
   * If not, returns 'latn' if it exists.
   * If neither exist, returns undefined.
   */
  getDefaultScriptName: function () {
    var layout = this.getTable();

    if (!layout) {
      return;
    }

    var hasLatn = false;

    for (var i = 0; i < layout.scripts.length; i++) {
      var name = layout.scripts[i].tag;

      if (name === 'DFLT') {
        return name;
      }

      if (name === 'latn') {
        hasLatn = true;
      }
    }

    if (hasLatn) {
      return 'latn';
    }
  },

  /**
   * Returns all LangSysRecords in the given script.
   * @instance
   * @param {string} [script='DFLT']
   * @param {boolean} create - forces the creation of this script table if it doesn't exist.
   * @return {Object} An object with tag and script properties.
   */
  getScriptTable: function (script, create) {
    var layout = this.getTable(create);

    if (layout) {
      script = script || 'DFLT';
      var scripts = layout.scripts;
      var pos = searchTag(layout.scripts, script);

      if (pos >= 0) {
        return scripts[pos].script;
      } else if (create) {
        var scr = {
          tag: script,
          script: {
            defaultLangSys: {
              reserved: 0,
              reqFeatureIndex: 0xffff,
              featureIndexes: []
            },
            langSysRecords: []
          }
        };
        scripts.splice(-1 - pos, 0, scr);
        return scr.script;
      }
    }
  },

  /**
   * Returns a language system table
   * @instance
   * @param {string} [script='DFLT']
   * @param {string} [language='dlft']
   * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.
   * @return {Object}
   */
  getLangSysTable: function (script, language, create) {
    var scriptTable = this.getScriptTable(script, create);

    if (scriptTable) {
      if (!language || language === 'dflt' || language === 'DFLT') {
        return scriptTable.defaultLangSys;
      }

      var pos = searchTag(scriptTable.langSysRecords, language);

      if (pos >= 0) {
        return scriptTable.langSysRecords[pos].langSys;
      } else if (create) {
        var langSysRecord = {
          tag: language,
          langSys: {
            reserved: 0,
            reqFeatureIndex: 0xffff,
            featureIndexes: []
          }
        };
        scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);
        return langSysRecord.langSys;
      }
    }
  },

  /**
   * Get a specific feature table.
   * @instance
   * @param {string} [script='DFLT']
   * @param {string} [language='dlft']
   * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm
   * @param {boolean} create - forces the creation of the feature table if it doesn't exist.
   * @return {Object}
   */
  getFeatureTable: function (script, language, feature, create) {
    var langSysTable = this.getLangSysTable(script, language, create);

    if (langSysTable) {
      var featureRecord;
      var featIndexes = langSysTable.featureIndexes;
      var allFeatures = this.font.tables[this.tableName].features; // The FeatureIndex array of indices is in arbitrary order,
      // even if allFeatures is sorted alphabetically by feature tag.

      for (var i = 0; i < featIndexes.length; i++) {
        featureRecord = allFeatures[featIndexes[i]];

        if (featureRecord.tag === feature) {
          return featureRecord.feature;
        }
      }

      if (create) {
        var index = allFeatures.length; // Automatic ordering of features would require to shift feature indexes in the script list.

        check.assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');
        featureRecord = {
          tag: feature,
          feature: {
            params: 0,
            lookupListIndexes: []
          }
        };
        allFeatures.push(featureRecord);
        featIndexes.push(index);
        return featureRecord.feature;
      }
    }
  },

  /**
   * Get the lookup tables of a given type for a script/language/feature.
   * @instance
   * @param {string} [script='DFLT']
   * @param {string} [language='dlft']
   * @param {string} feature - 4-letter feature code
   * @param {number} lookupType - 1 to 9
   * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.
   * @return {Object[]}
   */
  getLookupTables: function (script, language, feature, lookupType, create) {
    var featureTable = this.getFeatureTable(script, language, feature, create);
    var tables = [];

    if (featureTable) {
      var lookupTable;
      var lookupListIndexes = featureTable.lookupListIndexes;
      var allLookups = this.font.tables[this.tableName].lookups; // lookupListIndexes are in no particular order, so use naive search.

      for (var i = 0; i < lookupListIndexes.length; i++) {
        lookupTable = allLookups[lookupListIndexes[i]];

        if (lookupTable.lookupType === lookupType) {
          tables.push(lookupTable);
        }
      }

      if (tables.length === 0 && create) {
        lookupTable = {
          lookupType: lookupType,
          lookupFlag: 0,
          subtables: [],
          markFilteringSet: undefined
        };
        var index = allLookups.length;
        allLookups.push(lookupTable);
        lookupListIndexes.push(index);
        return [lookupTable];
      }
    }

    return tables;
  },

  /**
   * Find a glyph in a class definition table
   * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table
   * @param {object} classDefTable - an OpenType Layout class definition table
   * @param {number} glyphIndex - the index of the glyph to find
   * @returns {number} -1 if not found
   */
  getGlyphClass: function (classDefTable, glyphIndex) {
    switch (classDefTable.format) {
      case 1:
        if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {
          return classDefTable.classes[glyphIndex - classDefTable.startGlyph];
        }

        return 0;

      case 2:
        var range = searchRange(classDefTable.ranges, glyphIndex);
        return range ? range.classId : 0;
    }
  },

  /**
   * Find a glyph in a coverage table
   * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table
   * @param {object} coverageTable - an OpenType Layout coverage table
   * @param {number} glyphIndex - the index of the glyph to find
   * @returns {number} -1 if not found
   */
  getCoverageIndex: function (coverageTable, glyphIndex) {
    switch (coverageTable.format) {
      case 1:
        var index = binSearch(coverageTable.glyphs, glyphIndex);
        return index >= 0 ? index : -1;

      case 2:
        var range = searchRange(coverageTable.ranges, glyphIndex);
        return range ? range.index + glyphIndex - range.start : -1;
    }
  },

  /**
   * Returns the list of glyph indexes of a coverage table.
   * Format 1: the list is stored raw
   * Format 2: compact list as range records.
   * @instance
   * @param  {Object} coverageTable
   * @return {Array}
   */
  expandCoverage: function (coverageTable) {
    if (coverageTable.format === 1) {
      return coverageTable.glyphs;
    } else {
      var glyphs = [];
      var ranges = coverageTable.ranges;

      for (var i = 0; i < ranges.length; i++) {
        var range = ranges[i];
        var start = range.start;
        var end = range.end;

        for (var j = start; j <= end; j++) {
          glyphs.push(j);
        }
      }

      return glyphs;
    }
  }
}; // The Position object provides utility methods to manipulate

/**
 * @exports opentype.Position
 * @class
 * @extends opentype.Layout
 * @param {opentype.Font}
 * @constructor
 */

function Position(font) {
  Layout.call(this, font, 'gpos');
}

Position.prototype = Layout.prototype;
/**
 * Init some data for faster and easier access later.
 */

Position.prototype.init = function () {
  var script = this.getDefaultScriptName();
  this.defaultKerningTables = this.getKerningTables(script);
};
/**
 * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.
 *
 * @param {integer} leftIndex - left glyph index
 * @param {integer} rightIndex - right glyph index
 * @returns {integer}
 */


Position.prototype.getKerningValue = function (kerningLookups, leftIndex, rightIndex) {
  for (var i = 0; i < kerningLookups.length; i++) {
    var subtables = kerningLookups[i].subtables;

    for (var j = 0; j < subtables.length; j++) {
      var subtable = subtables[j];
      var covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);

      if (covIndex < 0) {
        continue;
      }

      switch (subtable.posFormat) {
        case 1:
          // Search Pair Adjustment Positioning Format 1
          var pairSet = subtable.pairSets[covIndex];

          for (var k = 0; k < pairSet.length; k++) {
            var pair = pairSet[k];

            if (pair.secondGlyph === rightIndex) {
              return pair.value1 && pair.value1.xAdvance || 0;
            }
          }

          break;
        // left glyph found, not right glyph - try next subtable

        case 2:
          // Search Pair Adjustment Positioning Format 2
          var class1 = this.getGlyphClass(subtable.classDef1, leftIndex);
          var class2 = this.getGlyphClass(subtable.classDef2, rightIndex);
          var pair$1 = subtable.classRecords[class1][class2];
          return pair$1.value1 && pair$1.value1.xAdvance || 0;
      }
    }
  }

  return 0;
};
/**
 * List all kerning lookup tables.
 *
 * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value
 * @param {string} [language='dflt']
 * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)
 */


Position.prototype.getKerningTables = function (script, language) {
  if (this.font.tables.gpos) {
    return this.getLookupTables(script, language, 'kern', 2);
  }
}; // The Substitution object provides utility methods to manipulate

/**
 * @exports opentype.Substitution
 * @class
 * @extends opentype.Layout
 * @param {opentype.Font}
 * @constructor
 */


function Substitution(font) {
  Layout.call(this, font, 'gsub');
} // Check if 2 arrays of primitives are equal.


function arraysEqual(ar1, ar2) {
  var n = ar1.length;

  if (n !== ar2.length) {
    return false;
  }

  for (var i = 0; i < n; i++) {
    if (ar1[i] !== ar2[i]) {
      return false;
    }
  }

  return true;
} // Find the first subtable of a lookup table in a particular format.


function getSubstFormat(lookupTable, format, defaultSubtable) {
  var subtables = lookupTable.subtables;

  for (var i = 0; i < subtables.length; i++) {
    var subtable = subtables[i];

    if (subtable.substFormat === format) {
      return subtable;
    }
  }

  if (defaultSubtable) {
    subtables.push(defaultSubtable);
    return defaultSubtable;
  }

  return undefined;
}

Substitution.prototype = Layout.prototype;
/**
 * Create a default GSUB table.
 * @return {Object} gsub - The GSUB table.
 */

Substitution.prototype.createDefaultTable = function () {
  // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.
  return {
    version: 1,
    scripts: [{
      tag: 'DFLT',
      script: {
        defaultLangSys: {
          reserved: 0,
          reqFeatureIndex: 0xffff,
          featureIndexes: []
        },
        langSysRecords: []
      }
    }],
    features: [],
    lookups: []
  };
};
/**
 * List all single substitutions (lookup type 1) for a given script, language, and feature.
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)
 * @return {Array} substitutions - The list of substitutions.
 */


Substitution.prototype.getSingle = function (feature, script, language) {
  var substitutions = [];
  var lookupTables = this.getLookupTables(script, language, feature, 1);

  for (var idx = 0; idx < lookupTables.length; idx++) {
    var subtables = lookupTables[idx].subtables;

    for (var i = 0; i < subtables.length; i++) {
      var subtable = subtables[i];
      var glyphs = this.expandCoverage(subtable.coverage);
      var j = void 0;

      if (subtable.substFormat === 1) {
        var delta = subtable.deltaGlyphId;

        for (j = 0; j < glyphs.length; j++) {
          var glyph = glyphs[j];
          substitutions.push({
            sub: glyph,
            by: glyph + delta
          });
        }
      } else {
        var substitute = subtable.substitute;

        for (j = 0; j < glyphs.length; j++) {
          substitutions.push({
            sub: glyphs[j],
            by: substitute[j]
          });
        }
      }
    }
  }

  return substitutions;
};
/**
 * List all alternates (lookup type 3) for a given script, language, and feature.
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 * @param {string} feature - 4-character feature name ('aalt', 'salt'...)
 * @return {Array} alternates - The list of alternates
 */


Substitution.prototype.getAlternates = function (feature, script, language) {
  var alternates = [];
  var lookupTables = this.getLookupTables(script, language, feature, 3);

  for (var idx = 0; idx < lookupTables.length; idx++) {
    var subtables = lookupTables[idx].subtables;

    for (var i = 0; i < subtables.length; i++) {
      var subtable = subtables[i];
      var glyphs = this.expandCoverage(subtable.coverage);
      var alternateSets = subtable.alternateSets;

      for (var j = 0; j < glyphs.length; j++) {
        alternates.push({
          sub: glyphs[j],
          by: alternateSets[j]
        });
      }
    }
  }

  return alternates;
};
/**
 * List all ligatures (lookup type 4) for a given script, language, and feature.
 * The result is an array of ligature objects like { sub: [ids], by: id }
 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 * @return {Array} ligatures - The list of ligatures.
 */


Substitution.prototype.getLigatures = function (feature, script, language) {
  var ligatures = [];
  var lookupTables = this.getLookupTables(script, language, feature, 4);

  for (var idx = 0; idx < lookupTables.length; idx++) {
    var subtables = lookupTables[idx].subtables;

    for (var i = 0; i < subtables.length; i++) {
      var subtable = subtables[i];
      var glyphs = this.expandCoverage(subtable.coverage);
      var ligatureSets = subtable.ligatureSets;

      for (var j = 0; j < glyphs.length; j++) {
        var startGlyph = glyphs[j];
        var ligSet = ligatureSets[j];

        for (var k = 0; k < ligSet.length; k++) {
          var lig = ligSet[k];
          ligatures.push({
            sub: [startGlyph].concat(lig.components),
            by: lig.ligGlyph
          });
        }
      }
    }
  }

  return ligatures;
};
/**
 * Add or modify a single substitution (lookup type 1)
 * Format 2, more flexible, is always used.
 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
 * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 */


Substitution.prototype.addSingle = function (feature, substitution, script, language) {
  var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];
  var subtable = getSubstFormat(lookupTable, 2, {
    // lookup type 1 subtable, format 2, coverage format 1
    substFormat: 2,
    coverage: {
      format: 1,
      glyphs: []
    },
    substitute: []
  });
  check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
  var coverageGlyph = substitution.sub;
  var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);

  if (pos < 0) {
    pos = -1 - pos;
    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
    subtable.substitute.splice(pos, 0, 0);
  }

  subtable.substitute[pos] = substitution.by;
};
/**
 * Add or modify an alternate substitution (lookup type 1)
 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
 * @param {Object} substitution - { sub: id, by: [ids] }
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 */


Substitution.prototype.addAlternate = function (feature, substitution, script, language) {
  var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];
  var subtable = getSubstFormat(lookupTable, 1, {
    // lookup type 3 subtable, format 1, coverage format 1
    substFormat: 1,
    coverage: {
      format: 1,
      glyphs: []
    },
    alternateSets: []
  });
  check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
  var coverageGlyph = substitution.sub;
  var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);

  if (pos < 0) {
    pos = -1 - pos;
    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
    subtable.alternateSets.splice(pos, 0, 0);
  }

  subtable.alternateSets[pos] = substitution.by;
};
/**
 * Add a ligature (lookup type 4)
 * Ligatures with more components must be stored ahead of those with fewer components in order to be found
 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
 * @param {Object} ligature - { sub: [ids], by: id }
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 */


Substitution.prototype.addLigature = function (feature, ligature, script, language) {
  var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];
  var subtable = lookupTable.subtables[0];

  if (!subtable) {
    subtable = {
      // lookup type 4 subtable, format 1, coverage format 1
      substFormat: 1,
      coverage: {
        format: 1,
        glyphs: []
      },
      ligatureSets: []
    };
    lookupTable.subtables[0] = subtable;
  }

  check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
  var coverageGlyph = ligature.sub[0];
  var ligComponents = ligature.sub.slice(1);
  var ligatureTable = {
    ligGlyph: ligature.by,
    components: ligComponents
  };
  var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);

  if (pos >= 0) {
    // ligatureSet already exists
    var ligatureSet = subtable.ligatureSets[pos];

    for (var i = 0; i < ligatureSet.length; i++) {
      // If ligature already exists, return.
      if (arraysEqual(ligatureSet[i].components, ligComponents)) {
        return;
      }
    } // ligature does not exist: add it.


    ligatureSet.push(ligatureTable);
  } else {
    // Create a new ligatureSet and add coverage for the first glyph.
    pos = -1 - pos;
    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
    subtable.ligatureSets.splice(pos, 0, [ligatureTable]);
  }
};
/**
 * List all feature data for a given script and language.
 * @param {string} feature - 4-letter feature name
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 * @return {Array} substitutions - The list of substitutions.
 */


Substitution.prototype.getFeature = function (feature, script, language) {
  if (/ss\d\d/.test(feature)) {
    // ss01 - ss20
    return this.getSingle(feature, script, language);
  }

  switch (feature) {
    case 'aalt':
    case 'salt':
      return this.getSingle(feature, script, language).concat(this.getAlternates(feature, script, language));

    case 'dlig':
    case 'liga':
    case 'rlig':
      return this.getLigatures(feature, script, language);
  }

  return undefined;
};
/**
 * Add a substitution to a feature for a given script and language.
 * @param {string} feature - 4-letter feature name
 * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 */


Substitution.prototype.add = function (feature, sub, script, language) {
  if (/ss\d\d/.test(feature)) {
    // ss01 - ss20
    return this.addSingle(feature, sub, script, language);
  }

  switch (feature) {
    case 'aalt':
    case 'salt':
      if (typeof sub.by === 'number') {
        return this.addSingle(feature, sub, script, language);
      }

      return this.addAlternate(feature, sub, script, language);

    case 'dlig':
    case 'liga':
    case 'rlig':
      return this.addLigature(feature, sub, script, language);
  }

  return undefined;
};

function isBrowser() {
  return typeof window !== 'undefined';
}

function nodeBufferToArrayBuffer(buffer) {
  var ab = new ArrayBuffer(buffer.length);
  var view = new Uint8Array(ab);

  for (var i = 0; i < buffer.length; ++i) {
    view[i] = buffer[i];
  }

  return ab;
}

function arrayBufferToNodeBuffer(ab) {
  var buffer = new Buffer(ab.byteLength);
  var view = new Uint8Array(ab);

  for (var i = 0; i < buffer.length; ++i) {
    buffer[i] = view[i];
  }

  return buffer;
}

function checkArgument(expression, message) {
  if (!expression) {
    throw message;
  }
} // The `glyf` table describes the glyphs in TrueType outline format.
// Parse the coordinate data for a glyph.


function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {
  var v;

  if ((flag & shortVectorBitMask) > 0) {
    // The coordinate is 1 byte long.
    v = p.parseByte(); // The `same` bit is re-used for short values to signify the sign of the value.

    if ((flag & sameBitMask) === 0) {
      v = -v;
    }

    v = previousValue + v;
  } else {
    //  The coordinate is 2 bytes long.
    // If the `same` bit is set, the coordinate is the same as the previous coordinate.
    if ((flag & sameBitMask) > 0) {
      v = previousValue;
    } else {
      // Parse the coordinate as a signed 16-bit delta value.
      v = previousValue + p.parseShort();
    }
  }

  return v;
} // Parse a TrueType glyph.


function parseGlyph(glyph, data, start) {
  var p = new parse.Parser(data, start);
  glyph.numberOfContours = p.parseShort();
  glyph._xMin = p.parseShort();
  glyph._yMin = p.parseShort();
  glyph._xMax = p.parseShort();
  glyph._yMax = p.parseShort();
  var flags;
  var flag;

  if (glyph.numberOfContours > 0) {
    // This glyph is not a composite.
    var endPointIndices = glyph.endPointIndices = [];

    for (var i = 0; i < glyph.numberOfContours; i += 1) {
      endPointIndices.push(p.parseUShort());
    }

    glyph.instructionLength = p.parseUShort();
    glyph.instructions = [];

    for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {
      glyph.instructions.push(p.parseByte());
    }

    var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;
    flags = [];

    for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {
      flag = p.parseByte();
      flags.push(flag); // If bit 3 is set, we repeat this flag n times, where n is the next byte.

      if ((flag & 8) > 0) {
        var repeatCount = p.parseByte();

        for (var j = 0; j < repeatCount; j += 1) {
          flags.push(flag);
          i$2 += 1;
        }
      }
    }

    check.argument(flags.length === numberOfCoordinates, 'Bad flags.');

    if (endPointIndices.length > 0) {
      var points = [];
      var point; // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.

      if (numberOfCoordinates > 0) {
        for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {
          flag = flags[i$3];
          point = {};
          point.onCurve = !!(flag & 1);
          point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;
          points.push(point);
        }

        var px = 0;

        for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {
          flag = flags[i$4];
          point = points[i$4];
          point.x = parseGlyphCoordinate(p, flag, px, 2, 16);
          px = point.x;
        }

        var py = 0;

        for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {
          flag = flags[i$5];
          point = points[i$5];
          point.y = parseGlyphCoordinate(p, flag, py, 4, 32);
          py = point.y;
        }
      }

      glyph.points = points;
    } else {
      glyph.points = [];
    }
  } else if (glyph.numberOfContours === 0) {
    glyph.points = [];
  } else {
    glyph.isComposite = true;
    glyph.points = [];
    glyph.components = [];
    var moreComponents = true;

    while (moreComponents) {
      flags = p.parseUShort();
      var component = {
        glyphIndex: p.parseUShort(),
        xScale: 1,
        scale01: 0,
        scale10: 0,
        yScale: 1,
        dx: 0,
        dy: 0
      };

      if ((flags & 1) > 0) {
        // The arguments are words
        if ((flags & 2) > 0) {
          // values are offset
          component.dx = p.parseShort();
          component.dy = p.parseShort();
        } else {
          // values are matched points
          component.matchedPoints = [p.parseUShort(), p.parseUShort()];
        }
      } else {
        // The arguments are bytes
        if ((flags & 2) > 0) {
          // values are offset
          component.dx = p.parseChar();
          component.dy = p.parseChar();
        } else {
          // values are matched points
          component.matchedPoints = [p.parseByte(), p.parseByte()];
        }
      }

      if ((flags & 8) > 0) {
        // We have a scale
        component.xScale = component.yScale = p.parseF2Dot14();
      } else if ((flags & 64) > 0) {
        // We have an X / Y scale
        component.xScale = p.parseF2Dot14();
        component.yScale = p.parseF2Dot14();
      } else if ((flags & 128) > 0) {
        // We have a 2x2 transformation
        component.xScale = p.parseF2Dot14();
        component.scale01 = p.parseF2Dot14();
        component.scale10 = p.parseF2Dot14();
        component.yScale = p.parseF2Dot14();
      }

      glyph.components.push(component);
      moreComponents = !!(flags & 32);
    }

    if (flags & 0x100) {
      // We have instructions
      glyph.instructionLength = p.parseUShort();
      glyph.instructions = [];

      for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {
        glyph.instructions.push(p.parseByte());
      }
    }
  }
} // Transform an array of points and return a new array.


function transformPoints(points, transform) {
  var newPoints = [];

  for (var i = 0; i < points.length; i += 1) {
    var pt = points[i];
    var newPt = {
      x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,
      y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,
      onCurve: pt.onCurve,
      lastPointOfContour: pt.lastPointOfContour
    };
    newPoints.push(newPt);
  }

  return newPoints;
}

function getContours(points) {
  var contours = [];
  var currentContour = [];

  for (var i = 0; i < points.length; i += 1) {
    var pt = points[i];
    currentContour.push(pt);

    if (pt.lastPointOfContour) {
      contours.push(currentContour);
      currentContour = [];
    }
  }

  check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
  return contours;
} // Convert the TrueType glyph outline to a Path.


function getPath(points) {
  var p = new Path();

  if (!points) {
    return p;
  }

  var contours = getContours(points);

  for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {
    var contour = contours[contourIndex];
    var prev = null;
    var curr = contour[contour.length - 1];
    var next = contour[0];

    if (curr.onCurve) {
      p.moveTo(curr.x, curr.y);
    } else {
      if (next.onCurve) {
        p.moveTo(next.x, next.y);
      } else {
        // If both first and last points are off-curve, start at their middle.
        var start = {
          x: (curr.x + next.x) * 0.5,
          y: (curr.y + next.y) * 0.5
        };
        p.moveTo(start.x, start.y);
      }
    }

    for (var i = 0; i < contour.length; ++i) {
      prev = curr;
      curr = next;
      next = contour[(i + 1) % contour.length];

      if (curr.onCurve) {
        // This is a straight line.
        p.lineTo(curr.x, curr.y);
      } else {
        var prev2 = prev;
        var next2 = next;

        if (!prev.onCurve) {
          prev2 = {
            x: (curr.x + prev.x) * 0.5,
            y: (curr.y + prev.y) * 0.5
          };
        }

        if (!next.onCurve) {
          next2 = {
            x: (curr.x + next.x) * 0.5,
            y: (curr.y + next.y) * 0.5
          };
        }

        p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);
      }
    }

    p.closePath();
  }

  return p;
}

function buildPath(glyphs, glyph) {
  if (glyph.isComposite) {
    for (var j = 0; j < glyph.components.length; j += 1) {
      var component = glyph.components[j];
      var componentGlyph = glyphs.get(component.glyphIndex); // Force the ttfGlyphLoader to parse the glyph.

      componentGlyph.getPath();

      if (componentGlyph.points) {
        var transformedPoints = void 0;

        if (component.matchedPoints === undefined) {
          // component positioned by offset
          transformedPoints = transformPoints(componentGlyph.points, component);
        } else {
          // component positioned by matched points
          if (component.matchedPoints[0] > glyph.points.length - 1 || component.matchedPoints[1] > componentGlyph.points.length - 1) {
            throw Error('Matched points out of range in ' + glyph.name);
          }

          var firstPt = glyph.points[component.matchedPoints[0]];
          var secondPt = componentGlyph.points[component.matchedPoints[1]];
          var transform = {
            xScale: component.xScale,
            scale01: component.scale01,
            scale10: component.scale10,
            yScale: component.yScale,
            dx: 0,
            dy: 0
          };
          secondPt = transformPoints([secondPt], transform)[0];
          transform.dx = firstPt.x - secondPt.x;
          transform.dy = firstPt.y - secondPt.y;
          transformedPoints = transformPoints(componentGlyph.points, transform);
        }

        glyph.points = glyph.points.concat(transformedPoints);
      }
    }
  }

  return getPath(glyph.points);
}

function parseGlyfTableAll(data, start, loca, font) {
  var glyphs = new glyphset.GlyphSet(font); // The last element of the loca table is invalid.

  for (var i = 0; i < loca.length - 1; i += 1) {
    var offset = loca[i];
    var nextOffset = loca[i + 1];

    if (offset !== nextOffset) {
      glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));
    } else {
      glyphs.push(i, glyphset.glyphLoader(font, i));
    }
  }

  return glyphs;
}

function parseGlyfTableOnLowMemory(data, start, loca, font) {
  var glyphs = new glyphset.GlyphSet(font);

  font._push = function (i) {
    var offset = loca[i];
    var nextOffset = loca[i + 1];

    if (offset !== nextOffset) {
      glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));
    } else {
      glyphs.push(i, glyphset.glyphLoader(font, i));
    }
  };

  return glyphs;
} // Parse all the glyphs according to the offsets from the `loca` table.


function parseGlyfTable(data, start, loca, font, opt) {
  if (opt.lowMemory) {
    return parseGlyfTableOnLowMemory(data, start, loca, font);
  } else {
    return parseGlyfTableAll(data, start, loca, font);
  }
}

var glyf = {
  getPath: getPath,
  parse: parseGlyfTable
};
/* A TrueType font hinting interpreter.
*
* (c) 2017 Axel Kittenberger
*
* This interpreter has been implemented according to this documentation:
* https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html
*
* According to the documentation F24DOT6 values are used for pixels.
* That means calculation is 1/64 pixel accurate and uses integer operations.
* However, Javascript has floating point operations by default and only
* those are available. One could make a case to simulate the 1/64 accuracy
* exactly by truncating after every division operation
* (for example with << 0) to get pixel exactly results as other TrueType
* implementations. It may make sense since some fonts are pixel optimized
* by hand using DELTAP instructions. The current implementation doesn't
* and rather uses full floating point precision.
*
* xScale, yScale and rotation is currently ignored.
*
* A few non-trivial instructions are missing as I didn't encounter yet
* a font that used them to test a possible implementation.
*
* Some fonts seem to use undocumented features regarding the twilight zone.
* Only some of them are implemented as they were encountered.
*
* The exports.DEBUG statements are removed on the minified distribution file.
*/

var instructionTable;
var exec;
var execGlyph;
var execComponent;
/*
* Creates a hinting object.
*
* There ought to be exactly one
* for each truetype font that is used for hinting.
*/

function Hinting(font) {
  // the font this hinting object is for
  this.font = font;

  this.getCommands = function (hPoints) {
    return glyf.getPath(hPoints).commands;
  }; // cached states


  this._fpgmState = this._prepState = undefined; // errorState
  // 0 ... all okay
  // 1 ... had an error in a glyf,
  //       continue working but stop spamming
  //       the console
  // 2 ... error at prep, stop hinting at this ppem
  // 3 ... error at fpeg, stop hinting for this font at all

  this._errorState = 0;
}
/*
* Not rounding.
*/


function roundOff(v) {
  return v;
}
/*
* Rounding to grid.
*/


function roundToGrid(v) {
  //Rounding in TT is supposed to "symmetrical around zero"
  return Math.sign(v) * Math.round(Math.abs(v));
}
/*
* Rounding to double grid.
*/


function roundToDoubleGrid(v) {
  return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;
}
/*
* Rounding to half grid.
*/


function roundToHalfGrid(v) {
  return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);
}
/*
* Rounding to up to grid.
*/


function roundUpToGrid(v) {
  return Math.sign(v) * Math.ceil(Math.abs(v));
}
/*
* Rounding to down to grid.
*/


function roundDownToGrid(v) {
  return Math.sign(v) * Math.floor(Math.abs(v));
}
/*
* Super rounding.
*/


var roundSuper = function (v) {
  var period = this.srPeriod;
  var phase = this.srPhase;
  var threshold = this.srThreshold;
  var sign = 1;

  if (v < 0) {
    v = -v;
    sign = -1;
  }

  v += threshold - phase;
  v = Math.trunc(v / period) * period;
  v += phase; // according to http://xgridfit.sourceforge.net/round.html

  if (v < 0) {
    return phase * sign;
  }

  return v * sign;
};
/*
* Unit vector of x-axis.
*/


var xUnitVector = {
  x: 1,
  y: 0,
  axis: 'x',
  // Gets the projected distance between two points.
  // o1/o2 ... if true, respective original position is used.
  distance: function (p1, p2, o1, o2) {
    return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);
  },
  // Moves point p so the moved position has the same relative
  // position to the moved positions of rp1 and rp2 than the
  // original positions had.
  //
  // See APPENDIX on INTERPOLATE at the bottom of this file.
  interpolate: function (p, rp1, rp2, pv) {
    var do1;
    var do2;
    var doa1;
    var doa2;
    var dm1;
    var dm2;
    var dt;

    if (!pv || pv === this) {
      do1 = p.xo - rp1.xo;
      do2 = p.xo - rp2.xo;
      dm1 = rp1.x - rp1.xo;
      dm2 = rp2.x - rp2.xo;
      doa1 = Math.abs(do1);
      doa2 = Math.abs(do2);
      dt = doa1 + doa2;

      if (dt === 0) {
        p.x = p.xo + (dm1 + dm2) / 2;
        return;
      }

      p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;
      return;
    }

    do1 = pv.distance(p, rp1, true, true);
    do2 = pv.distance(p, rp2, true, true);
    dm1 = pv.distance(rp1, rp1, false, true);
    dm2 = pv.distance(rp2, rp2, false, true);
    doa1 = Math.abs(do1);
    doa2 = Math.abs(do2);
    dt = doa1 + doa2;

    if (dt === 0) {
      xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
      return;
    }

    xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
  },
  // Slope of line normal to this
  normalSlope: Number.NEGATIVE_INFINITY,
  // Sets the point 'p' relative to point 'rp'
  // by the distance 'd'.
  //
  // See APPENDIX on SETRELATIVE at the bottom of this file.
  //
  // p   ... point to set
  // rp  ... reference point
  // d   ... distance on projection vector
  // pv  ... projection vector (undefined = this)
  // org ... if true, uses the original position of rp as reference.
  setRelative: function (p, rp, d, pv, org) {
    if (!pv || pv === this) {
      p.x = (org ? rp.xo : rp.x) + d;
      return;
    }

    var rpx = org ? rp.xo : rp.x;
    var rpy = org ? rp.yo : rp.y;
    var rpdx = rpx + d * pv.x;
    var rpdy = rpy + d * pv.y;
    p.x = rpdx + (p.y - rpdy) / pv.normalSlope;
  },
  // Slope of vector line.
  slope: 0,
  // Touches the point p.
  touch: function (p) {
    p.xTouched = true;
  },
  // Tests if a point p is touched.
  touched: function (p) {
    return p.xTouched;
  },
  // Untouches the point p.
  untouch: function (p) {
    p.xTouched = false;
  }
};
/*
* Unit vector of y-axis.
*/

var yUnitVector = {
  x: 0,
  y: 1,
  axis: 'y',
  // Gets the projected distance between two points.
  // o1/o2 ... if true, respective original position is used.
  distance: function (p1, p2, o1, o2) {
    return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);
  },
  // Moves point p so the moved position has the same relative
  // position to the moved positions of rp1 and rp2 than the
  // original positions had.
  //
  // See APPENDIX on INTERPOLATE at the bottom of this file.
  interpolate: function (p, rp1, rp2, pv) {
    var do1;
    var do2;
    var doa1;
    var doa2;
    var dm1;
    var dm2;
    var dt;

    if (!pv || pv === this) {
      do1 = p.yo - rp1.yo;
      do2 = p.yo - rp2.yo;
      dm1 = rp1.y - rp1.yo;
      dm2 = rp2.y - rp2.yo;
      doa1 = Math.abs(do1);
      doa2 = Math.abs(do2);
      dt = doa1 + doa2;

      if (dt === 0) {
        p.y = p.yo + (dm1 + dm2) / 2;
        return;
      }

      p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;
      return;
    }

    do1 = pv.distance(p, rp1, true, true);
    do2 = pv.distance(p, rp2, true, true);
    dm1 = pv.distance(rp1, rp1, false, true);
    dm2 = pv.distance(rp2, rp2, false, true);
    doa1 = Math.abs(do1);
    doa2 = Math.abs(do2);
    dt = doa1 + doa2;

    if (dt === 0) {
      yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
      return;
    }

    yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
  },
  // Slope of line normal to this.
  normalSlope: 0,
  // Sets the point 'p' relative to point 'rp'
  // by the distance 'd'
  //
  // See APPENDIX on SETRELATIVE at the bottom of this file.
  //
  // p   ... point to set
  // rp  ... reference point
  // d   ... distance on projection vector
  // pv  ... projection vector (undefined = this)
  // org ... if true, uses the original position of rp as reference.
  setRelative: function (p, rp, d, pv, org) {
    if (!pv || pv === this) {
      p.y = (org ? rp.yo : rp.y) + d;
      return;
    }

    var rpx = org ? rp.xo : rp.x;
    var rpy = org ? rp.yo : rp.y;
    var rpdx = rpx + d * pv.x;
    var rpdy = rpy + d * pv.y;
    p.y = rpdy + pv.normalSlope * (p.x - rpdx);
  },
  // Slope of vector line.
  slope: Number.POSITIVE_INFINITY,
  // Touches the point p.
  touch: function (p) {
    p.yTouched = true;
  },
  // Tests if a point p is touched.
  touched: function (p) {
    return p.yTouched;
  },
  // Untouches the point p.
  untouch: function (p) {
    p.yTouched = false;
  }
};
Object.freeze(xUnitVector);
Object.freeze(yUnitVector);
/*
* Creates a unit vector that is not x- or y-axis.
*/

function UnitVector(x, y) {
  this.x = x;
  this.y = y;
  this.axis = undefined;
  this.slope = y / x;
  this.normalSlope = -x / y;
  Object.freeze(this);
}
/*
* Gets the projected distance between two points.
* o1/o2 ... if true, respective original position is used.
*/


UnitVector.prototype.distance = function (p1, p2, o1, o2) {
  return this.x * xUnitVector.distance(p1, p2, o1, o2) + this.y * yUnitVector.distance(p1, p2, o1, o2);
};
/*
* Moves point p so the moved position has the same relative
* position to the moved positions of rp1 and rp2 than the
* original positions had.
*
* See APPENDIX on INTERPOLATE at the bottom of this file.
*/


UnitVector.prototype.interpolate = function (p, rp1, rp2, pv) {
  var dm1;
  var dm2;
  var do1;
  var do2;
  var doa1;
  var doa2;
  var dt;
  do1 = pv.distance(p, rp1, true, true);
  do2 = pv.distance(p, rp2, true, true);
  dm1 = pv.distance(rp1, rp1, false, true);
  dm2 = pv.distance(rp2, rp2, false, true);
  doa1 = Math.abs(do1);
  doa2 = Math.abs(do2);
  dt = doa1 + doa2;

  if (dt === 0) {
    this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
    return;
  }

  this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
};
/*
* Sets the point 'p' relative to point 'rp'
* by the distance 'd'
*
* See APPENDIX on SETRELATIVE at the bottom of this file.
*
* p   ...  point to set
* rp  ... reference point
* d   ... distance on projection vector
* pv  ... projection vector (undefined = this)
* org ... if true, uses the original position of rp as reference.
*/


UnitVector.prototype.setRelative = function (p, rp, d, pv, org) {
  pv = pv || this;
  var rpx = org ? rp.xo : rp.x;
  var rpy = org ? rp.yo : rp.y;
  var rpdx = rpx + d * pv.x;
  var rpdy = rpy + d * pv.y;
  var pvns = pv.normalSlope;
  var fvs = this.slope;
  var px = p.x;
  var py = p.y;
  p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);
  p.y = fvs * (p.x - px) + py;
};
/*
* Touches the point p.
*/


UnitVector.prototype.touch = function (p) {
  p.xTouched = true;
  p.yTouched = true;
};
/*
* Returns a unit vector with x/y coordinates.
*/


function getUnitVector(x, y) {
  var d = Math.sqrt(x * x + y * y);
  x /= d;
  y /= d;

  if (x === 1 && y === 0) {
    return xUnitVector;
  } else if (x === 0 && y === 1) {
    return yUnitVector;
  } else {
    return new UnitVector(x, y);
  }
}
/*
* Creates a point in the hinting engine.
*/


function HPoint(x, y, lastPointOfContour, onCurve) {
  this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value

  this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value

  this.lastPointOfContour = lastPointOfContour;
  this.onCurve = onCurve;
  this.prevPointOnContour = undefined;
  this.nextPointOnContour = undefined;
  this.xTouched = false;
  this.yTouched = false;
  Object.preventExtensions(this);
}
/*
* Returns the next touched point on the contour.
*
* v  ... unit vector to test touch axis.
*/


HPoint.prototype.nextTouched = function (v) {
  var p = this.nextPointOnContour;

  while (!v.touched(p) && p !== this) {
    p = p.nextPointOnContour;
  }

  return p;
};
/*
* Returns the previous touched point on the contour
*
* v  ... unit vector to test touch axis.
*/


HPoint.prototype.prevTouched = function (v) {
  var p = this.prevPointOnContour;

  while (!v.touched(p) && p !== this) {
    p = p.prevPointOnContour;
  }

  return p;
};
/*
* The zero point.
*/


var HPZero = Object.freeze(new HPoint(0, 0));
/*
* The default state of the interpreter.
*
* Note: Freezing the defaultState and then deriving from it
* makes the V8 Javascript engine going awkward,
* so this is avoided, albeit the defaultState shouldn't
* ever change.
*/

var defaultState = {
  cvCutIn: 17 / 16,
  // control value cut in
  deltaBase: 9,
  deltaShift: 0.125,
  loop: 1,
  // loops some instructions
  minDis: 1,
  // minimum distance
  autoFlip: true
};
/*
* The current state of the interpreter.
*
* env  ... 'fpgm' or 'prep' or 'glyf'
* prog ... the program
*/

function State(env, prog) {
  this.env = env;
  this.stack = [];
  this.prog = prog;

  switch (env) {
    case 'glyf':
      this.zp0 = this.zp1 = this.zp2 = 1;
      this.rp0 = this.rp1 = this.rp2 = 0;

    /* fall through */

    case 'prep':
      this.fv = this.pv = this.dpv = xUnitVector;
      this.round = roundToGrid;
  }
}
/*
* Executes a glyph program.
*
* This does the hinting for each glyph.
*
* Returns an array of moved points.
*
* glyph: the glyph to hint
* ppem: the size the glyph is rendered for
*/


Hinting.prototype.exec = function (glyph, ppem) {
  if (typeof ppem !== 'number') {
    throw new Error('Point size is not a number!');
  } // Received a fatal error, don't do any hinting anymore.


  if (this._errorState > 2) {
    return;
  }

  var font = this.font;
  var prepState = this._prepState;

  if (!prepState || prepState.ppem !== ppem) {
    var fpgmState = this._fpgmState;

    if (!fpgmState) {
      // Executes the fpgm state.
      // This is used by fonts to define functions.
      State.prototype = defaultState;
      fpgmState = this._fpgmState = new State('fpgm', font.tables.fpgm);
      fpgmState.funcs = [];
      fpgmState.font = font;

      if (exports.DEBUG) {
        console.log('---EXEC FPGM---');
        fpgmState.step = -1;
      }

      try {
        exec(fpgmState);
      } catch (e) {
        console.log('Hinting error in FPGM:' + e);
        this._errorState = 3;
        return;
      }
    } // Executes the prep program for this ppem setting.
    // This is used by fonts to set cvt values
    // depending on to be rendered font size.


    State.prototype = fpgmState;
    prepState = this._prepState = new State('prep', font.tables.prep);
    prepState.ppem = ppem; // Creates a copy of the cvt table
    // and scales it to the current ppem setting.

    var oCvt = font.tables.cvt;

    if (oCvt) {
      var cvt = prepState.cvt = new Array(oCvt.length);
      var scale = ppem / font.unitsPerEm;

      for (var c = 0; c < oCvt.length; c++) {
        cvt[c] = oCvt[c] * scale;
      }
    } else {
      prepState.cvt = [];
    }

    if (exports.DEBUG) {
      console.log('---EXEC PREP---');
      prepState.step = -1;
    }

    try {
      exec(prepState);
    } catch (e) {
      if (this._errorState < 2) {
        console.log('Hinting error in PREP:' + e);
      }

      this._errorState = 2;
    }
  }

  if (this._errorState > 1) {
    return;
  }

  try {
    return execGlyph(glyph, prepState);
  } catch (e) {
    if (this._errorState < 1) {
      console.log('Hinting error:' + e);
      console.log('Note: further hinting errors are silenced');
    }

    this._errorState = 1;
    return undefined;
  }
};
/*
* Executes the hinting program for a glyph.
*/


execGlyph = function (glyph, prepState) {
  // original point positions
  var xScale = prepState.ppem / prepState.font.unitsPerEm;
  var yScale = xScale;
  var components = glyph.components;
  var contours;
  var gZone;
  var state;
  State.prototype = prepState;

  if (!components) {
    state = new State('glyf', glyph.instructions);

    if (exports.DEBUG) {
      console.log('---EXEC GLYPH---');
      state.step = -1;
    }

    execComponent(glyph, state, xScale, yScale);
    gZone = state.gZone;
  } else {
    var font = prepState.font;
    gZone = [];
    contours = [];

    for (var i = 0; i < components.length; i++) {
      var c = components[i];
      var cg = font.glyphs.get(c.glyphIndex);
      state = new State('glyf', cg.instructions);

      if (exports.DEBUG) {
        console.log('---EXEC COMP ' + i + '---');
        state.step = -1;
      }

      execComponent(cg, state, xScale, yScale); // appends the computed points to the result array
      // post processes the component points

      var dx = Math.round(c.dx * xScale);
      var dy = Math.round(c.dy * yScale);
      var gz = state.gZone;
      var cc = state.contours;

      for (var pi = 0; pi < gz.length; pi++) {
        var p = gz[pi];
        p.xTouched = p.yTouched = false;
        p.xo = p.x = p.x + dx;
        p.yo = p.y = p.y + dy;
      }

      var gLen = gZone.length;
      gZone.push.apply(gZone, gz);

      for (var j = 0; j < cc.length; j++) {
        contours.push(cc[j] + gLen);
      }
    }

    if (glyph.instructions && !state.inhibitGridFit) {
      // the composite has instructions on its own
      state = new State('glyf', glyph.instructions);
      state.gZone = state.z0 = state.z1 = state.z2 = gZone;
      state.contours = contours; // note: HPZero cannot be used here, since
      //       the point might be modified

      gZone.push(new HPoint(0, 0), new HPoint(Math.round(glyph.advanceWidth * xScale), 0));

      if (exports.DEBUG) {
        console.log('---EXEC COMPOSITE---');
        state.step = -1;
      }

      exec(state);
      gZone.length -= 2;
    }
  }

  return gZone;
};
/*
* Executes the hinting program for a component of a multi-component glyph
* or of the glyph itself for a non-component glyph.
*/


execComponent = function (glyph, state, xScale, yScale) {
  var points = glyph.points || [];
  var pLen = points.length;
  var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];
  var contours = state.contours = []; // Scales the original points and
  // makes copies for the hinted points.

  var cp; // current point

  for (var i = 0; i < pLen; i++) {
    cp = points[i];
    gZone[i] = new HPoint(cp.x * xScale, cp.y * yScale, cp.lastPointOfContour, cp.onCurve);
  } // Chain links the contours.


  var sp; // start point

  var np; // next point

  for (var i$1 = 0; i$1 < pLen; i$1++) {
    cp = gZone[i$1];

    if (!sp) {
      sp = cp;
      contours.push(i$1);
    }

    if (cp.lastPointOfContour) {
      cp.nextPointOnContour = sp;
      sp.prevPointOnContour = cp;
      sp = undefined;
    } else {
      np = gZone[i$1 + 1];
      cp.nextPointOnContour = np;
      np.prevPointOnContour = cp;
    }
  }

  if (state.inhibitGridFit) {
    return;
  }

  if (exports.DEBUG) {
    console.log('PROCESSING GLYPH', state.stack);

    for (var i$2 = 0; i$2 < pLen; i$2++) {
      console.log(i$2, gZone[i$2].x, gZone[i$2].y);
    }
  }

  gZone.push(new HPoint(0, 0), new HPoint(Math.round(glyph.advanceWidth * xScale), 0));
  exec(state); // Removes the extra points.

  gZone.length -= 2;

  if (exports.DEBUG) {
    console.log('FINISHED GLYPH', state.stack);

    for (var i$3 = 0; i$3 < pLen; i$3++) {
      console.log(i$3, gZone[i$3].x, gZone[i$3].y);
    }
  }
};
/*
* Executes the program loaded in state.
*/


exec = function (state) {
  var prog = state.prog;

  if (!prog) {
    return;
  }

  var pLen = prog.length;
  var ins;

  for (state.ip = 0; state.ip < pLen; state.ip++) {
    if (exports.DEBUG) {
      state.step++;
    }

    ins = instructionTable[prog[state.ip]];

    if (!ins) {
      throw new Error('unknown instruction: 0x' + Number(prog[state.ip]).toString(16));
    }

    ins(state); // very extensive debugging for each step

    /*
    if (exports.DEBUG) {
        var da;
        if (state.gZone) {
            da = [];
            for (let i = 0; i < state.gZone.length; i++)
            {
                da.push(i + ' ' +
                    state.gZone[i].x * 64 + ' ' +
                    state.gZone[i].y * 64 + ' ' +
                    (state.gZone[i].xTouched ? 'x' : '') +
                    (state.gZone[i].yTouched ? 'y' : '')
                );
            }
            console.log('GZ', da);
        }
         if (state.tZone) {
            da = [];
            for (let i = 0; i < state.tZone.length; i++) {
                da.push(i + ' ' +
                    state.tZone[i].x * 64 + ' ' +
                    state.tZone[i].y * 64 + ' ' +
                    (state.tZone[i].xTouched ? 'x' : '') +
                    (state.tZone[i].yTouched ? 'y' : '')
                );
            }
            console.log('TZ', da);
        }
         if (state.stack.length > 10) {
            console.log(
                state.stack.length,
                '...', state.stack.slice(state.stack.length - 10)
            );
        } else {
            console.log(state.stack.length, state.stack);
        }
    }
    */
  }
};
/*
* Initializes the twilight zone.
*
* This is only done if a SZPx instruction
* refers to the twilight zone.
*/


function initTZone(state) {
  var tZone = state.tZone = new Array(state.gZone.length); // no idea if this is actually correct...

  for (var i = 0; i < tZone.length; i++) {
    tZone[i] = new HPoint(0, 0);
  }
}
/*
* Skips the instruction pointer ahead over an IF/ELSE block.
* handleElse .. if true breaks on matching ELSE
*/


function skip(state, handleElse) {
  var prog = state.prog;
  var ip = state.ip;
  var nesting = 1;
  var ins;

  do {
    ins = prog[++ip];

    if (ins === 0x58) // IF
      {
        nesting++;
      } else if (ins === 0x59) // EIF
      {
        nesting--;
      } else if (ins === 0x40) // NPUSHB
      {
        ip += prog[ip + 1] + 1;
      } else if (ins === 0x41) // NPUSHW
      {
        ip += 2 * prog[ip + 1] + 1;
      } else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB
      {
        ip += ins - 0xB0 + 1;
      } else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW
      {
        ip += (ins - 0xB8 + 1) * 2;
      } else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE
      {
        break;
      }
  } while (nesting > 0);

  state.ip = ip;
}
/*----------------------------------------------------------*
*          And then a lot of instructions...                *
*----------------------------------------------------------*/
// SVTCA[a] Set freedom and projection Vectors To Coordinate Axis
// 0x00-0x01


function SVTCA(v, state) {
  if (exports.DEBUG) {
    console.log(state.step, 'SVTCA[' + v.axis + ']');
  }

  state.fv = state.pv = state.dpv = v;
} // SPVTCA[a] Set Projection Vector to Coordinate Axis
// 0x02-0x03


function SPVTCA(v, state) {
  if (exports.DEBUG) {
    console.log(state.step, 'SPVTCA[' + v.axis + ']');
  }

  state.pv = state.dpv = v;
} // SFVTCA[a] Set Freedom Vector to Coordinate Axis
// 0x04-0x05


function SFVTCA(v, state) {
  if (exports.DEBUG) {
    console.log(state.step, 'SFVTCA[' + v.axis + ']');
  }

  state.fv = v;
} // SPVTL[a] Set Projection Vector To Line
// 0x06-0x07


function SPVTL(a, state) {
  var stack = state.stack;
  var p2i = stack.pop();
  var p1i = stack.pop();
  var p2 = state.z2[p2i];
  var p1 = state.z1[p1i];

  if (exports.DEBUG) {
    console.log('SPVTL[' + a + ']', p2i, p1i);
  }

  var dx;
  var dy;

  if (!a) {
    dx = p1.x - p2.x;
    dy = p1.y - p2.y;
  } else {
    dx = p2.y - p1.y;
    dy = p1.x - p2.x;
  }

  state.pv = state.dpv = getUnitVector(dx, dy);
} // SFVTL[a] Set Freedom Vector To Line
// 0x08-0x09


function SFVTL(a, state) {
  var stack = state.stack;
  var p2i = stack.pop();
  var p1i = stack.pop();
  var p2 = state.z2[p2i];
  var p1 = state.z1[p1i];

  if (exports.DEBUG) {
    console.log('SFVTL[' + a + ']', p2i, p1i);
  }

  var dx;
  var dy;

  if (!a) {
    dx = p1.x - p2.x;
    dy = p1.y - p2.y;
  } else {
    dx = p2.y - p1.y;
    dy = p1.x - p2.x;
  }

  state.fv = getUnitVector(dx, dy);
} // SPVFS[] Set Projection Vector From Stack
// 0x0A


function SPVFS(state) {
  var stack = state.stack;
  var y = stack.pop();
  var x = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SPVFS[]', y, x);
  }

  state.pv = state.dpv = getUnitVector(x, y);
} // SFVFS[] Set Freedom Vector From Stack
// 0x0B


function SFVFS(state) {
  var stack = state.stack;
  var y = stack.pop();
  var x = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SPVFS[]', y, x);
  }

  state.fv = getUnitVector(x, y);
} // GPV[] Get Projection Vector
// 0x0C


function GPV(state) {
  var stack = state.stack;
  var pv = state.pv;

  if (exports.DEBUG) {
    console.log(state.step, 'GPV[]');
  }

  stack.push(pv.x * 0x4000);
  stack.push(pv.y * 0x4000);
} // GFV[] Get Freedom Vector
// 0x0C


function GFV(state) {
  var stack = state.stack;
  var fv = state.fv;

  if (exports.DEBUG) {
    console.log(state.step, 'GFV[]');
  }

  stack.push(fv.x * 0x4000);
  stack.push(fv.y * 0x4000);
} // SFVTPV[] Set Freedom Vector To Projection Vector
// 0x0E


function SFVTPV(state) {
  state.fv = state.pv;

  if (exports.DEBUG) {
    console.log(state.step, 'SFVTPV[]');
  }
} // ISECT[] moves point p to the InterSECTion of two lines
// 0x0F


function ISECT(state) {
  var stack = state.stack;
  var pa0i = stack.pop();
  var pa1i = stack.pop();
  var pb0i = stack.pop();
  var pb1i = stack.pop();
  var pi = stack.pop();
  var z0 = state.z0;
  var z1 = state.z1;
  var pa0 = z0[pa0i];
  var pa1 = z0[pa1i];
  var pb0 = z1[pb0i];
  var pb1 = z1[pb1i];
  var p = state.z2[pi];

  if (exports.DEBUG) {
    console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi);
  } // math from
  // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line


  var x1 = pa0.x;
  var y1 = pa0.y;
  var x2 = pa1.x;
  var y2 = pa1.y;
  var x3 = pb0.x;
  var y3 = pb0.y;
  var x4 = pb1.x;
  var y4 = pb1.y;
  var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
  var f1 = x1 * y2 - y1 * x2;
  var f2 = x3 * y4 - y3 * x4;
  p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;
  p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;
} // SRP0[] Set Reference Point 0
// 0x10


function SRP0(state) {
  state.rp0 = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SRP0[]', state.rp0);
  }
} // SRP1[] Set Reference Point 1
// 0x11


function SRP1(state) {
  state.rp1 = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SRP1[]', state.rp1);
  }
} // SRP1[] Set Reference Point 2
// 0x12


function SRP2(state) {
  state.rp2 = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SRP2[]', state.rp2);
  }
} // SZP0[] Set Zone Pointer 0
// 0x13


function SZP0(state) {
  var n = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SZP0[]', n);
  }

  state.zp0 = n;

  switch (n) {
    case 0:
      if (!state.tZone) {
        initTZone(state);
      }

      state.z0 = state.tZone;
      break;

    case 1:
      state.z0 = state.gZone;
      break;

    default:
      throw new Error('Invalid zone pointer');
  }
} // SZP1[] Set Zone Pointer 1
// 0x14


function SZP1(state) {
  var n = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SZP1[]', n);
  }

  state.zp1 = n;

  switch (n) {
    case 0:
      if (!state.tZone) {
        initTZone(state);
      }

      state.z1 = state.tZone;
      break;

    case 1:
      state.z1 = state.gZone;
      break;

    default:
      throw new Error('Invalid zone pointer');
  }
} // SZP2[] Set Zone Pointer 2
// 0x15


function SZP2(state) {
  var n = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SZP2[]', n);
  }

  state.zp2 = n;

  switch (n) {
    case 0:
      if (!state.tZone) {
        initTZone(state);
      }

      state.z2 = state.tZone;
      break;

    case 1:
      state.z2 = state.gZone;
      break;

    default:
      throw new Error('Invalid zone pointer');
  }
} // SZPS[] Set Zone PointerS
// 0x16


function SZPS(state) {
  var n = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SZPS[]', n);
  }

  state.zp0 = state.zp1 = state.zp2 = n;

  switch (n) {
    case 0:
      if (!state.tZone) {
        initTZone(state);
      }

      state.z0 = state.z1 = state.z2 = state.tZone;
      break;

    case 1:
      state.z0 = state.z1 = state.z2 = state.gZone;
      break;

    default:
      throw new Error('Invalid zone pointer');
  }
} // SLOOP[] Set LOOP variable
// 0x17


function SLOOP(state) {
  state.loop = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SLOOP[]', state.loop);
  }
} // RTG[] Round To Grid
// 0x18


function RTG(state) {
  if (exports.DEBUG) {
    console.log(state.step, 'RTG[]');
  }

  state.round = roundToGrid;
} // RTHG[] Round To Half Grid
// 0x19


function RTHG(state) {
  if (exports.DEBUG) {
    console.log(state.step, 'RTHG[]');
  }

  state.round = roundToHalfGrid;
} // SMD[] Set Minimum Distance
// 0x1A


function SMD(state) {
  var d = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SMD[]', d);
  }

  state.minDis = d / 0x40;
} // ELSE[] ELSE clause
// 0x1B


function ELSE(state) {
  // This instruction has been reached by executing a then branch
  // so it just skips ahead until matching EIF.
  //
  // In case the IF was negative the IF[] instruction already
  // skipped forward over the ELSE[]
  if (exports.DEBUG) {
    console.log(state.step, 'ELSE[]');
  }

  skip(state, false);
} // JMPR[] JuMP Relative
// 0x1C


function JMPR(state) {
  var o = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'JMPR[]', o);
  } // A jump by 1 would do nothing.


  state.ip += o - 1;
} // SCVTCI[] Set Control Value Table Cut-In
// 0x1D


function SCVTCI(state) {
  var n = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SCVTCI[]', n);
  }

  state.cvCutIn = n / 0x40;
} // DUP[] DUPlicate top stack element
// 0x20


function DUP(state) {
  var stack = state.stack;

  if (exports.DEBUG) {
    console.log(state.step, 'DUP[]');
  }

  stack.push(stack[stack.length - 1]);
} // POP[] POP top stack element
// 0x21


function POP(state) {
  if (exports.DEBUG) {
    console.log(state.step, 'POP[]');
  }

  state.stack.pop();
} // CLEAR[] CLEAR the stack
// 0x22


function CLEAR(state) {
  if (exports.DEBUG) {
    console.log(state.step, 'CLEAR[]');
  }

  state.stack.length = 0;
} // SWAP[] SWAP the top two elements on the stack
// 0x23


function SWAP(state) {
  var stack = state.stack;
  var a = stack.pop();
  var b = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SWAP[]');
  }

  stack.push(a);
  stack.push(b);
} // DEPTH[] DEPTH of the stack
// 0x24


function DEPTH(state) {
  var stack = state.stack;

  if (exports.DEBUG) {
    console.log(state.step, 'DEPTH[]');
  }

  stack.push(stack.length);
} // LOOPCALL[] LOOPCALL function
// 0x2A


function LOOPCALL(state) {
  var stack = state.stack;
  var fn = stack.pop();
  var c = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'LOOPCALL[]', fn, c);
  } // saves callers program


  var cip = state.ip;
  var cprog = state.prog;
  state.prog = state.funcs[fn]; // executes the function

  for (var i = 0; i < c; i++) {
    exec(state);

    if (exports.DEBUG) {
      console.log(++state.step, i + 1 < c ? 'next loopcall' : 'done loopcall', i);
    }
  } // restores the callers program


  state.ip = cip;
  state.prog = cprog;
} // CALL[] CALL function
// 0x2B


function CALL(state) {
  var fn = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'CALL[]', fn);
  } // saves callers program


  var cip = state.ip;
  var cprog = state.prog;
  state.prog = state.funcs[fn]; // executes the function

  exec(state); // restores the callers program

  state.ip = cip;
  state.prog = cprog;

  if (exports.DEBUG) {
    console.log(++state.step, 'returning from', fn);
  }
} // CINDEX[] Copy the INDEXed element to the top of the stack
// 0x25


function CINDEX(state) {
  var stack = state.stack;
  var k = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'CINDEX[]', k);
  } // In case of k == 1, it copies the last element after popping
  // thus stack.length - k.


  stack.push(stack[stack.length - k]);
} // MINDEX[] Move the INDEXed element to the top of the stack
// 0x26


function MINDEX(state) {
  var stack = state.stack;
  var k = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'MINDEX[]', k);
  }

  stack.push(stack.splice(stack.length - k, 1)[0]);
} // FDEF[] Function DEFinition
// 0x2C


function FDEF(state) {
  if (state.env !== 'fpgm') {
    throw new Error('FDEF not allowed here');
  }

  var stack = state.stack;
  var prog = state.prog;
  var ip = state.ip;
  var fn = stack.pop();
  var ipBegin = ip;

  if (exports.DEBUG) {
    console.log(state.step, 'FDEF[]', fn);
  }

  while (prog[++ip] !== 0x2D) {}

  state.ip = ip;
  state.funcs[fn] = prog.slice(ipBegin + 1, ip);
} // MDAP[a] Move Direct Absolute Point
// 0x2E-0x2F


function MDAP(round, state) {
  var pi = state.stack.pop();
  var p = state.z0[pi];
  var fv = state.fv;
  var pv = state.pv;

  if (exports.DEBUG) {
    console.log(state.step, 'MDAP[' + round + ']', pi);
  }

  var d = pv.distance(p, HPZero);

  if (round) {
    d = state.round(d);
  }

  fv.setRelative(p, HPZero, d, pv);
  fv.touch(p);
  state.rp0 = state.rp1 = pi;
} // IUP[a] Interpolate Untouched Points through the outline
// 0x30


function IUP(v, state) {
  var z2 = state.z2;
  var pLen = z2.length - 2;
  var cp;
  var pp;
  var np;

  if (exports.DEBUG) {
    console.log(state.step, 'IUP[' + v.axis + ']');
  }

  for (var i = 0; i < pLen; i++) {
    cp = z2[i]; // current point
    // if this point has been touched go on

    if (v.touched(cp)) {
      continue;
    }

    pp = cp.prevTouched(v); // no point on the contour has been touched?

    if (pp === cp) {
      continue;
    }

    np = cp.nextTouched(v);

    if (pp === np) {
      // only one point on the contour has been touched
      // so simply moves the point like that
      v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);
    }

    v.interpolate(cp, pp, np, v);
  }
} // SHP[] SHift Point using reference point
// 0x32-0x33


function SHP(a, state) {
  var stack = state.stack;
  var rpi = a ? state.rp1 : state.rp2;
  var rp = (a ? state.z0 : state.z1)[rpi];
  var fv = state.fv;
  var pv = state.pv;
  var loop = state.loop;
  var z2 = state.z2;

  while (loop--) {
    var pi = stack.pop();
    var p = z2[pi];
    var d = pv.distance(rp, rp, false, true);
    fv.setRelative(p, p, d, pv);
    fv.touch(p);

    if (exports.DEBUG) {
      console.log(state.step, (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') + 'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi);
    }
  }

  state.loop = 1;
} // SHC[] SHift Contour using reference point
// 0x36-0x37


function SHC(a, state) {
  var stack = state.stack;
  var rpi = a ? state.rp1 : state.rp2;
  var rp = (a ? state.z0 : state.z1)[rpi];
  var fv = state.fv;
  var pv = state.pv;
  var ci = stack.pop();
  var sp = state.z2[state.contours[ci]];
  var p = sp;

  if (exports.DEBUG) {
    console.log(state.step, 'SHC[' + a + ']', ci);
  }

  var d = pv.distance(rp, rp, false, true);

  do {
    if (p !== rp) {
      fv.setRelative(p, p, d, pv);
    }

    p = p.nextPointOnContour;
  } while (p !== sp);
} // SHZ[] SHift Zone using reference point
// 0x36-0x37


function SHZ(a, state) {
  var stack = state.stack;
  var rpi = a ? state.rp1 : state.rp2;
  var rp = (a ? state.z0 : state.z1)[rpi];
  var fv = state.fv;
  var pv = state.pv;
  var e = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SHZ[' + a + ']', e);
  }

  var z;

  switch (e) {
    case 0:
      z = state.tZone;
      break;

    case 1:
      z = state.gZone;
      break;

    default:
      throw new Error('Invalid zone');
  }

  var p;
  var d = pv.distance(rp, rp, false, true);
  var pLen = z.length - 2;

  for (var i = 0; i < pLen; i++) {
    p = z[i];
    fv.setRelative(p, p, d, pv); //if (p !== rp) fv.setRelative(p, p, d, pv);
  }
} // SHPIX[] SHift point by a PIXel amount
// 0x38


function SHPIX(state) {
  var stack = state.stack;
  var loop = state.loop;
  var fv = state.fv;
  var d = stack.pop() / 0x40;
  var z2 = state.z2;

  while (loop--) {
    var pi = stack.pop();
    var p = z2[pi];

    if (exports.DEBUG) {
      console.log(state.step, (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') + 'SHPIX[]', pi, d);
    }

    fv.setRelative(p, p, d);
    fv.touch(p);
  }

  state.loop = 1;
} // IP[] Interpolate Point
// 0x39


function IP(state) {
  var stack = state.stack;
  var rp1i = state.rp1;
  var rp2i = state.rp2;
  var loop = state.loop;
  var rp1 = state.z0[rp1i];
  var rp2 = state.z1[rp2i];
  var fv = state.fv;
  var pv = state.dpv;
  var z2 = state.z2;

  while (loop--) {
    var pi = stack.pop();
    var p = z2[pi];

    if (exports.DEBUG) {
      console.log(state.step, (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') + 'IP[]', pi, rp1i, '<->', rp2i);
    }

    fv.interpolate(p, rp1, rp2, pv);
    fv.touch(p);
  }

  state.loop = 1;
} // MSIRP[a] Move Stack Indirect Relative Point
// 0x3A-0x3B


function MSIRP(a, state) {
  var stack = state.stack;
  var d = stack.pop() / 64;
  var pi = stack.pop();
  var p = state.z1[pi];
  var rp0 = state.z0[state.rp0];
  var fv = state.fv;
  var pv = state.pv;
  fv.setRelative(p, rp0, d, pv);
  fv.touch(p);

  if (exports.DEBUG) {
    console.log(state.step, 'MSIRP[' + a + ']', d, pi);
  }

  state.rp1 = state.rp0;
  state.rp2 = pi;

  if (a) {
    state.rp0 = pi;
  }
} // ALIGNRP[] Align to reference point.
// 0x3C


function ALIGNRP(state) {
  var stack = state.stack;
  var rp0i = state.rp0;
  var rp0 = state.z0[rp0i];
  var loop = state.loop;
  var fv = state.fv;
  var pv = state.pv;
  var z1 = state.z1;

  while (loop--) {
    var pi = stack.pop();
    var p = z1[pi];

    if (exports.DEBUG) {
      console.log(state.step, (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') + 'ALIGNRP[]', pi);
    }

    fv.setRelative(p, rp0, 0, pv);
    fv.touch(p);
  }

  state.loop = 1;
} // RTG[] Round To Double Grid
// 0x3D


function RTDG(state) {
  if (exports.DEBUG) {
    console.log(state.step, 'RTDG[]');
  }

  state.round = roundToDoubleGrid;
} // MIAP[a] Move Indirect Absolute Point
// 0x3E-0x3F


function MIAP(round, state) {
  var stack = state.stack;
  var n = stack.pop();
  var pi = stack.pop();
  var p = state.z0[pi];
  var fv = state.fv;
  var pv = state.pv;
  var cv = state.cvt[n];

  if (exports.DEBUG) {
    console.log(state.step, 'MIAP[' + round + ']', n, '(', cv, ')', pi);
  }

  var d = pv.distance(p, HPZero);

  if (round) {
    if (Math.abs(d - cv) < state.cvCutIn) {
      d = cv;
    }

    d = state.round(d);
  }

  fv.setRelative(p, HPZero, d, pv);

  if (state.zp0 === 0) {
    p.xo = p.x;
    p.yo = p.y;
  }

  fv.touch(p);
  state.rp0 = state.rp1 = pi;
} // NPUSB[] PUSH N Bytes
// 0x40


function NPUSHB(state) {
  var prog = state.prog;
  var ip = state.ip;
  var stack = state.stack;
  var n = prog[++ip];

  if (exports.DEBUG) {
    console.log(state.step, 'NPUSHB[]', n);
  }

  for (var i = 0; i < n; i++) {
    stack.push(prog[++ip]);
  }

  state.ip = ip;
} // NPUSHW[] PUSH N Words
// 0x41


function NPUSHW(state) {
  var ip = state.ip;
  var prog = state.prog;
  var stack = state.stack;
  var n = prog[++ip];

  if (exports.DEBUG) {
    console.log(state.step, 'NPUSHW[]', n);
  }

  for (var i = 0; i < n; i++) {
    var w = prog[++ip] << 8 | prog[++ip];

    if (w & 0x8000) {
      w = -((w ^ 0xffff) + 1);
    }

    stack.push(w);
  }

  state.ip = ip;
} // WS[] Write Store
// 0x42


function WS(state) {
  var stack = state.stack;
  var store = state.store;

  if (!store) {
    store = state.store = [];
  }

  var v = stack.pop();
  var l = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'WS', v, l);
  }

  store[l] = v;
} // RS[] Read Store
// 0x43


function RS(state) {
  var stack = state.stack;
  var store = state.store;
  var l = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'RS', l);
  }

  var v = store && store[l] || 0;
  stack.push(v);
} // WCVTP[] Write Control Value Table in Pixel units
// 0x44


function WCVTP(state) {
  var stack = state.stack;
  var v = stack.pop();
  var l = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'WCVTP', v, l);
  }

  state.cvt[l] = v / 0x40;
} // RCVT[] Read Control Value Table entry
// 0x45


function RCVT(state) {
  var stack = state.stack;
  var cvte = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'RCVT', cvte);
  }

  stack.push(state.cvt[cvte] * 0x40);
} // GC[] Get Coordinate projected onto the projection vector
// 0x46-0x47


function GC(a, state) {
  var stack = state.stack;
  var pi = stack.pop();
  var p = state.z2[pi];

  if (exports.DEBUG) {
    console.log(state.step, 'GC[' + a + ']', pi);
  }

  stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);
} // MD[a] Measure Distance
// 0x49-0x4A


function MD(a, state) {
  var stack = state.stack;
  var pi2 = stack.pop();
  var pi1 = stack.pop();
  var p2 = state.z1[pi2];
  var p1 = state.z0[pi1];
  var d = state.dpv.distance(p1, p2, a, a);

  if (exports.DEBUG) {
    console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d);
  }

  state.stack.push(Math.round(d * 64));
} // MPPEM[] Measure Pixels Per EM
// 0x4B


function MPPEM(state) {
  if (exports.DEBUG) {
    console.log(state.step, 'MPPEM[]');
  }

  state.stack.push(state.ppem);
} // FLIPON[] set the auto FLIP Boolean to ON
// 0x4D


function FLIPON(state) {
  if (exports.DEBUG) {
    console.log(state.step, 'FLIPON[]');
  }

  state.autoFlip = true;
} // LT[] Less Than
// 0x50


function LT(state) {
  var stack = state.stack;
  var e2 = stack.pop();
  var e1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'LT[]', e2, e1);
  }

  stack.push(e1 < e2 ? 1 : 0);
} // LTEQ[] Less Than or EQual
// 0x53


function LTEQ(state) {
  var stack = state.stack;
  var e2 = stack.pop();
  var e1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'LTEQ[]', e2, e1);
  }

  stack.push(e1 <= e2 ? 1 : 0);
} // GTEQ[] Greater Than
// 0x52


function GT(state) {
  var stack = state.stack;
  var e2 = stack.pop();
  var e1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'GT[]', e2, e1);
  }

  stack.push(e1 > e2 ? 1 : 0);
} // GTEQ[] Greater Than or EQual
// 0x53


function GTEQ(state) {
  var stack = state.stack;
  var e2 = stack.pop();
  var e1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'GTEQ[]', e2, e1);
  }

  stack.push(e1 >= e2 ? 1 : 0);
} // EQ[] EQual
// 0x54


function EQ(state) {
  var stack = state.stack;
  var e2 = stack.pop();
  var e1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'EQ[]', e2, e1);
  }

  stack.push(e2 === e1 ? 1 : 0);
} // NEQ[] Not EQual
// 0x55


function NEQ(state) {
  var stack = state.stack;
  var e2 = stack.pop();
  var e1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'NEQ[]', e2, e1);
  }

  stack.push(e2 !== e1 ? 1 : 0);
} // ODD[] ODD
// 0x56


function ODD(state) {
  var stack = state.stack;
  var n = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'ODD[]', n);
  }

  stack.push(Math.trunc(n) % 2 ? 1 : 0);
} // EVEN[] EVEN
// 0x57


function EVEN(state) {
  var stack = state.stack;
  var n = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'EVEN[]', n);
  }

  stack.push(Math.trunc(n) % 2 ? 0 : 1);
} // IF[] IF test
// 0x58


function IF(state) {
  var test = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'IF[]', test);
  } // if test is true it just continues
  // if not the ip is skipped until matching ELSE or EIF


  if (!test) {
    skip(state, true);

    if (exports.DEBUG) {
      console.log(state.step, 'EIF[]');
    }
  }
} // EIF[] End IF
// 0x59


function EIF(state) {
  // this can be reached normally when
  // executing an else branch.
  // -> just ignore it
  if (exports.DEBUG) {
    console.log(state.step, 'EIF[]');
  }
} // AND[] logical AND
// 0x5A


function AND(state) {
  var stack = state.stack;
  var e2 = stack.pop();
  var e1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'AND[]', e2, e1);
  }

  stack.push(e2 && e1 ? 1 : 0);
} // OR[] logical OR
// 0x5B


function OR(state) {
  var stack = state.stack;
  var e2 = stack.pop();
  var e1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'OR[]', e2, e1);
  }

  stack.push(e2 || e1 ? 1 : 0);
} // NOT[] logical NOT
// 0x5C


function NOT(state) {
  var stack = state.stack;
  var e = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'NOT[]', e);
  }

  stack.push(e ? 0 : 1);
} // DELTAP1[] DELTA exception P1
// DELTAP2[] DELTA exception P2
// DELTAP3[] DELTA exception P3
// 0x5D, 0x71, 0x72


function DELTAP123(b, state) {
  var stack = state.stack;
  var n = stack.pop();
  var fv = state.fv;
  var pv = state.pv;
  var ppem = state.ppem;
  var base = state.deltaBase + (b - 1) * 16;
  var ds = state.deltaShift;
  var z0 = state.z0;

  if (exports.DEBUG) {
    console.log(state.step, 'DELTAP[' + b + ']', n, stack);
  }

  for (var i = 0; i < n; i++) {
    var pi = stack.pop();
    var arg = stack.pop();
    var appem = base + ((arg & 0xF0) >> 4);

    if (appem !== ppem) {
      continue;
    }

    var mag = (arg & 0x0F) - 8;

    if (mag >= 0) {
      mag++;
    }

    if (exports.DEBUG) {
      console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds);
    }

    var p = z0[pi];
    fv.setRelative(p, p, mag * ds, pv);
  }
} // SDB[] Set Delta Base in the graphics state
// 0x5E


function SDB(state) {
  var stack = state.stack;
  var n = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SDB[]', n);
  }

  state.deltaBase = n;
} // SDS[] Set Delta Shift in the graphics state
// 0x5F


function SDS(state) {
  var stack = state.stack;
  var n = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SDS[]', n);
  }

  state.deltaShift = Math.pow(0.5, n);
} // ADD[] ADD
// 0x60


function ADD(state) {
  var stack = state.stack;
  var n2 = stack.pop();
  var n1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'ADD[]', n2, n1);
  }

  stack.push(n1 + n2);
} // SUB[] SUB
// 0x61


function SUB(state) {
  var stack = state.stack;
  var n2 = stack.pop();
  var n1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SUB[]', n2, n1);
  }

  stack.push(n1 - n2);
} // DIV[] DIV
// 0x62


function DIV(state) {
  var stack = state.stack;
  var n2 = stack.pop();
  var n1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'DIV[]', n2, n1);
  }

  stack.push(n1 * 64 / n2);
} // MUL[] MUL
// 0x63


function MUL(state) {
  var stack = state.stack;
  var n2 = stack.pop();
  var n1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'MUL[]', n2, n1);
  }

  stack.push(n1 * n2 / 64);
} // ABS[] ABSolute value
// 0x64


function ABS(state) {
  var stack = state.stack;
  var n = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'ABS[]', n);
  }

  stack.push(Math.abs(n));
} // NEG[] NEGate
// 0x65


function NEG(state) {
  var stack = state.stack;
  var n = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'NEG[]', n);
  }

  stack.push(-n);
} // FLOOR[] FLOOR
// 0x66


function FLOOR(state) {
  var stack = state.stack;
  var n = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'FLOOR[]', n);
  }

  stack.push(Math.floor(n / 0x40) * 0x40);
} // CEILING[] CEILING
// 0x67


function CEILING(state) {
  var stack = state.stack;
  var n = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'CEILING[]', n);
  }

  stack.push(Math.ceil(n / 0x40) * 0x40);
} // ROUND[ab] ROUND value
// 0x68-0x6B


function ROUND(dt, state) {
  var stack = state.stack;
  var n = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'ROUND[]');
  }

  stack.push(state.round(n / 0x40) * 0x40);
} // WCVTF[] Write Control Value Table in Funits
// 0x70


function WCVTF(state) {
  var stack = state.stack;
  var v = stack.pop();
  var l = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'WCVTF[]', v, l);
  }

  state.cvt[l] = v * state.ppem / state.font.unitsPerEm;
} // DELTAC1[] DELTA exception C1
// DELTAC2[] DELTA exception C2
// DELTAC3[] DELTA exception C3
// 0x73, 0x74, 0x75


function DELTAC123(b, state) {
  var stack = state.stack;
  var n = stack.pop();
  var ppem = state.ppem;
  var base = state.deltaBase + (b - 1) * 16;
  var ds = state.deltaShift;

  if (exports.DEBUG) {
    console.log(state.step, 'DELTAC[' + b + ']', n, stack);
  }

  for (var i = 0; i < n; i++) {
    var c = stack.pop();
    var arg = stack.pop();
    var appem = base + ((arg & 0xF0) >> 4);

    if (appem !== ppem) {
      continue;
    }

    var mag = (arg & 0x0F) - 8;

    if (mag >= 0) {
      mag++;
    }

    var delta = mag * ds;

    if (exports.DEBUG) {
      console.log(state.step, 'DELTACFIX', c, 'by', delta);
    }

    state.cvt[c] += delta;
  }
} // SROUND[] Super ROUND
// 0x76


function SROUND(state) {
  var n = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'SROUND[]', n);
  }

  state.round = roundSuper;
  var period;

  switch (n & 0xC0) {
    case 0x00:
      period = 0.5;
      break;

    case 0x40:
      period = 1;
      break;

    case 0x80:
      period = 2;
      break;

    default:
      throw new Error('invalid SROUND value');
  }

  state.srPeriod = period;

  switch (n & 0x30) {
    case 0x00:
      state.srPhase = 0;
      break;

    case 0x10:
      state.srPhase = 0.25 * period;
      break;

    case 0x20:
      state.srPhase = 0.5 * period;
      break;

    case 0x30:
      state.srPhase = 0.75 * period;
      break;

    default:
      throw new Error('invalid SROUND value');
  }

  n &= 0x0F;

  if (n === 0) {
    state.srThreshold = 0;
  } else {
    state.srThreshold = (n / 8 - 0.5) * period;
  }
} // S45ROUND[] Super ROUND 45 degrees
// 0x77


function S45ROUND(state) {
  var n = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'S45ROUND[]', n);
  }

  state.round = roundSuper;
  var period;

  switch (n & 0xC0) {
    case 0x00:
      period = Math.sqrt(2) / 2;
      break;

    case 0x40:
      period = Math.sqrt(2);
      break;

    case 0x80:
      period = 2 * Math.sqrt(2);
      break;

    default:
      throw new Error('invalid S45ROUND value');
  }

  state.srPeriod = period;

  switch (n & 0x30) {
    case 0x00:
      state.srPhase = 0;
      break;

    case 0x10:
      state.srPhase = 0.25 * period;
      break;

    case 0x20:
      state.srPhase = 0.5 * period;
      break;

    case 0x30:
      state.srPhase = 0.75 * period;
      break;

    default:
      throw new Error('invalid S45ROUND value');
  }

  n &= 0x0F;

  if (n === 0) {
    state.srThreshold = 0;
  } else {
    state.srThreshold = (n / 8 - 0.5) * period;
  }
} // ROFF[] Round Off
// 0x7A


function ROFF(state) {
  if (exports.DEBUG) {
    console.log(state.step, 'ROFF[]');
  }

  state.round = roundOff;
} // RUTG[] Round Up To Grid
// 0x7C


function RUTG(state) {
  if (exports.DEBUG) {
    console.log(state.step, 'RUTG[]');
  }

  state.round = roundUpToGrid;
} // RDTG[] Round Down To Grid
// 0x7D


function RDTG(state) {
  if (exports.DEBUG) {
    console.log(state.step, 'RDTG[]');
  }

  state.round = roundDownToGrid;
} // SCANCTRL[] SCAN conversion ConTRoL
// 0x85


function SCANCTRL(state) {
  var n = state.stack.pop(); // ignored by opentype.js

  if (exports.DEBUG) {
    console.log(state.step, 'SCANCTRL[]', n);
  }
} // SDPVTL[a] Set Dual Projection Vector To Line
// 0x86-0x87


function SDPVTL(a, state) {
  var stack = state.stack;
  var p2i = stack.pop();
  var p1i = stack.pop();
  var p2 = state.z2[p2i];
  var p1 = state.z1[p1i];

  if (exports.DEBUG) {
    console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i);
  }

  var dx;
  var dy;

  if (!a) {
    dx = p1.x - p2.x;
    dy = p1.y - p2.y;
  } else {
    dx = p2.y - p1.y;
    dy = p1.x - p2.x;
  }

  state.dpv = getUnitVector(dx, dy);
} // GETINFO[] GET INFOrmation
// 0x88


function GETINFO(state) {
  var stack = state.stack;
  var sel = stack.pop();
  var r = 0;

  if (exports.DEBUG) {
    console.log(state.step, 'GETINFO[]', sel);
  } // v35 as in no subpixel hinting


  if (sel & 0x01) {
    r = 35;
  } // TODO rotation and stretch currently not supported
  // and thus those GETINFO are always 0.
  // opentype.js is always gray scaling


  if (sel & 0x20) {
    r |= 0x1000;
  }

  stack.push(r);
} // ROLL[] ROLL the top three stack elements
// 0x8A


function ROLL(state) {
  var stack = state.stack;
  var a = stack.pop();
  var b = stack.pop();
  var c = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'ROLL[]');
  }

  stack.push(b);
  stack.push(a);
  stack.push(c);
} // MAX[] MAXimum of top two stack elements
// 0x8B


function MAX(state) {
  var stack = state.stack;
  var e2 = stack.pop();
  var e1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'MAX[]', e2, e1);
  }

  stack.push(Math.max(e1, e2));
} // MIN[] MINimum of top two stack elements
// 0x8C


function MIN(state) {
  var stack = state.stack;
  var e2 = stack.pop();
  var e1 = stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'MIN[]', e2, e1);
  }

  stack.push(Math.min(e1, e2));
} // SCANTYPE[] SCANTYPE
// 0x8D


function SCANTYPE(state) {
  var n = state.stack.pop(); // ignored by opentype.js

  if (exports.DEBUG) {
    console.log(state.step, 'SCANTYPE[]', n);
  }
} // INSTCTRL[] INSTCTRL
// 0x8D


function INSTCTRL(state) {
  var s = state.stack.pop();
  var v = state.stack.pop();

  if (exports.DEBUG) {
    console.log(state.step, 'INSTCTRL[]', s, v);
  }

  switch (s) {
    case 1:
      state.inhibitGridFit = !!v;
      return;

    case 2:
      state.ignoreCvt = !!v;
      return;

    default:
      throw new Error('invalid INSTCTRL[] selector');
  }
} // PUSHB[abc] PUSH Bytes
// 0xB0-0xB7


function PUSHB(n, state) {
  var stack = state.stack;
  var prog = state.prog;
  var ip = state.ip;

  if (exports.DEBUG) {
    console.log(state.step, 'PUSHB[' + n + ']');
  }

  for (var i = 0; i < n; i++) {
    stack.push(prog[++ip]);
  }

  state.ip = ip;
} // PUSHW[abc] PUSH Words
// 0xB8-0xBF


function PUSHW(n, state) {
  var ip = state.ip;
  var prog = state.prog;
  var stack = state.stack;

  if (exports.DEBUG) {
    console.log(state.ip, 'PUSHW[' + n + ']');
  }

  for (var i = 0; i < n; i++) {
    var w = prog[++ip] << 8 | prog[++ip];

    if (w & 0x8000) {
      w = -((w ^ 0xffff) + 1);
    }

    stack.push(w);
  }

  state.ip = ip;
} // MDRP[abcde] Move Direct Relative Point
// 0xD0-0xEF
// (if indirect is 0)
//
// and
//
// MIRP[abcde] Move Indirect Relative Point
// 0xE0-0xFF
// (if indirect is 1)


function MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {
  var stack = state.stack;
  var cvte = indirect && stack.pop();
  var pi = stack.pop();
  var rp0i = state.rp0;
  var rp = state.z0[rp0i];
  var p = state.z1[pi];
  var md = state.minDis;
  var fv = state.fv;
  var pv = state.dpv;
  var od; // original distance

  var d; // moving distance

  var sign; // sign of distance

  var cv;
  d = od = pv.distance(p, rp, true, true);
  sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0
  // TODO consider autoFlip

  d = Math.abs(d);

  if (indirect) {
    cv = state.cvt[cvte];

    if (ro && Math.abs(d - cv) < state.cvCutIn) {
      d = cv;
    }
  }

  if (keepD && d < md) {
    d = md;
  }

  if (ro) {
    d = state.round(d);
  }

  fv.setRelative(p, rp, sign * d, pv);
  fv.touch(p);

  if (exports.DEBUG) {
    console.log(state.step, (indirect ? 'MIRP[' : 'MDRP[') + (setRp0 ? 'M' : 'm') + (keepD ? '>' : '_') + (ro ? 'R' : '_') + (dt === 0 ? 'Gr' : dt === 1 ? 'Bl' : dt === 2 ? 'Wh' : '') + ']', indirect ? cvte + '(' + state.cvt[cvte] + ',' + cv + ')' : '', pi, '(d =', od, '->', sign * d, ')');
  }

  state.rp1 = state.rp0;
  state.rp2 = pi;

  if (setRp0) {
    state.rp0 = pi;
  }
}
/*
* The instruction table.
*/


instructionTable = [
/* 0x00 */
SVTCA.bind(undefined, yUnitVector),
/* 0x01 */
SVTCA.bind(undefined, xUnitVector),
/* 0x02 */
SPVTCA.bind(undefined, yUnitVector),
/* 0x03 */
SPVTCA.bind(undefined, xUnitVector),
/* 0x04 */
SFVTCA.bind(undefined, yUnitVector),
/* 0x05 */
SFVTCA.bind(undefined, xUnitVector),
/* 0x06 */
SPVTL.bind(undefined, 0),
/* 0x07 */
SPVTL.bind(undefined, 1),
/* 0x08 */
SFVTL.bind(undefined, 0),
/* 0x09 */
SFVTL.bind(undefined, 1),
/* 0x0A */
SPVFS,
/* 0x0B */
SFVFS,
/* 0x0C */
GPV,
/* 0x0D */
GFV,
/* 0x0E */
SFVTPV,
/* 0x0F */
ISECT,
/* 0x10 */
SRP0,
/* 0x11 */
SRP1,
/* 0x12 */
SRP2,
/* 0x13 */
SZP0,
/* 0x14 */
SZP1,
/* 0x15 */
SZP2,
/* 0x16 */
SZPS,
/* 0x17 */
SLOOP,
/* 0x18 */
RTG,
/* 0x19 */
RTHG,
/* 0x1A */
SMD,
/* 0x1B */
ELSE,
/* 0x1C */
JMPR,
/* 0x1D */
SCVTCI,
/* 0x1E */
undefined, // TODO SSWCI

/* 0x1F */
undefined, // TODO SSW

/* 0x20 */
DUP,
/* 0x21 */
POP,
/* 0x22 */
CLEAR,
/* 0x23 */
SWAP,
/* 0x24 */
DEPTH,
/* 0x25 */
CINDEX,
/* 0x26 */
MINDEX,
/* 0x27 */
undefined, // TODO ALIGNPTS

/* 0x28 */
undefined,
/* 0x29 */
undefined, // TODO UTP

/* 0x2A */
LOOPCALL,
/* 0x2B */
CALL,
/* 0x2C */
FDEF,
/* 0x2D */
undefined, // ENDF (eaten by FDEF)

/* 0x2E */
MDAP.bind(undefined, 0),
/* 0x2F */
MDAP.bind(undefined, 1),
/* 0x30 */
IUP.bind(undefined, yUnitVector),
/* 0x31 */
IUP.bind(undefined, xUnitVector),
/* 0x32 */
SHP.bind(undefined, 0),
/* 0x33 */
SHP.bind(undefined, 1),
/* 0x34 */
SHC.bind(undefined, 0),
/* 0x35 */
SHC.bind(undefined, 1),
/* 0x36 */
SHZ.bind(undefined, 0),
/* 0x37 */
SHZ.bind(undefined, 1),
/* 0x38 */
SHPIX,
/* 0x39 */
IP,
/* 0x3A */
MSIRP.bind(undefined, 0),
/* 0x3B */
MSIRP.bind(undefined, 1),
/* 0x3C */
ALIGNRP,
/* 0x3D */
RTDG,
/* 0x3E */
MIAP.bind(undefined, 0),
/* 0x3F */
MIAP.bind(undefined, 1),
/* 0x40 */
NPUSHB,
/* 0x41 */
NPUSHW,
/* 0x42 */
WS,
/* 0x43 */
RS,
/* 0x44 */
WCVTP,
/* 0x45 */
RCVT,
/* 0x46 */
GC.bind(undefined, 0),
/* 0x47 */
GC.bind(undefined, 1),
/* 0x48 */
undefined, // TODO SCFS

/* 0x49 */
MD.bind(undefined, 0),
/* 0x4A */
MD.bind(undefined, 1),
/* 0x4B */
MPPEM,
/* 0x4C */
undefined, // TODO MPS

/* 0x4D */
FLIPON,
/* 0x4E */
undefined, // TODO FLIPOFF

/* 0x4F */
undefined, // TODO DEBUG

/* 0x50 */
LT,
/* 0x51 */
LTEQ,
/* 0x52 */
GT,
/* 0x53 */
GTEQ,
/* 0x54 */
EQ,
/* 0x55 */
NEQ,
/* 0x56 */
ODD,
/* 0x57 */
EVEN,
/* 0x58 */
IF,
/* 0x59 */
EIF,
/* 0x5A */
AND,
/* 0x5B */
OR,
/* 0x5C */
NOT,
/* 0x5D */
DELTAP123.bind(undefined, 1),
/* 0x5E */
SDB,
/* 0x5F */
SDS,
/* 0x60 */
ADD,
/* 0x61 */
SUB,
/* 0x62 */
DIV,
/* 0x63 */
MUL,
/* 0x64 */
ABS,
/* 0x65 */
NEG,
/* 0x66 */
FLOOR,
/* 0x67 */
CEILING,
/* 0x68 */
ROUND.bind(undefined, 0),
/* 0x69 */
ROUND.bind(undefined, 1),
/* 0x6A */
ROUND.bind(undefined, 2),
/* 0x6B */
ROUND.bind(undefined, 3),
/* 0x6C */
undefined, // TODO NROUND[ab]

/* 0x6D */
undefined, // TODO NROUND[ab]

/* 0x6E */
undefined, // TODO NROUND[ab]

/* 0x6F */
undefined, // TODO NROUND[ab]

/* 0x70 */
WCVTF,
/* 0x71 */
DELTAP123.bind(undefined, 2),
/* 0x72 */
DELTAP123.bind(undefined, 3),
/* 0x73 */
DELTAC123.bind(undefined, 1),
/* 0x74 */
DELTAC123.bind(undefined, 2),
/* 0x75 */
DELTAC123.bind(undefined, 3),
/* 0x76 */
SROUND,
/* 0x77 */
S45ROUND,
/* 0x78 */
undefined, // TODO JROT[]

/* 0x79 */
undefined, // TODO JROF[]

/* 0x7A */
ROFF,
/* 0x7B */
undefined,
/* 0x7C */
RUTG,
/* 0x7D */
RDTG,
/* 0x7E */
POP, // actually SANGW, supposed to do only a pop though

/* 0x7F */
POP, // actually AA, supposed to do only a pop though

/* 0x80 */
undefined, // TODO FLIPPT

/* 0x81 */
undefined, // TODO FLIPRGON

/* 0x82 */
undefined, // TODO FLIPRGOFF

/* 0x83 */
undefined,
/* 0x84 */
undefined,
/* 0x85 */
SCANCTRL,
/* 0x86 */
SDPVTL.bind(undefined, 0),
/* 0x87 */
SDPVTL.bind(undefined, 1),
/* 0x88 */
GETINFO,
/* 0x89 */
undefined, // TODO IDEF

/* 0x8A */
ROLL,
/* 0x8B */
MAX,
/* 0x8C */
MIN,
/* 0x8D */
SCANTYPE,
/* 0x8E */
INSTCTRL,
/* 0x8F */
undefined,
/* 0x90 */
undefined,
/* 0x91 */
undefined,
/* 0x92 */
undefined,
/* 0x93 */
undefined,
/* 0x94 */
undefined,
/* 0x95 */
undefined,
/* 0x96 */
undefined,
/* 0x97 */
undefined,
/* 0x98 */
undefined,
/* 0x99 */
undefined,
/* 0x9A */
undefined,
/* 0x9B */
undefined,
/* 0x9C */
undefined,
/* 0x9D */
undefined,
/* 0x9E */
undefined,
/* 0x9F */
undefined,
/* 0xA0 */
undefined,
/* 0xA1 */
undefined,
/* 0xA2 */
undefined,
/* 0xA3 */
undefined,
/* 0xA4 */
undefined,
/* 0xA5 */
undefined,
/* 0xA6 */
undefined,
/* 0xA7 */
undefined,
/* 0xA8 */
undefined,
/* 0xA9 */
undefined,
/* 0xAA */
undefined,
/* 0xAB */
undefined,
/* 0xAC */
undefined,
/* 0xAD */
undefined,
/* 0xAE */
undefined,
/* 0xAF */
undefined,
/* 0xB0 */
PUSHB.bind(undefined, 1),
/* 0xB1 */
PUSHB.bind(undefined, 2),
/* 0xB2 */
PUSHB.bind(undefined, 3),
/* 0xB3 */
PUSHB.bind(undefined, 4),
/* 0xB4 */
PUSHB.bind(undefined, 5),
/* 0xB5 */
PUSHB.bind(undefined, 6),
/* 0xB6 */
PUSHB.bind(undefined, 7),
/* 0xB7 */
PUSHB.bind(undefined, 8),
/* 0xB8 */
PUSHW.bind(undefined, 1),
/* 0xB9 */
PUSHW.bind(undefined, 2),
/* 0xBA */
PUSHW.bind(undefined, 3),
/* 0xBB */
PUSHW.bind(undefined, 4),
/* 0xBC */
PUSHW.bind(undefined, 5),
/* 0xBD */
PUSHW.bind(undefined, 6),
/* 0xBE */
PUSHW.bind(undefined, 7),
/* 0xBF */
PUSHW.bind(undefined, 8),
/* 0xC0 */
MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),
/* 0xC1 */
MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),
/* 0xC2 */
MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),
/* 0xC3 */
MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),
/* 0xC4 */
MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),
/* 0xC5 */
MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),
/* 0xC6 */
MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),
/* 0xC7 */
MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),
/* 0xC8 */
MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),
/* 0xC9 */
MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),
/* 0xCA */
MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),
/* 0xCB */
MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),
/* 0xCC */
MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),
/* 0xCD */
MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),
/* 0xCE */
MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),
/* 0xCF */
MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),
/* 0xD0 */
MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),
/* 0xD1 */
MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),
/* 0xD2 */
MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),
/* 0xD3 */
MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),
/* 0xD4 */
MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),
/* 0xD5 */
MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),
/* 0xD6 */
MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),
/* 0xD7 */
MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),
/* 0xD8 */
MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),
/* 0xD9 */
MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),
/* 0xDA */
MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),
/* 0xDB */
MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),
/* 0xDC */
MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),
/* 0xDD */
MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),
/* 0xDE */
MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),
/* 0xDF */
MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),
/* 0xE0 */
MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),
/* 0xE1 */
MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),
/* 0xE2 */
MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),
/* 0xE3 */
MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),
/* 0xE4 */
MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),
/* 0xE5 */
MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),
/* 0xE6 */
MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),
/* 0xE7 */
MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),
/* 0xE8 */
MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),
/* 0xE9 */
MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),
/* 0xEA */
MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),
/* 0xEB */
MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),
/* 0xEC */
MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),
/* 0xED */
MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),
/* 0xEE */
MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),
/* 0xEF */
MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),
/* 0xF0 */
MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),
/* 0xF1 */
MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),
/* 0xF2 */
MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),
/* 0xF3 */
MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),
/* 0xF4 */
MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),
/* 0xF5 */
MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),
/* 0xF6 */
MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),
/* 0xF7 */
MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),
/* 0xF8 */
MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),
/* 0xF9 */
MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),
/* 0xFA */
MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),
/* 0xFB */
MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),
/* 0xFC */
MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),
/* 0xFD */
MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),
/* 0xFE */
MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),
/* 0xFF */
MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)];
/*****************************
  Mathematical Considerations
******************************

fv ... refers to freedom vector
pv ... refers to projection vector
rp ... refers to reference point
p  ... refers to to point being operated on
d  ... refers to distance

SETRELATIVE:
============

case freedom vector == x-axis:
------------------------------

                        (pv)
                     .-'
              rpd .-'
               .-*
          d .-'90°'
         .-'       '
      .-'           '
   *-'               ' b
  rp                  '
                       '
                        '
            p *----------*-------------- (fv)
                          pm

  rpdx = rpx + d * pv.x
  rpdy = rpy + d * pv.y

  equation of line b

   y - rpdy = pvns * (x- rpdx)

   y = p.y

   x = rpdx + ( p.y - rpdy ) / pvns


case freedom vector == y-axis:
------------------------------

    * pm
    |\
    | \
    |  \
    |   \
    |    \
    |     \
    |      \
    |       \
    |        \
    |         \ b
    |          \
    |           \
    |            \    .-' (pv)
    |         90° \.-'
    |           .-'* rpd
    |        .-'
    *     *-'  d
    p     rp

  rpdx = rpx + d * pv.x
  rpdy = rpy + d * pv.y

  equation of line b:
           pvns ... normal slope to pv

   y - rpdy = pvns * (x - rpdx)

   x = p.x

   y = rpdy +  pvns * (p.x - rpdx)



generic case:
-------------


                              .'(fv)
                            .'
                          .* pm
                        .' !
                      .'    .
                    .'      !
                  .'         . b
                .'           !
               *              .
              p               !
                         90°   .    ... (pv)
                           ...-*-'''
                  ...---'''    rpd
         ...---'''   d
   *--'''
  rp

    rpdx = rpx + d * pv.x
    rpdy = rpy + d * pv.y

 equation of line b:
    pvns... normal slope to pv

    y - rpdy = pvns * (x - rpdx)

 equation of freedom vector line:
    fvs ... slope of freedom vector (=fy/fx)

    y - py = fvs * (x - px)


  on pm both equations are true for same x/y

    y - rpdy = pvns * (x - rpdx)

    y - py = fvs * (x - px)

  form to y and set equal:

    pvns * (x - rpdx) + rpdy = fvs * (x - px) + py

  expand:

    pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py

  switch:

    fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy

  solve for x:

    fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy



          fvs * px - pvns * rpdx + rpdy - py
    x =  -----------------------------------
                 fvs - pvns

  and:

    y = fvs * (x - px) + py



INTERPOLATE:
============

Examples of point interpolation.

The weight of the movement of the reference point gets bigger
the further the other reference point is away, thus the safest
option (that is avoiding 0/0 divisions) is to weight the
original distance of the other point by the sum of both distances.

If the sum of both distances is 0, then move the point by the
arithmetic average of the movement of both reference points.




           (+6)
    rp1o *---->*rp1
         .     .                          (+12)
         .     .                  rp2o *---------->* rp2
         .     .                       .           .
         .     .                       .           .
         .    10          20           .           .
         |.........|...................|           .
               .   .                               .
               .   . (+8)                          .
                po *------>*p                      .
               .           .                       .
               .    12     .          24           .
               |...........|.......................|
                                  36


-------



           (+10)
    rp1o *-------->*rp1
         .         .                      (-10)
         .         .              rp2 *<---------* rpo2
         .         .                   .         .
         .         .                   .         .
         .    10   .          30       .         .
         |.........|.............................|
                   .                   .
                   . (+5)              .
                po *--->* p            .
                   .    .              .
                   .    .   20         .
                   |....|..............|
                     5        15


-------


           (+10)
    rp1o *-------->*rp1
         .         .
         .         .
    rp2o *-------->*rp2


                               (+10)
                          po *-------->* p

-------


           (+10)
    rp1o *-------->*rp1
         .         .
         .         .(+30)
    rp2o *---------------------------->*rp2


                                        (+25)
                          po *----------------------->* p



vim: set ts=4 sw=4 expandtab:
*****/

/**
 * Converts a string into a list of tokens.
 */

/**
 * Create a new token
 * @param {string} char a single char
 */

function Token(char) {
  this.char = char;
  this.state = {};
  this.activeState = null;
}
/**
 * Create a new context range
 * @param {number} startIndex range start index
 * @param {number} endOffset range end index offset
 * @param {string} contextName owner context name
 */


function ContextRange(startIndex, endOffset, contextName) {
  this.contextName = contextName;
  this.startIndex = startIndex;
  this.endOffset = endOffset;
}
/**
 * Check context start and end
 * @param {string} contextName a unique context name
 * @param {function} checkStart a predicate function the indicates a context's start
 * @param {function} checkEnd a predicate function the indicates a context's end
 */


function ContextChecker(contextName, checkStart, checkEnd) {
  this.contextName = contextName;
  this.openRange = null;
  this.ranges = [];
  this.checkStart = checkStart;
  this.checkEnd = checkEnd;
}
/**
 * @typedef ContextParams
 * @type Object
 * @property {array} context context items
 * @property {number} currentIndex current item index
 */

/**
 * Create a context params
 * @param {array} context a list of items
 * @param {number} currentIndex current item index
 */


function ContextParams(context, currentIndex) {
  this.context = context;
  this.index = currentIndex;
  this.length = context.length;
  this.current = context[currentIndex];
  this.backtrack = context.slice(0, currentIndex);
  this.lookahead = context.slice(currentIndex + 1);
}
/**
 * Create an event instance
 * @param {string} eventId event unique id
 */


function Event(eventId) {
  this.eventId = eventId;
  this.subscribers = [];
}
/**
 * Initialize a core events and auto subscribe required event handlers
 * @param {any} events an object that enlists core events handlers
 */


function initializeCoreEvents(events) {
  var this$1 = this;
  var coreEvents = ['start', 'end', 'next', 'newToken', 'contextStart', 'contextEnd', 'insertToken', 'removeToken', 'removeRange', 'replaceToken', 'replaceRange', 'composeRUD', 'updateContextsRanges'];
  coreEvents.forEach(function (eventId) {
    Object.defineProperty(this$1.events, eventId, {
      value: new Event(eventId)
    });
  });

  if (!!events) {
    coreEvents.forEach(function (eventId) {
      var event = events[eventId];

      if (typeof event === 'function') {
        this$1.events[eventId].subscribe(event);
      }
    });
  }

  var requiresContextUpdate = ['insertToken', 'removeToken', 'removeRange', 'replaceToken', 'replaceRange', 'composeRUD'];
  requiresContextUpdate.forEach(function (eventId) {
    this$1.events[eventId].subscribe(this$1.updateContextsRanges);
  });
}
/**
 * Converts a string into a list of tokens
 * @param {any} events tokenizer core events
 */


function Tokenizer(events) {
  this.tokens = [];
  this.registeredContexts = {};
  this.contextCheckers = [];
  this.events = {};
  this.registeredModifiers = [];
  initializeCoreEvents.call(this, events);
}
/**
 * Sets the state of a token, usually called by a state modifier.
 * @param {string} key state item key
 * @param {any} value state item value
 */


Token.prototype.setState = function (key, value) {
  this.state[key] = value;
  this.activeState = {
    key: key,
    value: this.state[key]
  };
  return this.activeState;
};

Token.prototype.getState = function (stateId) {
  return this.state[stateId] || null;
};
/**
 * Checks if an index exists in the tokens list.
 * @param {number} index token index
 */


Tokenizer.prototype.inboundIndex = function (index) {
  return index >= 0 && index < this.tokens.length;
};
/**
 * Compose and apply a list of operations (replace, update, delete)
 * @param {array} RUDs replace, update and delete operations
 * TODO: Perf. Optimization (lengthBefore === lengthAfter ? dispatch once)
 */


Tokenizer.prototype.composeRUD = function (RUDs) {
  var this$1 = this;
  var silent = true;
  var state = RUDs.map(function (RUD) {
    return this$1[RUD[0]].apply(this$1, RUD.slice(1).concat(silent));
  });

  var hasFAILObject = function (obj) {
    return typeof obj === 'object' && obj.hasOwnProperty('FAIL');
  };

  if (state.every(hasFAILObject)) {
    return {
      FAIL: "composeRUD: one or more operations hasn't completed successfully",
      report: state.filter(hasFAILObject)
    };
  }

  this.dispatch('composeRUD', [state.filter(function (op) {
    return !hasFAILObject(op);
  })]);
};
/**
 * Replace a range of tokens with a list of tokens
 * @param {number} startIndex range start index
 * @param {number} offset range offset
 * @param {token} tokens a list of tokens to replace
 * @param {boolean} silent dispatch events and update context ranges
 */


Tokenizer.prototype.replaceRange = function (startIndex, offset, tokens, silent) {
  offset = offset !== null ? offset : this.tokens.length;
  var isTokenType = tokens.every(function (token) {
    return token instanceof Token;
  });

  if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {
    var replaced = this.tokens.splice.apply(this.tokens, [startIndex, offset].concat(tokens));

    if (!silent) {
      this.dispatch('replaceToken', [startIndex, offset, tokens]);
    }

    return [replaced, tokens];
  } else {
    return {
      FAIL: 'replaceRange: invalid tokens or startIndex.'
    };
  }
};
/**
 * Replace a token with another token
 * @param {number} index token index
 * @param {token} token a token to replace
 * @param {boolean} silent dispatch events and update context ranges
 */


Tokenizer.prototype.replaceToken = function (index, token, silent) {
  if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {
    var replaced = this.tokens.splice(index, 1, token);

    if (!silent) {
      this.dispatch('replaceToken', [index, token]);
    }

    return [replaced[0], token];
  } else {
    return {
      FAIL: 'replaceToken: invalid token or index.'
    };
  }
};
/**
 * Removes a range of tokens
 * @param {number} startIndex range start index
 * @param {number} offset range offset
 * @param {boolean} silent dispatch events and update context ranges
 */


Tokenizer.prototype.removeRange = function (startIndex, offset, silent) {
  offset = !isNaN(offset) ? offset : this.tokens.length;
  var tokens = this.tokens.splice(startIndex, offset);

  if (!silent) {
    this.dispatch('removeRange', [tokens, startIndex, offset]);
  }

  return tokens;
};
/**
 * Remove a token at a certain index
 * @param {number} index token index
 * @param {boolean} silent dispatch events and update context ranges
 */


Tokenizer.prototype.removeToken = function (index, silent) {
  if (!isNaN(index) && this.inboundIndex(index)) {
    var token = this.tokens.splice(index, 1);

    if (!silent) {
      this.dispatch('removeToken', [token, index]);
    }

    return token;
  } else {
    return {
      FAIL: 'removeToken: invalid token index.'
    };
  }
};
/**
 * Insert a list of tokens at a certain index
 * @param {array} tokens a list of tokens to insert
 * @param {number} index insert the list of tokens at index
 * @param {boolean} silent dispatch events and update context ranges
 */


Tokenizer.prototype.insertToken = function (tokens, index, silent) {
  var tokenType = tokens.every(function (token) {
    return token instanceof Token;
  });

  if (tokenType) {
    this.tokens.splice.apply(this.tokens, [index, 0].concat(tokens));

    if (!silent) {
      this.dispatch('insertToken', [tokens, index]);
    }

    return tokens;
  } else {
    return {
      FAIL: 'insertToken: invalid token(s).'
    };
  }
};
/**
 * A state modifier that is called on 'newToken' event
 * @param {string} modifierId state modifier id
 * @param {function} condition a predicate function that returns true or false
 * @param {function} modifier a function to update token state
 */


Tokenizer.prototype.registerModifier = function (modifierId, condition, modifier) {
  this.events.newToken.subscribe(function (token, contextParams) {
    var conditionParams = [token, contextParams];
    var canApplyModifier = condition === null || condition.apply(this, conditionParams) === true;
    var modifierParams = [token, contextParams];

    if (canApplyModifier) {
      var newStateValue = modifier.apply(this, modifierParams);
      token.setState(modifierId, newStateValue);
    }
  });
  this.registeredModifiers.push(modifierId);
};
/**
 * Subscribe a handler to an event
 * @param {function} eventHandler an event handler function
 */


Event.prototype.subscribe = function (eventHandler) {
  if (typeof eventHandler === 'function') {
    return this.subscribers.push(eventHandler) - 1;
  } else {
    return {
      FAIL: "invalid '" + this.eventId + "' event handler"
    };
  }
};
/**
 * Unsubscribe an event handler
 * @param {string} subsId subscription id
 */


Event.prototype.unsubscribe = function (subsId) {
  this.subscribers.splice(subsId, 1);
};
/**
 * Sets context params current value index
 * @param {number} index context params current value index
 */


ContextParams.prototype.setCurrentIndex = function (index) {
  this.index = index;
  this.current = this.context[index];
  this.backtrack = this.context.slice(0, index);
  this.lookahead = this.context.slice(index + 1);
};
/**
 * Get an item at an offset from the current value
 * example (current value is 3):
 *  1    2   [3]   4    5   |   items values
 * -2   -1    0    1    2   |   offset values
 * @param {number} offset an offset from current value index
 */


ContextParams.prototype.get = function (offset) {
  switch (true) {
    case offset === 0:
      return this.current;

    case offset < 0 && Math.abs(offset) <= this.backtrack.length:
      return this.backtrack.slice(offset)[0];

    case offset > 0 && offset <= this.lookahead.length:
      return this.lookahead[offset - 1];

    default:
      return null;
  }
};
/**
 * Converts a context range into a string value
 * @param {contextRange} range a context range
 */


Tokenizer.prototype.rangeToText = function (range) {
  if (range instanceof ContextRange) {
    return this.getRangeTokens(range).map(function (token) {
      return token.char;
    }).join('');
  }
};
/**
 * Converts all tokens into a string
 */


Tokenizer.prototype.getText = function () {
  return this.tokens.map(function (token) {
    return token.char;
  }).join('');
};
/**
 * Get a context by name
 * @param {string} contextName context name to get
 */


Tokenizer.prototype.getContext = function (contextName) {
  var context = this.registeredContexts[contextName];
  return !!context ? context : null;
};
/**
 * Subscribes a new event handler to an event
 * @param {string} eventName event name to subscribe to
 * @param {function} eventHandler a function to be invoked on event
 */


Tokenizer.prototype.on = function (eventName, eventHandler) {
  var event = this.events[eventName];

  if (!!event) {
    return event.subscribe(eventHandler);
  } else {
    return null;
  }
};
/**
 * Dispatches an event
 * @param {string} eventName event name
 * @param {any} args event handler arguments
 */


Tokenizer.prototype.dispatch = function (eventName, args) {
  var this$1 = this;
  var event = this.events[eventName];

  if (event instanceof Event) {
    event.subscribers.forEach(function (subscriber) {
      subscriber.apply(this$1, args || []);
    });
  }
};
/**
 * Register a new context checker
 * @param {string} contextName a unique context name
 * @param {function} contextStartCheck a predicate function that returns true on context start
 * @param {function} contextEndCheck  a predicate function that returns true on context end
 * TODO: call tokenize on registration to update context ranges with the new context.
 */


Tokenizer.prototype.registerContextChecker = function (contextName, contextStartCheck, contextEndCheck) {
  if (!!this.getContext(contextName)) {
    return {
      FAIL: "context name '" + contextName + "' is already registered."
    };
  }

  if (typeof contextStartCheck !== 'function') {
    return {
      FAIL: "missing context start check."
    };
  }

  if (typeof contextEndCheck !== 'function') {
    return {
      FAIL: "missing context end check."
    };
  }

  var contextCheckers = new ContextChecker(contextName, contextStartCheck, contextEndCheck);
  this.registeredContexts[contextName] = contextCheckers;
  this.contextCheckers.push(contextCheckers);
  return contextCheckers;
};
/**
 * Gets a context range tokens
 * @param {contextRange} range a context range
 */


Tokenizer.prototype.getRangeTokens = function (range) {
  var endIndex = range.startIndex + range.endOffset;
  return [].concat(this.tokens.slice(range.startIndex, endIndex));
};
/**
 * Gets the ranges of a context
 * @param {string} contextName context name
 */


Tokenizer.prototype.getContextRanges = function (contextName) {
  var context = this.getContext(contextName);

  if (!!context) {
    return context.ranges;
  } else {
    return {
      FAIL: "context checker '" + contextName + "' is not registered."
    };
  }
};
/**
 * Resets context ranges to run context update
 */


Tokenizer.prototype.resetContextsRanges = function () {
  var registeredContexts = this.registeredContexts;

  for (var contextName in registeredContexts) {
    if (registeredContexts.hasOwnProperty(contextName)) {
      var context = registeredContexts[contextName];
      context.ranges = [];
    }
  }
};
/**
 * Updates context ranges
 */


Tokenizer.prototype.updateContextsRanges = function () {
  this.resetContextsRanges();
  var chars = this.tokens.map(function (token) {
    return token.char;
  });

  for (var i = 0; i < chars.length; i++) {
    var contextParams = new ContextParams(chars, i);
    this.runContextCheck(contextParams);
  }

  this.dispatch('updateContextsRanges', [this.registeredContexts]);
};
/**
 * Sets the end offset of an open range
 * @param {number} offset range end offset
 * @param {string} contextName context name
 */


Tokenizer.prototype.setEndOffset = function (offset, contextName) {
  var startIndex = this.getContext(contextName).openRange.startIndex;
  var range = new ContextRange(startIndex, offset, contextName);
  var ranges = this.getContext(contextName).ranges;
  range.rangeId = contextName + "." + ranges.length;
  ranges.push(range);
  this.getContext(contextName).openRange = null;
  return range;
};
/**
 * Runs a context check on the current context
 * @param {contextParams} contextParams current context params
 */


Tokenizer.prototype.runContextCheck = function (contextParams) {
  var this$1 = this;
  var index = contextParams.index;
  this.contextCheckers.forEach(function (contextChecker) {
    var contextName = contextChecker.contextName;
    var openRange = this$1.getContext(contextName).openRange;

    if (!openRange && contextChecker.checkStart(contextParams)) {
      openRange = new ContextRange(index, null, contextName);
      this$1.getContext(contextName).openRange = openRange;
      this$1.dispatch('contextStart', [contextName, index]);
    }

    if (!!openRange && contextChecker.checkEnd(contextParams)) {
      var offset = index - openRange.startIndex + 1;
      var range = this$1.setEndOffset(offset, contextName);
      this$1.dispatch('contextEnd', [contextName, range]);
    }
  });
};
/**
 * Converts a text into a list of tokens
 * @param {string} text a text to tokenize
 */


Tokenizer.prototype.tokenize = function (text) {
  this.tokens = [];
  this.resetContextsRanges();
  var chars = Array.from(text);
  this.dispatch('start');

  for (var i = 0; i < chars.length; i++) {
    var char = chars[i];
    var contextParams = new ContextParams(chars, i);
    this.dispatch('next', [contextParams]);
    this.runContextCheck(contextParams);
    var token = new Token(char);
    this.tokens.push(token);
    this.dispatch('newToken', [token, contextParams]);
  }

  this.dispatch('end', [this.tokens]);
  return this.tokens;
}; // ╭─┄┄┄────────────────────────┄─────────────────────────────────────────────╮
// ┊ Character Class Assertions ┊ Checks if a char belongs to a certain class ┊
// ╰─╾──────────────────────────┄─────────────────────────────────────────────╯
// jscs:disable maximumLineLength

/**
 * Check if a char is Arabic
 * @param {string} c a single char
 */


function isArabicChar(c) {
  return /[\u0600-\u065F\u066A-\u06D2\u06FA-\u06FF]/.test(c);
}
/**
 * Check if a char is an isolated arabic char
 * @param {string} c a single char
 */


function isIsolatedArabicChar(char) {
  return /[\u0630\u0690\u0621\u0631\u0661\u0671\u0622\u0632\u0672\u0692\u06C2\u0623\u0673\u0693\u06C3\u0624\u0694\u06C4\u0625\u0675\u0695\u06C5\u06E5\u0676\u0696\u06C6\u0627\u0677\u0697\u06C7\u0648\u0688\u0698\u06C8\u0689\u0699\u06C9\u068A\u06CA\u066B\u068B\u06CB\u068C\u068D\u06CD\u06FD\u068E\u06EE\u06FE\u062F\u068F\u06CF\u06EF]/.test(char);
}
/**
 * Check if a char is an Arabic Tashkeel char
 * @param {string} c a single char
 */


function isTashkeelArabicChar(char) {
  return /[\u0600-\u0605\u060C-\u060E\u0610-\u061B\u061E\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED]/.test(char);
}
/**
 * Check if a char is Latin
 * @param {string} c a single char
 */


function isLatinChar(c) {
  return /[A-z]/.test(c);
}
/**
 * Check if a char is whitespace char
 * @param {string} c a single char
 */


function isWhiteSpace(c) {
  return /\s/.test(c);
}
/**
 * Query a feature by some of it's properties to lookup a glyph substitution.
 */

/**
 * Create feature query instance
 * @param {Font} font opentype font instance
 */


function FeatureQuery(font) {
  this.font = font;
  this.features = {};
}
/**
 * @typedef SubstitutionAction
 * @type Object
 * @property {number} id substitution type
 * @property {string} tag feature tag
 * @property {any} substitution substitution value(s)
 */

/**
 * Create a substitution action instance
 * @param {SubstitutionAction} action
 */


function SubstitutionAction(action) {
  this.id = action.id;
  this.tag = action.tag;
  this.substitution = action.substitution;
}
/**
 * Lookup a coverage table
 * @param {number} glyphIndex glyph index
 * @param {CoverageTable} coverage coverage table
 */


function lookupCoverage(glyphIndex, coverage) {
  if (!glyphIndex) {
    return -1;
  }

  switch (coverage.format) {
    case 1:
      return coverage.glyphs.indexOf(glyphIndex);

    case 2:
      var ranges = coverage.ranges;

      for (var i = 0; i < ranges.length; i++) {
        var range = ranges[i];

        if (glyphIndex >= range.start && glyphIndex <= range.end) {
          var offset = glyphIndex - range.start;
          return range.index + offset;
        }
      }

      break;

    default:
      return -1;
    // not found
  }

  return -1;
}
/**
 * Handle a single substitution - format 1
 * @param {ContextParams} contextParams context params to lookup
 */


function singleSubstitutionFormat1(glyphIndex, subtable) {
  var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);

  if (substituteIndex === -1) {
    return null;
  }

  return glyphIndex + subtable.deltaGlyphId;
}
/**
 * Handle a single substitution - format 2
 * @param {ContextParams} contextParams context params to lookup
 */


function singleSubstitutionFormat2(glyphIndex, subtable) {
  var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);

  if (substituteIndex === -1) {
    return null;
  }

  return subtable.substitute[substituteIndex];
}
/**
 * Lookup a list of coverage tables
 * @param {any} coverageList a list of coverage tables
 * @param {ContextParams} contextParams context params to lookup
 */


function lookupCoverageList(coverageList, contextParams) {
  var lookupList = [];

  for (var i = 0; i < coverageList.length; i++) {
    var coverage = coverageList[i];
    var glyphIndex = contextParams.current;
    glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;
    var lookupIndex = lookupCoverage(glyphIndex, coverage);

    if (lookupIndex !== -1) {
      lookupList.push(lookupIndex);
    }
  }

  if (lookupList.length !== coverageList.length) {
    return -1;
  }

  return lookupList;
}
/**
 * Handle chaining context substitution - format 3
 * @param {ContextParams} contextParams context params to lookup
 */


function chainingSubstitutionFormat3(contextParams, subtable) {
  var lookupsCount = subtable.inputCoverage.length + subtable.lookaheadCoverage.length + subtable.backtrackCoverage.length;

  if (contextParams.context.length < lookupsCount) {
    return [];
  } // INPUT LOOKUP //


  var inputLookups = lookupCoverageList(subtable.inputCoverage, contextParams);

  if (inputLookups === -1) {
    return [];
  } // LOOKAHEAD LOOKUP //


  var lookaheadOffset = subtable.inputCoverage.length - 1;

  if (contextParams.lookahead.length < subtable.lookaheadCoverage.length) {
    return [];
  }

  var lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);

  while (lookaheadContext.length && isTashkeelArabicChar(lookaheadContext[0].char)) {
    lookaheadContext.shift();
  }

  var lookaheadParams = new ContextParams(lookaheadContext, 0);
  var lookaheadLookups = lookupCoverageList(subtable.lookaheadCoverage, lookaheadParams); // BACKTRACK LOOKUP //

  var backtrackContext = [].concat(contextParams.backtrack);
  backtrackContext.reverse();

  while (backtrackContext.length && isTashkeelArabicChar(backtrackContext[0].char)) {
    backtrackContext.shift();
  }

  if (backtrackContext.length < subtable.backtrackCoverage.length) {
    return [];
  }

  var backtrackParams = new ContextParams(backtrackContext, 0);
  var backtrackLookups = lookupCoverageList(subtable.backtrackCoverage, backtrackParams);
  var contextRulesMatch = inputLookups.length === subtable.inputCoverage.length && lookaheadLookups.length === subtable.lookaheadCoverage.length && backtrackLookups.length === subtable.backtrackCoverage.length;
  var substitutions = [];

  if (contextRulesMatch) {
    for (var i = 0; i < subtable.lookupRecords.length; i++) {
      var lookupRecord = subtable.lookupRecords[i];
      var lookupListIndex = lookupRecord.lookupListIndex;
      var lookupTable = this.getLookupByIndex(lookupListIndex);

      for (var s = 0; s < lookupTable.subtables.length; s++) {
        var subtable$1 = lookupTable.subtables[s];
        var lookup = this.getLookupMethod(lookupTable, subtable$1);
        var substitutionType = this.getSubstitutionType(lookupTable, subtable$1);

        if (substitutionType === '12') {
          for (var n = 0; n < inputLookups.length; n++) {
            var glyphIndex = contextParams.get(n);
            var substitution = lookup(glyphIndex);

            if (substitution) {
              substitutions.push(substitution);
            }
          }
        }
      }
    }
  }

  return substitutions;
}
/**
 * Handle ligature substitution - format 1
 * @param {ContextParams} contextParams context params to lookup
 */


function ligatureSubstitutionFormat1(contextParams, subtable) {
  // COVERAGE LOOKUP //
  var glyphIndex = contextParams.current;
  var ligSetIndex = lookupCoverage(glyphIndex, subtable.coverage);

  if (ligSetIndex === -1) {
    return null;
  } // COMPONENTS LOOKUP
  // (!) note, components are ordered in the written direction.


  var ligature;
  var ligatureSet = subtable.ligatureSets[ligSetIndex];

  for (var s = 0; s < ligatureSet.length; s++) {
    ligature = ligatureSet[s];

    for (var l = 0; l < ligature.components.length; l++) {
      var lookaheadItem = contextParams.lookahead[l];
      var component = ligature.components[l];

      if (lookaheadItem !== component) {
        break;
      }

      if (l === ligature.components.length - 1) {
        return ligature;
      }
    }
  }

  return null;
}
/**
 * Handle decomposition substitution - format 1
 * @param {number} glyphIndex glyph index
 * @param {any} subtable subtable
 */


function decompositionSubstitutionFormat1(glyphIndex, subtable) {
  var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);

  if (substituteIndex === -1) {
    return null;
  }

  return subtable.sequences[substituteIndex];
}
/**
 * Get default script features indexes
 */


FeatureQuery.prototype.getDefaultScriptFeaturesIndexes = function () {
  var scripts = this.font.tables.gsub.scripts;

  for (var s = 0; s < scripts.length; s++) {
    var script = scripts[s];

    if (script.tag === 'DFLT') {
      return script.script.defaultLangSys.featureIndexes;
    }
  }

  return [];
};
/**
 * Get feature indexes of a specific script
 * @param {string} scriptTag script tag
 */


FeatureQuery.prototype.getScriptFeaturesIndexes = function (scriptTag) {
  var tables = this.font.tables;

  if (!tables.gsub) {
    return [];
  }

  if (!scriptTag) {
    return this.getDefaultScriptFeaturesIndexes();
  }

  var scripts = this.font.tables.gsub.scripts;

  for (var i = 0; i < scripts.length; i++) {
    var script = scripts[i];

    if (script.tag === scriptTag && script.script.defaultLangSys) {
      return script.script.defaultLangSys.featureIndexes;
    } else {
      var langSysRecords = script.langSysRecords;

      if (!!langSysRecords) {
        for (var j = 0; j < langSysRecords.length; j++) {
          var langSysRecord = langSysRecords[j];

          if (langSysRecord.tag === scriptTag) {
            var langSys = langSysRecord.langSys;
            return langSys.featureIndexes;
          }
        }
      }
    }
  }

  return this.getDefaultScriptFeaturesIndexes();
};
/**
 * Map a feature tag to a gsub feature
 * @param {any} features gsub features
 * @param {string} scriptTag script tag
 */


FeatureQuery.prototype.mapTagsToFeatures = function (features, scriptTag) {
  var tags = {};

  for (var i = 0; i < features.length; i++) {
    var tag = features[i].tag;
    var feature = features[i].feature;
    tags[tag] = feature;
  }

  this.features[scriptTag].tags = tags;
};
/**
 * Get features of a specific script
 * @param {string} scriptTag script tag
 */


FeatureQuery.prototype.getScriptFeatures = function (scriptTag) {
  var features = this.features[scriptTag];

  if (this.features.hasOwnProperty(scriptTag)) {
    return features;
  }

  var featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);

  if (!featuresIndexes) {
    return null;
  }

  var gsub = this.font.tables.gsub;
  features = featuresIndexes.map(function (index) {
    return gsub.features[index];
  });
  this.features[scriptTag] = features;
  this.mapTagsToFeatures(features, scriptTag);
  return features;
};
/**
 * Get substitution type
 * @param {any} lookupTable lookup table
 * @param {any} subtable subtable
 */


FeatureQuery.prototype.getSubstitutionType = function (lookupTable, subtable) {
  var lookupType = lookupTable.lookupType.toString();
  var substFormat = subtable.substFormat.toString();
  return lookupType + substFormat;
};
/**
 * Get lookup method
 * @param {any} lookupTable lookup table
 * @param {any} subtable subtable
 */


FeatureQuery.prototype.getLookupMethod = function (lookupTable, subtable) {
  var this$1 = this;
  var substitutionType = this.getSubstitutionType(lookupTable, subtable);

  switch (substitutionType) {
    case '11':
      return function (glyphIndex) {
        return singleSubstitutionFormat1.apply(this$1, [glyphIndex, subtable]);
      };

    case '12':
      return function (glyphIndex) {
        return singleSubstitutionFormat2.apply(this$1, [glyphIndex, subtable]);
      };

    case '63':
      return function (contextParams) {
        return chainingSubstitutionFormat3.apply(this$1, [contextParams, subtable]);
      };

    case '41':
      return function (contextParams) {
        return ligatureSubstitutionFormat1.apply(this$1, [contextParams, subtable]);
      };

    case '21':
      return function (glyphIndex) {
        return decompositionSubstitutionFormat1.apply(this$1, [glyphIndex, subtable]);
      };

    default:
      throw new Error("lookupType: " + lookupTable.lookupType + " - " + "substFormat: " + subtable.substFormat + " " + "is not yet supported");
  }
};
/**
 * [ LOOKUP TYPES ]
 * -------------------------------
 * Single                        1;
 * Multiple                      2;
 * Alternate                     3;
 * Ligature                      4;
 * Context                       5;
 * ChainingContext               6;
 * ExtensionSubstitution         7;
 * ReverseChainingContext        8;
 * -------------------------------
 *
 */

/**
 * @typedef FQuery
 * @type Object
 * @param {string} tag feature tag
 * @param {string} script feature script
 * @param {ContextParams} contextParams context params
 */

/**
 * Lookup a feature using a query parameters
 * @param {FQuery} query feature query
 */


FeatureQuery.prototype.lookupFeature = function (query) {
  var contextParams = query.contextParams;
  var currentIndex = contextParams.index;
  var feature = this.getFeature({
    tag: query.tag,
    script: query.script
  });

  if (!feature) {
    return new Error("font '" + this.font.names.fullName.en + "' " + "doesn't support feature '" + query.tag + "' " + "for script '" + query.script + "'.");
  }

  var lookups = this.getFeatureLookups(feature);
  var substitutions = [].concat(contextParams.context);

  for (var l = 0; l < lookups.length; l++) {
    var lookupTable = lookups[l];
    var subtables = this.getLookupSubtables(lookupTable);

    for (var s = 0; s < subtables.length; s++) {
      var subtable = subtables[s];
      var substType = this.getSubstitutionType(lookupTable, subtable);
      var lookup = this.getLookupMethod(lookupTable, subtable);
      var substitution = void 0;

      switch (substType) {
        case '11':
          substitution = lookup(contextParams.current);

          if (substitution) {
            substitutions.splice(currentIndex, 1, new SubstitutionAction({
              id: 11,
              tag: query.tag,
              substitution: substitution
            }));
          }

          break;

        case '12':
          substitution = lookup(contextParams.current);

          if (substitution) {
            substitutions.splice(currentIndex, 1, new SubstitutionAction({
              id: 12,
              tag: query.tag,
              substitution: substitution
            }));
          }

          break;

        case '63':
          substitution = lookup(contextParams);

          if (Array.isArray(substitution) && substitution.length) {
            substitutions.splice(currentIndex, 1, new SubstitutionAction({
              id: 63,
              tag: query.tag,
              substitution: substitution
            }));
          }

          break;

        case '41':
          substitution = lookup(contextParams);

          if (substitution) {
            substitutions.splice(currentIndex, 1, new SubstitutionAction({
              id: 41,
              tag: query.tag,
              substitution: substitution
            }));
          }

          break;

        case '21':
          substitution = lookup(contextParams.current);

          if (substitution) {
            substitutions.splice(currentIndex, 1, new SubstitutionAction({
              id: 21,
              tag: query.tag,
              substitution: substitution
            }));
          }

          break;
      }

      contextParams = new ContextParams(substitutions, currentIndex);

      if (Array.isArray(substitution) && !substitution.length) {
        continue;
      }

      substitution = null;
    }
  }

  return substitutions.length ? substitutions : null;
};
/**
 * Checks if a font supports a specific features
 * @param {FQuery} query feature query object
 */


FeatureQuery.prototype.supports = function (query) {
  if (!query.script) {
    return false;
  }

  this.getScriptFeatures(query.script);
  var supportedScript = this.features.hasOwnProperty(query.script);

  if (!query.tag) {
    return supportedScript;
  }

  var supportedFeature = this.features[query.script].some(function (feature) {
    return feature.tag === query.tag;
  });
  return supportedScript && supportedFeature;
};
/**
 * Get lookup table subtables
 * @param {any} lookupTable lookup table
 */


FeatureQuery.prototype.getLookupSubtables = function (lookupTable) {
  return lookupTable.subtables || null;
};
/**
 * Get lookup table by index
 * @param {number} index lookup table index
 */


FeatureQuery.prototype.getLookupByIndex = function (index) {
  var lookups = this.font.tables.gsub.lookups;
  return lookups[index] || null;
};
/**
 * Get lookup tables for a feature
 * @param {string} feature
 */


FeatureQuery.prototype.getFeatureLookups = function (feature) {
  // TODO: memoize
  return feature.lookupListIndexes.map(this.getLookupByIndex.bind(this));
};
/**
 * Query a feature by it's properties
 * @param {any} query an object that describes the properties of a query
 */


FeatureQuery.prototype.getFeature = function getFeature(query) {
  if (!this.font) {
    return {
      FAIL: "No font was found"
    };
  }

  if (!this.features.hasOwnProperty(query.script)) {
    this.getScriptFeatures(query.script);
  }

  var scriptFeatures = this.features[query.script];

  if (!scriptFeatures) {
    return {
      FAIL: "No feature for script " + query.script
    };
  }

  if (!scriptFeatures.tags[query.tag]) {
    return null;
  }

  return this.features[query.script].tags[query.tag];
};
/**
 * Arabic word context checkers
 */


function arabicWordStartCheck(contextParams) {
  var char = contextParams.current;
  var prevChar = contextParams.get(-1);
  return (// ? arabic first char
    prevChar === null && isArabicChar(char) || // ? arabic char preceded with a non arabic char
    !isArabicChar(prevChar) && isArabicChar(char)
  );
}

function arabicWordEndCheck(contextParams) {
  var nextChar = contextParams.get(1);
  return (// ? last arabic char
    nextChar === null || // ? next char is not arabic
    !isArabicChar(nextChar)
  );
}

var arabicWordCheck = {
  startCheck: arabicWordStartCheck,
  endCheck: arabicWordEndCheck
};
/**
 * Arabic sentence context checkers
 */

function arabicSentenceStartCheck(contextParams) {
  var char = contextParams.current;
  var prevChar = contextParams.get(-1);
  return (// ? an arabic char preceded with a non arabic char
    (isArabicChar(char) || isTashkeelArabicChar(char)) && !isArabicChar(prevChar)
  );
}

function arabicSentenceEndCheck(contextParams) {
  var nextChar = contextParams.get(1);

  switch (true) {
    case nextChar === null:
      return true;

    case !isArabicChar(nextChar) && !isTashkeelArabicChar(nextChar):
      var nextIsWhitespace = isWhiteSpace(nextChar);

      if (!nextIsWhitespace) {
        return true;
      }

      if (nextIsWhitespace) {
        var arabicCharAhead = false;
        arabicCharAhead = contextParams.lookahead.some(function (c) {
          return isArabicChar(c) || isTashkeelArabicChar(c);
        });

        if (!arabicCharAhead) {
          return true;
        }
      }

      break;

    default:
      return false;
  }
}

var arabicSentenceCheck = {
  startCheck: arabicSentenceStartCheck,
  endCheck: arabicSentenceEndCheck
};
/**
 * Apply single substitution format 1
 * @param {Array} substitutions substitutions
 * @param {any} tokens a list of tokens
 * @param {number} index token index
 */

function singleSubstitutionFormat1$1(action, tokens, index) {
  tokens[index].setState(action.tag, action.substitution);
}
/**
 * Apply single substitution format 2
 * @param {Array} substitutions substitutions
 * @param {any} tokens a list of tokens
 * @param {number} index token index
 */


function singleSubstitutionFormat2$1(action, tokens, index) {
  tokens[index].setState(action.tag, action.substitution);
}
/**
 * Apply chaining context substitution format 3
 * @param {Array} substitutions substitutions
 * @param {any} tokens a list of tokens
 * @param {number} index token index
 */


function chainingSubstitutionFormat3$1(action, tokens, index) {
  action.substitution.forEach(function (subst, offset) {
    var token = tokens[index + offset];
    token.setState(action.tag, subst);
  });
}
/**
 * Apply ligature substitution format 1
 * @param {Array} substitutions substitutions
 * @param {any} tokens a list of tokens
 * @param {number} index token index
 */


function ligatureSubstitutionFormat1$1(action, tokens, index) {
  var token = tokens[index];
  token.setState(action.tag, action.substitution.ligGlyph);
  var compsCount = action.substitution.components.length;

  for (var i = 0; i < compsCount; i++) {
    token = tokens[index + i + 1];
    token.setState('deleted', true);
  }
}
/**
 * Supported substitutions
 */


var SUBSTITUTIONS = {
  11: singleSubstitutionFormat1$1,
  12: singleSubstitutionFormat2$1,
  63: chainingSubstitutionFormat3$1,
  41: ligatureSubstitutionFormat1$1
};
/**
 * Apply substitutions to a list of tokens
 * @param {Array} substitutions substitutions
 * @param {any} tokens a list of tokens
 * @param {number} index token index
 */

function applySubstitution(action, tokens, index) {
  if (action instanceof SubstitutionAction && SUBSTITUTIONS[action.id]) {
    SUBSTITUTIONS[action.id](action, tokens, index);
  }
}
/**
 * Apply Arabic presentation forms to a range of tokens
 */

/**
 * Check if a char can be connected to it's preceding char
 * @param {ContextParams} charContextParams context params of a char
 */


function willConnectPrev(charContextParams) {
  var backtrack = [].concat(charContextParams.backtrack);

  for (var i = backtrack.length - 1; i >= 0; i--) {
    var prevChar = backtrack[i];
    var isolated = isIsolatedArabicChar(prevChar);
    var tashkeel = isTashkeelArabicChar(prevChar);

    if (!isolated && !tashkeel) {
      return true;
    }

    if (isolated) {
      return false;
    }
  }

  return false;
}
/**
 * Check if a char can be connected to it's proceeding char
 * @param {ContextParams} charContextParams context params of a char
 */


function willConnectNext(charContextParams) {
  if (isIsolatedArabicChar(charContextParams.current)) {
    return false;
  }

  for (var i = 0; i < charContextParams.lookahead.length; i++) {
    var nextChar = charContextParams.lookahead[i];
    var tashkeel = isTashkeelArabicChar(nextChar);

    if (!tashkeel) {
      return true;
    }
  }

  return false;
}
/**
 * Apply arabic presentation forms to a list of tokens
 * @param {ContextRange} range a range of tokens
 */


function arabicPresentationForms(range) {
  var this$1 = this;
  var script = 'arab';
  var tags = this.featuresTags[script];
  var tokens = this.tokenizer.getRangeTokens(range);

  if (tokens.length === 1) {
    return;
  }

  var contextParams = new ContextParams(tokens.map(function (token) {
    return token.getState('glyphIndex');
  }), 0);
  var charContextParams = new ContextParams(tokens.map(function (token) {
    return token.char;
  }), 0);
  tokens.forEach(function (token, index) {
    if (isTashkeelArabicChar(token.char)) {
      return;
    }

    contextParams.setCurrentIndex(index);
    charContextParams.setCurrentIndex(index);
    var CONNECT = 0; // 2 bits 00 (10: can connect next) (01: can connect prev)

    if (willConnectPrev(charContextParams)) {
      CONNECT |= 1;
    }

    if (willConnectNext(charContextParams)) {
      CONNECT |= 2;
    }

    var tag;

    switch (CONNECT) {
      case 1:
        tag = 'fina';
        break;

      case 2:
        tag = 'init';
        break;

      case 3:
        tag = 'medi';
        break;
    }

    if (tags.indexOf(tag) === -1) {
      return;
    }

    var substitutions = this$1.query.lookupFeature({
      tag: tag,
      script: script,
      contextParams: contextParams
    });

    if (substitutions instanceof Error) {
      return console.info(substitutions.message);
    }

    substitutions.forEach(function (action, index) {
      if (action instanceof SubstitutionAction) {
        applySubstitution(action, tokens, index);
        contextParams.context[index] = action.substitution;
      }
    });
  });
}
/**
 * Apply Arabic required ligatures feature to a range of tokens
 */

/**
 * Update context params
 * @param {any} tokens a list of tokens
 * @param {number} index current item index
 */


function getContextParams(tokens, index) {
  var context = tokens.map(function (token) {
    return token.activeState.value;
  });
  return new ContextParams(context, index || 0);
}
/**
 * Apply Arabic required ligatures to a context range
 * @param {ContextRange} range a range of tokens
 */


function arabicRequiredLigatures(range) {
  var this$1 = this;
  var script = 'arab';
  var tokens = this.tokenizer.getRangeTokens(range);
  var contextParams = getContextParams(tokens);
  contextParams.context.forEach(function (glyphIndex, index) {
    contextParams.setCurrentIndex(index);
    var substitutions = this$1.query.lookupFeature({
      tag: 'rlig',
      script: script,
      contextParams: contextParams
    });

    if (substitutions.length) {
      substitutions.forEach(function (action) {
        return applySubstitution(action, tokens, index);
      });
      contextParams = getContextParams(tokens);
    }
  });
}
/**
 * Latin word context checkers
 */


function latinWordStartCheck(contextParams) {
  var char = contextParams.current;
  var prevChar = contextParams.get(-1);
  return (// ? latin first char
    prevChar === null && isLatinChar(char) || // ? latin char preceded with a non latin char
    !isLatinChar(prevChar) && isLatinChar(char)
  );
}

function latinWordEndCheck(contextParams) {
  var nextChar = contextParams.get(1);
  return (// ? last latin char
    nextChar === null || // ? next char is not latin
    !isLatinChar(nextChar)
  );
}

var latinWordCheck = {
  startCheck: latinWordStartCheck,
  endCheck: latinWordEndCheck
};
/**
 * Apply Latin ligature feature to a range of tokens
 */

/**
 * Update context params
 * @param {any} tokens a list of tokens
 * @param {number} index current item index
 */

function getContextParams$1(tokens, index) {
  var context = tokens.map(function (token) {
    return token.activeState.value;
  });
  return new ContextParams(context, index || 0);
}
/**
 * Apply Arabic required ligatures to a context range
 * @param {ContextRange} range a range of tokens
 */


function latinLigature(range) {
  var this$1 = this;
  var script = 'latn';
  var tokens = this.tokenizer.getRangeTokens(range);
  var contextParams = getContextParams$1(tokens);
  contextParams.context.forEach(function (glyphIndex, index) {
    contextParams.setCurrentIndex(index);
    var substitutions = this$1.query.lookupFeature({
      tag: 'liga',
      script: script,
      contextParams: contextParams
    });

    if (substitutions.length) {
      substitutions.forEach(function (action) {
        return applySubstitution(action, tokens, index);
      });
      contextParams = getContextParams$1(tokens);
    }
  });
}
/**
 * Infer bidirectional properties for a given text and apply
 * the corresponding layout rules.
 */

/**
 * Create Bidi. features
 * @param {string} baseDir text base direction. value either 'ltr' or 'rtl'
 */


function Bidi(baseDir) {
  this.baseDir = baseDir || 'ltr';
  this.tokenizer = new Tokenizer();
  this.featuresTags = {};
}
/**
 * Sets Bidi text
 * @param {string} text a text input
 */


Bidi.prototype.setText = function (text) {
  this.text = text;
};
/**
 * Store essential context checks:
 * arabic word check for applying gsub features
 * arabic sentence check for adjusting arabic layout
 */


Bidi.prototype.contextChecks = {
  latinWordCheck: latinWordCheck,
  arabicWordCheck: arabicWordCheck,
  arabicSentenceCheck: arabicSentenceCheck
};
/**
 * Register arabic word check
 */

function registerContextChecker(checkId) {
  var check = this.contextChecks[checkId + "Check"];
  return this.tokenizer.registerContextChecker(checkId, check.startCheck, check.endCheck);
}
/**
 * Perform pre tokenization procedure then
 * tokenize text input
 */


function tokenizeText() {
  registerContextChecker.call(this, 'latinWord');
  registerContextChecker.call(this, 'arabicWord');
  registerContextChecker.call(this, 'arabicSentence');
  return this.tokenizer.tokenize(this.text);
}
/**
 * Reverse arabic sentence layout
 * TODO: check base dir before applying adjustments - priority low
 */


function reverseArabicSentences() {
  var this$1 = this;
  var ranges = this.tokenizer.getContextRanges('arabicSentence');
  ranges.forEach(function (range) {
    var rangeTokens = this$1.tokenizer.getRangeTokens(range);
    this$1.tokenizer.replaceRange(range.startIndex, range.endOffset, rangeTokens.reverse());
  });
}
/**
 * Register supported features tags
 * @param {script} script script tag
 * @param {Array} tags features tags list
 */


Bidi.prototype.registerFeatures = function (script, tags) {
  var this$1 = this;
  var supportedTags = tags.filter(function (tag) {
    return this$1.query.supports({
      script: script,
      tag: tag
    });
  });

  if (!this.featuresTags.hasOwnProperty(script)) {
    this.featuresTags[script] = supportedTags;
  } else {
    this.featuresTags[script] = this.featuresTags[script].concat(supportedTags);
  }
};
/**
 * Apply GSUB features
 * @param {Array} tagsList a list of features tags
 * @param {string} script a script tag
 * @param {Font} font opentype font instance
 */


Bidi.prototype.applyFeatures = function (font, features) {
  if (!font) {
    throw new Error('No valid font was provided to apply features');
  }

  if (!this.query) {
    this.query = new FeatureQuery(font);
  }

  for (var f = 0; f < features.length; f++) {
    var feature = features[f];

    if (!this.query.supports({
      script: feature.script
    })) {
      continue;
    }

    this.registerFeatures(feature.script, feature.tags);
  }
};
/**
 * Register a state modifier
 * @param {string} modifierId state modifier id
 * @param {function} condition a predicate function that returns true or false
 * @param {function} modifier a modifier function to set token state
 */


Bidi.prototype.registerModifier = function (modifierId, condition, modifier) {
  this.tokenizer.registerModifier(modifierId, condition, modifier);
};
/**
 * Check if 'glyphIndex' is registered
 */


function checkGlyphIndexStatus() {
  if (this.tokenizer.registeredModifiers.indexOf('glyphIndex') === -1) {
    throw new Error('glyphIndex modifier is required to apply ' + 'arabic presentation features.');
  }
}
/**
 * Apply arabic presentation forms features
 */


function applyArabicPresentationForms() {
  var this$1 = this;
  var script = 'arab';

  if (!this.featuresTags.hasOwnProperty(script)) {
    return;
  }

  checkGlyphIndexStatus.call(this);
  var ranges = this.tokenizer.getContextRanges('arabicWord');
  ranges.forEach(function (range) {
    arabicPresentationForms.call(this$1, range);
  });
}
/**
 * Apply required arabic ligatures
 */


function applyArabicRequireLigatures() {
  var this$1 = this;
  var script = 'arab';

  if (!this.featuresTags.hasOwnProperty(script)) {
    return;
  }

  var tags = this.featuresTags[script];

  if (tags.indexOf('rlig') === -1) {
    return;
  }

  checkGlyphIndexStatus.call(this);
  var ranges = this.tokenizer.getContextRanges('arabicWord');
  ranges.forEach(function (range) {
    arabicRequiredLigatures.call(this$1, range);
  });
}
/**
 * Apply required arabic ligatures
 */


function applyLatinLigatures() {
  var this$1 = this;
  var script = 'latn';

  if (!this.featuresTags.hasOwnProperty(script)) {
    return;
  }

  var tags = this.featuresTags[script];

  if (tags.indexOf('liga') === -1) {
    return;
  }

  checkGlyphIndexStatus.call(this);
  var ranges = this.tokenizer.getContextRanges('latinWord');
  ranges.forEach(function (range) {
    latinLigature.call(this$1, range);
  });
}
/**
 * Check if a context is registered
 * @param {string} contextId context id
 */


Bidi.prototype.checkContextReady = function (contextId) {
  return !!this.tokenizer.getContext(contextId);
};
/**
 * Apply features to registered contexts
 */


Bidi.prototype.applyFeaturesToContexts = function () {
  if (this.checkContextReady('arabicWord')) {
    applyArabicPresentationForms.call(this);
    applyArabicRequireLigatures.call(this);
  }

  if (this.checkContextReady('latinWord')) {
    applyLatinLigatures.call(this);
  }

  if (this.checkContextReady('arabicSentence')) {
    reverseArabicSentences.call(this);
  }
};
/**
 * process text input
 * @param {string} text an input text
 */


Bidi.prototype.processText = function (text) {
  if (!this.text || this.text !== text) {
    this.setText(text);
    tokenizeText.call(this);
    this.applyFeaturesToContexts();
  }
};
/**
 * Process a string of text to identify and adjust
 * bidirectional text entities.
 * @param {string} text input text
 */


Bidi.prototype.getBidiText = function (text) {
  this.processText(text);
  return this.tokenizer.getText();
};
/**
 * Get the current state index of each token
 * @param {text} text an input text
 */


Bidi.prototype.getTextGlyphs = function (text) {
  this.processText(text);
  var indexes = [];

  for (var i = 0; i < this.tokenizer.tokens.length; i++) {
    var token = this.tokenizer.tokens[i];

    if (token.state.deleted) {
      continue;
    }

    var index = token.activeState.value;
    indexes.push(Array.isArray(index) ? index[0] : index);
  }

  return indexes;
}; // The Font object

/**
 * @typedef FontOptions
 * @type Object
 * @property {Boolean} empty - whether to create a new empty font
 * @property {string} familyName
 * @property {string} styleName
 * @property {string=} fullName
 * @property {string=} postScriptName
 * @property {string=} designer
 * @property {string=} designerURL
 * @property {string=} manufacturer
 * @property {string=} manufacturerURL
 * @property {string=} license
 * @property {string=} licenseURL
 * @property {string=} version
 * @property {string=} description
 * @property {string=} copyright
 * @property {string=} trademark
 * @property {Number} unitsPerEm
 * @property {Number} ascender
 * @property {Number} descender
 * @property {Number} createdTimestamp
 * @property {string=} weightClass
 * @property {string=} widthClass
 * @property {string=} fsSelection
 */

/**
 * A Font represents a loaded OpenType font file.
 * It contains a set of glyphs and methods to draw text on a drawing context,
 * or to get a path representing the text.
 * @exports opentype.Font
 * @class
 * @param {FontOptions}
 * @constructor
 */


function Font(options) {
  options = options || {};
  options.tables = options.tables || {};

  if (!options.empty) {
    // Check that we've provided the minimum set of names.
    checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');
    checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');
    checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');
    checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');
    checkArgument(options.descender <= 0, 'When creating a new Font object, negative descender value is required.'); // OS X will complain if the names are empty, so we put a single space everywhere by default.

    this.names = {
      fontFamily: {
        en: options.familyName || ' '
      },
      fontSubfamily: {
        en: options.styleName || ' '
      },
      fullName: {
        en: options.fullName || options.familyName + ' ' + options.styleName
      },
      // postScriptName may not contain any whitespace
      postScriptName: {
        en: options.postScriptName || (options.familyName + options.styleName).replace(/\s/g, '')
      },
      designer: {
        en: options.designer || ' '
      },
      designerURL: {
        en: options.designerURL || ' '
      },
      manufacturer: {
        en: options.manufacturer || ' '
      },
      manufacturerURL: {
        en: options.manufacturerURL || ' '
      },
      license: {
        en: options.license || ' '
      },
      licenseURL: {
        en: options.licenseURL || ' '
      },
      version: {
        en: options.version || 'Version 0.1'
      },
      description: {
        en: options.description || ' '
      },
      copyright: {
        en: options.copyright || ' '
      },
      trademark: {
        en: options.trademark || ' '
      }
    };
    this.unitsPerEm = options.unitsPerEm || 1000;
    this.ascender = options.ascender;
    this.descender = options.descender;
    this.createdTimestamp = options.createdTimestamp;
    this.tables = Object.assign(options.tables, {
      os2: Object.assign({
        usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,
        usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,
        fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR
      }, options.tables.os2)
    });
  }

  this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.

  this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);
  this.encoding = new DefaultEncoding(this);
  this.position = new Position(this);
  this.substitution = new Substitution(this);
  this.tables = this.tables || {}; // needed for low memory mode only.

  this._push = null;
  this._hmtxTableData = {};
  Object.defineProperty(this, 'hinting', {
    get: function () {
      if (this._hinting) {
        return this._hinting;
      }

      if (this.outlinesFormat === 'truetype') {
        return this._hinting = new Hinting(this);
      }
    }
  });
}
/**
 * Check if the font has a glyph for the given character.
 * @param  {string}
 * @return {Boolean}
 */


Font.prototype.hasChar = function (c) {
  return this.encoding.charToGlyphIndex(c) !== null;
};
/**
 * Convert the given character to a single glyph index.
 * Note that this function assumes that there is a one-to-one mapping between
 * the given character and a glyph; for complex scripts this might not be the case.
 * @param  {string}
 * @return {Number}
 */


Font.prototype.charToGlyphIndex = function (s) {
  return this.encoding.charToGlyphIndex(s);
};
/**
 * Convert the given character to a single Glyph object.
 * Note that this function assumes that there is a one-to-one mapping between
 * the given character and a glyph; for complex scripts this might not be the case.
 * @param  {string}
 * @return {opentype.Glyph}
 */


Font.prototype.charToGlyph = function (c) {
  var glyphIndex = this.charToGlyphIndex(c);
  var glyph = this.glyphs.get(glyphIndex);

  if (!glyph) {
    // .notdef
    glyph = this.glyphs.get(0);
  }

  return glyph;
};
/**
 * Update features
 * @param {any} options features options
 */


Font.prototype.updateFeatures = function (options) {
  // TODO: update all features options not only 'latn'.
  return this.defaultRenderOptions.features.map(function (feature) {
    if (feature.script === 'latn') {
      return {
        script: 'latn',
        tags: feature.tags.filter(function (tag) {
          return options[tag];
        })
      };
    } else {
      return feature;
    }
  });
};
/**
 * Convert the given text to a list of Glyph objects.
 * Note that there is no strict one-to-one mapping between characters and
 * glyphs, so the list of returned glyphs can be larger or smaller than the
 * length of the given string.
 * @param  {string}
 * @param  {GlyphRenderOptions} [options]
 * @return {opentype.Glyph[]}
 */


Font.prototype.stringToGlyphs = function (s, options) {
  var this$1 = this;
  var bidi = new Bidi(); // Create and register 'glyphIndex' state modifier

  var charToGlyphIndexMod = function (token) {
    return this$1.charToGlyphIndex(token.char);
  };

  bidi.registerModifier('glyphIndex', null, charToGlyphIndexMod); // roll-back to default features

  var features = options ? this.updateFeatures(options.features) : this.defaultRenderOptions.features;
  bidi.applyFeatures(this, features);
  var indexes = bidi.getTextGlyphs(s);
  var length = indexes.length; // convert glyph indexes to glyph objects

  var glyphs = new Array(length);
  var notdef = this.glyphs.get(0);

  for (var i = 0; i < length; i += 1) {
    glyphs[i] = this.glyphs.get(indexes[i]) || notdef;
  }

  return glyphs;
};
/**
 * @param  {string}
 * @return {Number}
 */


Font.prototype.nameToGlyphIndex = function (name) {
  return this.glyphNames.nameToGlyphIndex(name);
};
/**
 * @param  {string}
 * @return {opentype.Glyph}
 */


Font.prototype.nameToGlyph = function (name) {
  var glyphIndex = this.nameToGlyphIndex(name);
  var glyph = this.glyphs.get(glyphIndex);

  if (!glyph) {
    // .notdef
    glyph = this.glyphs.get(0);
  }

  return glyph;
};
/**
 * @param  {Number}
 * @return {String}
 */


Font.prototype.glyphIndexToName = function (gid) {
  if (!this.glyphNames.glyphIndexToName) {
    return '';
  }

  return this.glyphNames.glyphIndexToName(gid);
};
/**
 * Retrieve the value of the kerning pair between the left glyph (or its index)
 * and the right glyph (or its index). If no kerning pair is found, return 0.
 * The kerning value gets added to the advance width when calculating the spacing
 * between glyphs.
 * For GPOS kerning, this method uses the default script and language, which covers
 * most use cases. To have greater control, use font.position.getKerningValue .
 * @param  {opentype.Glyph} leftGlyph
 * @param  {opentype.Glyph} rightGlyph
 * @return {Number}
 */


Font.prototype.getKerningValue = function (leftGlyph, rightGlyph) {
  leftGlyph = leftGlyph.index || leftGlyph;
  rightGlyph = rightGlyph.index || rightGlyph;
  var gposKerning = this.position.defaultKerningTables;

  if (gposKerning) {
    return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);
  } // "kern" table


  return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;
};
/**
 * @typedef GlyphRenderOptions
 * @type Object
 * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.
 *                               See https://www.microsoft.com/typography/otspec/scripttags.htm
 * @property {string} [language='dflt'] - language system used to determine which features to apply.
 *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx
 * @property {boolean} [kerning=true] - whether to include kerning values
 * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.
 *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm
 */


Font.prototype.defaultRenderOptions = {
  kerning: true,
  features: [
  /**
   * these 4 features are required to render Arabic text properly
   * and shouldn't be turned off when rendering arabic text.
   */
  {
    script: 'arab',
    tags: ['init', 'medi', 'fina', 'rlig']
  }, {
    script: 'latn',
    tags: ['liga', 'rlig']
  }]
};
/**
 * Helper function that invokes the given callback for each glyph in the given text.
 * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text
 * @param {string} text - The text to apply.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 * @param  {Function} callback
 */

Font.prototype.forEachGlyph = function (text, x, y, fontSize, options, callback) {
  x = x !== undefined ? x : 0;
  y = y !== undefined ? y : 0;
  fontSize = fontSize !== undefined ? fontSize : 72;
  options = Object.assign({}, this.defaultRenderOptions, options);
  var fontScale = 1 / this.unitsPerEm * fontSize;
  var glyphs = this.stringToGlyphs(text, options);
  var kerningLookups;

  if (options.kerning) {
    var script = options.script || this.position.getDefaultScriptName();
    kerningLookups = this.position.getKerningTables(script, options.language);
  }

  for (var i = 0; i < glyphs.length; i += 1) {
    var glyph = glyphs[i];
    callback.call(this, glyph, x, y, fontSize, options);

    if (glyph.advanceWidth) {
      x += glyph.advanceWidth * fontScale;
    }

    if (options.kerning && i < glyphs.length - 1) {
      // We should apply position adjustment lookups in a more generic way.
      // Here we only use the xAdvance value.
      var kerningValue = kerningLookups ? this.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) : this.getKerningValue(glyph, glyphs[i + 1]);
      x += kerningValue * fontScale;
    }

    if (options.letterSpacing) {
      x += options.letterSpacing * fontSize;
    } else if (options.tracking) {
      x += options.tracking / 1000 * fontSize;
    }
  }

  return x;
};
/**
 * Create a Path object that represents the given text.
 * @param  {string} text - The text to create.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 * @return {opentype.Path}
 */


Font.prototype.getPath = function (text, x, y, fontSize, options) {
  var fullPath = new Path();
  this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {
    var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
    fullPath.extend(glyphPath);
  });
  return fullPath;
};
/**
 * Create an array of Path objects that represent the glyphs of a given text.
 * @param  {string} text - The text to create.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 * @return {opentype.Path[]}
 */


Font.prototype.getPaths = function (text, x, y, fontSize, options) {
  var glyphPaths = [];
  this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {
    var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
    glyphPaths.push(glyphPath);
  });
  return glyphPaths;
};
/**
 * Returns the advance width of a text.
 *
 * This is something different than Path.getBoundingBox() as for example a
 * suffixed whitespace increases the advanceWidth but not the bounding box
 * or an overhanging letter like a calligraphic 'f' might have a quite larger
 * bounding box than its advance width.
 *
 * This corresponds to canvas2dContext.measureText(text).width
 *
 * @param  {string} text - The text to create.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 * @return advance width
 */


Font.prototype.getAdvanceWidth = function (text, fontSize, options) {
  return this.forEachGlyph(text, 0, 0, fontSize, options, function () {});
};
/**
 * Draw the text on the given drawing context.
 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param  {string} text - The text to create.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 */


Font.prototype.draw = function (ctx, text, x, y, fontSize, options) {
  this.getPath(text, x, y, fontSize, options).draw(ctx);
};
/**
 * Draw the points of all glyphs in the text.
 * On-curve points will be drawn in blue, off-curve points will be drawn in red.
 * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param {string} text - The text to create.
 * @param {number} [x=0] - Horizontal position of the beginning of the text.
 * @param {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param {GlyphRenderOptions=} options
 */


Font.prototype.drawPoints = function (ctx, text, x, y, fontSize, options) {
  this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {
    glyph.drawPoints(ctx, gX, gY, gFontSize);
  });
};
/**
 * Draw lines indicating important font measurements for all glyphs in the text.
 * Black lines indicate the origin of the coordinate system (point 0,0).
 * Blue lines indicate the glyph bounding box.
 * Green line indicates the advance width of the glyph.
 * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param {string} text - The text to create.
 * @param {number} [x=0] - Horizontal position of the beginning of the text.
 * @param {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param {GlyphRenderOptions=} options
 */


Font.prototype.drawMetrics = function (ctx, text, x, y, fontSize, options) {
  this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {
    glyph.drawMetrics(ctx, gX, gY, gFontSize);
  });
};
/**
 * @param  {string}
 * @return {string}
 */


Font.prototype.getEnglishName = function (name) {
  var translations = this.names[name];

  if (translations) {
    return translations.en;
  }
};
/**
 * Validate
 */


Font.prototype.validate = function () {
  var _this = this;

  function assert(predicate, message) {}

  function assertNamePresent(name) {
    var englishName = _this.getEnglishName(name);

    assert(englishName && englishName.trim().length > 0);
  } // Identification information


  assertNamePresent('fontFamily');
  assertNamePresent('weightName');
  assertNamePresent('manufacturer');
  assertNamePresent('copyright');
  assertNamePresent('version'); // Dimension information

  assert(this.unitsPerEm > 0);
};
/**
 * Convert the font object to a SFNT data structure.
 * This structure contains all the necessary tables and metadata to create a binary OTF file.
 * @return {opentype.Table}
 */


Font.prototype.toTables = function () {
  return sfnt.fontToTable(this);
};
/**
 * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.
 */


Font.prototype.toBuffer = function () {
  console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');
  return this.toArrayBuffer();
};
/**
 * Converts a `opentype.Font` into an `ArrayBuffer`
 * @return {ArrayBuffer}
 */


Font.prototype.toArrayBuffer = function () {
  var sfntTable = this.toTables();
  var bytes = sfntTable.encode();
  var buffer = new ArrayBuffer(bytes.length);
  var intArray = new Uint8Array(buffer);

  for (var i = 0; i < bytes.length; i++) {
    intArray[i] = bytes[i];
  }

  return buffer;
};
/**
 * Initiate a download of the OpenType font.
 */


Font.prototype.download = function (fileName) {
  var familyName = this.getEnglishName('fontFamily');
  var styleName = this.getEnglishName('fontSubfamily');
  fileName = fileName || familyName.replace(/\s/g, '') + '-' + styleName + '.otf';
  var arrayBuffer = this.toArrayBuffer();

  if (isBrowser()) {
    window.URL = window.URL || window.webkitURL;

    if (window.URL) {
      var dataView = new DataView(arrayBuffer);
      var blob = new Blob([dataView], {
        type: 'font/opentype'
      });
      var link = document.createElement('a');
      link.href = window.URL.createObjectURL(blob);
      link.download = fileName;
      var event = document.createEvent('MouseEvents');
      event.initEvent('click', true, false);
      link.dispatchEvent(event);
    } else {
      console.warn('Font file could not be downloaded. Try using a different browser.');
    }
  } else {
    var fs = __webpack_require__(3);

    var buffer = arrayBufferToNodeBuffer(arrayBuffer);
    fs.writeFileSync(fileName, buffer);
  }
};
/**
 * @private
 */


Font.prototype.fsSelectionValues = {
  ITALIC: 0x001,
  //1
  UNDERSCORE: 0x002,
  //2
  NEGATIVE: 0x004,
  //4
  OUTLINED: 0x008,
  //8
  STRIKEOUT: 0x010,
  //16
  BOLD: 0x020,
  //32
  REGULAR: 0x040,
  //64
  USER_TYPO_METRICS: 0x080,
  //128
  WWS: 0x100,
  //256
  OBLIQUE: 0x200 //512

};
/**
 * @private
 */

Font.prototype.usWidthClasses = {
  ULTRA_CONDENSED: 1,
  EXTRA_CONDENSED: 2,
  CONDENSED: 3,
  SEMI_CONDENSED: 4,
  MEDIUM: 5,
  SEMI_EXPANDED: 6,
  EXPANDED: 7,
  EXTRA_EXPANDED: 8,
  ULTRA_EXPANDED: 9
};
/**
 * @private
 */

Font.prototype.usWeightClasses = {
  THIN: 100,
  EXTRA_LIGHT: 200,
  LIGHT: 300,
  NORMAL: 400,
  MEDIUM: 500,
  SEMI_BOLD: 600,
  BOLD: 700,
  EXTRA_BOLD: 800,
  BLACK: 900
}; // The `fvar` table stores font variation axes and instances.

function addName(name, names) {
  var nameString = JSON.stringify(name);
  var nameID = 256;

  for (var nameKey in names) {
    var n = parseInt(nameKey);

    if (!n || n < 256) {
      continue;
    }

    if (JSON.stringify(names[nameKey]) === nameString) {
      return n;
    }

    if (nameID <= n) {
      nameID = n + 1;
    }
  }

  names[nameID] = name;
  return nameID;
}

function makeFvarAxis(n, axis, names) {
  var nameID = addName(axis.name, names);
  return [{
    name: 'tag_' + n,
    type: 'TAG',
    value: axis.tag
  }, {
    name: 'minValue_' + n,
    type: 'FIXED',
    value: axis.minValue << 16
  }, {
    name: 'defaultValue_' + n,
    type: 'FIXED',
    value: axis.defaultValue << 16
  }, {
    name: 'maxValue_' + n,
    type: 'FIXED',
    value: axis.maxValue << 16
  }, {
    name: 'flags_' + n,
    type: 'USHORT',
    value: 0
  }, {
    name: 'nameID_' + n,
    type: 'USHORT',
    value: nameID
  }];
}

function parseFvarAxis(data, start, names) {
  var axis = {};
  var p = new parse.Parser(data, start);
  axis.tag = p.parseTag();
  axis.minValue = p.parseFixed();
  axis.defaultValue = p.parseFixed();
  axis.maxValue = p.parseFixed();
  p.skip('uShort', 1); // reserved for flags; no values defined

  axis.name = names[p.parseUShort()] || {};
  return axis;
}

function makeFvarInstance(n, inst, axes, names) {
  var nameID = addName(inst.name, names);
  var fields = [{
    name: 'nameID_' + n,
    type: 'USHORT',
    value: nameID
  }, {
    name: 'flags_' + n,
    type: 'USHORT',
    value: 0
  }];

  for (var i = 0; i < axes.length; ++i) {
    var axisTag = axes[i].tag;
    fields.push({
      name: 'axis_' + n + ' ' + axisTag,
      type: 'FIXED',
      value: inst.coordinates[axisTag] << 16
    });
  }

  return fields;
}

function parseFvarInstance(data, start, axes, names) {
  var inst = {};
  var p = new parse.Parser(data, start);
  inst.name = names[p.parseUShort()] || {};
  p.skip('uShort', 1); // reserved for flags; no values defined

  inst.coordinates = {};

  for (var i = 0; i < axes.length; ++i) {
    inst.coordinates[axes[i].tag] = p.parseFixed();
  }

  return inst;
}

function makeFvarTable(fvar, names) {
  var result = new table.Table('fvar', [{
    name: 'version',
    type: 'ULONG',
    value: 0x10000
  }, {
    name: 'offsetToData',
    type: 'USHORT',
    value: 0
  }, {
    name: 'countSizePairs',
    type: 'USHORT',
    value: 2
  }, {
    name: 'axisCount',
    type: 'USHORT',
    value: fvar.axes.length
  }, {
    name: 'axisSize',
    type: 'USHORT',
    value: 20
  }, {
    name: 'instanceCount',
    type: 'USHORT',
    value: fvar.instances.length
  }, {
    name: 'instanceSize',
    type: 'USHORT',
    value: 4 + fvar.axes.length * 4
  }]);
  result.offsetToData = result.sizeOf();

  for (var i = 0; i < fvar.axes.length; i++) {
    result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));
  }

  for (var j = 0; j < fvar.instances.length; j++) {
    result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));
  }

  return result;
}

function parseFvarTable(data, start, names) {
  var p = new parse.Parser(data, start);
  var tableVersion = p.parseULong();
  check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');
  var offsetToData = p.parseOffset16(); // Skip countSizePairs.

  p.skip('uShort', 1);
  var axisCount = p.parseUShort();
  var axisSize = p.parseUShort();
  var instanceCount = p.parseUShort();
  var instanceSize = p.parseUShort();
  var axes = [];

  for (var i = 0; i < axisCount; i++) {
    axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));
  }

  var instances = [];
  var instanceStart = start + offsetToData + axisCount * axisSize;

  for (var j = 0; j < instanceCount; j++) {
    instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));
  }

  return {
    axes: axes,
    instances: instances
  };
}

var fvar = {
  make: makeFvarTable,
  parse: parseFvarTable
}; // The `GPOS` table contains kerning pairs, among other things.

var subtableParsers$1 = new Array(10); // subtableParsers[0] is unused
// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable
// this = Parser instance

subtableParsers$1[1] = function parseLookup1() {
  var start = this.offset + this.relativeOffset;
  var posformat = this.parseUShort();

  if (posformat === 1) {
    return {
      posFormat: 1,
      coverage: this.parsePointer(Parser.coverage),
      value: this.parseValueRecord()
    };
  } else if (posformat === 2) {
    return {
      posFormat: 2,
      coverage: this.parsePointer(Parser.coverage),
      values: this.parseValueRecordList()
    };
  }

  check.assert(false, '0x' + start.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.');
}; // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable


subtableParsers$1[2] = function parseLookup2() {
  var start = this.offset + this.relativeOffset;
  var posFormat = this.parseUShort();
  check.assert(posFormat === 1 || posFormat === 2, '0x' + start.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.');
  var coverage = this.parsePointer(Parser.coverage);
  var valueFormat1 = this.parseUShort();
  var valueFormat2 = this.parseUShort();

  if (posFormat === 1) {
    // Adjustments for Glyph Pairs
    return {
      posFormat: posFormat,
      coverage: coverage,
      valueFormat1: valueFormat1,
      valueFormat2: valueFormat2,
      pairSets: this.parseList(Parser.pointer(Parser.list(function () {
        return {
          // pairValueRecord
          secondGlyph: this.parseUShort(),
          value1: this.parseValueRecord(valueFormat1),
          value2: this.parseValueRecord(valueFormat2)
        };
      })))
    };
  } else if (posFormat === 2) {
    var classDef1 = this.parsePointer(Parser.classDef);
    var classDef2 = this.parsePointer(Parser.classDef);
    var class1Count = this.parseUShort();
    var class2Count = this.parseUShort();
    return {
      // Class Pair Adjustment
      posFormat: posFormat,
      coverage: coverage,
      valueFormat1: valueFormat1,
      valueFormat2: valueFormat2,
      classDef1: classDef1,
      classDef2: classDef2,
      class1Count: class1Count,
      class2Count: class2Count,
      classRecords: this.parseList(class1Count, Parser.list(class2Count, function () {
        return {
          value1: this.parseValueRecord(valueFormat1),
          value2: this.parseValueRecord(valueFormat2)
        };
      }))
    };
  }
};

subtableParsers$1[3] = function parseLookup3() {
  return {
    error: 'GPOS Lookup 3 not supported'
  };
};

subtableParsers$1[4] = function parseLookup4() {
  return {
    error: 'GPOS Lookup 4 not supported'
  };
};

subtableParsers$1[5] = function parseLookup5() {
  return {
    error: 'GPOS Lookup 5 not supported'
  };
};

subtableParsers$1[6] = function parseLookup6() {
  return {
    error: 'GPOS Lookup 6 not supported'
  };
};

subtableParsers$1[7] = function parseLookup7() {
  return {
    error: 'GPOS Lookup 7 not supported'
  };
};

subtableParsers$1[8] = function parseLookup8() {
  return {
    error: 'GPOS Lookup 8 not supported'
  };
};

subtableParsers$1[9] = function parseLookup9() {
  return {
    error: 'GPOS Lookup 9 not supported'
  };
}; // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos


function parseGposTable(data, start) {
  start = start || 0;
  var p = new Parser(data, start);
  var tableVersion = p.parseVersion(1);
  check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GPOS table version ' + tableVersion);

  if (tableVersion === 1) {
    return {
      version: tableVersion,
      scripts: p.parseScriptList(),
      features: p.parseFeatureList(),
      lookups: p.parseLookupList(subtableParsers$1)
    };
  } else {
    return {
      version: tableVersion,
      scripts: p.parseScriptList(),
      features: p.parseFeatureList(),
      lookups: p.parseLookupList(subtableParsers$1),
      variations: p.parseFeatureVariationsList()
    };
  }
} // GPOS Writing //////////////////////////////////////////////
// NOT SUPPORTED


var subtableMakers$1 = new Array(10);

function makeGposTable(gpos) {
  return new table.Table('GPOS', [{
    name: 'version',
    type: 'ULONG',
    value: 0x10000
  }, {
    name: 'scripts',
    type: 'TABLE',
    value: new table.ScriptList(gpos.scripts)
  }, {
    name: 'features',
    type: 'TABLE',
    value: new table.FeatureList(gpos.features)
  }, {
    name: 'lookups',
    type: 'TABLE',
    value: new table.LookupList(gpos.lookups, subtableMakers$1)
  }]);
}

var gpos = {
  parse: parseGposTable,
  make: makeGposTable
}; // The `kern` table contains kerning pairs.

function parseWindowsKernTable(p) {
  var pairs = {}; // Skip nTables.

  p.skip('uShort');
  var subtableVersion = p.parseUShort();
  check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.'); // Skip subtableLength, subtableCoverage

  p.skip('uShort', 2);
  var nPairs = p.parseUShort(); // Skip searchRange, entrySelector, rangeShift.

  p.skip('uShort', 3);

  for (var i = 0; i < nPairs; i += 1) {
    var leftIndex = p.parseUShort();
    var rightIndex = p.parseUShort();
    var value = p.parseShort();
    pairs[leftIndex + ',' + rightIndex] = value;
  }

  return pairs;
}

function parseMacKernTable(p) {
  var pairs = {}; // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.
  // Skip the rest.

  p.skip('uShort');
  var nTables = p.parseULong(); //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');

  if (nTables > 1) {
    console.warn('Only the first kern subtable is supported.');
  }

  p.skip('uLong');
  var coverage = p.parseUShort();
  var subtableVersion = coverage & 0xFF;
  p.skip('uShort');

  if (subtableVersion === 0) {
    var nPairs = p.parseUShort(); // Skip searchRange, entrySelector, rangeShift.

    p.skip('uShort', 3);

    for (var i = 0; i < nPairs; i += 1) {
      var leftIndex = p.parseUShort();
      var rightIndex = p.parseUShort();
      var value = p.parseShort();
      pairs[leftIndex + ',' + rightIndex] = value;
    }
  }

  return pairs;
} // Parse the `kern` table which contains kerning pairs.


function parseKernTable(data, start) {
  var p = new parse.Parser(data, start);
  var tableVersion = p.parseUShort();

  if (tableVersion === 0) {
    return parseWindowsKernTable(p);
  } else if (tableVersion === 1) {
    return parseMacKernTable(p);
  } else {
    throw new Error('Unsupported kern table version (' + tableVersion + ').');
  }
}

var kern = {
  parse: parseKernTable
}; // The `loca` table stores the offsets to the locations of the glyphs in the font.
// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,
// relative to the beginning of the glyphData table.
// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)
// The loca table has two versions: a short version where offsets are stored as uShorts, and a long
// version where offsets are stored as uLongs. The `head` table specifies which version to use
// (under indexToLocFormat).

function parseLocaTable(data, start, numGlyphs, shortVersion) {
  var p = new parse.Parser(data, start);
  var parseFn = shortVersion ? p.parseUShort : p.parseULong; // There is an extra entry after the last index element to compute the length of the last glyph.
  // That's why we use numGlyphs + 1.

  var glyphOffsets = [];

  for (var i = 0; i < numGlyphs + 1; i += 1) {
    var glyphOffset = parseFn.call(p);

    if (shortVersion) {
      // The short table version stores the actual offset divided by 2.
      glyphOffset *= 2;
    }

    glyphOffsets.push(glyphOffset);
  }

  return glyphOffsets;
}

var loca = {
  parse: parseLocaTable
}; // opentype.js

/**
 * The opentype library.
 * @namespace opentype
 */
// File loaders /////////////////////////////////////////////////////////

/**
 * Loads a font from a file. The callback throws an error message as the first parameter if it fails
 * and the font as an ArrayBuffer in the second parameter if it succeeds.
 * @param  {string} path - The path of the file
 * @param  {Function} callback - The function to call when the font load completes
 */

function loadFromFile(path, callback) {
  var fs = __webpack_require__(3);

  fs.readFile(path, function (err, buffer) {
    if (err) {
      return callback(err.message);
    }

    callback(null, nodeBufferToArrayBuffer(buffer));
  });
}
/**
 * Loads a font from a URL. The callback throws an error message as the first parameter if it fails
 * and the font as an ArrayBuffer in the second parameter if it succeeds.
 * @param  {string} url - The URL of the font file.
 * @param  {Function} callback - The function to call when the font load completes
 */


function loadFromUrl(url, callback) {
  var request = new XMLHttpRequest();
  request.open('get', url, true);
  request.responseType = 'arraybuffer';

  request.onload = function () {
    if (request.response) {
      return callback(null, request.response);
    } else {
      return callback('Font could not be loaded: ' + request.statusText);
    }
  };

  request.onerror = function () {
    callback('Font could not be loaded');
  };

  request.send();
} // Table Directory Entries //////////////////////////////////////////////

/**
 * Parses OpenType table entries.
 * @param  {DataView}
 * @param  {Number}
 * @return {Object[]}
 */


function parseOpenTypeTableEntries(data, numTables) {
  var tableEntries = [];
  var p = 12;

  for (var i = 0; i < numTables; i += 1) {
    var tag = parse.getTag(data, p);
    var checksum = parse.getULong(data, p + 4);
    var offset = parse.getULong(data, p + 8);
    var length = parse.getULong(data, p + 12);
    tableEntries.push({
      tag: tag,
      checksum: checksum,
      offset: offset,
      length: length,
      compression: false
    });
    p += 16;
  }

  return tableEntries;
}
/**
 * Parses WOFF table entries.
 * @param  {DataView}
 * @param  {Number}
 * @return {Object[]}
 */


function parseWOFFTableEntries(data, numTables) {
  var tableEntries = [];
  var p = 44; // offset to the first table directory entry.

  for (var i = 0; i < numTables; i += 1) {
    var tag = parse.getTag(data, p);
    var offset = parse.getULong(data, p + 4);
    var compLength = parse.getULong(data, p + 8);
    var origLength = parse.getULong(data, p + 12);
    var compression = void 0;

    if (compLength < origLength) {
      compression = 'WOFF';
    } else {
      compression = false;
    }

    tableEntries.push({
      tag: tag,
      offset: offset,
      compression: compression,
      compressedLength: compLength,
      length: origLength
    });
    p += 20;
  }

  return tableEntries;
}
/**
 * @typedef TableData
 * @type Object
 * @property {DataView} data - The DataView
 * @property {number} offset - The data offset.
 */

/**
 * @param  {DataView}
 * @param  {Object}
 * @return {TableData}
 */


function uncompressTable(data, tableEntry) {
  if (tableEntry.compression === 'WOFF') {
    var inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);
    var outBuffer = new Uint8Array(tableEntry.length);
    tinyInflate(inBuffer, outBuffer);

    if (outBuffer.byteLength !== tableEntry.length) {
      throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\'t match recorded length');
    }

    var view = new DataView(outBuffer.buffer, 0);
    return {
      data: view,
      offset: 0
    };
  } else {
    return {
      data: data,
      offset: tableEntry.offset
    };
  }
} // Public API ///////////////////////////////////////////////////////////

/**
 * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.
 * Throws an error if the font could not be parsed.
 * @param  {ArrayBuffer}
 * @param  {Object} opt - options for parsing
 * @return {opentype.Font}
 */


function parseBuffer(buffer, opt) {
  opt = opt === undefined || opt === null ? {} : opt;
  var indexToLocFormat;
  var ltagTable; // Since the constructor can also be called to create new fonts from scratch, we indicate this
  // should be an empty font that we'll fill with our own data.

  var font = new Font({
    empty: true
  }); // OpenType fonts use big endian byte ordering.
  // We can't rely on typed array view types, because they operate with the endianness of the host computer.
  // Instead we use DataViews where we can specify endianness.

  var data = new DataView(buffer, 0);
  var numTables;
  var tableEntries = [];
  var signature = parse.getTag(data, 0);

  if (signature === String.fromCharCode(0, 1, 0, 0) || signature === 'true' || signature === 'typ1') {
    font.outlinesFormat = 'truetype';
    numTables = parse.getUShort(data, 4);
    tableEntries = parseOpenTypeTableEntries(data, numTables);
  } else if (signature === 'OTTO') {
    font.outlinesFormat = 'cff';
    numTables = parse.getUShort(data, 4);
    tableEntries = parseOpenTypeTableEntries(data, numTables);
  } else if (signature === 'wOFF') {
    var flavor = parse.getTag(data, 4);

    if (flavor === String.fromCharCode(0, 1, 0, 0)) {
      font.outlinesFormat = 'truetype';
    } else if (flavor === 'OTTO') {
      font.outlinesFormat = 'cff';
    } else {
      throw new Error('Unsupported OpenType flavor ' + signature);
    }

    numTables = parse.getUShort(data, 12);
    tableEntries = parseWOFFTableEntries(data, numTables);
  } else {
    throw new Error('Unsupported OpenType signature ' + signature);
  }

  var cffTableEntry;
  var fvarTableEntry;
  var glyfTableEntry;
  var gposTableEntry;
  var gsubTableEntry;
  var hmtxTableEntry;
  var kernTableEntry;
  var locaTableEntry;
  var nameTableEntry;
  var metaTableEntry;
  var p;

  for (var i = 0; i < numTables; i += 1) {
    var tableEntry = tableEntries[i];
    var table = void 0;

    switch (tableEntry.tag) {
      case 'cmap':
        table = uncompressTable(data, tableEntry);
        font.tables.cmap = cmap.parse(table.data, table.offset);
        font.encoding = new CmapEncoding(font.tables.cmap);
        break;

      case 'cvt ':
        table = uncompressTable(data, tableEntry);
        p = new parse.Parser(table.data, table.offset);
        font.tables.cvt = p.parseShortList(tableEntry.length / 2);
        break;

      case 'fvar':
        fvarTableEntry = tableEntry;
        break;

      case 'fpgm':
        table = uncompressTable(data, tableEntry);
        p = new parse.Parser(table.data, table.offset);
        font.tables.fpgm = p.parseByteList(tableEntry.length);
        break;

      case 'head':
        table = uncompressTable(data, tableEntry);
        font.tables.head = head.parse(table.data, table.offset);
        font.unitsPerEm = font.tables.head.unitsPerEm;
        indexToLocFormat = font.tables.head.indexToLocFormat;
        break;

      case 'hhea':
        table = uncompressTable(data, tableEntry);
        font.tables.hhea = hhea.parse(table.data, table.offset);
        font.ascender = font.tables.hhea.ascender;
        font.descender = font.tables.hhea.descender;
        font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;
        break;

      case 'hmtx':
        hmtxTableEntry = tableEntry;
        break;

      case 'ltag':
        table = uncompressTable(data, tableEntry);
        ltagTable = ltag.parse(table.data, table.offset);
        break;

      case 'maxp':
        table = uncompressTable(data, tableEntry);
        font.tables.maxp = maxp.parse(table.data, table.offset);
        font.numGlyphs = font.tables.maxp.numGlyphs;
        break;

      case 'name':
        nameTableEntry = tableEntry;
        break;

      case 'OS/2':
        table = uncompressTable(data, tableEntry);
        font.tables.os2 = os2.parse(table.data, table.offset);
        break;

      case 'post':
        table = uncompressTable(data, tableEntry);
        font.tables.post = post.parse(table.data, table.offset);
        font.glyphNames = new GlyphNames(font.tables.post);
        break;

      case 'prep':
        table = uncompressTable(data, tableEntry);
        p = new parse.Parser(table.data, table.offset);
        font.tables.prep = p.parseByteList(tableEntry.length);
        break;

      case 'glyf':
        glyfTableEntry = tableEntry;
        break;

      case 'loca':
        locaTableEntry = tableEntry;
        break;

      case 'CFF ':
        cffTableEntry = tableEntry;
        break;

      case 'kern':
        kernTableEntry = tableEntry;
        break;

      case 'GPOS':
        gposTableEntry = tableEntry;
        break;

      case 'GSUB':
        gsubTableEntry = tableEntry;
        break;

      case 'meta':
        metaTableEntry = tableEntry;
        break;
    }
  }

  var nameTable = uncompressTable(data, nameTableEntry);
  font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);
  font.names = font.tables.name;

  if (glyfTableEntry && locaTableEntry) {
    var shortVersion = indexToLocFormat === 0;
    var locaTable = uncompressTable(data, locaTableEntry);
    var locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);
    var glyfTable = uncompressTable(data, glyfTableEntry);
    font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font, opt);
  } else if (cffTableEntry) {
    var cffTable = uncompressTable(data, cffTableEntry);
    cff.parse(cffTable.data, cffTable.offset, font, opt);
  } else {
    throw new Error('Font doesn\'t contain TrueType or CFF outlines.');
  }

  var hmtxTable = uncompressTable(data, hmtxTableEntry);
  hmtx.parse(font, hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs, opt);
  addGlyphNames(font, opt);

  if (kernTableEntry) {
    var kernTable = uncompressTable(data, kernTableEntry);
    font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);
  } else {
    font.kerningPairs = {};
  }

  if (gposTableEntry) {
    var gposTable = uncompressTable(data, gposTableEntry);
    font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);
    font.position.init();
  }

  if (gsubTableEntry) {
    var gsubTable = uncompressTable(data, gsubTableEntry);
    font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);
  }

  if (fvarTableEntry) {
    var fvarTable = uncompressTable(data, fvarTableEntry);
    font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);
  }

  if (metaTableEntry) {
    var metaTable = uncompressTable(data, metaTableEntry);
    font.tables.meta = meta.parse(metaTable.data, metaTable.offset);
    font.metas = font.tables.meta;
  }

  return font;
}
/**
 * Asynchronously load the font from a URL or a filesystem. When done, call the callback
 * with two arguments `(err, font)`. The `err` will be null on success,
 * the `font` is a Font object.
 * We use the node.js callback convention so that
 * opentype.js can integrate with frameworks like async.js.
 * @alias opentype.load
 * @param  {string} url - The URL of the font to load.
 * @param  {Function} callback - The callback.
 */


function load(url, callback, opt) {
  var isNode = typeof window === 'undefined';
  var loadFn = isNode ? loadFromFile : loadFromUrl;
  return new Promise(function (resolve, reject) {
    loadFn(url, function (err, arrayBuffer) {
      if (err) {
        if (callback) {
          return callback(err);
        } else {
          reject(err);
        }
      }

      var font;

      try {
        font = parseBuffer(arrayBuffer, opt);
      } catch (e) {
        if (callback) {
          return callback(e, null);
        } else {
          reject(e);
        }
      }

      if (callback) {
        return callback(null, font);
      } else {
        resolve(font);
      }
    });
  });
}
/**
 * Synchronously load the font from a URL or file.
 * When done, returns the font object or throws an error.
 * @alias opentype.loadSync
 * @param  {string} url - The URL of the font to load.
 * @param  {Object} opt - opt.lowMemory
 * @return {opentype.Font}
 */


function loadSync(url, opt) {
  var fs = __webpack_require__(3);

  var buffer = fs.readFileSync(url);
  return parseBuffer(nodeBufferToArrayBuffer(buffer), opt);
}

var opentype = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Font: Font,
  Glyph: Glyph,
  Path: Path,
  BoundingBox: BoundingBox,
  _parse: parse,
  parse: parseBuffer,
  load: load,
  loadSync: loadSync
});

// import font from '../styles/fonts/SantanderHeadline-Regular.woff2'
var promises = null;

String.prototype.parseTransform = function () {
  var prop = ['translate', 'matrix', 'rotate', 'skewX', 'skewY', 'scale'];
  var val = this.match(/(translate|matrix|rotate|skewX|skewY|scale)\(.*?\)/g);
  var obj = {};

  if (val) {
    for (var i = 0, length = val.length; i < length; i++) {
      var item = val[i];
      var index = item.indexOf('(');
      var v = item.substring(index + 1, item.length - 1).split(/\,|\s/);
      var n = item.substring(0, index);
      obj[n] = {};

      switch (n) {
        case 'translate':
        case 'scale':
          obj[n].x = +v[0] || 0;
          obj[n].y = +v[1] || 0;
          break;

        case 'rotate':
          obj[n].a = +v[0] || 0;
          obj[n].x = +v[1] || 0;
          obj[n].y = +v[2] || 0;
          break;

        case 'skewX':
        case 'skewY':
          obj[n].a = +v[0];
          break;

        case 'matrix':
          obj[n].a = +v[0] || 0;
          obj[n].b = +v[1] || 0;
          obj[n].c = +v[2] || 0;
          obj[n].d = +v[3] || 0;
          obj[n].e = +v[4] || 0;
          obj[n].f = +v[5] || 0;
          break;
      }
    }
  }

  obj.toString = function () {
    var builder = [];

    for (var i = 0, length = prop.length; i < length; i++) {
      var n = prop[i];
      var o = this[n];
      if (!o) continue;

      switch (n) {
        case 'translate':
        case 'scale':
          builder.push(n + '(' + o.x + ',' + o.y + ')');
          break;

        case 'rotate':
          builder.push(n + '(' + o.a + ' ' + o.x + ' ' + o.y + ')');
          break;

        case 'skewX':
        case 'skewY':
          builder.push(n + '(' + o.a + ')');
          break;

        case 'matrix':
          builder.push(n + '(' + o.a + ',' + o.b + ',' + o.c + ',' + o.d + ',' + o.e + ',' + o.f + ')');
          break;
      }
    }

    return builder.join(' ');
  };

  return obj;
};

function em2px(str, fontSize) {
  if (!str || str === '') return 0;else if (str.indexOf('em') >= 0) return +str.replace('em', '') * fontSize;else return +str;
}

var FONTS = [{
  url: font1,
  id: 'santanderFont1',
  fontFamily: 'santander-headline-embedded'
}, {
  url: font2,
  id: 'santanderFont2',
  fontFamily: 'santander-microtext-embedded'
}, {
  url: font3,
  id: 'santanderFont3',
  fontFamily: 'santander-headline-bold-embedded'
}];
function fontCheck() {
  if (window.santanderFont1Base64) return new Promise(function (resolve) {
    return resolve();
  });else return loadFonts(FONTS);
}

function loadFonts(fonts) {
  if (!promises) {
    promises = [];
    fonts.forEach(function (f) {
      promises.push(loadFont(f));
    });
  }

  return Promise.all(promises);
}

function svgfontCheck() {
  if (FONTS[0].svgFont) return new Promise(function (resolve) {
    return resolve();
  });else return loadSvgFonts(FONTS);
}

function loadSvgFonts(fonts) {
  var svgpromises = [];
  fonts.forEach(function (f) {
    return svgpromises.push(loadSVGFont(f));
  });
  return Promise.all(svgpromises);
}

function loadSVGFont(fontDef) {
  // opentype.load(fontDef.url, function(err, font) {
  //   if (err) {
  //       alert('Font could not be loaded: ' + err);
  //   } else {
  //       // Construct a Path object containing the letter shapes of the given text.
  //       // The other parameters are x, y and fontSize.
  //       // Note that y is the position of the baseline.
  //       // const path = font.getPath('Hello, World!', 0, 150, 72);
  //       // console.log("FONT PATH",path)
  //       fontDef.svgFont = font
  //   }
  return new Promise(function (res, rej) {
    opentype.load(fontDef.url, function (err, font) {
      fontDef.svgFont = font;
      window.santanderFontSvg = true;
      if (err) rej(err);else res(font);
    });
  });
}

function loadFont(fontDef) {
  console.log('Loading font...', fontDef.id);
  return getBinary(fontDef).then(function (response) {
    window["santander".concat(fontDef.id, "Base64")] = base64Encode(response);
    var styleElement = generateFontStyleElement(fontDef, 'html');
    document.head.appendChild(styleElement);
    return new Promise(function (resolve) {
      var testDiv = document.createElement('div');
      testDiv.style.fontFamily = fontDef.fontFamily;
      testDiv.style.visibility = 'hidden';
      testDiv.innerHTML = 'abcdefghijklmnopqrstuvwxyz';
      document.body.appendChild(testDiv);

      var checkAndLoop = function checkAndLoop() {
        if (!document.fonts.check('1em ' + fontDef.fontFamily)) {
          requestAnimationFrame(checkAndLoop);
        } else {
          testDiv.remove(); // console.log("Font ready!")

          resolve();
        }
      };

      checkAndLoop();
    });
  });
}

function getBinary(fontDef) {
  // var xhr = new XMLHttpRequest();
  // xhr.open("GET", font, false);
  // // xhr.open("GET", font, true);
  // xhr.overrideMimeType("text/plain; charset=x-user-defined");
  // xhr.send(null);
  // return xhr.responseText;
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', fontDef.url, true);
    xhr.overrideMimeType('text/plain; charset=x-user-defined');

    xhr.onreadystatechange = function () {
      // In local files, status is 0 upon success in Mozilla Firefox
      if (xhr.readyState === XMLHttpRequest.DONE) {
        var status = xhr.status;

        if (status === 0 || status >= 200 && status < 400) {
          resolve(xhr.responseText);
        } else {
          reject(status);
        }
      }
    };

    xhr.send(); // return xhr.responseText;
    // loadScript(src, (err, script) => {
    //   if (err) reject(err)
    //   else resolve(script);
    // });
  });
} // Base64 encode binary string
// Stolen from http://stackoverflow.com/questions/7370943/retrieving-binary-file-content-using-javascript-base64-encode-it-and-reverse-de


function base64Encode(str) {
  var CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  var out = '',
      i = 0,
      len = str.length,
      c1,
      c2,
      c3;

  while (i < len) {
    c1 = str.charCodeAt(i++) & 0xff;

    if (i == len) {
      out += CHARS.charAt(c1 >> 2);
      out += CHARS.charAt((c1 & 0x3) << 4);
      out += '==';
      break;
    }

    c2 = str.charCodeAt(i++);

    if (i == len) {
      out += CHARS.charAt(c1 >> 2);
      out += CHARS.charAt((c1 & 0x3) << 4 | (c2 & 0xf0) >> 4);
      out += CHARS.charAt((c2 & 0xf) << 2);
      out += '=';
      break;
    }

    c3 = str.charCodeAt(i++);
    out += CHARS.charAt(c1 >> 2);
    out += CHARS.charAt((c1 & 0x3) << 4 | (c2 & 0xf0) >> 4);
    out += CHARS.charAt((c2 & 0xf) << 2 | (c3 & 0xc0) >> 6);
    out += CHARS.charAt(c3 & 0x3f);
  }

  return out;
}

function generateFontStyleElement(fontDef, type) {
  var base64EncodedFont = window["santander".concat(fontDef.id, "Base64")];
  var fontCode = "@font-face { font-family: '".concat(fontDef.fontFamily, "'; src: url('data:application/font-woff;base64,") + base64EncodedFont + "') format('woff'); font-style: normal; font-weight: normal }";
  var styleElement;

  if (type === 'svg') {
    styleElement = document.createElementNS('http://www.w3.org/2000/svg', 'style');
    styleElement.type = 'text/css';
    styleElement.innerHTML = fontCode;
  } else {
    styleElement = document.createElement('style');
    styleElement.type = 'text/css';

    if (styleElement.styleSheet) {
      styleElement.styleSheet.cssText = fontCode;
    } else {
      styleElement.innerHTML = fontCode;
    }
  } // document.head.appendChild(styleElement);


  return styleElement;
}
function getPath$1(str, fontFamily, fontSize) {
  var svgFont = FONTS.find(function (f) {
    return f.fontFamily === fontFamily;
  }).svgFont;
  return svgFont.getPath(str, 0, 0, fontSize, {
    kerning: false
  }).toPathData();
}
function divToSVGText(source, target) {
  var textContent = source.node().innerHTML;

  if (textContent !== '') {
    var lines = detector.getLines(source.node());
    var wordCount = 0;
    lines.forEach(function (l, i) {
      var lineContent = textContent.split(' ').slice(wordCount, wordCount + l.length).join(' ');
      var fontSize = +window.getComputedStyle(source.node()).fontSize.replace('px', '');
      var fontWeight = window.getComputedStyle(source.node()).fontWeight;
      var fontFamily = source.node().style.fontFamily;
      if (fontFamily === '' || !fontFamily) fontFamily = 'santander-microtext-embedded';

      if (fontWeight === 'bold' || fontWeight > 600) {
        fontFamily = 'santander-headline-bold-embedded'; // fontSize += 1//BASUA DE FUENTE QUE TENENE...
      }

      var pathData = getPath$1(lineContent, fontFamily, fontSize);
      var x = 0;
      var y = 17 + i * fontSize; //BASTANTE BASURIL 17 margin del "padre"??? y el i*fonstize tp esta muy bien...

      target.append('path').attr('d', pathData).attr('transform', "translate(".concat(x, ",").concat(y, ")")).attr('fill', source.node().style.color || 'currentColor');
      wordCount += l.length;
    });
  }
}

function t2path(source) {
  var str = source.text(); // let fontSize = source.attr('font-size') ? (+source.attr('font-size').replace('px','')) : 14

  var fontSize = +window.getComputedStyle(source.node()).fontSize.replace('px', '');
  var fontFamily = window.getComputedStyle(source.node()).fontFamily;
  var fontWeight = window.getComputedStyle(source.node()).fontWeight;
  if (fontFamily === '' || !fontFamily) fontFamily = 'santander-microtext-embedded';

  if (fontWeight === 'bold' || fontWeight > 600) {
    fontFamily = 'santander-headline-bold-embedded'; // fontSize += 1 //BASUA DE FUENTE QUE TENENE...
  }

  var pathData = getPath$1(str, fontFamily, fontSize);
  var self_transform = source.attr('transform');
  if (self_transform) self_transform = self_transform.parseTransform();else self_transform = 'translate(0,0) rotate(0)'.parseTransform();
  var offset_transform = getOffsets(source);
  return {
    pathData: pathData,
    transform: self_transform.toString() + ' ' + offset_transform.toString()
  };
}

function getOffsets(source) {
  var computedTransform = 'translate(0,0) rotate(0)'.parseTransform();
  var parent = d3_select(source.node().parentNode);
  var bbox = source.node().getBBox();
  var parentBbox = source.node().parentNode.getBBox();
  var fontSize = +window.getComputedStyle(source.node()).fontSize.replace('px', '');
  var textWidth = source.node().getComputedTextLength();
  if (source.attr('text-anchor') === 'end' || !source.attr('text-anchor') && parent.attr('text-anchor') === 'end') computedTransform.translate.x -= +textWidth;else if (source.attr('text-anchor') === 'middle' || !source.attr('text-anchor') && parent.attr('text-anchor') === 'middle') computedTransform.translate.x -= +textWidth / 2;
  if (source.attr('alignment-baseline') === 'middle') computedTransform.translate.y += 5; //BULLSHIT

  if (source.attr('alignment-baseline') === 'central') computedTransform.translate.y += 5; //BULLSHIT

  if (source.attr('dominant-baseline') === 'middle') computedTransform.translate.y += 5; //BULLSHIT

  if (source.attr('dominant-baseline') === 'central') computedTransform.translate.y += 5; //BULLSHIT

  if (source.attr('dx')) computedTransform.translate.x += em2px(source.attr('dx'), fontSize);
  if (source.attr('x')) computedTransform.translate.x += em2px(source.attr('x'), fontSize);
  if (source.attr('y')) computedTransform.translate.y += em2px(source.attr('y'), fontSize); //BASURA MAXIMA.... para la susie...!!!!

  if (source.attr('dy')) {
    if (source.attr('y')) computedTransform.translate.y += em2px(source.attr('dy'), fontSize);else computedTransform.translate.y += bbox.y - parentBbox.y + em2px('0.8em', fontSize);
  }

  return computedTransform;
}

function textToSVGText(source, target) {
  var arr = source.selectAll('tspan').nodes();
  var fontColor = source.attr('fill') || 'currentColor';

  if (arr.length > 0) {
    //BASURA MAXIMA....para la susie...!!!!
    var parentTransform; // = getOffsets(source) // source.attr('transform')

    if (source.node().closest('.annotation')) parentTransform = getOffsets(source);else parentTransform = source.attr('transform');
    var parent = target.append('g').attr('transform', parentTransform);
    arr.forEach(function (ts, i) {
      var _t2path = t2path(d3_select(ts)),
          pathData = _t2path.pathData,
          transform = _t2path.transform;

      parent.append('path').attr('d', pathData).attr('transform', transform).attr('fill', fontColor);
    });
  } else {
    var _t2path2 = t2path(source),
        pathData = _t2path2.pathData,
        transform = _t2path2.transform;

    target.append('path').attr('d', pathData).attr('transform', transform).attr('fill', fontColor);
  }
}

function drawGradientRect($el, colorScale, size) {
  var gradient = d3_select($el).selectAll('.gradient').data([null]);
  var gradientEnter = gradient.enter().append('svg').attr('class', 'gradient').attr('width', size.width).attr('height', size.height);
  var uniqueId = 'my-gradient-' + Math.round(Math.random() * 9999);
  gradientEnter.append("defs").append("linearGradient").attr("id", uniqueId);
  gradientEnter.append("rect").attr('class', 'gradient-rect');
  gradient = gradient.merge(gradientEnter);
  gradient.attr("width", size.width).attr("height", size.height);
  gradient.select('rect').attr("width", size.width).attr("height", size.height);
  var domain = colorScale.domain();
  var stepCount = 10;
  var stepWidth = (domain[1] - domain[0]) / stepCount;
  var data = Array.from(Array(stepCount).keys()).map(function (d) {
    return {
      color: colorScale(domain[0] + d * stepWidth + stepWidth / 2),
      value: d
    };
  });
  var extent = d3_extent(data, function (d) {
    return d.value;
  });
  var linearGradient = gradient.select('defs').select('linearGradient');
  var stops = linearGradient.selectAll("stop").data(data);
  var stopsEnter = stops.enter().append("stop").attr("offset", function (d) {
    return d.value / (extent[1] - extent[0]) * 100 + "%";
  });
  stops.merge(stopsEnter).transition().attr("stop-color", function (d) {
    return d.color;
  });
  var id = gradient.select("defs").select("linearGradient").attr("id");
  gradient.select('rect').style("fill", "url(#".concat(id, ")"));
}

// import {extent as d3_extent} from 'd3-array'

function LegendBehavior($root, chart) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (!chart.data) return;

  var drawLegend = function drawLegend(legend, d) {
    var legendData = d.data;

    if (d.type === 'sequential2' || d.type === 'sequential3') {
      var size = {
        width: 90,
        height: 15
      };
      drawGradientRect(legend.node(), chart.cachedColorScale, size);
      var labels = legend.selectAll('.label').data(['l', 'r']);
      labels = labels.merge(labels.enter().append('div').attr('class', 'label').each(function (d) {
        d === 'l' && d3_select(this).lower();
      }));
      labels.style('margin', '0 5px').style('font-size', '14px');
      labels.text(function (d) {
        var unit = chart.getUnit();
        return d === 'l' ? chart.cachedColorScale.domain()[0] : chart.cachedColorScale.domain()[1] + (unit ? ' ' + unit : '');
      });
    } else if (d.type === 'categorical') {
      var items = legend.selectAll('.legend-item').data(legendData, function (d) {
        return d.id;
      });
      var itemsEnter = items.enter().append('div').attr('class', 'legend-item').style('display', 'flex').style('align-items', 'center').style('margin', '5px'); // al a mierda la transicion... estropea el "sizeHelper"
      // items.exit().each(function (d) {
      //   let sel = d3_select(this)
      //   let rect = this.getBoundingClientRect()
      //   sel.style('top',rect.top+'px').style('left',rect.left+'px').style('position','absolute')
      // }).transition().style('opacity',0).remove()

      items.exit().style('opacity', 0).remove();
      itemsEnter.append('div').attr('class', 'icon').style('width', '10px').style('height', '10px');
      itemsEnter.append('div').attr('class', 'label');
      items = items.merge(itemsEnter);
      items.select('.label').text(function (d) {
        return d.id;
      }).style('font-size', '14px');
      items.select('.icon').style('margin', '6px 8px 4px 4px') //BASURA ESTE 6px, (es porque la fuente no esta "bien centrada" creo)
      .transition().style('background', function (dd) {
        return chart.color(dd, d.index);
      });
      var icon = d.data.icon || config.icon;

      if (icon === 'circle') {
        items.select('.icon').classed('circle', true).style('width', '10px').style('height', '10px').style('border-radius', '10px');
      } else if (icon === 'line') {
        items.select('.icon').classed('rect', true).style('width', '10px').style('height', '2px');
      } else {
        items.select('.icon').classed('dented-rect', true).style('width', '10px').style('height', '10px').style('border-radius', '3px 0 3px 0');
      }
    } else if (d.type === 'size') {
      var _items = legend.selectAll('.legend-item').data(legendData);

      var _itemsEnter = _items.enter().append('div').attr('class', 'legend-item').style('display', 'flex').style('align-items', 'center').style('margin', '5px');

      _items.exit().remove();

      _itemsEnter.append('div').attr('class', 'icon').style('width', '10px').style('height', '10px');

      _itemsEnter.append('div').attr('class', 'label').style('font-size', '14px');

      _items = _items.merge(_itemsEnter);

      _items.select('.label').text(function (d) {
        return d.id;
      });

      _items.select('.icon').style('margin', '6px 8px 4px 4px') //BASURA ESTE 6px, (es porque la fuente no esta "bien centrada" creo)
      .transition().style('background', '#ddd');

      _items.select('.icon').classed('circle', true).style('width', function (d) {
        return d.value + 'px';
      }).style('height', function (d) {
        return d.value + 'px';
      }).style('border-radius', function (d) {
        return d.value + 'px';
      });
    }
  };

  var legendDatas = chart.getLegendData && chart.getLegendData() || chart.data;
  if (Array.isArray(legendDatas)) legendDatas = [{
    id: chart.config.ItemsHelper.colorScale,
    data: legendDatas
  }];else legendDatas = Object.keys(legendDatas).map(function (key, i) {
    return {
      id: chart.config.ItemsHelper.colorScale[i] + '_' + key,
      data: legendDatas[key]
    };
  });
  legendDatas.forEach(function (ld, i) {
    ld.type = ld.data.type || Array.isArray(chart.config.ItemsHelper.colorScale) ? chart.config.ItemsHelper.colorScale[i] : chart.config.ItemsHelper.colorScale;
    ld.index = i;
  });
  var legends = d3_select($root).selectAll('.legend').data(legendDatas, function (d) {
    return d.id;
  });
  legends.exit().remove();
  var legendsEnter = legends.enter().append('div').attr('class', 'legend');
  legendsEnter.style('opacity', 0).transition().duration(1000).style('opacity', 1);
  legends = legends.merge(legendsEnter);
  legends.style('display', 'flex').style('flex-wrap', 'wrap').style('align-items', 'center').style('margin-top', '5px');
  legends.each(function (d) {
    drawLegend(d3_select(this), d);
  });
}

LegendBehavior.defaultConfig = {
  index: 201,

  /**
   * Show or hide the legend of the chart.
   */
  showLegend: {
    type: Boolean,
    "default": false,
    exposed: true
  },
  icon: {
    type: [String],
    options: ['square', 'circle', 'line'],
    "default": 'square'
  }
};
LegendBehavior.configName = 'LegendBehavior';

function TooltipBehavior(chart) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // console.log("config",config)
  var tooltipData = [];
  var tooltipRoot = d3_select(chart.$root.parentNode);

  var updateTooltip = function updateTooltip(itemsKey) {
    //Bastante guarrero, pero efectivo...
    if (!chart.config.TooltipBehavior.enableTooltips) tooltipData = [];
    var tooltip = tooltipRoot.selectAll('.tooltip').data(tooltipData);
    tooltip.exit().remove();
    var tooltipEnter = tooltip.enter().append('div').attr('class', 'tooltip').style('opacity', 0).style('color', '#444');
    tooltipEnter.transition().duration(200).style('opacity', 1);
    tooltipEnter.style('position', 'absolute').style('pointer-events', 'none');
    tooltipEnter.append('div').attr('class', 'content').style('position', 'absolute').style('bottom', 0).style('transform', 'translate(-50%,-5px)') //HAY QUE PONERlO "donde iria" para detectar bien si colisiona!
    .style('background', '#fff').style('border', 'solid 1px #EBEBEB').style('border-radius', '5px').style('padding', '6px 12px').style('text-align', 'center').style('white-space', 'wrap').style('font-size', '10px').style('max-width', '180px').style('line-height', '1.4em').style('box-shadow', '0px 6px 6px rgba(111,119,121, 0.15)').append('div').attr('class', 'content-wrapper').style('width', 'max-content').style('max-width', '100%').style('word-wrap', 'break-word');
    tooltipEnter.append('div').attr('class', 'tip-border').style('position', 'absolute').style('bottom', 0).style('width', 0).style('height', 0);
    tooltipEnter.append('div').attr('class', 'tip').style('position', 'absolute').style('bottom', 0).style('width', 0).style('height', 0);
    tooltip = tooltip.merge(tooltipEnter);
    tooltip.style('top', function (d) {
      return "".concat(d.pos.top, "px");
    }).style('left', function (d) {
      return "".concat(d.pos.left, "px");
    });
    tooltip.select('.content').select('.content-wrapper').html(function (d) {
      return config.getHtml.call(chart, d.datum, itemsKey);
    }).style('font-size', '14px').style('color', '#767676').style('line-height', '22px').selectAll('.important').style('font-size', '16px').style('font-weight', '700').style('line-height', '22px').style('color', '#444444');
    tooltip.selectAll('.secondary').style('font-weight', '300').style('line-height', '22px').style('font-style', 'italic'); // Tooltip repositioning:

    var node = tooltip.select('.content').node();

    if (node) {
      chart.emit('tooltip', tooltip.datum().datum); // Hay que ponerla primero "donde iria" para poder medir BIEN con el GetBoundingClientRect!

      var tx = '-50%';
      var ty = '-12px';
      tooltip.select('.content').style('transform', "translate(".concat(tx, ",").concat(ty, ")"));
      var size = (chart.$root.parentNode || chart.$root).getBoundingClientRect();
      var rect = node.getBoundingClientRect();
      var tipBorder = 'top';

      if (rect.x + rect.width > size.x + size.width) {
        var diff = rect.x + rect.width - (size.x + size.width);
        tx = "calc(-50% - ".concat(diff, "px)");
      }

      if (rect.x < size.x) {
        var _diff = size.x - rect.x;

        tx = "calc(-50% + ".concat(_diff, "px)");
      }

      if (rect.y < size.y) {
        ty = "calc(100% + 10px)";
        tipBorder = 'bottom';
      }

      tooltip.select('.content').style('transform', "translate(".concat(tx, ",").concat(ty, ")"));
      tooltip.select('.tip-border').style('transform', "translate(-50%,".concat(tipBorder === 'bottom' ? '11px' : '-1px', ")")).style('border-left', '6px solid transparent').style('border-right', '6px solid transparent').style('border-top', '6px solid transparent').style('border-bottom', '6px solid transparent').style("border-".concat(tipBorder), '6px solid #EBEBEB');
      tooltip.select('.tip').style('transform', "translate(-50%,".concat(tipBorder === 'bottom' ? '12px' : '-3px', ")")).style('border-left', '5px solid transparent').style('border-right', '5px solid transparent').style('border-top', '5px solid transparent').style('border-bottom', '5px solid transparent').style("border-".concat(tipBorder), '5px solid #fff');
    }
  };

  d3_select(chart.$root).on('mouseover', function () {
    if (chart.selection.length === 0) {
      tooltipData = [];
      updateTooltip();
    }
  }); // @Oslo: Review! This should remove tooltip on scroll events

  chart._parent._parent.addEventListener("translate", function () {
    tooltipData = [];
    updateTooltip();
  });

  var itemsKeys = chart.config.TooltipBehavior.itemsKeys;

  if (itemsKeys.length === 0) {
    console.warn('Chart doesnt have .items to add tooltips to');
    return;
  }

  itemsKeys.forEach(function (key) {
    var items = chart[key + 'Enter'];
    items.on('mousemove', function (ev, d) {
      if (chart.selection.length === 0 || chart.selection.indexOf(d) >= 0 || chart.selection.find(function (dd) {
        return dd.id === d.parentId;
      })) {
        var offset = tooltipRoot.node().getBoundingClientRect();
        var targetPos = chart.config.TooltipBehavior.getItemOffset.call(chart, ev.currentTarget, d);
        tooltipData = [{
          datum: d,
          pos: {
            top: targetPos.y - offset.y,
            left: targetPos.x - offset.x
          }
        }];
        updateTooltip(key);
      }
    }); //update "siempre" que cambie cualquier PROP o incluso el DATA, no?

    updateTooltip(key);
  });
}

TooltipBehavior.defaultConfig = {
  index: 202,
  itemsKeys: {
    type: [String, Array],
    "default": ['items']
  },

  /**
   * Enable/disable tooltips. When enabled tooltips will popup when items are hovered (tapped on mobile).
   */
  enableTooltips: {
    type: Boolean,
    "default": true,
    exposed: true
  },
  getHtml: {
    type: Function,
    "default": function _default(d) {
      return "\n        <div class=\"tip-value important\">".concat(this.valueWithUnit(d.value), "</div>\n        <div class=\"tip-id\">\n          <span class=\"icon\" style=\"display: inline-block; width: 9px; height: 9px; border-radius: 50%; background: ").concat(this.color({
        id: d.id
      }), "; margin-right: 3px\"></span>\n          ").concat(d.id, "\n        </div>\n      ");
    }
  },
  getItemOffset: {
    type: Function,
    "default": function _default($el) {
      var targetRect = $el.getBoundingClientRect();
      return {
        x: targetRect.x + targetRect.width / 2,
        y: targetRect.y + targetRect.height / 2 //- 5,

      };
    }
  }
};
TooltipBehavior.configName = 'TooltipBehavior';

var DEFAULT_DENT = 14;
function dentedRect(w, h, dents) {
  var gapStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var dentSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_DENT;
  // let r = Math.round(Math.max(2,Math.min(Math.min(w/10,h/10),8)))
  // console.log(Math.min(w/10,h/10),r)
  var r = Math.floor(Math.min(Math.min(w / 3, h / 3), dentSize));
  if (!Array.isArray(dents)) dents = [dents];
  var r_tl = dents.indexOf('tl') >= 0 ? r : 0;
  var r_tr = dents.indexOf('tr') >= 0 ? r : 0;
  var r_bl = dents.indexOf('bl') >= 0 ? r : 0;
  var r_br = dents.indexOf('br') >= 0 ? r : 0;
  var gapPath = '';

  if (gapStart) {
    var dG, gH, ddG, gOffset;

    if (h > w) {
      dG = Math.min(w / 2, gapStart - 5);
      gH = Math.max(4, Math.min(6, dG / 2));
      ddG = dG / 2;
      gOffset = gapStart - gH / 2 - dG / 2; // gapPath = `M 0 ${gOffset} L ${w} ${gOffset} L ${w} ${gOffset+gH} L 0 ${gOffset+gH} L 0 ${gOffset}`

      gapPath = "M 0 ".concat(gOffset, " \n              c ").concat(w / 2 - ddG - 5, " ").concat(dG - ddG, ", ").concat(w / 2 + ddG, " ").concat(ddG, ", ").concat(w, " ").concat(dG, "\n              l 0 ").concat(gH, " \n              c ").concat(-w / 2 + ddG + 5, " ").concat(-dG + ddG, ", ").concat(-w / 2 - ddG, " ").concat(-ddG, ", ").concat(-w, " ").concat(-dG, "\n              l 0 -").concat(gH);
    } else {
      dG = Math.min(h / 2, -gapStart + 5);
      gH = Math.max(3, Math.min(6, dG / 2));
      ddG = dG / 2;
      gOffset = w + gapStart + gH / 2 + dG / 2; // gapPath = `M ${gOffset} 0 L ${gOffset+gH} 0 L ${gOffset+gH} ${h} L ${gOffset} ${h} L ${gOffset} 0 `

      gapPath = "M ".concat(gOffset, " 0\n              c ").concat(-ddG, " ").concat(h / 2 - ddG - 5, ", ").concat(-dG + ddG, " ").concat(h / 2 + ddG, " , ").concat(-dG, " ").concat(h, "\n              l ").concat(-gH, " 0 \n              c ").concat(ddG, " ").concat(-h / 2 + ddG + 5, ", ").concat(+dG - ddG, " ").concat(-h / 2 - ddG, " , ").concat(dG, " ").concat(-h, "\n              l ").concat(gH, " 0 ");
    }
  }

  return "M 0 ".concat(r_tl, " \n          v ").concat(h - r_bl - r_tl, "  a ").concat(r_bl, " ").concat(r_bl, " 1 0 0 ").concat(r_bl, "  ").concat(r_bl, "\n          h ").concat(w - r_bl - r_br, "  a ").concat(r_br, " ").concat(r_br, " 1 0 0 ").concat(r_br, "  ").concat(-r_br, " \n          v ").concat(-h + r_br + r_tr, " a ").concat(r_tr, " ").concat(r_tr, " 1 0 0 ").concat(-r_tr, " ").concat(-r_tr, " \n          h ").concat(-w + r_tr + r_tl, " a ").concat(r_tl, " ").concat(r_tl, " 1 0 0 ").concat(-r_tl, " ").concat(r_tl) + gapPath;
}

var santander_logo = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"35.211\" viewBox=\"0 0 200 35.211\">\n  <path id=\"Path_5018\" data-name=\"Path 5018\" d=\"M316.335,359.462l-5.766-10.035a7.991,7.991,0,0,1-.913-2.427l-.241.42a8.053,8.053,0,0,0,0,8.028l4.613,8.028a8.072,8.072,0,0,1,0,8.031l-.241.42a8.061,8.061,0,0,0-.913-2.427l-6.919-12.045a7.989,7.989,0,0,1-.912-2.427l-.241.42a8.059,8.059,0,0,0-.015,8l4.627,8.055a8.068,8.068,0,0,1,0,8.028l-.241.42a8.07,8.07,0,0,0-.912-2.427L302.5,367.493a8.054,8.054,0,0,1-1.062-4.363c-6.174,1.62-10.434,5.062-10.434,9.046,0,5.543,8.245,10.035,18.416,10.035s18.415-4.492,18.415-10.035c0-3.985-4.261-7.427-10.434-9.049A8.06,8.06,0,0,0,316.335,359.462Zm18.448,20.8a11.754,11.754,0,0,1,.657-3.512,16.091,16.091,0,0,0,6.329,1.356c3.219,0,5.018-1.042,5.018-3.093,0-2.016-1.315-2.955-4.566-4.381l-1.766-.763c-3.251-1.426-5.464-3.269-5.464-6.951,0-3.964,2.732-6.5,8.336-6.5a18.882,18.882,0,0,1,6.329,1.009,13.321,13.321,0,0,1-.692,3.474,17.53,17.53,0,0,0-5.672-1.007c-3.008,0-4.393,1.183-4.393,3.025,0,1.808,1.35,2.849,3.771,3.891l1.869.8c4.393,1.875,6.224,3.859,6.224,7.23,0,4-3.008,6.743-8.888,6.743A16.578,16.578,0,0,1,334.782,380.266Zm34.557-16.617v17.38h-3.495l-.205-2.083a5.3,5.3,0,0,1-4.877,2.5c-4.569,0-7.612-3.336-7.612-9.176,0-6.118,3.251-9.592,9.651-9.592A19.291,19.291,0,0,1,369.339,363.649Zm-3.806,13.418V366.152a15.716,15.716,0,0,0-2.732-.208c-3.944,0-5.777,2.432-5.777,6.326,0,3.545,1.42,6.048,4.809,6.048A5.942,5.942,0,0,0,365.534,377.068Zm23.28-7.717v11.678h-3.8V370.011c0-2.746-.9-4.067-4.707-4.067a19.052,19.052,0,0,0-3.008.279v14.806h-3.806v-17.38a32.315,32.315,0,0,1,6.919-.971C386.775,362.678,388.814,365.145,388.814,369.35Zm10.552,8.829a8.564,8.564,0,0,0,2.975-.522c-.1,1.045-.243,2.224-.449,3.234a8.615,8.615,0,0,1-3.219.555c-3.7,0-6.053-1.7-6.053-5.942V357.255a13.036,13.036,0,0,1,3.806-.557v6.57h6.018a29.067,29.067,0,0,1-.346,3.266h-5.672v8.518C396.425,377.311,397.532,378.18,399.366,378.18Zm20.408-14.531v17.38h-3.492l-.208-2.083a5.3,5.3,0,0,1-4.877,2.5c-4.566,0-7.608-3.336-7.608-9.176,0-6.118,3.251-9.592,9.651-9.592A19.274,19.274,0,0,1,419.773,363.649Zm-3.8,13.418V366.152a15.738,15.738,0,0,0-2.732-.208c-3.944,0-5.778,2.432-5.778,6.326,0,3.545,1.417,6.048,4.806,6.048A5.957,5.957,0,0,0,415.971,377.068Zm23.28-7.717v11.678h-3.806V370.011c0-2.746-.9-4.067-4.7-4.067a19.088,19.088,0,0,0-3.01.279v14.806h-3.806v-17.38a32.34,32.34,0,0,1,6.919-.971C437.209,362.678,439.251,365.145,439.251,369.35Zm19.3-12.653v24.331h-3.495l-.205-2.224a5.239,5.239,0,0,1-4.947,2.641c-4.566,0-7.611-3.336-7.611-9.176,0-6.118,3.251-9.592,9.651-9.592a14.888,14.888,0,0,1,2.837.276V357.22A11.513,11.513,0,0,1,458.553,356.7Zm-3.77,20.3v-10.7a15.166,15.166,0,0,0-3.043-.349c-3.771,0-5.569,2.365-5.569,6.326,0,3.545,1.417,6.048,4.806,6.048A6.073,6.073,0,0,0,454.782,377Zm22.9-3.407H465.539c.484,3.1,2.283,4.589,5.675,4.589a14.765,14.765,0,0,0,6.086-1.32c-.138,1.006-.343,2.327-.587,3.474a13,13,0,0,1-5.6,1.112c-6.364,0-9.443-3.545-9.443-9.49,0-5.179,2.388-9.278,8.439-9.278,5.431,0,7.785,3.58,7.785,7.958A20.51,20.51,0,0,1,477.681,373.59Zm-12.21-3.2h8.577c0-2.849-1.52-4.519-4.149-4.519C467.2,365.873,465.783,367.44,465.472,370.392ZM491,362.816a14.275,14.275,0,0,1-.346,3.269,24.111,24.111,0,0,0-2.87-.141,19.136,19.136,0,0,0-2.8.208v14.877h-3.806v-17.38a23.105,23.105,0,0,1,6.5-.971A30.543,30.543,0,0,1,491,362.816Z\" transform=\"translate(-291 -347)\" fill=\"#767676\" fill-rule=\"evenodd\"/>\n</svg>\n";

var Getnet_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"296.284 76.277 226.48 48.07\" width=\"226.48\" height=\"48.07\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M160.228,51.163c-3.518,0-8.631,0.729-13.277,1.858v33.196h7.303V57.935 c1.992-0.332,4.049-0.529,5.775-0.529c7.304,0,9.03,2.522,9.03,7.766v21.047h7.303V63.911 C176.361,55.876,172.445,51.163,160.228,51.163 M71.589,79.978c-1.991,0.397-4.183,0.664-6.107,0.664 c-10.092,0-16.465-5.843-16.465-17.728c0-10.889,5.908-17.063,16.796-17.063c4.648,0,8.3,0.797,11.553,1.859 c0.664-2.059,1.194-4.517,1.328-6.707c-3.452-1.194-7.768-1.792-12.881-1.792c-15.535,0-24.498,8.632-24.498,23.968 c0,14.074,8.166,24.102,23.637,24.102c4.979,0,10.29-0.931,14.073-2.458V61.188h-7.436V79.978z M198.206,51.163 c-11.618,0-16.2,7.833-16.2,17.727c0,11.354,5.91,18.126,18.126,18.126c3.917,0,7.436-0.599,10.756-2.125 c0.464-2.191,0.862-4.715,1.129-6.639c-3.652,1.659-7.702,2.522-11.687,2.522c-6.506,0-9.959-2.855-10.888-8.764h23.304 c0.266-1.927,0.398-3.586,0.398-5.645C213.145,58.002,208.63,51.163,198.206,51.163 M189.309,65.902 c0.599-5.645,3.32-8.632,8.498-8.632c5.048,0,7.968,3.188,7.968,8.632H189.309z M237.313,58.532 c0.333-1.925,0.531-3.984,0.664-6.241h-11.553V39.743c-2.259,0-5.046,0.332-7.304,1.063v34.854c0,8.101,4.515,11.354,11.619,11.354 c2.059,0,4.182-0.266,6.174-1.063c0.399-1.927,0.663-4.183,0.865-6.176c-1.595,0.598-3.587,0.997-5.711,0.997 c-3.52,0-5.644-1.661-5.644-5.976V58.532H237.313z M140.973,58.532c0.333-1.925,0.532-3.984,0.664-6.241h-11.553V39.743 c-2.257,0-5.045,0.332-7.303,1.063v34.854c0,8.101,4.515,11.354,11.62,11.354c2.057,0,4.181-0.266,6.173-1.063 c0.398-1.927,0.665-4.183,0.864-6.176c-1.593,0.598-3.585,0.997-5.71,0.997c-3.519,0-5.645-1.661-5.645-5.976V58.532H140.973z M101.866,51.163c-11.618,0-16.201,7.833-16.201,17.727c0,11.354,5.91,18.126,18.126,18.126c3.918,0,7.437-0.599,10.756-2.125 c0.466-2.191,0.863-4.715,1.129-6.639c-3.65,1.659-7.701,2.522-11.686,2.522c-6.506,0-9.958-2.855-10.888-8.764h23.304 c0.266-1.927,0.398-3.586,0.398-5.645C116.805,58.002,112.29,51.163,101.866,51.163 M92.97,65.902 c0.599-5.645,3.319-8.632,8.498-8.632c5.046,0,7.967,3.188,7.967,8.632H92.97z M264.068,58.532h3.727v-3.729h-3.727V58.532z M264.068,51.077h3.727V47.35h-3.727V51.077z M256.613,43.623h3.727v-3.727h-3.727V43.623z M249.159,58.532h3.727v-3.729h-3.727 V58.532z M256.613,51.077h3.727V47.35h-3.727V51.077z M264.068,43.623h3.727v-3.727h-3.727V43.623z M249.159,51.077h3.727V47.35 h-3.727V51.077z M249.159,43.623h3.727v-3.727h-3.727V43.623z M256.613,58.532h3.727v-3.729h-3.727V58.532z\" transform=\"matrix(1, 0, 0, 1, 254.969421, 37.065876)\"/>\n</svg>";

var Aquanima_logo = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"252px\" height=\"47px\" viewBox=\"0 0 252 47\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <title>Aquanima</title>\n    <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"Aquanima\" transform=\"translate(0.123000, 0.734000)\" fill-rule=\"nonzero\">\n            <g id=\"Aquanima\">\n                <path d=\"M193.389,43.541 C195.512,43.541 196.6,42.554 196.6,41.116 C196.6,39.904 195.939,39.192 194.351,38.518 L193.676,38.23 C192.802,37.856 192.314,37.48 192.314,36.832 C192.314,36.169 192.816,35.746 193.902,35.746 C194.477,35.746 195.275,35.856 195.952,36.107 C196.076,35.746 196.165,35.357 196.202,34.858 C195.488,34.606 194.726,34.496 193.915,34.496 C191.892,34.496 190.903,35.407 190.903,36.832 C190.903,38.156 191.703,38.817 192.876,39.33 L193.515,39.606 C194.691,40.117 195.163,40.454 195.163,41.179 C195.163,41.915 194.515,42.29 193.351,42.29 C192.665,42.29 191.764,42.127 191.066,41.804 C190.928,42.202 190.853,42.553 190.829,43.066 C191.527,43.391 192.364,43.541 193.389,43.541\" id=\"Path\" fill=\"#001E3F\"></path>\n                <path d=\"M201.456,36.746 C199.144,36.746 197.971,37.993 197.971,40.194 C197.971,42.293 199.07,43.492 200.718,43.492 C201.593,43.492 202.131,43.142 202.481,42.592 L202.556,43.343 L203.817,43.343 L203.817,37.095 C203.092,36.844 202.355,36.746 201.456,36.746 M202.442,41.916 C202.079,42.191 201.643,42.367 201.105,42.367 C199.881,42.367 199.368,41.467 199.368,40.193 C199.368,38.793 200.03,37.918 201.456,37.918 C201.842,37.918 202.155,37.943 202.442,37.992 L202.442,41.916 Z\" id=\"Shape\" fill=\"#001E3F\"></path>\n                <path d=\"M208.322,36.744 C207.66,36.744 206.697,36.882 205.823,37.095 L205.823,43.341 L207.198,43.341 L207.198,38.018 C207.573,37.956 207.959,37.918 208.284,37.918 C209.66,37.918 209.985,38.394 209.985,39.38 L209.985,43.34 L211.358,43.34 L211.358,39.144 C211.358,37.63 210.62,36.744 208.322,36.744\" id=\"Path\" fill=\"#001E3F\"></path>\n                <path d=\"M214.614,41.193 L214.614,38.13 L216.663,38.13 C216.726,37.769 216.763,37.381 216.79,36.957 L214.614,36.957 L214.614,34.596 C214.191,34.596 213.664,34.658 213.241,34.794 L213.241,41.355 C213.241,42.878 214.089,43.491 215.428,43.491 C215.814,43.491 216.215,43.441 216.589,43.292 C216.663,42.93 216.714,42.505 216.752,42.129 C216.452,42.242 216.077,42.317 215.678,42.317 C215.016,42.317 214.614,42.005 214.614,41.193\" id=\"Path\" fill=\"#001E3F\"></path>\n                <path d=\"M221.194,36.746 C218.882,36.746 217.709,37.993 217.709,40.194 C217.709,42.293 218.809,43.492 220.458,43.492 C221.331,43.492 221.869,43.142 222.22,42.592 L222.294,43.343 L223.557,43.343 L223.557,37.095 C222.833,36.844 222.095,36.746 221.194,36.746 M222.182,41.916 C221.82,42.191 221.382,42.367 220.845,42.367 C219.62,42.367 219.109,41.467 219.109,40.193 C219.109,38.793 219.771,37.918 221.195,37.918 C221.582,37.918 221.894,37.943 222.182,37.992 L222.182,41.916 Z\" id=\"Shape\" fill=\"#001E3F\"></path>\n                <path d=\"M228.061,36.744 C227.4,36.744 226.437,36.882 225.562,37.095 L225.562,43.341 L226.936,43.341 L226.936,38.018 C227.31,37.956 227.7,37.918 228.023,37.918 C229.398,37.918 229.723,38.394 229.723,39.38 L229.723,43.34 L231.096001,43.34 L231.096001,39.144 C231.097,37.63 230.361,36.744 228.061,36.744\" id=\"Path\" fill=\"#001E3F\"></path>\n                <path d=\"M237.216,34.783 L237.216,36.845 C236.891,36.782 236.554,36.746 236.193,36.746 C233.881,36.746 232.706,37.993 232.706,40.194 C232.706,42.293 233.806,43.492 235.455,43.492 C236.353,43.492 236.892,43.129 237.24,42.543 L237.316,43.343 L238.578,43.343 L238.578,34.5969799 C238.127,34.596 237.641,34.632 237.216,34.783 M237.216,41.893 C236.842,42.179 236.391,42.368 235.841,42.368 C234.614,42.368 234.105,41.468 234.105,40.194 C234.105,38.768 234.754,37.919 236.117,37.919 C236.478,37.919 236.852,37.97 237.217,38.044 L237.217,41.893 L237.216,41.893 Z\" id=\"Shape\" fill=\"#001E3F\"></path>\n                <path d=\"M246.069,39.607 C246.069,38.032 245.219,36.744 243.258,36.744 C241.07,36.744 240.208,38.219 240.208,40.081 C240.208,42.217 241.32,43.491 243.617,43.491 C244.357,43.491 245.019,43.38 245.643,43.092 C245.73,42.679 245.804,42.206 245.856,41.843 C245.168,42.155 244.408,42.318 243.657,42.318 C242.431,42.318 241.783,41.781 241.607,40.669 L245.992,40.669 C246.044,40.304 246.069,39.993 246.069,39.607 M241.583,39.518 C241.695,38.456 242.209,37.894 243.183,37.894 C244.132,37.894 244.682,38.494 244.682,39.518 L241.583,39.518 Z\" id=\"Shape\" fill=\"#001E3F\"></path>\n                <path d=\"M250.113,36.744 C249.338,36.744 248.351,36.895 247.761,37.095 L247.761,43.341 L249.138,43.341 L249.138,37.995 C249.475,37.944 249.813,37.919 250.149,37.919 C250.539,37.919 250.862,37.933 251.186,37.97 C251.261,37.707 251.312,37.208 251.312,36.796 C251.011,36.757 250.539,36.744 250.113,36.744\" id=\"Path\" fill=\"#001E3F\"></path>\n                <path d=\"M157.634,38.631 L157.634,42.166 C157.26,42.241 156.848,42.292 156.485,42.292 C154.587,42.292 153.387,41.192 153.387,38.955 C153.387,36.906 154.499,35.746 156.548,35.746 C157.423,35.746 158.11,35.893 158.723,36.093 C158.847,35.708 158.947,35.244 158.972,34.832 C158.323,34.606 157.51,34.496 156.548,34.496 C153.624,34.496 151.938,36.119 151.938,39.006 C151.938,41.653 153.474,43.541 156.385,43.541 C157.323,43.541 158.323,43.365 159.035,43.079 L159.035,38.631 L157.634,38.631 Z\" id=\"Path\" fill=\"#001E3F\"></path>\n                <path d=\"M163.515,36.744 C162.741,36.744 161.752,36.895 161.165,37.095 L161.165,43.341 L162.539,43.341 L162.539,37.995 C162.877,37.944 163.214,37.919 163.552,37.919 C163.94,37.919 164.264,37.933 164.591,37.97 C164.662,37.707 164.714,37.208 164.714,36.795 C164.414,36.757 163.939,36.744 163.515,36.744\" id=\"Path\" fill=\"#001E3F\"></path>\n                <path d=\"M170.256,36.895 L170.256,41.817 C169.868,42.154 169.38,42.317 168.881,42.317 C167.831,42.317 167.47,41.842 167.47,40.78 L167.47,36.895 L166.094,36.895 L166.094,41.092 C166.094,42.691 166.895,43.49 168.407,43.49 C169.258,43.49 169.856,43.091 170.281,42.529 L170.357,43.34 L171.63,43.34 L171.63,36.895 L170.256,36.895 L170.256,36.895 Z\" id=\"Path\" fill=\"#001E3F\"></path>\n                <path d=\"M176.036,36.744 C175.198,36.744 174.284,36.895 173.637,37.095 L173.637,45.741 L175.011,45.741 L175.011,43.354 C175.324,43.441 175.685,43.491 176.111,43.491 C178.299,43.491 179.484,42.242 179.484,40.044 C179.483,37.944 178.397,36.744 176.036,36.744 M176.022,42.317 C175.684,42.317 175.346,42.267 175.01,42.179 L175.01,38.007 C175.299,37.956 175.61,37.918 175.934,37.918 C177.484,37.918 178.095001,38.781 178.095001,40.117 C178.096,41.554 177.397,42.317 176.022,42.317\" id=\"Shape\" fill=\"#001E3F\"></path>\n                <path d=\"M184.076,36.744 C182.052,36.744 180.777,38.018 180.777,40.206 C180.777,42.056 181.889,43.491 183.95,43.491 C186,43.491 187.263,42.217 187.263,40.031 C187.263,38.181 186.175,36.744 184.076,36.744 M184.039,42.317 C182.877,42.317 182.177,41.629 182.177,40.092 C182.177,38.767 182.765,37.918 184.039,37.918 C185.163,37.918 185.861,38.618 185.861,40.143 C185.861,41.48 185.263,42.317 184.039,42.317\" id=\"Shape\" fill=\"#001E3F\"></path>\n                <path d=\"M12.903,6.925 L9.653,14.791 L16.155,14.791 L12.903,6.925 Z M20.318,24.94 L18.079,19.501 L7.727,19.501 L5.489,24.94 L0,24.94 L10.49,0.515 L15.456,0.515 L25.948,24.94 L20.318,24.94 L20.318,24.94 Z\" id=\"Shape-Copy-9\" fill=\"#767676\"></path>\n                <path d=\"M48.279,12.815 C48.279,8.658 45.202,5.193 40.864,5.193 C36.528,5.193 33.521,8.588 33.521,12.746 L33.521,12.815 C33.521,16.972 36.597,20.436 40.933,20.436 C42.123,20.436 43.206,20.194 44.151,19.778 L40.166,16.418 L43.592,12.606 L47.615,16.21 C48.069,15.205 48.279,14.096 48.279,12.883 L48.279,12.815 L48.279,12.815 Z M50.833,25.666 L48.139,23.277 C46.077,24.591 43.592,25.356 40.865,25.356 C33.312,25.356 27.89,19.777 27.89,12.882 L27.89,12.814 C27.89,5.918 33.382,0.272 40.934,0.272 C48.491,0.272 53.91,5.849 53.91,12.745 L53.91,12.814 C53.91,15.343 53.141,17.767 51.741,19.777 L54.261,21.891 L50.833,25.666 Z\" id=\"Shape-Copy-10\" fill=\"#767676\"></path>\n                <path d=\"M70.202,25.322 C63.628,25.322 59.604,21.683 59.604,14.548 L59.604,0.69 L64.989,0.69 L64.989,14.409 C64.989,18.359 66.985,20.403 70.273,20.403 C73.559,20.403 75.552,18.428 75.552,14.584 L75.552,0.69 L80.939,0.69 L80.939,14.375 C80.939,21.717 76.775,25.322 70.202,25.322\" id=\"Path-Copy-6\" fill=\"#767676\"></path>\n                <path d=\"M96.722,6.925 L93.471,14.791 L99.972,14.791 L96.722,6.925 Z M104.135,24.94 L101.898,19.501 L91.546,19.501 L89.307,24.94 L83.819,24.94 L94.308,0.515 L99.274,0.515 L109.766,24.94 L104.135,24.94 L104.135,24.94 Z\" id=\"Shape-Copy-11\" fill=\"#767676\"></path>\n                <polygon id=\"Path-Copy-7\" fill=\"#767676\" points=\"131.081 24.94 119.225 9.522 119.225 24.94 113.907 24.94 113.907 0.688 118.876 0.688 130.345 15.622 130.345 0.688 135.661 0.688 135.661 24.94\"></polygon>\n                <rect id=\"Rectangle-Copy\" fill=\"#767676\" x=\"143.31\" y=\"0.689\" width=\"5.387\" height=\"24.251\"></rect>\n                <path d=\"M221.093,25.169 C215.165,25.169 212.655,19.371 210.438,14.255 C208.168,9.008 206.453,5.568 203.379,5.568 C201.106,5.568 199.761,8.1 197.826,12.273 C195.771,16.706 193.211,22.22 187.168,22.22 C181.128,22.22 178.564,16.705 176.508,12.273 C174.571,8.1 173.232,5.568 170.955,5.568 C167.768,5.568 166.051,9.033 163.791,14.318 C161.619,19.406 159.156,25.169 153.239,25.169 L153.239,19.6 C155.28,19.6 156.689,16.651 158.617,12.149 C160.927,6.737 163.806,0 170.955,0 C177,0 179.558,5.516 181.615,9.947 C183.554,14.12 184.891,16.652 187.168,16.652 C189.445,16.652 190.782,14.12 192.722,9.949 C194.778,5.515 197.337,0 203.379,0 C210.386,0 213.279,6.688 215.608,12.063 C217.577,16.617 219.026,19.601 221.093,19.601 L221.093,25.169 L221.093,25.169 Z\" id=\"Path-Copy-8\" fill=\"#767676\"></path>\n                <path d=\"M237.772,6.925 L234.52,14.791 L241.024,14.791 L237.772,6.925 Z M245.188,24.94 L242.947,19.501 L232.597,19.501 L230.361,24.94 L224.869,24.94 L235.361,0.515 L240.327,0.515 L250.817,24.94 L245.188,24.94 L245.188,24.94 Z\" id=\"Shape-Copy-12\" fill=\"#767676\"></path>\n            </g>\n        </g>\n    </g>\n</svg>";

var Prospera_Santander_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"-26.908 -82.579 272.76 77.31\" width=\"272.76\" height=\"77.31\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M45.052,34.625c-0.939-3.257-2.628-6.216-5.897-7.736c-3.889-1.809-7.555-1.658-11.244,1.22 c-0.812,0.631-0.911-1.876-3.043-1.876c-2.133,0-4.27,0.064-6.401-0.005c-0.913-0.03-1.104,0.28-1.104,1.134 c0.021,12.002-0.002,35.521,0.012,35.626c-0.003,3.428-0.177,7.946,4.225,9.462c2.733,0.943,5.378,0.053,6.313-0.604 c0-2.004-0.006-5.419-0.009-10.642c0.004-0.064,0.009-0.131,0.009-0.205c1.309,1.083,2.438,1.916,3.94,2.128 c6.528,0.919,11.466-2.148,13.299-8.54C47.055,47.948,46.959,41.236,45.052,34.625 M35.574,50.911 c-0.563,1.699-1.6,2.993-3.628,3.042c-2.097,0.051-3.449-0.742-4.103-2.879c-1.352-4.41-1.221-8.87,0.102-13.269 c0.543-1.804,1.926-2.819,3.813-2.841c1.881-0.021,2.967,1.149,3.582,2.841c0.822,2.261,1.063,4.602,1.012,6.985 C36.434,46.875,36.226,48.939,35.574,50.911\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M173.75,34.625c-0.938-3.257-2.627-6.216-5.896-7.736c-3.889-1.809-7.555-1.658-11.244,1.22 c-0.811,0.631-0.912-1.876-3.043-1.876c-2.133,0-4.27,0.064-6.401-0.005c-0.913-0.03-1.105,0.28-1.104,1.134 c0.021,12.002-0.002,35.521,0.012,35.626c-0.003,3.428-0.177,7.946,4.224,9.462c2.734,0.943,5.378,0.053,6.313-0.604 c0-2.004-0.006-5.419-0.009-10.642c0.004-0.064,0.009-0.131,0.009-0.205c1.308,1.083,2.438,1.916,3.939,2.128 c6.53,0.919,11.467-2.148,13.3-8.54C175.754,47.948,175.657,41.236,173.75,34.625 M164.272,50.911 c-0.562,1.699-1.599,2.993-3.628,3.042c-2.097,0.051-3.448-0.742-4.102-2.879c-1.352-4.41-1.221-8.87,0.102-13.269 c0.542-1.804,1.926-2.819,3.813-2.841c1.88-0.021,2.967,1.149,3.582,2.841c0.822,2.261,1.063,4.602,1.011,6.985 C165.133,46.875,164.925,48.939,164.272,50.911\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M111.332,39.634c-0.942-6.527-3.324-13.146-13.449-13.725c-7.438-0.424-13.013,1.981-15.229,9.734 c-1.825,6.392-1.734,12.888-0.069,19.31c1.219,4.698,4.137,7.93,8.964,9.1c2.924,0.71,5.898,0.72,8.889,0.222 c4.981-0.83,8.183-3.688,9.822-8.382c1.199-3.434,1.423-7.012,1.485-11.339C111.867,43.381,111.602,41.5,111.332,39.634 M100.374,52.247c-0.671,2.015-2.01,3.121-3.768,3.128c-1.826,0.005-3.249-0.965-3.81-3.056c-1.265-4.717-1.293-9.486,0.079-14.19 c0.626-2.144,1.894-2.938,3.833-2.938c2.073-0.003,3.028,1.321,3.611,3.014c0.803,2.329,0.874,4.761,0.787,7.115 C101.164,47.715,101.117,50.02,100.374,52.247\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M198.954,52.122c-0.038,0.313-0.868,2.876-4.032,3.203c-6.157,0.636-5.566-5.497-5.677-6.821 c-0.102-1.212,0.156-1.537,1.392-1.52c5.185,0.072,7.657,0.051,12.843,0.051c3.298,0,4.029-2.317,4.027-3.389 c-0.007-2.444-0.228-3.907-0.42-5.188c-1.057-7.043-3.344-11.929-11.596-12.537c-7.526-0.556-13.333,1.793-15.592,9.697 c-1.826,6.391-1.738,12.885-0.078,19.304c1.213,4.69,4.127,7.894,8.943,9.124c1.665,0.426,3.357,0.556,5.056,0.556 c4.833,0,11.149-1.772,12.07-7.127C206.343,54.853,204.928,50.872,198.954,52.122 M189.553,39.256 c0.467-3.528,2.216-5.392,4.877-5.105c2.185,0.235,4.598,3.92,3.92,5.958c-0.159,0.479-0.644,0.452-1.023,0.452 c-1.596,0-5.553,0.027-6.551,0.027C189.697,40.588,189.417,40.285,189.553,39.256\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M79.898,61.02c-4.267-3.041-5.146-5.512-7.149-9.569c-0.558-1.129-0.329-1.609,0.712-2.229 c2.332-1.389,4.045-3.455,4.615-6.098c1.624-7.51-0.615-16.175-12.026-16.877c-5.183-0.318-7.763-0.207-12.945-0.207 c-1.565,0-3.796,1.295-3.796,3.507c0,11.836,0.025,21.395-0.002,33.23c-0.003,1.008,0.226,1.244,1.494,1.244 c2.449,0,4.715-0.011,7.293-0.011c1.404,0,1.814-0.1,1.785-1.288c-0.068-2.927-0.067-5.857,0.012-8.782 c0.018-0.658-0.187-1.841,0.526-1.974c1.206-0.228,2.047-0.052,2.851,1.415c0.587,1.074,1.169,2.179,1.852,3.594 c2.224,4.612,4.846,8.444,10.464,7.879C78.414,64.568,79.898,62.482,79.898,61.02 M69.037,40c-0.107,1.282-0.699,2.291-1.775,3.003 c-0.723,0.478-1.534,0.735-2.38,0.84c-5.025,0.613-5.026,0.607-5.026-4.452v-0.549c0-3.877,0-3.877,3.745-3.752 C67.233,35.213,69.281,37.059,69.037,40\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M258.461,55.538c-1.775,0.585-4.476,1.522-8.012,1.522c-5.174,0-11.186-0.479-16.812-7.573 c3.588-2.851,5.128-4.797,5.573-7.27c1.466-8.146-1.962-15.292-11.94-15.977c-5.243-0.359-7.909-0.093-13.151-0.222 c-0.982-0.023-3.792,0.961-3.792,3.507c0,9.964,0.003,28.383,0.001,29.417c-0.003,0.814-0.005,1.62-0.007,2.446 c0,0.021,0.002,0.036,0.002,0.056c-0.001,0.438-0.001,0.865-0.002,1.311c-0.003,1.008,0.226,1.244,1.493,1.244 c2.449,0,4.715-0.011,7.293-0.011c1.406,0,1.787-0.101,1.787-1.288c0-2.813-0.069-8.174-0.069-8.761 c0-1.923,0.631-2.074,1.751-2.074c0.62,0,1.213,0.504,1.678,0.994c1.639,1.727,8.118,8.802,17.333,10.549 c9.191,1.744,18.038-0.686,18.63-3.653C260.851,56.578,258.461,55.538,258.461,55.538 M230.054,39.93 c-0.111,1.283-0.729,2.292-1.853,3.004c-0.753,0.479-1.601,0.736-2.484,0.84c-5.244,0.613-5.245,0.607-5.245-4.452v-0.548 c0-3.879,0-3.879,3.908-3.752C228.171,35.144,230.309,36.989,230.054,39.93\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M261.855,45.48c-1.753-6.08-3.553-12.146-5.25-18.242c-0.278-1.005-0.716-1.243-1.657-1.206 c-0.759,0.028-2.03,0.026-2.796,0.022v-0.001c-0.002,0-0.004,0.001-0.006,0.001c-0.003,0-0.006-0.001-0.007-0.001v0.001 c-0.766,0.004-2.036,0.006-2.795-0.022c-0.941-0.037-1.379,0.201-1.658,1.206c-1.696,6.096-3.496,12.162-5.249,18.242 c-0.553,1.911-1.081,3.828-1.63,5.799c-0.189,0.68,0.126,1.361,1.607,1.361h5.106c0.813,0,1.445-0.369,1.561-0.895 c0.228-1.026,0.456-2.065,0.689-3.121c0.049-0.226,0.25-0.389,0.48-0.389h1.888h0.013h1.888c0.231,0,0.438,0.162,0.48,0.389 c0.445,2.365,1.871,4.643,5.1,4.347c1.818-0.167,3.367-0.958,3.864-1.692C262.406,47.392,262.406,47.392,261.855,45.48 M253.082,43.484h-0.93h-0.013h-0.93c-0.226,0-0.399-0.197-0.372-0.42l1.309-7.032l1.308,7.032 C253.481,43.287,253.308,43.484,253.082,43.484\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M133.855,37.989c-0.808-2.62-4.616-4.168-7-2.844c-1.87,1.041-2.059,3.414-0.196,4.507 c1.575,0.923,3.39,1.427,5.05,2.216c2.455,1.168,5.064,2.147,7.257,3.703c3.892,2.764,4.596,6.91,3.681,11.306 c-0.829,3.977-3.685,6.192-7.458,7.109c-5.112,1.241-10.261,1.481-15.09-1.084c-3.758-1.996-5.458-5.234-5.824-9.295 c-0.071-0.789,0.923-1.548,1.708-1.646c2.242-0.285,3.762-0.479,6.016-0.767c0.778-0.1,1.8,0.372,1.957,1.141 c0,0.006,0.002,0.011,0.003,0.016c0.65,3.227,4.318,4.954,7.09,3.194c0.684-0.434,1.339-1.537,1.305-2.301 c-0.033-0.751-0.807-1.817-1.521-2.124c-2.445-1.046-5.025-1.768-7.52-2.71c-3.776-1.425-6.94-3.545-8.021-7.763 c-1.526-5.965,1.491-11.795,7.354-13.754c5.551-1.875,10.782-1.394,15.277,1.235c2.061,1.204,3.365,3.513,3.148,5.813 C140.499,39.99,133.982,38.402,133.855,37.989\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#E59C27\" d=\"M269.047,39.017l-1.058-1.564c-0.411-0.539-0.326-1.306,0.192-1.741l11.86-9.806 c0.335,0.276,1.573,1.887,1.835,2.37c0.26,0.483,0.422,0.979,0.485,1.488c0.064,0.51-0.011,1.031-0.222,1.565 c-0.213,0.534-0.631,1.041-1.257,1.52l-10.381,6.425C270.025,39.58,269.391,39.47,269.047,39.017\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#E59C27\" d=\"M270.591,45.591l-0.112-1.886c-0.082-0.673,0.382-1.289,1.05-1.4l18.219-2.889 c0.147,0.409,0.396,2.426,0.374,2.975c-0.021,0.548-0.133,1.058-0.338,1.529c-0.203,0.471-0.533,0.883-0.986,1.234 c-0.455,0.352-1.073,0.575-1.855,0.669l-15.226,0.729C271.148,46.572,270.659,46.154,270.591,45.591\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#E59C27\" d=\"M270.554,48.443l11.957,5.627c0.679,0.4,1.155,0.853,1.43,1.358c0.273,0.504,0.41,1.013,0.408,1.526 c-0.003,0.514-0.104,1.026-0.306,1.536c-0.2,0.511-1.238,2.258-1.537,2.573l-13.83-8.807c-0.567-0.371-0.743-1.121-0.399-1.705 l0.861-1.682C269.427,48.383,270.043,48.196,270.554,48.443\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M114.165,101.756c0.066-1.355,0.265-2.282,0.629-3.341c1.853,0.86,4.233,1.29,6.053,1.29 c3.076,0,4.796-0.992,4.796-2.943c0-1.919-1.257-2.812-4.366-4.168l-1.687-0.728c-3.109-1.356-5.227-3.109-5.227-6.615 c0-3.771,2.613-6.186,7.972-6.186c2.15,0,4.168,0.298,6.054,0.96c-0.1,1.322-0.331,2.348-0.662,3.307 c-1.786-0.661-3.903-0.959-5.424-0.959c-2.878,0-4.201,1.125-4.201,2.878c0,1.72,1.29,2.712,3.605,3.704l1.786,0.761 c4.2,1.786,5.953,3.672,5.953,6.88c0,3.805-2.878,6.417-8.501,6.417C118.233,103.013,116.018,102.616,114.165,101.756\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M147.207,85.945v16.538h-3.34l-0.166-1.554c-0.959,1.157-2.381,1.951-4.696,1.951 c-4.366,0-7.277-3.175-7.277-8.732c0-5.821,3.109-9.129,9.229-9.129C143.338,85.02,145.289,85.284,147.207,85.945 M143.569,98.713 V88.327c-0.761-0.133-1.588-0.198-2.613-0.198c-3.771,0-5.523,2.314-5.523,6.02c0,3.374,1.355,5.755,4.598,5.755 C141.452,99.903,142.609,99.44,143.569,98.713\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M165.828,91.37v11.113h-3.639V91.999c0-2.614-0.859-3.87-4.498-3.87c-0.86,0-1.885,0.099-2.878,0.264v14.091 h-3.638V85.945c2.314-0.563,4.862-0.926,6.615-0.926C163.877,85.02,165.828,87.368,165.828,91.37\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M175.916,99.771c1.059,0,2.051-0.198,2.844-0.496c-0.099,0.992-0.23,2.117-0.43,3.076 c-0.992,0.397-2.051,0.529-3.076,0.529c-3.539,0-5.788-1.621-5.788-5.656V79.859c1.124-0.363,2.514-0.529,3.639-0.529v6.252h5.755 c-0.066,1.125-0.165,2.149-0.33,3.108h-5.425v8.104C173.104,98.944,174.163,99.771,175.916,99.771\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M195.431,85.945v16.538h-3.341l-0.165-1.554c-0.96,1.157-2.382,1.951-4.697,1.951 c-4.366,0-7.277-3.175-7.277-8.732c0-5.821,3.109-9.129,9.229-9.129C191.561,85.02,193.512,85.284,195.431,85.945 M191.792,98.713 V88.327c-0.761-0.133-1.587-0.198-2.613-0.198c-3.771,0-5.523,2.314-5.523,6.02c0,3.374,1.356,5.755,4.598,5.755 C189.675,99.903,190.833,99.44,191.792,98.713\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M214.052,91.37v11.113h-3.639V91.999c0-2.614-0.86-3.87-4.498-3.87c-0.86,0-1.886,0.099-2.878,0.264v14.091 h-3.639V85.945c2.315-0.563,4.862-0.926,6.615-0.926C212.1,85.02,214.052,87.368,214.052,91.37\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M232.507,79.33v23.153h-3.341l-0.198-2.116c-0.926,1.555-2.349,2.514-4.729,2.514 c-4.366,0-7.277-3.175-7.277-8.732c0-5.821,3.109-9.129,9.229-9.129c0.959,0,1.853,0.1,2.712,0.265v-5.458 C230.026,79.43,231.316,79.33,232.507,79.33 M228.901,98.647V88.459c-0.959-0.198-1.951-0.33-2.91-0.33 c-3.605,0-5.325,2.248-5.325,6.02c0,3.374,1.355,5.755,4.598,5.755C226.719,99.903,227.909,99.408,228.901,98.647\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M250.797,95.405h-11.609c0.463,2.944,2.183,4.366,5.425,4.366c1.984,0,4.002-0.43,5.821-1.257 c-0.133,0.959-0.331,2.216-0.563,3.308c-1.654,0.761-3.407,1.059-5.358,1.059c-6.086,0-9.03-3.374-9.03-9.03 c0-4.929,2.282-8.831,8.071-8.831c5.192,0,7.441,3.407,7.441,7.574C250.995,93.619,250.93,94.446,250.797,95.405 M239.121,92.362 h8.203c0-2.712-1.455-4.3-3.969-4.3C240.775,88.063,239.419,89.551,239.121,92.362\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n  <path fill=\"#EC0000\" d=\"M263.53,85.151c0,1.092-0.132,2.415-0.33,3.109c-0.86-0.099-1.721-0.132-2.745-0.132 c-0.894,0-1.787,0.065-2.68,0.198v14.156h-3.639V85.945c1.555-0.529,4.168-0.926,6.219-0.926 C261.479,85.02,262.736,85.052,263.53,85.151\" transform=\"matrix(1, 0, 0, 1, -44.270981, -108.282089)\"/>\n</svg>";

var Accionistas_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"87.015 822.19 470.169 44.881\" width=\"470.169\" height=\"44.881\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M1030.819,394.911h-13.691l-2.569,7.486h-3.278l10.678-30.481c1.107-0.265,2.569-0.398,3.898-0.398 l10.81,30.88h-3.277L1030.819,394.911z M1029.844,391.986l-5.849-17.234l-5.892,17.234H1029.844z M1038.351,391.055 c0-7.265,3.811-12.05,11.696-12.05c1.817,0,3.544,0.311,5.272,1.063c-0.044,0.931-0.177,1.816-0.354,2.703 c-1.683-0.754-3.456-1.02-4.918-1.02c-5.67,0-8.55,3.411-8.55,9.215c0,6.336,3.367,9.216,7.93,9.216c2.038,0,4.12-0.62,5.849-1.772 c-0.089,0.886-0.222,1.994-0.399,2.969c-1.594,1.108-3.588,1.55-5.714,1.55C1042.648,402.929,1038.351,398.676,1038.351,391.055 M1057.579,391.055c0-7.265,3.811-12.05,11.696-12.05c1.816,0,3.544,0.311,5.272,1.063c-0.044,0.931-0.177,1.816-0.354,2.703 c-1.684-0.754-3.456-1.02-4.918-1.02c-5.671,0-8.551,3.411-8.551,9.215c0,6.336,3.367,9.216,7.931,9.216 c2.038,0,4.12-0.62,5.849-1.772c-0.089,0.886-0.222,1.994-0.399,2.969c-1.595,1.108-3.588,1.55-5.715,1.55 C1061.876,402.929,1057.579,398.676,1057.579,391.055 M1078.402,373.91c0-1.196,0.887-2.082,2.082-2.082 c1.196,0,2.038,0.886,2.038,2.082s-0.842,2.037-2.038,2.037C1079.289,375.947,1078.402,375.106,1078.402,373.91 M1078.935,379.537 h3.102v22.86h-3.102V379.537z M1086.688,391.1c0-7.487,4.076-12.095,10.943-12.095c7.177,0,10.721,5.008,10.721,11.741 c0,7.576-3.987,12.183-10.987,12.183C1090.276,402.929,1086.688,397.923,1086.688,391.1 M1105.207,390.967 c0-5.804-2.658-9.17-7.665-9.17c-5.184,0-7.709,3.633-7.709,9.082c0,5.937,2.657,9.259,7.709,9.259 C1102.681,400.138,1105.207,396.55,1105.207,390.967 M1131.347,387.423v14.975h-3.102v-14.398c0-4.12-1.551-6.247-7.001-6.247 c-1.594,0-3.456,0.222-5.139,0.62v20.025h-3.102v-22.152c2.969-0.797,5.849-1.24,8.329-1.24 C1128.82,379.005,1131.347,382.063,1131.347,387.423 M1136.574,373.91c0-1.196,0.887-2.082,2.083-2.082 c1.195,0,2.038,0.886,2.038,2.082s-0.843,2.037-2.038,2.037C1137.461,375.947,1136.574,375.106,1136.574,373.91 M1137.106,379.537 h3.102v22.86h-3.102V379.537z M1145.125,401.201c0.044-1.24,0.222-2.081,0.443-2.701c2.083,1.195,4.962,1.727,7.221,1.727 c3.412,0,5.494-1.063,5.494-3.588c0-2.659-2.437-3.588-4.563-4.254l-2.038-0.62c-3.943-1.196-6.114-3.189-6.114-6.734 c0-3.942,3.013-6.025,8.019-6.025c2.57,0,4.963,0.354,7.001,1.151c-0.044,0.754-0.178,1.729-0.443,2.615 c-2.038-0.754-4.298-1.108-6.469-1.108c-3.411,0-5.14,1.108-5.14,3.278c0,2.481,1.729,3.235,4.476,4.165l2.082,0.708 c3.5,1.197,6.202,2.881,6.202,6.735c0,4.032-3.102,6.379-8.418,6.379C1149.777,402.929,1147.207,402.397,1145.125,401.201 M1176.803,399.563c-0.089,0.842-0.222,1.816-0.398,2.658c-1.329,0.486-2.614,0.708-3.987,0.708c-4.253,0-6.867-2.126-6.867-7.088 V371.96c0.93-0.309,2.17-0.486,3.101-0.486v8.196h8.019c-0.043,1.063-0.131,1.948-0.31,2.791h-7.709v13.025 c0,3.367,1.552,4.784,4.298,4.784C1174.188,400.271,1175.606,400.005,1176.803,399.563 M1197.848,380.245v22.152h-2.879 l-0.089-1.728c-1.507,1.328-3.545,2.259-6.025,2.259c-6.291,0-10.19-4.208-10.19-11.784c0-7.797,3.855-12.14,11.784-12.14 C1193.195,379.005,1195.5,379.359,1197.848,380.245 M1189.12,400.36c2.304,0,4.164-0.843,5.627-2.261v-15.815 c-1.329-0.354-2.703-0.532-4.299-0.532c-5.936,0-8.639,3.456-8.639,9.393C1181.81,396.86,1184.291,400.36,1189.12,400.36 M1202.767,401.201c0.044-1.24,0.221-2.081,0.443-2.701c2.082,1.195,4.961,1.727,7.221,1.727c3.411,0,5.494-1.063,5.494-3.588 c0-2.659-2.438-3.588-4.563-4.254l-2.038-0.62c-3.943-1.196-6.113-3.189-6.113-6.734c0-3.942,3.012-6.025,8.019-6.025 c2.569,0,4.962,0.354,7,1.151c-0.045,0.754-0.178,1.729-0.443,2.615c-2.038-0.754-4.298-1.108-6.468-1.108 c-3.412,0-5.14,1.108-5.14,3.278c0,2.481,1.728,3.235,4.475,4.165l2.083,0.708c3.5,1.197,6.202,2.881,6.202,6.735 c0,4.032-3.102,6.379-8.418,6.379C1207.418,402.929,1204.849,402.397,1202.767,401.201 M782.584,379.576 c-0.071-1.618-0.523-3.222-1.36-4.672l-7.387-12.794c-0.563-0.976-0.952-2.021-1.168-3.093l-0.31,0.534 c-1.828,3.167-1.828,7.067,0,10.234l5.909,10.235c1.828,3.166,1.828,7.067,0,10.234l-0.309,0.534 c-0.216-1.071-0.605-2.117-1.168-3.093l-5.41-9.37l-3.453-5.982c-0.563-0.976-0.953-2.021-1.169-3.093l-0.309,0.534 c-1.823,3.156-1.828,7.042-0.019,10.202l0,0l5.927,10.268c1.829,3.166,1.829,7.068,0,10.234l-0.309,0.534 c-0.216-1.071-0.604-2.117-1.168-3.093l-7.387-12.793c-0.99-1.717-1.443-3.648-1.359-5.561c-7.908,2.065-13.365,6.451-13.365,11.529 c0,7.066,10.561,12.794,23.588,12.794c13.028,0,23.589-5.728,23.589-12.794C795.948,386.029,790.491,381.642,782.584,379.576 M804.854,401.421c0.09-1.817,0.355-3.058,0.843-4.476c2.48,1.152,5.672,1.728,8.107,1.728c4.121,0,6.426-1.328,6.426-3.942 c0-2.571-1.684-3.767-5.85-5.583l-2.26-0.976c-4.164-1.816-7-4.165-7-8.861c0-5.051,3.5-8.286,10.678-8.286 c2.88,0,5.583,0.399,8.108,1.286c-0.133,1.771-0.442,3.146-0.886,4.43c-2.393-0.886-5.229-1.284-7.267-1.284 c-3.854,0-5.628,1.507-5.628,3.854c0,2.305,1.729,3.633,4.83,4.963l2.394,1.019c5.626,2.394,7.975,4.918,7.975,9.217 c0,5.095-3.854,8.595-11.387,8.595C810.304,403.104,807.335,402.572,804.854,401.421 M849.118,380.241v22.153h-4.475l-0.266-2.658 c-1.24,1.949-3.146,3.189-6.247,3.189c-5.849,0-9.749-4.253-9.749-11.696c0-7.799,4.166-12.229,12.362-12.229 C843.935,379.001,846.549,379.354,849.118,380.241 M844.244,397.345v-13.914c-1.019-0.177-2.126-0.265-3.5-0.265 c-5.051,0-7.398,3.101-7.398,8.063c0,4.52,1.815,7.709,6.158,7.709C841.408,398.938,842.96,398.318,844.244,397.345 M874.064,387.508v14.887h-4.873V388.35c0-3.5-1.152-5.184-6.026-5.184c-1.151,0-2.525,0.132-3.854,0.354v18.875h-4.874v-22.153 c3.102-0.753,6.514-1.24,8.862-1.24C871.451,379.001,874.064,382.146,874.064,387.508 M887.58,398.762 c1.418,0,2.747-0.266,3.811-0.664c-0.133,1.329-0.31,2.835-0.576,4.12c-1.329,0.532-2.747,0.708-4.121,0.708 c-4.741,0-7.753-2.17-7.753-7.576v-23.261c1.506-0.487,3.367-0.709,4.873-0.709v8.374h7.71c-0.089,1.506-0.222,2.88-0.442,4.164 h-7.268v10.855C883.813,397.653,885.231,398.762,887.58,398.762 M913.722,380.241v22.153h-4.475l-0.266-2.658 c-1.241,1.949-3.146,3.189-6.247,3.189c-5.849,0-9.747-4.253-9.747-11.696c0-7.799,4.164-12.229,12.361-12.229 C908.538,379.001,911.152,379.354,913.722,380.241 M908.849,397.345v-13.914c-1.019-0.177-2.126-0.265-3.5-0.265 c-5.052,0-7.399,3.101-7.399,8.063c0,4.52,1.816,7.709,6.159,7.709C906.013,398.938,907.563,398.318,908.849,397.345 M938.669,387.508v14.887h-4.873V388.35c0-3.5-1.152-5.184-6.026-5.184c-1.152,0-2.526,0.132-3.855,0.354v18.875h-4.874v-22.153 c3.103-0.753,6.514-1.24,8.861-1.24C936.055,379.001,938.669,382.146,938.669,387.508 M963.394,371.38v31.015h-4.475l-0.266-2.836 c-1.241,2.083-3.146,3.367-6.337,3.367c-5.848,0-9.747-4.253-9.747-11.696c0-7.799,4.166-12.229,12.361-12.229 c1.285,0,2.481,0.132,3.634,0.354v-7.311C960.071,371.513,961.798,371.38,963.394,371.38 M958.564,397.255v-13.646 c-1.285-0.266-2.614-0.442-3.898-0.442c-4.83,0-7.135,3.013-7.135,8.063c0,4.52,1.817,7.709,6.159,7.709 C955.64,398.938,957.235,398.274,958.564,397.255 M987.896,392.913h-15.551c0.62,3.942,2.923,5.849,7.266,5.849 c2.659,0,5.361-0.576,7.799-1.684c-0.178,1.285-0.443,2.969-0.754,4.431c-2.215,1.02-4.563,1.417-7.178,1.417 c-8.153,0-12.096-4.519-12.096-12.096c0-6.602,3.058-11.829,10.811-11.829c6.957,0,9.97,4.563,9.97,10.146 C988.163,390.521,988.074,391.628,987.896,392.913 M972.257,388.837h10.988c0-3.634-1.949-5.76-5.316-5.76 C974.472,383.077,972.654,385.07,972.257,388.837 M1004.957,379.178c0,1.462-0.177,3.235-0.444,4.165 c-1.15-0.134-2.303-0.177-3.677-0.177c-1.196,0-2.393,0.088-3.589,0.265v18.964h-4.874v-22.153c2.082-0.709,5.583-1.24,8.33-1.24 C1002.21,379.001,1003.893,379.045,1004.957,379.178\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n</svg>";

var Acionistas_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"77.398 993.793 465.035 46.294\" width=\"465.035\" height=\"46.294\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M1030.018,567.635h-14.118l-2.649,7.723h-3.383l11.013-31.435c1.142-0.274,2.649-0.411,4.021-0.411 l11.147,31.846h-3.381L1030.018,567.635z M1029.012,564.62l-6.03-17.772l-6.077,17.772H1029.012z M1037.786,563.66 c0-7.492,3.929-12.427,12.062-12.427c1.873,0,3.655,0.319,5.436,1.097c-0.044,0.959-0.181,1.873-0.364,2.786 c-1.736-0.775-3.563-1.051-5.071-1.051c-5.849,0-8.818,3.52-8.818,9.505c0,6.532,3.473,9.502,8.179,9.502 c2.102,0,4.25-0.639,6.031-1.827c-0.092,0.914-0.229,2.056-0.411,3.061c-1.646,1.144-3.702,1.601-5.895,1.601 C1042.217,575.906,1037.786,571.52,1037.786,563.66 M1059.26,545.979c0-1.233,0.914-2.148,2.147-2.148s2.102,0.915,2.102,2.148 c0,1.234-0.868,2.102-2.102,2.102S1059.26,547.213,1059.26,545.979 M1059.808,551.781h3.198v23.576h-3.198V551.781z M1067.804,563.706c0-7.721,4.203-12.473,11.285-12.473c7.401,0,11.058,5.163,11.058,12.107c0,7.813-4.113,12.565-11.331,12.565 C1071.505,575.906,1067.804,570.743,1067.804,563.706 M1086.902,563.57c0-5.985-2.741-9.458-7.904-9.458 c-5.346,0-7.95,3.745-7.95,9.365c0,6.123,2.741,9.55,7.95,9.55C1084.298,573.027,1086.902,569.326,1086.902,563.57 M1113.859,559.914v15.443h-3.198v-14.85c0-4.249-1.6-6.442-7.219-6.442c-1.646,0-3.564,0.229-5.3,0.641v20.651h-3.199v-22.845 c3.062-0.822,6.032-1.279,8.591-1.279C1111.255,551.233,1113.859,554.385,1113.859,559.914 M1119.251,545.979 c0-1.233,0.914-2.148,2.147-2.148s2.103,0.915,2.103,2.148c0,1.234-0.869,2.102-2.103,2.102S1119.251,547.213,1119.251,545.979 M1119.799,551.781h3.199v23.576h-3.199V551.781z M1128.07,574.123c0.045-1.278,0.228-2.146,0.456-2.787 c2.147,1.234,5.117,1.783,7.446,1.783c3.52,0,5.666-1.098,5.666-3.701c0-2.742-2.513-3.701-4.705-4.388l-2.103-0.638 c-4.066-1.234-6.305-3.291-6.305-6.945c0-4.066,3.106-6.214,8.27-6.214c2.649,0,5.117,0.365,7.219,1.188 c-0.045,0.777-0.182,1.782-0.456,2.695c-2.103-0.775-4.433-1.142-6.672-1.142c-3.517,0-5.3,1.142-5.3,3.381 c0,2.559,1.783,3.335,4.615,4.294l2.147,0.731c3.608,1.234,6.396,2.97,6.396,6.945c0,4.158-3.199,6.58-8.682,6.58 C1132.866,575.906,1130.217,575.357,1128.07,574.123 M1160.737,572.434c-0.092,0.867-0.229,1.872-0.412,2.739 c-1.37,0.504-2.695,0.733-4.11,0.733c-4.387,0-7.084-2.193-7.084-7.312v-24.626c0.961-0.32,2.24-0.503,3.199-0.503v8.453h8.271 c-0.047,1.097-0.137,2.01-0.32,2.878h-7.95v13.433c0,3.473,1.6,4.935,4.432,4.935 C1158.042,573.164,1159.504,572.891,1160.737,572.434 M1182.44,552.513v22.845h-2.97l-0.092-1.781 c-1.554,1.369-3.654,2.33-6.213,2.33c-6.488,0-10.51-4.341-10.51-12.154c0-8.041,3.976-12.519,12.154-12.519 C1177.643,551.233,1180.019,551.599,1182.44,552.513 M1173.439,573.256c2.376,0,4.294-0.869,5.803-2.33v-16.312 c-1.37-0.365-2.788-0.549-4.432-0.549c-6.123,0-8.91,3.564-8.91,9.687C1165.9,569.646,1168.46,573.256,1173.439,573.256 M1187.513,574.123c0.046-1.278,0.228-2.146,0.457-2.787c2.147,1.234,5.118,1.783,7.447,1.783c3.518,0,5.665-1.098,5.665-3.701 c0-2.742-2.513-3.701-4.706-4.388l-2.102-0.638c-4.065-1.234-6.305-3.291-6.305-6.945c0-4.066,3.106-6.214,8.269-6.214 c2.65,0,5.118,0.365,7.22,1.188c-0.047,0.777-0.183,1.782-0.457,2.695c-2.102-0.775-4.432-1.142-6.67-1.142 c-3.52,0-5.301,1.142-5.301,3.381c0,2.559,1.781,3.335,4.615,4.294l2.146,0.731c3.61,1.234,6.397,2.97,6.397,6.945 c0,4.158-3.199,6.58-8.681,6.58C1192.311,575.906,1189.66,575.357,1187.513,574.123 M774.02,551.822 c-0.073-1.669-0.54-3.323-1.402-4.818l-7.618-13.194c-0.58-1.006-0.98-2.085-1.205-3.19l-0.317,0.552 c-1.886,3.267-1.886,7.288,0,10.555l6.093,10.555c1.886,3.267,1.886,7.29,0,10.555l-0.317,0.551 c-0.224-1.104-0.624-2.184-1.205-3.189l-5.579-9.662l-3.562-6.171c-0.581-1.005-0.982-2.084-1.205-3.188l-0.318,0.551 c-1.88,3.254-1.885,7.262-0.019,10.521l-0.001,0.001l6.113,10.588c1.886,3.266,1.886,7.289,0,10.555l-0.318,0.551 c-0.223-1.105-0.624-2.185-1.205-3.189l-7.617-13.193c-1.021-1.771-1.488-3.762-1.402-5.735 c-8.155,2.131-13.783,6.654-13.783,11.893c0,7.287,10.892,13.193,24.326,13.193s24.325-5.906,24.325-13.193 C787.802,558.477,782.175,553.952,774.02,551.822 M796.986,574.349c0.092-1.874,0.365-3.152,0.868-4.615 c2.56,1.188,5.849,1.782,8.362,1.782c4.249,0,6.625-1.371,6.625-4.066c0-2.65-1.735-3.884-6.031-5.758l-2.33-1.005 c-4.294-1.874-7.22-4.296-7.22-9.14c0-5.209,3.61-8.545,11.013-8.545c2.97,0,5.757,0.412,8.361,1.326 c-0.138,1.828-0.457,3.244-0.914,4.568c-2.467-0.912-5.391-1.324-7.493-1.324c-3.976,0-5.803,1.553-5.803,3.975 c0,2.377,1.781,3.747,4.98,5.119l2.468,1.051c5.803,2.467,8.224,5.071,8.224,9.504c0,5.254-3.975,8.864-11.743,8.864 C802.607,576.085,799.545,575.537,796.986,574.349 M842.636,552.507v22.848h-4.615l-0.274-2.742c-1.279,2.01-3.244,3.29-6.442,3.29 c-6.032,0-10.053-4.387-10.053-12.063c0-8.043,4.296-12.611,12.748-12.611C837.289,551.229,839.985,551.594,842.636,552.507 M837.609,570.145v-14.348c-1.052-0.182-2.193-0.274-3.61-0.274c-5.208,0-7.63,3.199-7.63,8.317c0,4.66,1.873,7.95,6.351,7.95 C834.685,571.79,836.284,571.15,837.609,570.145 M868.362,560.001v15.354h-5.026v-14.485c0-3.609-1.188-5.347-6.215-5.347 c-1.188,0-2.604,0.137-3.975,0.366v19.466h-5.026v-22.848c3.198-0.776,6.718-1.278,9.139-1.278 C865.665,551.229,868.362,554.472,868.362,560.001 M882.299,571.607c1.462,0,2.834-0.274,3.931-0.686 c-0.137,1.371-0.319,2.924-0.595,4.249c-1.369,0.549-2.832,0.731-4.248,0.731c-4.891,0-7.997-2.239-7.997-7.814V544.1 c1.554-0.502,3.473-0.73,5.026-0.73v8.635h7.95c-0.092,1.554-0.229,2.971-0.456,4.296h-7.494v11.194 C878.416,570.465,879.878,571.607,882.299,571.607 M909.26,552.507v22.848h-4.616l-0.272-2.742c-1.28,2.01-3.245,3.29-6.443,3.29 c-6.032,0-10.052-4.387-10.052-12.063c0-8.043,4.294-12.611,12.748-12.611C903.913,551.229,906.61,551.594,909.26,552.507 M904.233,570.145v-14.348c-1.05-0.182-2.193-0.274-3.609-0.274c-5.209,0-7.631,3.199-7.631,8.317c0,4.66,1.873,7.95,6.352,7.95 C901.31,571.79,902.909,571.15,904.233,570.145 M934.986,560.001v15.354h-5.026v-14.485c0-3.609-1.188-5.347-6.214-5.347 c-1.188,0-2.604,0.137-3.976,0.366v19.466h-5.026v-22.848c3.198-0.776,6.716-1.278,9.138-1.278 C932.29,551.229,934.986,554.472,934.986,560.001 M960.484,543.369v31.985h-4.615l-0.274-2.924 c-1.279,2.146-3.243,3.472-6.534,3.472c-6.031,0-10.052-4.387-10.052-12.063c0-8.043,4.295-12.611,12.748-12.611 c1.326,0,2.559,0.137,3.747,0.365v-7.539C957.057,543.506,958.839,543.369,960.484,543.369 M955.504,570.053V555.98 c-1.325-0.274-2.696-0.458-4.021-0.458c-4.982,0-7.356,3.107-7.356,8.317c0,4.66,1.873,7.95,6.351,7.95 C952.487,571.79,954.133,571.104,955.504,570.053 M985.753,565.575h-16.037c0.64,4.067,3.016,6.032,7.493,6.032 c2.742,0,5.529-0.595,8.042-1.736c-0.183,1.325-0.456,3.062-0.776,4.569c-2.285,1.05-4.707,1.462-7.401,1.462 c-8.408,0-12.477-4.661-12.477-12.474c0-6.81,3.154-12.2,11.15-12.2c7.174,0,10.281,4.706,10.281,10.463 C986.028,563.108,985.937,564.251,985.753,565.575 M969.623,561.372h11.332c0-3.747-2.01-5.94-5.481-5.94 C971.909,555.432,970.035,557.487,969.623,561.372 M1003.347,551.41c0,1.508-0.182,3.336-0.457,4.296 c-1.188-0.138-2.376-0.184-3.792-0.184c-1.234,0-2.468,0.093-3.702,0.274v19.558h-5.025v-22.848c2.147-0.731,5.757-1.278,8.59-1.278 C1000.514,551.229,1002.25,551.273,1003.347,551.41\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n</svg>";

var AssetManagement_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"781.804 336.339 636.131 53.134\" width=\"636.131\" height=\"53.134\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M1729.434-90.512h-13.854l-2.6,7.576h-3.318l10.806-30.846c1.121-0.269,2.601-0.403,3.946-0.403 l10.938,31.249h-3.317L1729.434-90.512z M1728.447-93.472l-5.919-17.44l-5.962,17.44H1728.447z M1737.325-84.146 c0.045-1.255,0.225-2.107,0.448-2.735c2.107,1.211,5.022,1.749,7.309,1.749c3.452,0,5.559-1.076,5.559-3.632 c0-2.689-2.465-3.632-4.617-4.304l-2.063-0.628c-3.99-1.211-6.188-3.228-6.188-6.814c0-3.99,3.049-6.098,8.115-6.098 c2.601,0,5.022,0.358,7.083,1.165c-0.044,0.762-0.178,1.749-0.447,2.646c-2.063-0.763-4.349-1.121-6.546-1.121 c-3.452,0-5.2,1.121-5.2,3.317c0,2.511,1.748,3.273,4.528,4.216l2.106,0.716c3.542,1.211,6.277,2.915,6.277,6.815 c0,4.08-3.14,6.456-8.52,6.456C1742.033-82.397,1739.433-82.936,1737.325-84.146 M1756.918-84.146 c0.046-1.255,0.225-2.107,0.449-2.735c2.106,1.211,5.021,1.749,7.309,1.749c3.451,0,5.559-1.076,5.559-3.632 c0-2.689-2.466-3.632-4.618-4.304l-2.062-0.628c-3.991-1.211-6.188-3.228-6.188-6.814c0-3.99,3.048-6.098,8.115-6.098 c2.601,0,5.021,0.358,7.084,1.165c-0.045,0.762-0.18,1.749-0.448,2.646c-2.063-0.763-4.35-1.121-6.547-1.121 c-3.451,0-5.2,1.121-5.2,3.317c0,2.511,1.749,3.273,4.528,4.216l2.107,0.716c3.541,1.211,6.276,2.915,6.276,6.815 c0,4.08-3.138,6.456-8.518,6.456C1761.627-82.397,1759.025-82.936,1756.918-84.146 M1795.97-93.426h-16.588 c0.402,5.379,3.228,8.249,8.338,8.249c2.422,0,5.112-0.538,7.533-1.928c-0.09,0.807-0.27,2.017-0.494,3.003 c-2.241,1.301-4.572,1.704-7.128,1.704c-7.487,0-11.433-4.527-11.433-12.239c0-6.681,3.004-11.971,10.356-11.971 c6.725,0,9.595,4.618,9.595,10.401C1796.149-95.265,1796.104-94.323,1795.97-93.426 M1779.382-96.251h13.629v-0.18 c0-4.438-2.152-7.442-6.59-7.442C1781.937-103.873,1779.74-100.914,1779.382-96.251 M1812.2-85.805 c-0.09,0.853-0.224,1.839-0.404,2.69c-1.345,0.493-2.645,0.717-4.034,0.717c-4.304,0-6.95-2.152-6.95-7.173v-24.166 c0.942-0.313,2.197-0.494,3.139-0.494v8.295h8.115c-0.045,1.076-0.134,1.974-0.313,2.824h-7.802v13.182 c0,3.407,1.569,4.842,4.35,4.842C1809.555-85.088,1810.989-85.356,1812.2-85.805 M1856.139-82.936h-3.273l-0.942-14.033 c-0.269-4.304-0.492-8.474-0.627-12.554c-1.658,4.574-3.497,9.37-5.245,13.675l-5.201,12.912h-2.377l-5.559-14.123 c-1.748-4.304-3.363-8.518-4.663-12.418c-0.18,3.9-0.493,8.652-0.763,12.777l-1.075,13.764h-3.229l2.421-30.846 c1.032-0.314,2.87-0.493,3.856-0.493l10.268,26.407l10.132-25.914c1.165-0.403,2.869-0.493,3.946-0.493L1856.139-82.936z M1879.991-105.353v22.417h-2.915l-0.089-1.748c-1.524,1.345-3.587,2.286-6.098,2.286c-6.366,0-10.312-4.259-10.312-11.926 c0-7.891,3.9-12.284,11.927-12.284C1875.283-106.607,1877.614-106.249,1879.991-105.353 M1871.158-84.997 c2.332,0,4.215-0.853,5.694-2.288v-16.005c-1.345-0.358-2.734-0.538-4.348-0.538c-6.009,0-8.744,3.498-8.744,9.505 C1863.761-88.539,1866.272-84.997,1871.158-84.997 M1904.65-98.09v15.154h-3.138v-14.57c0-4.17-1.57-6.322-7.084-6.322 c-1.614,0-3.497,0.224-5.201,0.628v20.265h-3.139v-22.417c3.004-0.807,5.919-1.255,8.43-1.255 C1902.096-106.607,1904.65-103.514,1904.65-98.09 M1928.683-105.353v22.417h-2.914l-0.091-1.748 c-1.522,1.345-3.586,2.286-6.097,2.286c-6.366,0-10.312-4.259-10.312-11.926c0-7.891,3.9-12.284,11.927-12.284 C1923.976-106.607,1926.307-106.249,1928.683-105.353 M1919.851-84.997c2.332,0,4.214-0.853,5.693-2.288v-16.005 c-1.345-0.358-2.734-0.538-4.348-0.538c-6.009,0-8.744,3.498-8.744,9.505C1912.452-88.539,1914.964-84.997,1919.851-84.997 M1952.984-105.353v21.564c0,6.233-3.274,10.089-10.762,10.089c-2.286,0-4.617-0.404-6.725-1.3c0-0.763,0.135-1.974,0.313-2.78 c2.063,0.986,4.573,1.391,6.411,1.391c4.843,0,7.622-1.973,7.622-6.994v-1.211c-1.479,1.3-3.497,2.196-5.962,2.196 c-6.367,0-10.313-4.259-10.313-11.926c0-7.891,3.901-12.284,11.926-12.284C1948.275-106.607,1950.606-106.249,1952.984-105.353 M1949.845-87.285v-16.005c-1.345-0.358-2.734-0.538-4.349-0.538c-6.008,0-8.743,3.498-8.743,9.505c0,5.784,2.512,9.326,7.397,9.326 C1946.482-84.997,1948.366-85.85,1949.845-87.285 M1976.567-93.426h-16.589c0.403,5.379,3.229,8.249,8.339,8.249 c2.422,0,5.112-0.538,7.533-1.928c-0.09,0.807-0.27,2.017-0.493,3.003c-2.242,1.301-4.573,1.704-7.129,1.704 c-7.488,0-11.434-4.527-11.434-12.239c0-6.681,3.005-11.971,10.356-11.971c6.727,0,9.596,4.618,9.596,10.401 C1976.747-95.265,1976.702-94.323,1976.567-93.426 M1959.979-96.251h13.63v-0.18c0-4.438-2.151-7.442-6.591-7.442 C1962.534-103.873,1960.337-100.914,1959.979-96.251 M2014.856-98.09v15.154h-3.138v-14.66c0-4.08-1.974-6.232-6.592-6.232 c-2.062,0-4.079,0.492-5.963,1.301c0.493,1.165,0.763,2.646,0.763,4.438v15.154h-3.139v-14.75c0-4.35-1.793-6.143-6.591-6.143 c-1.703,0-3.631,0.224-5.38,0.628v20.265h-3.138v-22.417c3.003-0.807,5.963-1.255,8.832-1.255c3.139,0,5.47,0.583,7.038,1.883 c2.467-1.166,5.111-1.883,7.847-1.883C2012.166-106.607,2014.856-103.514,2014.856-98.09 M2039.068-93.426h-16.589 c0.404,5.379,3.229,8.249,8.34,8.249c2.421,0,5.11-0.538,7.532-1.928c-0.091,0.807-0.27,2.017-0.493,3.003 c-2.243,1.301-4.574,1.704-7.129,1.704c-7.487,0-11.433-4.527-11.433-12.239c0-6.681,3.004-11.971,10.356-11.971 c6.725,0,9.595,4.618,9.595,10.401C2039.248-95.265,2039.203-94.323,2039.068-93.426 M2022.479-96.251h13.63v-0.18 c0-4.438-2.152-7.442-6.59-7.442C2025.035-103.873,2022.839-100.914,2022.479-96.251 M2062.741-98.09v15.154h-3.139v-14.57 c0-4.17-1.569-6.322-7.084-6.322c-1.614,0-3.497,0.224-5.2,0.628v20.265h-3.139v-22.417c3.005-0.807,5.919-1.255,8.43-1.255 C2060.186-106.607,2062.741-103.514,2062.741-98.09 M2079.689-85.805c-0.09,0.853-0.225,1.839-0.403,2.69 c-1.346,0.493-2.646,0.717-4.035,0.717c-4.305,0-6.949-2.152-6.949-7.173v-24.166c0.941-0.313,2.195-0.494,3.138-0.494v8.295h8.115 c-0.044,1.076-0.134,1.974-0.313,2.824h-7.802v13.182c0,3.407,1.569,4.842,4.35,4.842 C2077.044-85.088,2078.479-85.356,2079.689-85.805 M1477.78-106.028c-0.071-1.637-0.529-3.26-1.377-4.728l-7.475-12.947 c-0.57-0.987-0.964-2.046-1.182-3.131l-0.313,0.542c-1.851,3.204-1.851,7.151,0,10.356l5.979,10.357c1.85,3.205,1.85,7.153,0,10.357 l-0.313,0.541c-0.219-1.085-0.611-2.143-1.183-3.13l-5.475-9.482l-3.495-6.055c-0.569-0.987-0.963-2.044-1.183-3.13l-0.312,0.541 c-1.845,3.193-1.851,7.126-0.019,10.325l0,0l5.998,10.39c1.85,3.204,1.85,7.152,0,10.357l-0.313,0.54 c-0.219-1.084-0.613-2.143-1.183-3.13l-7.475-12.946c-1.003-1.736-1.461-3.691-1.377-5.628c-8.002,2.091-13.524,6.53-13.524,11.67 c0,7.149,10.688,12.946,23.871,12.946s23.871-5.797,23.871-12.946C1491.306-99.497,1485.782-103.938,1477.78-106.028 M1500.317-83.923c0.09-1.839,0.358-3.093,0.852-4.528c2.512,1.166,5.74,1.749,8.206,1.749c4.17,0,6.501-1.345,6.501-3.991 c0-2.601-1.703-3.811-5.919-5.649l-2.286-0.986c-4.215-1.839-7.085-4.215-7.085-8.968c0-5.111,3.543-8.385,10.807-8.385 c2.914,0,5.65,0.403,8.205,1.3c-0.134,1.794-0.447,3.184-0.896,4.484c-2.422-0.896-5.291-1.301-7.354-1.301 c-3.901,0-5.694,1.524-5.694,3.901c0,2.332,1.749,3.676,4.888,5.021l2.422,1.032c5.693,2.421,8.07,4.977,8.07,9.325 c0,5.156-3.901,8.7-11.524,8.7C1505.833-82.218,1502.829-82.756,1500.317-83.923 M1545.112-105.355v22.419h-4.528l-0.27-2.689 c-1.255,1.973-3.184,3.228-6.322,3.228c-5.919,0-9.864-4.304-9.864-11.837c0-7.892,4.215-12.375,12.51-12.375 C1539.866-106.61,1542.512-106.252,1545.112-105.355 M1540.18-88.047v-14.08c-1.031-0.18-2.151-0.27-3.542-0.27 c-5.112,0-7.487,3.14-7.487,8.161c0,4.574,1.837,7.802,6.231,7.802C1537.311-86.434,1538.88-87.061,1540.18-88.047 M1570.356-98.002 v15.065h-4.932v-14.213c0-3.542-1.166-5.247-6.098-5.247c-1.166,0-2.556,0.135-3.9,0.359v19.101h-4.933v-22.419 c3.138-0.763,6.592-1.255,8.967-1.255C1567.711-106.61,1570.356-103.428,1570.356-98.002 M1584.034-86.612 c1.435,0,2.78-0.27,3.856-0.673c-0.136,1.346-0.313,2.87-0.584,4.17c-1.345,0.537-2.779,0.717-4.169,0.717 c-4.798,0-7.847-2.197-7.847-7.668v-23.54c1.524-0.492,3.407-0.717,4.932-0.717v8.475h7.802c-0.09,1.525-0.224,2.915-0.447,4.215 h-7.354v10.985C1580.223-87.734,1581.658-86.612,1584.034-86.612 M1610.489-105.355v22.419h-4.528l-0.269-2.689 c-1.256,1.973-3.184,3.228-6.322,3.228c-5.919,0-9.864-4.304-9.864-11.837c0-7.892,4.215-12.375,12.51-12.375 C1605.243-106.61,1607.889-106.252,1610.489-105.355 M1605.558-88.047v-14.08c-1.031-0.18-2.152-0.27-3.542-0.27 c-5.112,0-7.488,3.14-7.488,8.161c0,4.574,1.839,7.802,6.232,7.802C1602.688-86.434,1604.257-87.061,1605.558-88.047 M1635.735-98.002v15.065h-4.933v-14.213c0-3.542-1.166-5.247-6.099-5.247c-1.165,0-2.556,0.135-3.9,0.359v19.101h-4.933v-22.419 c3.14-0.763,6.592-1.255,8.968-1.255C1633.089-106.61,1635.735-103.428,1635.735-98.002 M1660.756-114.323v31.387h-4.528 l-0.27-2.869c-1.256,2.107-3.184,3.407-6.412,3.407c-5.918,0-9.864-4.304-9.864-11.837c0-7.892,4.216-12.375,12.51-12.375 c1.301,0,2.511,0.134,3.677,0.358v-7.398C1657.393-114.188,1659.141-114.323,1660.756-114.323 M1655.868-88.138v-13.81 c-1.3-0.27-2.645-0.449-3.944-0.449c-4.889,0-7.22,3.05-7.22,8.161c0,4.574,1.838,7.802,6.232,7.802 C1652.909-86.434,1654.523-87.106,1655.868-88.138 M1685.552-92.531h-15.737c0.628,3.99,2.959,5.919,7.353,5.919 c2.691,0,5.426-0.584,7.893-1.705c-0.18,1.302-0.448,3.005-0.763,4.484c-2.241,1.031-4.618,1.435-7.264,1.435 c-8.25,0-12.241-4.573-12.241-12.24c0-6.681,3.095-11.972,10.941-11.972c7.039,0,10.089,4.618,10.089,10.268 C1685.822-94.953,1685.731-93.832,1685.552-92.531 M1669.724-96.657h11.121c0-3.676-1.973-5.829-5.381-5.829 C1671.967-102.486,1670.128-100.468,1669.724-96.657 M1702.815-106.432c0,1.479-0.178,3.273-0.447,4.215 c-1.166-0.135-2.332-0.18-3.722-0.18c-1.211,0-2.422,0.09-3.632,0.27v19.19h-4.933v-22.419c2.108-0.717,5.65-1.255,8.43-1.255 C1700.036-106.61,1701.739-106.566,1702.815-106.432\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n</svg>";

var CIB_Compact_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"70.873 -200.543 434.255 76.999\" width=\"434.255\" height=\"76.999\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M1145.466-607.347c-1.574,0-3.399,0.28-5.284,0.786v14.055h1.968v-12.704 c1.068-0.254,2.25-0.395,3.259-0.395c3.46,0,4.442,1.349,4.442,3.964v9.135h1.968v-9.502 C1151.818-605.408,1150.216-607.347,1145.466-607.347 M831.454-607.347c-1.77,0-3.456,0.31-4.918,0.786v19.449h1.968v-5.535 c0.843,0.31,1.827,0.477,3.063,0.477c4.665,0,7.168-2.811,7.168-7.701C838.735-604.678,836.402-607.347,831.454-607.347 M831.454-593.855c-1.012,0-2.023-0.141-2.95-0.45v-10.962c0.871-0.196,1.855-0.337,2.839-0.337c3.738,0,5.396,2.164,5.396,5.847 C836.739-595.964,834.911-593.855,831.454-593.855 M845.429-636.239v13.155h4.564v-13.944c0-5.022-2.447-7.97-10.085-7.97 c-2.2,0-5.396,0.458-8.299,1.162v20.752h4.564v-17.681c1.245-0.208,2.531-0.333,3.61-0.333 C844.349-641.098,845.429-639.52,845.429-636.239 M857.624-606.561v14.055h1.967v-12.789c0.927-0.197,1.938-0.31,2.754-0.31 c0.787,0,1.518,0.029,2.164,0.112c0.111-0.364,0.197-1.095,0.197-1.686c-0.618-0.086-1.49-0.113-2.417-0.113 C860.771-607.291,858.858-606.981,857.624-606.561 M1135.376-611.9c-0.758,0-1.321,0.563-1.321,1.321 c0,0.759,0.563,1.292,1.321,1.292s1.293-0.533,1.293-1.292C1136.669-611.337,1136.134-611.9,1135.376-611.9 M1134.392-592.506h1.969 v-14.504h-1.969V-592.506z M865.684-623.251c0.249-1.202,0.416-2.614,0.54-3.858c-0.997,0.373-2.24,0.622-3.569,0.622 c-2.2,0-3.526-1.038-3.526-3.735v-10.17h6.805c0.207-1.203,0.331-2.489,0.414-3.9h-7.219v-7.844c-1.414,0-3.156,0.207-4.567,0.665 v21.788c0,5.065,2.822,7.099,7.263,7.099C863.11-622.585,864.438-622.752,865.684-623.251 M847.87-607.347 c-4.356,0-6.943,2.923-6.943,7.673c0,4.329,2.277,7.504,6.773,7.504c4.442,0,6.972-2.923,6.972-7.729 C854.672-604.17,852.422-607.347,847.87-607.347 M847.813-593.94c-3.205,0-4.891-2.108-4.891-5.875c0-3.456,1.603-5.76,4.891-5.76 c3.176,0,4.862,2.135,4.862,5.817C852.676-596.216,851.073-593.94,847.813-593.94 M764.303-644.458 c-0.066-1.517-0.492-3.019-1.275-4.377l-6.919-11.985c-0.527-0.912-0.891-1.892-1.096-2.896l-0.287,0.5 c-1.713,2.966-1.713,6.621,0,9.588l5.534,9.587c1.713,2.966,1.713,6.62,0,9.587l-0.29,0.501c-0.2-1.004-0.565-1.983-1.095-2.898 l-5.065-8.777l-3.237-5.602c-0.525-0.915-0.891-1.895-1.094-2.898l-0.289,0.501c-1.705,2.955-1.712,6.596-0.016,9.558h-0.003 l5.555,9.616c1.711,2.966,1.711,6.62,0,9.586l-0.291,0.502c-0.201-1.005-0.566-1.984-1.094-2.896l-6.918-11.985 c-0.929-1.605-1.353-3.416-1.275-5.209c-7.407,1.936-12.52,6.045-12.52,10.803c0,6.617,9.893,11.981,22.098,11.981 c12.201,0,22.094-5.364,22.094-11.981C776.819-638.413,771.709-642.522,764.303-644.458 M793.548-626.571 c-2.283,0-5.273-0.538-7.597-1.618c-0.456,1.328-0.706,2.491-0.789,4.193c2.325,1.078,5.105,1.576,8.51,1.576 c7.055,0,10.666-3.278,10.666-8.052c0-4.025-2.2-6.392-7.47-8.633l-2.243-0.953c-2.904-1.247-4.524-2.491-4.524-4.649 c0-2.2,1.662-3.611,5.273-3.611c1.909,0,4.563,0.373,6.806,1.203c0.415-1.203,0.704-2.49,0.831-4.15 c-2.367-0.83-4.898-1.202-7.597-1.202c-6.725,0-10.001,3.029-10.001,7.761c0,4.398,2.654,6.597,6.557,8.301l2.116,0.912 c3.901,1.702,5.478,2.822,5.478,5.23C799.563-627.814,797.406-626.571,793.548-626.571 M865.604-599.645 c0,4.806,2.476,7.475,6.464,7.475c1.575,0,2.869-0.59,3.825-1.433l0.056,1.097h1.825v-14.055c-1.489-0.562-2.95-0.786-4.692-0.786 C868.051-607.347,865.604-604.593,865.604-599.645 M875.807-595.232c-0.925,0.899-2.107,1.433-3.567,1.433 c-3.063,0-4.639-2.22-4.639-5.845c0-3.768,1.714-5.96,5.481-5.96c1.011,0,1.883,0.112,2.725,0.337V-595.232z M876.85-622.585 c2.905,0,4.691-1.162,5.852-2.989l0.249,2.49h4.191v-20.752c-2.407-0.83-4.855-1.162-7.845-1.162 c-7.677,0-11.579,4.151-11.579,11.455C867.718-626.571,871.371-622.585,876.85-622.585 M879.297-641.098 c1.288,0,2.324,0.084,3.28,0.251v13.032c-1.203,0.912-2.656,1.492-4.441,1.492c-4.066,0-5.769-2.988-5.769-7.221 C872.367-638.19,874.565-641.098,879.297-641.098 M965.381-640.847c1.122-0.167,2.242-0.251,3.362-0.251 c1.287,0,2.365,0.042,3.445,0.166c0.248-0.871,0.415-2.531,0.415-3.899c-0.997-0.125-2.573-0.167-3.984-0.167 c-2.573,0-5.853,0.498-7.803,1.162v20.752h4.564V-640.847z M807.086-607.347c-4.355,0-6.942,2.923-6.942,7.673 c0,4.329,2.277,7.504,6.775,7.504c4.44,0,6.969-2.923,6.969-7.729C813.888-604.17,811.64-607.347,807.086-607.347 M807.03-593.94 c-3.204,0-4.891-2.108-4.891-5.875c0-3.456,1.602-5.76,4.891-5.76c3.175,0,4.861,2.135,4.861,5.817 C811.892-596.216,810.292-593.94,807.03-593.94 M822.186-625.574l0.249,2.49h4.191v-20.752c-2.406-0.83-4.855-1.162-7.843-1.162 c-7.681,0-11.581,4.151-11.581,11.455c0,6.972,3.652,10.958,9.13,10.958C819.237-622.585,821.023-623.747,822.186-625.574 M811.852-633.543c0-4.647,2.2-7.555,6.932-7.555c1.285,0,2.323,0.084,3.276,0.251v13.032c-1.202,0.912-2.654,1.492-4.44,1.492 C813.554-626.322,811.852-629.311,811.852-633.543 M816.84-606.561v14.055h1.968v-12.789c0.927-0.197,1.94-0.31,2.754-0.31 c0.786,0,1.517,0.029,2.163,0.112c0.113-0.364,0.198-1.095,0.198-1.686c-0.619-0.086-1.49-0.113-2.418-0.113 C819.986-607.291,818.075-606.981,816.84-606.561 M794.467-610.466c1.377,0,2.727,0.252,3.85,0.673 c0.169-0.504,0.31-1.208,0.337-1.883c-1.207-0.477-2.726-0.673-4.187-0.673c-5.904,0-9.305,3.708-9.305,10.117 c0,6.099,3.233,10.118,9.106,10.118c1.548,0,2.812-0.196,3.908-0.589c0.167-0.732,0.28-1.407,0.309-2.081 c-1.125,0.506-2.613,0.787-3.963,0.787c-4.44,0-7.309-3.064-7.309-8.32C787.214-607.656,790.082-610.466,794.467-610.466 M1162.189-607.347c-5.03,0-7.477,2.754-7.477,7.702c0,4.806,2.474,7.475,6.464,7.475c1.548,0,2.813-0.562,3.738-1.377v0.76 c0,3.148-1.742,4.385-4.777,4.385c-1.151,0-2.727-0.254-4.02-0.871c-0.111,0.506-0.197,1.264-0.197,1.742 c1.322,0.562,2.784,0.814,4.217,0.814c4.694,0,6.746-2.418,6.746-6.324v-13.52C1165.394-607.122,1163.932-607.347,1162.189-607.347 M1164.915-595.232c-0.925,0.899-2.107,1.433-3.567,1.433c-3.063,0-4.639-2.22-4.639-5.845c0-3.768,1.714-5.96,5.48-5.96 c1.012,0,1.884,0.112,2.726,0.337V-595.232z M933.821-592.506h1.968v-19.619c-0.619,0-1.462,0.168-1.968,0.309V-592.506z M989.107-600.488l-1.321-0.451c-1.742-0.59-2.839-1.068-2.839-2.64c0-1.379,1.097-2.081,3.261-2.081 c1.378,0,2.811,0.225,4.104,0.702c0.167-0.562,0.254-1.181,0.281-1.658c-1.293-0.506-2.811-0.73-4.439-0.73 c-3.179,0-5.09,1.321-5.09,3.821c0,2.25,1.378,3.514,3.879,4.273l1.294,0.394c1.35,0.421,2.894,1.012,2.894,2.698 c0,1.601-1.321,2.277-3.484,2.277c-1.433,0-3.26-0.339-4.582-1.098c-0.141,0.394-0.252,0.928-0.279,1.715 c1.321,0.76,2.95,1.096,4.917,1.096c3.373,0,5.341-1.488,5.341-4.046C993.042-598.662,991.327-599.729,989.107-600.488 M997.708-596.891v-8.264h4.89c0.112-0.534,0.17-1.096,0.198-1.771h-5.088v-5.199c-0.591,0-1.377,0.111-1.968,0.309v15.15 c0,3.148,1.659,4.496,4.357,4.496c0.871,0,1.687-0.14,2.527-0.449c0.115-0.533,0.198-1.152,0.254-1.687 c-0.758,0.28-1.658,0.45-2.444,0.45C998.692-593.855,997.708-594.756,997.708-596.891 M1020.137-607.347 c-1.714,0-3.373,0.45-4.92,1.181c-0.982-0.815-2.444-1.181-4.411-1.181c-1.8,0-3.654,0.28-5.537,0.786v14.055h1.968v-12.704 c1.095-0.254,2.305-0.395,3.373-0.395c3.008,0,4.131,1.125,4.131,3.851v9.248h1.968v-9.502c0-1.123-0.167-2.051-0.479-2.781 c1.181-0.506,2.446-0.815,3.737-0.815c2.896,0,4.134,1.349,4.134,3.908v9.19h1.967v-9.502 C1026.067-605.408,1024.382-607.347,1020.137-607.347 M960.606-594.418l-4.552-12.592h-2.139l5.425,14.504h2.446l5.367-14.504 h-2.107L960.606-594.418z M974.38-607.347c-4.609,0-6.492,3.315-6.492,7.505c0,4.834,2.473,7.672,7.166,7.672 c1.604,0,3.063-0.253,4.469-1.068c0.141-0.617,0.254-1.377,0.31-1.883c-1.518,0.873-3.204,1.209-4.722,1.209 c-3.203,0-4.975-1.798-5.227-5.171h10.398c0.084-0.562,0.113-1.153,0.113-1.742C980.396-604.45,978.596-607.347,974.38-607.347 M978.427-600.854h-8.543c0.223-2.923,1.6-4.778,4.41-4.778c2.784,0,4.133,1.883,4.133,4.667V-600.854z M1049.733-607.347 c-1.573,0-3.4,0.28-5.284,0.786v14.055h1.969v-12.704c1.067-0.254,2.248-0.395,3.26-0.395c3.458,0,4.442,1.349,4.442,3.964v9.135 h1.965v-9.502C1056.085-605.408,1054.483-607.347,1049.733-607.347 M945.906-607.347c-1.573,0-3.4,0.28-5.284,0.786v14.055h1.969 v-12.704c1.067-0.254,2.248-0.395,3.26-0.395c3.458,0,4.442,1.349,4.442,3.964v9.135h1.965v-9.502 C952.258-605.408,950.656-607.347,945.906-607.347 M1061.538-596.891v-8.264h4.891c0.112-0.534,0.171-1.096,0.197-1.771h-5.088 v-5.199c-0.589,0-1.375,0.111-1.966,0.309v15.15c0,3.148,1.657,4.496,4.355,4.496c0.871,0,1.687-0.14,2.529-0.449 c0.113-0.533,0.198-1.152,0.254-1.687c-0.758,0.28-1.659,0.45-2.444,0.45C1062.522-593.855,1061.538-594.756,1061.538-596.891 M1083.35-602.652c2.107-0.703,3.288-2.531,3.288-4.498c0-3.146-2.081-5.115-7.308-5.115c-1.573,0-3.23,0.141-4.723,0.394v19.366 h5.65c5.088,0,7.278-2.023,7.278-5.537C1087.536-600.404,1085.937-602.176,1083.35-602.652 M1076.576-610.27 c0.983-0.113,1.883-0.17,2.781-0.17c4.161,0,5.285,1.49,5.285,3.514c0,2.025-1.518,3.458-4.555,3.458h-3.512V-610.27z M1080.062-594.333h-3.485v-7.308h3.654c3.54,0,5.282,1.404,5.282,3.683C1085.513-595.514,1083.8-594.333,1080.062-594.333 M1035.343-607.347c-4.607,0-6.492,3.315-6.492,7.505c0,4.834,2.473,7.672,7.167,7.672c1.603,0,3.063-0.253,4.47-1.068 c0.141-0.617,0.252-1.377,0.308-1.883c-1.517,0.873-3.202,1.209-4.722,1.209c-3.203,0-4.975-1.798-5.227-5.171h10.398 c0.085-0.562,0.113-1.153,0.113-1.742C1041.358-604.45,1039.561-607.347,1035.343-607.347 M1039.391-600.854h-8.544 c0.225-2.923,1.602-4.778,4.412-4.778c2.782,0,4.132,1.883,4.132,4.667V-600.854z M910.511-623.084v-13.944 c0-5.022-2.449-7.97-10.086-7.97c-2.2,0-5.396,0.458-8.301,1.162v20.752h4.565v-17.681c1.245-0.208,2.531-0.333,3.609-0.333 c4.566,0,5.646,1.578,5.646,4.858v13.155H910.511z M1121.043-592.506h1.965v-19.731c-0.646,0-1.318,0.085-1.965,0.28V-592.506z M896.13-607.347c-4.609,0-6.494,3.315-6.494,7.505c0,4.834,2.476,7.672,7.17,7.672c1.6,0,3.063-0.253,4.468-1.068 c0.14-0.617,0.253-1.377,0.309-1.883c-1.519,0.873-3.204,1.209-4.721,1.209c-3.206,0-4.976-1.798-5.229-5.171h10.4 c0.083-0.562,0.111-1.153,0.111-1.742C902.144-604.45,900.346-607.347,896.13-607.347 M900.177-600.854h-8.545 c0.226-2.923,1.603-4.778,4.412-4.778c2.784,0,4.133,1.883,4.133,4.667V-600.854z M883.397-596.891v-8.264h4.889 c0.113-0.534,0.171-1.096,0.198-1.771h-5.087v-5.199c-0.591,0-1.377,0.111-1.968,0.309v15.15c0,3.148,1.658,4.496,4.356,4.496 c0.871,0,1.687-0.14,2.528-0.449c0.113-0.533,0.198-1.152,0.254-1.687c-0.759,0.28-1.659,0.45-2.444,0.45 C884.382-593.855,883.397-594.756,883.397-596.891 M1132.172-607.01h-2.389l-6.042,6.55v0.196l6.435,7.758h2.446l-6.579-7.871 L1132.172-607.01z M1089.758-599.645c0,4.806,2.473,7.475,6.465,7.475c1.575,0,2.866-0.59,3.821-1.433l0.058,1.097h1.827v-14.055 c-1.49-0.562-2.952-0.786-4.694-0.786C1092.202-607.347,1089.758-604.593,1089.758-599.645 M1099.96-595.232 c-0.928,0.899-2.107,1.433-3.567,1.433c-3.063,0-4.639-2.22-4.639-5.845c0-3.768,1.714-5.96,5.48-5.96 c1.012,0,1.884,0.112,2.726,0.337V-595.232z M925.333-604.143c-0.563,0-1.182,0.028-1.885,0.225 c-0.281,2.305-0.843,4.609-1.881,6.437l-6.521-6.015c-1.35-1.266-2.248-2.614-2.248-3.962c0-1.912,1.234-3.121,4.158-3.121 c1.574,0,2.951,0.31,4.272,0.871c0.168-0.421,0.339-1.04,0.365-1.77c-1.63-0.621-3.177-0.871-4.863-0.871 c-3.962,0-5.984,2.023-5.984,4.806c0,1.798,0.786,3.093,1.994,4.355c-2.839,0.985-4.244,2.979-4.244,5.481 c0,3.569,2.838,5.593,6.857,5.593c2.812,0,4.919-1.039,6.466-2.67l2.502,2.277h2.613l-3.99-3.71 C924.404-598.464,925.135-601.36,925.333-604.143 M915.383-593.883c-3.121,0-4.862-1.66-4.862-3.992c0-2.052,1.152-3.43,3.541-4.047 l6.437,5.902C919.262-594.698,917.631-593.883,915.383-593.883 M955.46-623.914c0.291-1.369,0.542-2.947,0.706-4.15 c-2.282,1.037-4.813,1.577-7.303,1.577c-4.069,0-6.227-1.784-6.808-5.479h14.568c0.164-1.204,0.247-2.24,0.247-3.528 c0-5.229-2.822-9.504-9.337-9.504c-7.265,0-10.127,4.896-10.127,11.082c0,7.096,3.693,11.331,11.329,11.331 C951.187-622.585,953.386-622.96,955.46-623.914 M947.285-641.18c3.154,0,4.98,1.993,4.98,5.396h-10.294 C942.346-639.313,944.048-641.18,947.285-641.18 M929.146-644.666c-1.078-0.208-2.197-0.332-3.402-0.332 c-7.679,0-11.579,4.151-11.579,11.455c0,6.972,3.652,10.958,9.13,10.958c2.989,0,4.773-1.204,5.935-3.155l0.251,2.656h4.191v-29.053 c-1.496,0-3.114,0.123-4.525,0.622V-644.666z M929.146-627.898c-1.244,0.955-2.738,1.576-4.564,1.576 c-4.066,0-5.77-2.988-5.77-7.221c0-4.731,2.158-7.555,6.683-7.555c1.203,0,2.449,0.166,3.651,0.416V-627.898z M1111.035-607.347 c-1.575,0-3.4,0.28-5.285,0.786v14.055h1.968v-12.704c1.068-0.254,2.25-0.395,3.262-0.395c3.457,0,4.44,1.349,4.44,3.964v9.135 h1.968v-9.502C1117.388-605.408,1115.785-607.347,1111.035-607.347\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n</svg>";

var ConsumerBank_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"90.549 501.5 565.328 45.612\" width=\"565.328\" height=\"45.612\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M898.861,71.063c0,7.564,3.964,11.888,9.907,11.888c3.151,0,5.087-1.262,6.349-3.242l0.27,2.702h4.548 V59.896c-2.611-0.901-5.268-1.262-8.511-1.262C903.094,58.635,898.861,63.138,898.861,71.063 M914.982,77.275 c-1.307,0.992-2.883,1.622-4.818,1.622c-4.413,0-6.259-3.242-6.259-7.835c0-5.043,2.386-8.195,7.519-8.195 c1.396,0,2.521,0.09,3.559,0.271V77.275z M965.505,58.995c-1.17-0.226-2.387-0.36-3.693-0.36c-8.33,0-12.562,4.503-12.562,12.428 c0,7.564,3.963,11.888,9.905,11.888c3.243,0,5.18-1.307,6.44-3.423l0.27,2.883h4.548v-31.52c-1.621,0-3.377,0.135-4.908,0.676 V58.995z M965.505,77.186c-1.351,1.037-2.972,1.712-4.952,1.712c-4.413,0-6.259-3.242-6.259-7.835c0-5.133,2.341-8.195,7.249-8.195 c1.306,0,2.656,0.18,3.962,0.451V77.186z M934.345,58.635c-2.388,0-5.854,0.496-9.005,1.262V82.41h4.952V63.229 c1.352-0.227,2.747-0.361,3.918-0.361c4.952,0,6.122,1.712,6.122,5.269V82.41h4.954V67.28 C945.286,61.832,942.63,58.635,934.345,58.635 M821.996,65.028l-2.433-1.034c-3.152-1.352-4.908-2.702-4.908-5.045 c0-2.386,1.801-3.916,5.72-3.916c2.07,0,4.952,0.404,7.384,1.306c0.45-1.306,0.766-2.702,0.901-4.504 c-2.566-0.898-5.313-1.306-8.24-1.306c-7.295,0-10.852,3.288-10.852,8.42c0,4.773,2.881,7.16,7.113,9.007l2.297,0.989 c4.233,1.847,5.943,3.063,5.943,5.675c0,2.655-2.342,4.007-6.529,4.007c-2.475,0-5.718-0.584-8.24-1.756 c-0.494,1.441-0.765,2.701-0.854,4.547c2.522,1.172,5.538,1.712,9.229,1.712c7.656,0,11.573-3.558,11.573-8.735 C830.101,70.027,827.714,67.461,821.996,65.028 M786.665,59.22c-0.071-1.644-0.531-3.274-1.382-4.749l-7.506-13 c-0.572-0.992-0.968-2.054-1.188-3.144l-0.313,0.544c-1.857,3.217-1.857,7.182,0,10.399l6.005,10.401 c1.857,3.218,1.857,7.183,0,10.401l-0.314,0.542c-0.219-1.09-0.613-2.15-1.187-3.143l-5.497-9.521l-3.511-6.079 c-0.572-0.992-0.967-2.055-1.187-3.145l-0.313,0.544c-1.853,3.206-1.858,7.155-0.02,10.367l-0.001,0.001l6.024,10.434 c1.858,3.217,1.858,7.183,0,10.4l-0.313,0.544c-0.22-1.091-0.614-2.152-1.188-3.145l-7.507-13.002 c-1.006-1.743-1.465-3.704-1.382-5.649c-8.035,2.099-13.581,6.557-13.581,11.718c0,7.181,10.731,13.001,23.971,13.001 s23.973-5.82,23.973-13.001C800.248,65.778,794.701,61.319,786.665,59.22 M985.454,58.635c-7.882,0-10.987,5.313-10.987,12.022 c0,7.7,4.007,12.293,12.292,12.293c2.657,0,5.043-0.406,7.294-1.442c0.315-1.484,0.586-3.195,0.767-4.501 c-2.478,1.126-5.223,1.711-7.925,1.711c-4.413,0-6.755-1.938-7.385-5.944h15.804c0.181-1.306,0.271-2.431,0.271-3.828 C995.585,63.272,992.522,58.635,985.454,58.635 M979.42,68.631c0.405-3.828,2.25-5.854,5.764-5.854c3.421,0,5.402,2.16,5.402,5.854 H979.42z M868.691,58.635c-2.387,0-5.854,0.496-9.006,1.262V82.41h4.954V63.229c1.349-0.227,2.746-0.361,3.917-0.361 c4.952,0,6.123,1.712,6.123,5.269V82.41h4.952V67.28C879.632,61.832,876.977,58.635,868.691,58.635 M896.924,63.633 c0.226-1.306,0.36-2.701,0.45-4.232h-7.834v-8.51c-1.53,0-3.422,0.226-4.953,0.72v23.64c0,5.493,3.062,7.7,7.881,7.7 c1.395,0,2.836-0.18,4.188-0.721c0.269-1.307,0.449-2.837,0.584-4.187c-1.08,0.404-2.431,0.675-3.872,0.675 c-2.387,0-3.827-1.126-3.827-4.053V63.633H896.924z M833.208,71.063c0,7.564,3.962,11.888,9.906,11.888 c3.152,0,5.088-1.262,6.349-3.242l0.271,2.702h4.548V59.896c-2.612-0.901-5.268-1.262-8.51-1.262 C837.44,58.635,833.208,63.138,833.208,71.063 M849.328,77.275c-1.305,0.992-2.882,1.622-4.817,1.622 c-4.413,0-6.259-3.242-6.259-7.835c0-5.043,2.387-8.195,7.52-8.195c1.396,0,2.521,0.09,3.557,0.271V77.275z M1188.863,58.639 c-7.385,0-10.4,5.312-10.4,12.021c0,7.743,3.961,12.29,11.479,12.29c2.566,0,4.908-0.404,7.159-1.71 c0.227-0.991,0.405-2.206,0.495-3.018c-2.431,1.396-5.132,1.938-7.563,1.938c-5.132,0-7.97-2.883-8.374-8.285h16.658 c0.136-0.9,0.18-1.846,0.18-2.791C1198.497,63.275,1195.615,58.639,1188.863,58.639 M1195.347,69.039h-13.688 c0.359-4.683,2.566-7.654,7.069-7.654c4.457,0,6.618,3.018,6.618,7.474V69.039z M1283.054,58.639c-2.521,0-5.447,0.449-8.464,1.261 V82.41h3.151V62.06c1.71-0.404,3.603-0.63,5.223-0.63c5.538,0,7.113,2.161,7.113,6.349V82.41h3.152V67.193 C1293.229,61.745,1290.662,58.639,1283.054,58.639 M1248.971,70.975c0,7.7,3.961,11.976,10.355,11.976 c2.521,0,4.593-0.944,6.123-2.295l0.09,1.755h2.927V59.899c-2.386-0.899-4.729-1.261-7.52-1.261 C1252.888,58.639,1248.971,63.051,1248.971,70.975 M1265.313,78.044c-1.485,1.44-3.376,2.296-5.718,2.296 c-4.906,0-7.429-3.557-7.429-9.365c0-6.032,2.746-9.545,8.779-9.545c1.62,0,3.018,0.181,4.367,0.54V78.044z M1203.451,59.899V82.41 h3.151V61.925c1.485-0.314,3.107-0.495,4.412-0.495c1.261,0,2.432,0.045,3.466,0.181c0.181-0.585,0.315-1.756,0.315-2.701 c-0.99-0.135-2.386-0.181-3.872-0.181C1208.493,58.729,1205.432,59.225,1203.451,59.899 M1238.704,66.157 c3.377-1.125,5.268-4.053,5.268-7.203c0-5.043-3.332-8.194-11.706-8.194c-2.521,0-5.178,0.225-7.563,0.63V82.41h9.05 c8.148,0,11.661-3.242,11.661-8.869C1245.413,69.759,1242.847,66.922,1238.704,66.157 M1227.854,53.956 c1.575-0.181,3.017-0.271,4.457-0.271c6.664,0,8.465,2.388,8.465,5.629c0,3.242-2.433,5.538-7.295,5.538h-5.627V53.956z M1233.436,79.484h-5.582V67.778h5.853c5.673,0,8.466,2.251,8.466,5.897C1242.172,77.593,1239.424,79.484,1233.436,79.484 M1299.083,82.41h3.151V50.805c-1.036,0-2.117,0.135-3.151,0.45V82.41z M1307.097,69.805l9.815-10.626h-3.826l-9.681,10.491v0.314 l10.311,12.426h3.916L1307.097,69.805z M1164.503,58.639c-2.745,0-5.403,0.721-7.879,1.891c-1.576-1.305-3.917-1.891-7.068-1.891 c-2.882,0-5.854,0.449-8.869,1.261V82.41h3.15V62.06c1.757-0.404,3.692-0.63,5.403-0.63c4.816,0,6.618,1.801,6.618,6.168V82.41 h3.152V67.193c0-1.801-0.271-3.288-0.767-4.458c1.891-0.811,3.918-1.306,5.989-1.306c4.637,0,6.617,2.161,6.617,6.259V82.41h3.152 V67.193C1174.003,61.745,1171.301,58.639,1164.503,58.639 M1080.263,58.639c-2.521,0-5.448,0.449-8.464,1.261V82.41h3.151V62.06 c1.71-0.404,3.603-0.63,5.223-0.63c5.538,0,7.112,2.161,7.112,6.349V82.41h3.153V67.193 C1090.438,61.745,1087.872,58.639,1080.263,58.639 M1056.174,58.639c-6.978,0-11.12,4.683-11.12,12.291 c0,6.934,3.647,12.021,10.851,12.021c7.114,0,11.165-4.682,11.165-12.381C1067.069,63.727,1063.469,58.639,1056.174,58.639 M1056.085,80.114c-5.133,0-7.834-3.376-7.834-9.409c0-5.538,2.565-9.23,7.834-9.23c5.087,0,7.789,3.422,7.789,9.32 C1063.874,76.468,1061.308,80.114,1056.085,80.114 M999.864,59.896V82.41h4.951V63.138c1.217-0.181,2.432-0.271,3.647-0.271 c1.396,0,2.567,0.045,3.738,0.18c0.27-0.944,0.449-2.745,0.449-4.232c-1.08-0.135-2.791-0.18-4.322-0.18 C1005.536,58.635,1001.979,59.176,999.864,59.896 M1035.957,53.642c2.207,0,4.368,0.404,6.169,1.08 c0.271-0.811,0.495-1.936,0.541-3.017c-1.937-0.766-4.367-1.08-6.71-1.08c-9.455,0-14.901,5.942-14.901,16.207 c0,9.771,5.178,16.208,14.588,16.208c2.476,0,4.501-0.314,6.257-0.944c0.271-1.171,0.451-2.251,0.496-3.331 c-1.801,0.81-4.188,1.26-6.349,1.26c-7.114,0-11.706-4.907-11.706-13.327C1024.342,58.143,1028.934,53.642,1035.957,53.642 M1131.409,77.684c-1.709,1.62-3.871,2.565-6.393,2.565c-4.052,0-5.942-1.98-5.942-6.663V59.179h-3.151v15.038 c0,5.988,2.881,8.733,8.104,8.733c3.422,0,5.716-0.854,7.473-2.565l0.091,2.025h2.972V59.179h-3.153V77.684z M1105.297,69.625 l-2.116-0.722c-2.792-0.944-4.549-1.71-4.549-4.232c0-2.206,1.757-3.331,5.224-3.331c2.206,0,4.502,0.36,6.573,1.125 c0.271-0.9,0.406-1.892,0.451-2.655c-2.072-0.81-4.503-1.171-7.114-1.171c-5.088,0-8.15,2.116-8.15,6.123 c0,3.602,2.207,5.628,6.214,6.844l2.071,0.63c2.161,0.675,4.639,1.622,4.639,4.322c0,2.565-2.117,3.647-5.584,3.647 c-2.297,0-5.223-0.541-7.34-1.756c-0.225,0.629-0.403,1.486-0.448,2.746c2.115,1.215,4.727,1.755,7.879,1.755 c5.402,0,8.554-2.385,8.554-6.482C1111.6,72.551,1108.853,70.84,1105.297,69.625\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n</svg>";

var ConsumerFinance_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"66.731 339.202 616.054 45.673\" width=\"616.054\" height=\"45.673\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M1012.503-108.639c2.21,0,4.374,0.405,6.179,1.081c0.27-0.81,0.495-1.938,0.539-3.021 c-1.938-0.765-4.372-1.082-6.718-1.082c-9.467,0-14.92,5.952-14.92,16.229c0,9.783,5.183,16.229,14.606,16.229 c2.479,0,4.507-0.315,6.266-0.947c0.27-1.172,0.451-2.253,0.496-3.334c-1.805,0.81-4.192,1.261-6.357,1.261 c-7.123,0-11.72-4.914-11.72-13.344C1000.874-104.131,1005.471-108.639,1012.503-108.639 M941.959-103.276 c-1.172-0.226-2.388-0.36-3.694-0.36c-8.341,0-12.581,4.509-12.581,12.443c0,7.574,3.969,11.902,9.92,11.902 c3.245,0,5.184-1.308,6.446-3.426l0.271,2.885h4.555v-31.56c-1.624,0-3.383,0.135-4.917,0.677V-103.276z M941.959-85.062 c-1.351,1.037-2.975,1.714-4.957,1.714c-4.42,0-6.269-3.247-6.269-7.846c0-5.14,2.346-8.206,7.26-8.206 c1.308,0,2.659,0.181,3.966,0.451V-85.062z M976.362-102.376v22.544h4.96v-19.296c1.218-0.181,2.435-0.271,3.651-0.271 c1.398,0,2.57,0.045,3.742,0.181c0.271-0.946,0.451-2.75,0.451-4.238c-1.082-0.136-2.795-0.18-4.329-0.18 C982.044-103.637,978.482-103.096,976.362-102.376 M961.935-103.637c-7.891,0-11.001,5.319-11.001,12.038 c0,7.709,4.013,12.308,12.309,12.308c2.66,0,5.05-0.406,7.304-1.442c0.315-1.488,0.586-3.2,0.767-4.508 c-2.479,1.126-5.229,1.712-7.937,1.712c-4.418,0-6.762-1.938-7.394-5.951h15.826c0.18-1.307,0.271-2.434,0.271-3.831 C972.079-98.992,969.013-103.637,961.935-103.637 M955.894-93.628c0.404-3.832,2.254-5.861,5.771-5.861 c3.424,0,5.409,2.165,5.409,5.861H955.894z M910.76-103.637c-2.39,0-5.861,0.495-9.019,1.261v22.544h4.96v-19.206 c1.354-0.226,2.751-0.361,3.923-0.361c4.959,0,6.131,1.714,6.131,5.275v14.292h4.961V-94.98 C921.716-100.437,919.056-103.637,910.76-103.637 M762.891-103.052c-0.071-1.645-0.532-3.278-1.385-4.754l-7.517-13.018 c-0.573-0.993-0.969-2.058-1.188-3.147l-0.313,0.544c-1.86,3.222-1.86,7.191,0,10.413L758.5-102.6c1.86,3.223,1.86,7.192,0,10.415 l-0.314,0.544c-0.221-1.091-0.616-2.155-1.188-3.147l-5.506-9.534l-3.514-6.087c-0.574-0.993-0.97-2.058-1.188-3.147l-0.314,0.545 c-1.854,3.21-1.86,7.163-0.019,10.38l-0.001,0.001l6.032,10.446c1.86,3.222,1.86,7.191,0,10.415l-0.313,0.544 c-0.222-1.092-0.617-2.155-1.188-3.147l-7.519-13.019c-1.007-1.745-1.468-3.711-1.383-5.658c-8.047,2.102-13.6,6.565-13.6,11.733 c0,7.188,10.746,13.018,24.003,13.018c13.256,0,24.002-5.829,24.002-13.018C776.489-96.485,770.937-100.949,762.891-103.052 M809.493-91.193c0,7.574,3.968,11.902,9.918,11.902c3.157,0,5.095-1.262,6.357-3.246l0.271,2.705h4.554v-22.544 c-2.615-0.9-5.275-1.261-8.521-1.261C813.731-103.637,809.493-99.128,809.493-91.193 M825.634-84.971 c-1.307,0.991-2.885,1.623-4.824,1.623c-4.418,0-6.266-3.247-6.266-7.846c0-5.049,2.388-8.206,7.528-8.206 c1.396,0,2.524,0.091,3.562,0.271V-84.971z M798.266-97.234l-2.434-1.037c-3.157-1.354-4.915-2.706-4.915-5.05 c0-2.389,1.804-3.923,5.727-3.923c2.074,0,4.959,0.406,7.394,1.308c0.45-1.308,0.767-2.706,0.901-4.509 c-2.569-0.901-5.321-1.308-8.252-1.308c-7.303,0-10.865,3.292-10.865,8.432c0,4.78,2.885,7.169,7.124,9.018l2.3,0.992 c4.238,1.848,5.951,3.065,5.951,5.68c0,2.661-2.345,4.013-6.537,4.013c-2.479,0-5.727-0.586-8.251-1.758 c-0.496,1.443-0.767,2.704-0.856,4.554c2.524,1.172,5.545,1.713,9.243,1.713c7.664,0,11.587-3.563,11.587-8.746 C806.382-92.23,803.991-94.801,798.266-97.234 M873.292-98.632c0.225-1.308,0.36-2.705,0.45-4.238h-7.845v-8.521 c-1.533,0-3.426,0.225-4.96,0.721V-87c0,5.5,3.066,7.709,7.891,7.709c1.396,0,2.84-0.18,4.193-0.722 c0.271-1.307,0.451-2.84,0.585-4.192c-1.082,0.406-2.434,0.676-3.877,0.676c-2.39,0-3.832-1.126-3.832-4.057v-11.046H873.292z M845.021-103.637c-2.389,0-5.86,0.495-9.016,1.261v22.544h4.958v-19.206c1.354-0.226,2.751-0.361,3.923-0.361 c4.96,0,6.132,1.714,6.132,5.275v14.292h4.96V-94.98C855.978-100.437,853.318-103.637,845.021-103.637 M875.231-91.193 c0,7.574,3.968,11.902,9.918,11.902c3.156,0,5.096-1.262,6.358-3.246l0.271,2.705h4.553v-22.544c-2.613-0.9-5.274-1.261-8.521-1.261 C879.47-103.637,875.231-99.128,875.231-91.193 M891.372-84.971c-1.308,0.991-2.886,1.623-4.824,1.623 c-4.418,0-6.268-3.247-6.268-7.846c0-5.049,2.39-8.206,7.53-8.206c1.396,0,2.524,0.091,3.562,0.271V-84.971z M1241.299-103.635 c-2.522,0-5.455,0.45-8.477,1.262v22.541h3.157v-20.376c1.713-0.406,3.605-0.633,5.23-0.633c5.544,0,7.123,2.165,7.123,6.357v14.651 h3.156V-95.07C1251.489-100.523,1248.917-103.635,1241.299-103.635 M1256.132-91.283c0,7.71,3.966,11.992,10.369,11.992 c2.525,0,4.599-0.947,6.131-2.3l0.09,1.759h2.93v-22.541c-2.388-0.901-4.732-1.262-7.527-1.262 C1260.054-103.635,1256.132-99.218,1256.132-91.283 M1272.497-84.206c-1.488,1.444-3.381,2.301-5.726,2.301 c-4.914,0-7.439-3.563-7.439-9.378c0-6.04,2.75-9.558,8.792-9.558c1.623,0,3.02,0.182,4.373,0.542V-84.206z M1225.114-110.938 c-1.218,0-2.119,0.901-2.119,2.118c0,1.219,0.901,2.075,2.119,2.075c1.219,0,2.074-0.856,2.074-2.075 C1227.188-110.037,1226.333-110.938,1225.114-110.938 M1344.539-93.176c0-5.815-2.886-10.459-9.648-10.459 c-7.394,0-10.413,5.319-10.413,12.037c0,7.753,3.967,12.307,11.496,12.307c2.568,0,4.913-0.406,7.169-1.714 c0.224-0.991,0.403-2.208,0.495-3.02c-2.435,1.396-5.142,1.938-7.575,1.938c-5.138,0-7.978-2.885-8.384-8.295h16.679 C1344.493-91.283,1344.539-92.229,1344.539-93.176 M1341.383-93.221h-13.704c0.359-4.689,2.568-7.665,7.077-7.665 c4.464,0,6.627,3.021,6.627,7.484V-93.221z M1290.259-103.635c-2.523,0-5.454,0.45-8.476,1.262v22.541h3.157v-20.376 c1.713-0.406,3.604-0.633,5.229-0.633c5.545,0,7.123,2.165,7.123,6.357v14.651h3.153V-95.07 C1300.446-100.523,1297.877-103.635,1290.259-103.635 M1223.537-79.832h3.156v-23.262h-3.156V-79.832z M1316.813-100.841 c1.486,0,3.29,0.271,5.004,1.037c0.179-0.901,0.314-1.803,0.36-2.75c-1.758-0.766-3.518-1.081-5.364-1.081 c-8.025,0-11.903,4.868-11.903,12.261c0,7.755,4.375,12.083,11,12.083c2.166,0,4.193-0.451,5.817-1.578 c0.179-0.992,0.314-2.119,0.404-3.021c-1.758,1.173-3.877,1.804-5.951,1.804c-4.643,0-8.067-2.931-8.067-9.378 C1308.113-97.368,1311.043-100.841,1316.813-100.841 M1056.866-103.635c-2.525,0-5.455,0.45-8.477,1.262v22.541h3.157v-20.376 c1.714-0.406,3.606-0.633,5.229-0.633c5.546,0,7.124,2.165,7.124,6.357v14.651h3.154V-95.07 C1067.054-100.523,1064.485-103.635,1056.866-103.635 M1081.933-92.635l-2.119-0.722c-2.796-0.946-4.554-1.714-4.554-4.238 c0-2.209,1.758-3.335,5.229-3.335c2.21,0,4.508,0.36,6.582,1.126c0.271-0.901,0.405-1.893,0.449-2.66 c-2.071-0.811-4.507-1.171-7.12-1.171c-5.095,0-8.161,2.119-8.161,6.131c0,3.605,2.21,5.636,6.222,6.853l2.072,0.631 c2.166,0.677,4.646,1.622,4.646,4.328c0,2.569-2.119,3.651-5.59,3.651c-2.3,0-5.23-0.542-7.35-1.758 c-0.226,0.631-0.404,1.486-0.451,2.75c2.12,1.217,4.734,1.758,7.89,1.758c5.409,0,8.565-2.39,8.565-6.492 C1088.243-89.706,1085.493-91.418,1081.933-92.635 M1032.747-103.635c-6.987,0-11.135,4.688-11.135,12.307 c0,6.941,3.65,12.037,10.865,12.037c7.123,0,11.18-4.688,11.18-12.397C1043.657-98.54,1040.049-103.635,1032.747-103.635 M1032.656-82.131c-5.139,0-7.844-3.382-7.844-9.422c0-5.546,2.569-9.242,7.844-9.242c5.095,0,7.799,3.427,7.799,9.331 C1040.455-85.783,1037.887-82.131,1032.656-82.131 M1108.079-84.565c-1.713,1.622-3.877,2.569-6.402,2.569 c-4.056,0-5.951-1.983-5.951-6.672v-14.426h-3.153v15.057c0,5.996,2.884,8.746,8.113,8.746c3.427,0,5.727-0.857,7.485-2.57 l0.089,2.029h2.976v-23.262h-3.156V-84.565z M1165.604-103.635c-7.393,0-10.411,5.319-10.411,12.037 c0,7.753,3.966,12.307,11.494,12.307c2.57,0,4.914-0.406,7.169-1.714c0.225-0.991,0.403-2.208,0.496-3.02 c-2.434,1.396-5.141,1.938-7.575,1.938c-5.139,0-7.979-2.885-8.385-8.295h16.68c0.135-0.902,0.181-1.848,0.181-2.795 C1175.253-98.991,1172.367-103.635,1165.604-103.635 M1172.098-93.221h-13.705c0.36-4.689,2.569-7.665,7.077-7.665 c4.464,0,6.628,3.021,6.628,7.484V-93.221z M1180.214-102.373v22.541h3.154v-20.513c1.487-0.314,3.109-0.496,4.417-0.496 c1.264,0,2.437,0.046,3.474,0.182c0.179-0.587,0.314-1.759,0.314-2.704c-0.992-0.136-2.389-0.182-3.878-0.182 C1185.262-103.545,1182.197-103.048,1180.214-102.373 M1141.216-103.635c-2.75,0-5.409,0.721-7.89,1.893 c-1.577-1.306-3.922-1.893-7.079-1.893c-2.883,0-5.86,0.45-8.879,1.262v22.541h3.154v-20.376c1.759-0.406,3.697-0.633,5.411-0.633 c4.823,0,6.627,1.805,6.627,6.177v14.832h3.154V-95.07c0-1.803-0.271-3.291-0.767-4.463c1.893-0.812,3.923-1.308,5.997-1.308 c4.643,0,6.627,2.165,6.627,6.268v14.741h3.154V-95.07C1150.727-100.523,1148.021-103.635,1141.216-103.635 M1201.491-79.832h3.157 v-14.201h12.981c0.136-0.855,0.271-2.209,0.316-3.021h-13.298v-10.954h14.199c0.18-0.856,0.314-2.209,0.36-3.021h-17.717V-79.832z\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n</svg>";

var Santander_Empresas_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"74.776 1330.702 468.037 54.251\" width=\"468.037\" height=\"54.251\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M923.817,888.423c-2.455,0-6.022,0.509-9.265,1.296v23.162h5.096v-19.733 c1.389-0.231,2.825-0.371,4.029-0.371c5.097,0,6.301,1.762,6.301,5.42v14.685h5.096v-15.563 C935.074,891.712,932.341,888.423,923.817,888.423 M887.313,901.208c0,7.781,4.076,12.229,10.191,12.229 c3.242,0,5.235-1.297,6.531-3.336l0.278,2.779h4.68v-23.162c-2.688-0.926-5.421-1.296-8.756-1.296 C891.667,888.423,887.313,893.054,887.313,901.208 M903.896,907.601c-1.343,1.019-2.965,1.667-4.957,1.667 c-4.539,0-6.439-3.334-6.439-8.06c0-5.188,2.456-8.432,7.737-8.432c1.435,0,2.594,0.093,3.659,0.277V907.601z M808.232,895.001 l-2.502-1.066c-3.243-1.39-5.05-2.779-5.05-5.188c0-2.454,1.854-4.03,5.884-4.03c2.131,0,5.096,0.417,7.598,1.344 c0.463-1.344,0.786-2.779,0.926-4.633c-2.641-0.926-5.466-1.344-8.479-1.344c-7.504,0-11.163,3.383-11.163,8.663 c0,4.91,2.965,7.366,7.318,9.266l2.362,1.019c4.355,1.899,6.116,3.149,6.116,5.838c0,2.732-2.409,4.121-6.718,4.121 c-2.548,0-5.884-0.601-8.477-1.805c-0.51,1.481-0.788,2.778-0.881,4.678c2.595,1.205,5.698,1.761,9.496,1.761 c7.876,0,11.905-3.66,11.905-8.987C816.569,900.143,814.115,897.502,808.232,895.001 M885.319,893.563 c0.231-1.343,0.37-2.779,0.463-4.354h-8.061v-8.756c-1.574,0-3.521,0.232-5.095,0.741v24.32c0,5.652,3.149,7.922,8.105,7.922 c1.438,0,2.919-0.186,4.309-0.741c0.278-1.344,0.463-2.918,0.603-4.308c-1.111,0.416-2.501,0.694-3.984,0.694 c-2.454,0-3.938-1.158-3.938-4.169v-11.351H885.319z M819.768,901.208c0,7.781,4.077,12.229,10.191,12.229 c3.242,0,5.235-1.297,6.532-3.336l0.277,2.779h4.679v-23.162c-2.687-0.926-5.419-1.296-8.755-1.296 C824.122,888.423,819.768,893.054,819.768,901.208 M836.352,907.601c-1.343,1.019-2.965,1.667-4.956,1.667 c-4.54,0-6.439-3.334-6.439-8.06c0-5.188,2.456-8.432,7.736-8.432c1.437,0,2.595,0.093,3.659,0.277V907.601z M771.883,889.024 c-0.072-1.691-0.546-3.369-1.422-4.886l-7.722-13.376c-0.589-1.02-0.995-2.112-1.222-3.233l-0.322,0.559 c-1.912,3.311-1.912,7.39,0,10.7l6.178,10.701c1.911,3.311,1.911,7.391,0,10.701l-0.323,0.558c-0.226-1.121-0.633-2.213-1.222-3.233 l-5.656-9.797l-3.61-6.255c-0.589-1.021-0.996-2.112-1.222-3.233l-0.323,0.559c-1.904,3.301-1.911,7.362-0.018,10.668h-0.001 l6.197,10.734c1.911,3.311,1.911,7.389,0,10.699l-0.323,0.559c-0.227-1.12-0.633-2.213-1.222-3.232l-7.723-13.376 c-1.035-1.794-1.509-3.813-1.422-5.814c-8.268,2.16-13.974,6.746-13.974,12.056c0,7.387,11.042,13.376,24.663,13.376 c13.62,0,24.662-5.989,24.662-13.376C785.857,895.771,780.15,891.184,771.883,889.024 M856.273,888.423 c-2.456,0-6.022,0.509-9.266,1.296v23.162h5.096v-19.733c1.39-0.231,2.825-0.371,4.03-0.371c5.096,0,6.3,1.762,6.3,5.42v14.685 h5.096v-15.563C867.529,891.712,864.797,888.423,856.273,888.423 M955.875,888.793c-1.204-0.231-2.455-0.37-3.799-0.37 c-8.569,0-12.924,4.631-12.924,12.785c0,7.781,4.076,12.229,10.19,12.229c3.336,0,5.328-1.344,6.625-3.521l0.278,2.964h4.679 v-32.427c-1.669,0-3.475,0.139-5.05,0.695V888.793z M955.875,907.508c-1.39,1.065-3.057,1.76-5.096,1.76 c-4.54,0-6.439-3.334-6.439-8.06c0-5.281,2.41-8.432,7.458-8.432c1.344,0,2.734,0.186,4.077,0.463V907.508z M1104.838,889.725v23.16 h3.242v-21.076c1.528-0.325,3.196-0.51,4.539-0.51c1.298,0,2.502,0.046,3.567,0.185c0.186-0.602,0.323-1.807,0.323-2.778 c-1.019-0.14-2.454-0.185-3.982-0.185C1110.025,888.521,1106.876,889.029,1104.838,889.725 M976.398,888.423 c-8.107,0-11.303,5.465-11.303,12.368c0,7.922,4.122,12.646,12.646,12.646c2.733,0,5.188-0.417,7.505-1.481 c0.324-1.529,0.603-3.29,0.787-4.634c-2.548,1.159-5.373,1.761-8.152,1.761c-4.54,0-6.949-1.992-7.598-6.115h16.26 c0.186-1.343,0.278-2.501,0.278-3.938C986.821,893.193,983.671,888.423,976.398,888.423 M970.19,898.706 c0.417-3.938,2.316-6.022,5.93-6.022c3.521,0,5.559,2.225,5.559,6.022H970.19z M1128.508,888.427 c-7.597,0-10.701,5.467-10.701,12.368c0,7.968,4.076,12.646,11.813,12.646c2.641,0,5.05-0.417,7.365-1.761 c0.232-1.019,0.417-2.27,0.51-3.104c-2.501,1.436-5.28,1.992-7.781,1.992c-5.281,0-8.199-2.965-8.617-8.523h17.14 c0.14-0.927,0.186-1.899,0.186-2.872C1138.421,893.198,1135.456,888.427,1128.508,888.427 M1135.179,899.128h-14.083 c0.371-4.818,2.641-7.875,7.273-7.875c4.586,0,6.81,3.104,6.81,7.688V899.128z M1162.461,901.119 c0,7.922,4.076,12.322,10.654,12.322c2.594,0,4.725-0.974,6.3-2.362l0.093,1.806h3.012v-23.16c-2.456-0.927-4.865-1.298-7.736-1.298 C1166.491,888.427,1162.461,892.966,1162.461,901.119 M1179.275,908.393c-1.528,1.482-3.474,2.362-5.882,2.362 c-5.05,0-7.644-3.66-7.644-9.636c0-6.206,2.825-9.82,9.033-9.82c1.667,0,3.104,0.185,4.492,0.556V908.393z M1198.083,899.729 l-2.177-0.741c-2.873-0.973-4.68-1.76-4.68-4.354c0-2.269,1.807-3.428,5.373-3.428c2.27,0,4.633,0.37,6.764,1.159 c0.277-0.928,0.417-1.946,0.464-2.733c-2.132-0.834-4.633-1.205-7.319-1.205c-5.235,0-8.385,2.177-8.385,6.3 c0,3.706,2.271,5.791,6.393,7.041l2.131,0.649c2.223,0.694,4.771,1.667,4.771,4.445c0,2.642-2.178,3.753-5.744,3.753 c-2.362,0-5.373-0.556-7.551-1.807c-0.231,0.649-0.417,1.529-0.463,2.826c2.178,1.25,4.863,1.807,8.105,1.807 c5.56,0,8.803-2.456,8.803-6.671C1204.568,902.741,1201.742,900.979,1198.083,899.729 M1152.781,899.729l-2.178-0.741 c-2.873-0.973-4.68-1.76-4.68-4.354c0-2.269,1.807-3.428,5.374-3.428c2.27,0,4.632,0.37,6.763,1.159 c0.278-0.928,0.417-1.946,0.463-2.733c-2.13-0.834-4.632-1.205-7.318-1.205c-5.234,0-8.384,2.177-8.384,6.3 c0,3.706,2.269,5.791,6.393,7.041l2.13,0.649c2.224,0.694,4.771,1.667,4.771,4.445c0,2.642-2.178,3.753-5.744,3.753 c-2.361,0-5.373-0.556-7.55-1.807c-0.233,0.649-0.418,1.529-0.464,2.826c2.178,1.25,4.864,1.807,8.106,1.807 c5.559,0,8.802-2.456,8.802-6.671C1159.266,902.741,1156.439,900.979,1152.781,899.729 M1019.002,898.294h13.063 c0.187-0.88,0.324-2.27,0.371-3.104h-13.435v-11.257h14.824c0.185-0.881,0.324-2.27,0.37-3.104h-18.437v32.055h18.482 c0.186-0.88,0.324-2.27,0.371-3.104h-15.611V898.294z M991.223,889.719v23.162h5.097v-19.827c1.251-0.185,2.501-0.277,3.752-0.277 c1.437,0,2.641,0.046,3.845,0.186c0.277-0.973,0.464-2.825,0.464-4.354c-1.111-0.14-2.872-0.185-4.448-0.185 C997.06,888.423,993.4,888.979,991.223,889.719 M1063.889,888.427c-2.825,0-5.559,0.741-8.106,1.945 c-1.621-1.343-4.03-1.945-7.272-1.945c-2.964,0-6.022,0.464-9.126,1.298v23.16h3.243v-20.938c1.806-0.416,3.798-0.648,5.559-0.648 c4.956,0,6.81,1.853,6.81,6.347v15.239h3.243v-15.656c0-1.853-0.278-3.382-0.788-4.587c1.945-0.833,4.029-1.343,6.16-1.343 c4.771,0,6.81,2.224,6.81,6.438v15.147h3.242v-15.656C1073.662,891.624,1070.884,888.427,1063.889,888.427 M1087.791,888.427 c-2.918,0-5.698,0.51-8.106,1.298v32.055h3.242v-9.126c1.39,0.511,3.011,0.788,5.05,0.788c7.689,0,11.812-4.633,11.812-12.693 C1099.788,892.828,1095.943,888.427,1087.791,888.427 M1087.791,910.662c-1.668,0-3.336-0.231-4.864-0.741v-18.066 c1.437-0.323,3.058-0.556,4.679-0.556c6.161,0,8.895,3.567,8.895,9.635C1096.5,907.188,1093.488,910.662,1087.791,910.662\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n</svg>";

var GlobalOperations_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"773.536 1164.849 622.377 54.218\" width=\"622.377\" height=\"54.218\" xmlns=\"http://www.w3.org/2000/svg\">\n  <g transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\">\n    <path fill=\"#EC0000\" d=\"M1737.263,729.737v16.204c-1.389,0.523-2.894,0.94-4.514,1.25c-1.62,0.307-3.218,0.462-4.793,0.462 c-3.395,0-6.272-0.687-8.633-2.061c-2.361-1.372-4.136-3.317-5.324-5.833c-1.188-2.515-1.782-5.471-1.782-8.866 c0-3.548,0.641-6.565,1.921-9.05c1.28-2.485,3.117-4.359,5.509-5.626c2.392-1.265,5.21-1.897,8.448-1.897 c1.697,0,3.305,0.124,4.816,0.371s2.854,0.602,4.027,1.063c-0.092,1.11-0.293,2.161-0.602,3.149 c-2.592-0.988-5.34-1.481-8.242-1.481c-2.56,0-4.783,0.509-6.666,1.527c-1.882,1.019-3.325,2.532-4.328,4.536 c-1.003,2.008-1.504,4.43-1.504,7.27c0,2.963,0.485,5.471,1.458,7.522c0.973,2.054,2.399,3.61,4.281,4.676 c1.884,1.065,4.168,1.597,6.853,1.597c0.895,0,1.859-0.077,2.895-0.23c1.033-0.153,2.014-0.355,2.938-0.602v-13.981H1737.263z\"/>\n    <path fill=\"#EC0000\" d=\"M1744.068,715.2c0.492-0.123,1.041-0.239,1.644-0.348c0.603-0.107,1.133-0.161,1.597-0.161v32.313h-3.24 V715.2z\"/>\n    <path fill=\"#EC0000\" d=\"M1756.892,745.986c-1.667-1.049-2.925-2.507-3.772-4.375c-0.851-1.866-1.274-4.004-1.274-6.411 c0-2.593,0.455-4.838,1.365-6.737c0.911-1.897,2.223-3.356,3.937-4.374c1.712-1.019,3.757-1.527,6.134-1.527 c2.438,0,4.498,0.524,6.18,1.573c1.683,1.05,2.94,2.5,3.774,4.352c0.831,1.853,1.249,3.967,1.249,6.343 c0,2.623-0.447,4.893-1.343,6.806c-0.896,1.914-2.207,3.38-3.935,4.397c-1.729,1.019-3.798,1.528-6.204,1.528 C1760.595,747.561,1758.559,747.037,1756.892,745.986 M1769.16,742.098c1.357-1.697,2.036-4.042,2.036-7.037 c0-3.055-0.687-5.417-2.059-7.083c-1.374-1.666-3.358-2.5-5.95-2.5c-2.624,0-4.622,0.85-5.996,2.546 c-1.373,1.697-2.06,4.013-2.06,6.945c0,3.118,0.687,5.508,2.06,7.176c1.374,1.666,3.372,2.5,5.996,2.5 C1765.811,744.645,1767.801,743.796,1769.16,742.098\"/>\n    <path fill=\"#EC0000\" d=\"M1796.288,725.779c1.883,2.146,2.825,5.208,2.825,9.189c0,4.044-1.026,7.151-3.078,9.328 c-2.055,2.176-5.085,3.264-9.097,3.264c-2.935,0-5.572-0.433-7.918-1.296V715.2c0.988-0.339,2.067-0.509,3.241-0.509v8.98 c1.759-0.74,3.656-1.11,5.693-1.11C1791.629,722.562,1794.407,723.634,1796.288,725.779 M1793.649,742.236 c1.45-1.636,2.176-4.058,2.176-7.268c0-6.359-2.762-9.537-8.286-9.537c-1.76,0-3.519,0.339-5.277,1.019v17.591 c1.636,0.434,3.286,0.65,4.953,0.65C1790.054,744.691,1792.2,743.874,1793.649,742.236\"/>\n    <path fill=\"#EC0000\" d=\"M1818.534,722.862c1.248,0.201,2.475,0.532,3.68,0.994v23.149h-3.01l-0.093-1.807 c-0.833,0.742-1.781,1.32-2.846,1.736s-2.216,0.625-3.45,0.625c-2.191,0-4.08-0.479-5.671-1.435 c-1.59-0.957-2.817-2.361-3.681-4.214c-0.864-1.851-1.296-4.073-1.296-6.666c0-4.136,1.025-7.284,3.079-9.444 c2.051-2.161,5.131-3.24,9.236-3.24C1815.934,722.562,1817.282,722.661,1818.534,722.862 M1807.399,742.33 c1.296,1.697,3.194,2.546,5.694,2.546c2.284,0,4.244-0.786,5.879-2.362v-16.527c-1.39-0.37-2.887-0.555-4.489-0.555 c-3.057,0-5.325,0.841-6.807,2.523c-1.48,1.683-2.223,4.111-2.223,7.291C1805.454,738.271,1806.103,740.633,1807.399,742.33\"/>\n    <path fill=\"#EC0000\" d=\"M1828.51,715.2c0.493-0.123,1.042-0.239,1.644-0.348c0.603-0.107,1.135-0.161,1.597-0.161v32.313h-3.24 V715.2z\"/>\n    <path fill=\"#EC0000\" d=\"M1850.847,745.5c-2.146-1.435-3.758-3.409-4.838-5.926c-1.08-2.515-1.621-5.394-1.621-8.633 c0-3.334,0.557-6.258,1.666-8.773c1.111-2.517,2.732-4.451,4.861-5.811c2.13-1.357,4.677-2.037,7.64-2.037 c3.055,0,5.647,0.718,7.777,2.153c2.13,1.435,3.733,3.419,4.815,5.949c1.079,2.53,1.619,5.4,1.619,8.609 c0,3.335-0.555,6.251-1.667,8.751c-1.11,2.5-2.731,4.438-4.86,5.81c-2.129,1.374-4.66,2.061-7.593,2.061 C1855.592,747.653,1852.991,746.936,1850.847,745.5 M1864.457,743c1.621-1.064,2.847-2.607,3.681-4.629 c0.832-2.021,1.251-4.422,1.251-7.198c0-2.871-0.435-5.341-1.297-7.408c-0.865-2.066-2.106-3.649-3.728-4.745 c-1.619-1.095-3.558-1.645-5.81-1.645c-2.253,0-4.19,0.533-5.811,1.599c-1.62,1.064-2.854,2.6-3.702,4.606 c-0.85,2.006-1.274,4.414-1.274,7.223c0,2.9,0.433,5.385,1.298,7.452c0.863,2.068,2.105,3.642,3.726,4.723 c1.621,1.081,3.571,1.62,5.855,1.62C1860.899,744.598,1862.837,744.065,1864.457,743\"/>\n    <path fill=\"#EC0000\" d=\"M1895.104,725.71c1.99,2.099,2.986,5.153,2.986,9.165c0,4.044-1.012,7.168-3.032,9.375 c-2.022,2.207-4.946,3.311-8.774,3.311c-1.943,0-3.626-0.262-5.045-0.787v9.12h-3.242v-32.037c2.655-0.863,5.356-1.295,8.104-1.295 C1890.112,722.562,1893.114,723.611,1895.104,725.71 M1892.581,742.283c1.482-1.667,2.223-4.074,2.223-7.223 c0-3.116-0.727-5.501-2.176-7.152c-1.451-1.65-3.689-2.477-6.713-2.477c-1.481,0-3.04,0.185-4.676,0.555v18.055 c1.481,0.496,3.102,0.741,4.861,0.741C1888.938,744.782,1891.1,743.949,1892.581,742.283\"/>\n    <path fill=\"#EC0000\" d=\"M1921.516,736.173h-17.175c0.215,2.777,1.048,4.891,2.5,6.342c1.45,1.45,3.486,2.177,6.109,2.177 c1.328,0,2.654-0.162,3.982-0.487c1.326-0.323,2.593-0.826,3.797-1.504c-0.125,1.11-0.295,2.146-0.51,3.101 c-1.111,0.648-2.262,1.104-3.449,1.366c-1.189,0.262-2.492,0.394-3.912,0.394c-2.563,0-4.722-0.502-6.481-1.504 c-1.76-1.004-3.095-2.447-4.004-4.328c-0.911-1.883-1.366-4.152-1.366-6.806c0-2.377,0.377-4.49,1.135-6.343 c0.754-1.853,1.936-3.318,3.54-4.398c1.605-1.08,3.628-1.62,6.066-1.62c2.222,0,4.079,0.47,5.577,1.411 c1.498,0.942,2.602,2.217,3.311,3.819c0.71,1.606,1.064,3.443,1.064,5.511C1921.7,734.383,1921.638,735.339,1921.516,736.173 M1906.423,727.445c-1.203,1.374-1.897,3.311-2.082,5.811h14.073v-0.186c0-2.376-0.579-4.251-1.735-5.625 c-1.158-1.373-2.848-2.061-5.07-2.061C1909.355,725.385,1907.627,726.072,1906.423,727.445\"/>\n    <path fill=\"#EC0000\" d=\"M1938.414,722.839c0,0.525-0.032,1.05-0.094,1.575s-0.139,0.94-0.231,1.249 c-0.957-0.123-2.146-0.186-3.564-0.186c-1.42,0-2.934,0.171-4.536,0.509v21.02h-3.242v-23.149c1.019-0.338,2.246-0.624,3.682-0.855 c1.435-0.231,2.769-0.347,4.003-0.347C1936.19,722.654,1937.517,722.716,1938.414,722.839\"/>\n    <path fill=\"#EC0000\" d=\"M1955.844,722.862c1.249,0.201,2.477,0.532,3.681,0.994v23.149h-3.01l-0.094-1.807 c-0.832,0.742-1.781,1.32-2.847,1.736c-1.064,0.416-2.215,0.625-3.448,0.625c-2.192,0-4.082-0.479-5.672-1.435 c-1.59-0.957-2.816-2.361-3.68-4.214c-0.865-1.851-1.297-4.073-1.297-6.666c0-4.136,1.025-7.284,3.078-9.444 c2.053-2.161,5.133-3.24,9.237-3.24C1953.243,722.562,1954.594,722.661,1955.844,722.862 M1944.71,742.33 c1.295,1.697,3.194,2.546,5.694,2.546c2.282,0,4.241-0.786,5.879-2.362v-16.527c-1.39-0.37-2.888-0.555-4.49-0.555 c-3.056,0-5.325,0.841-6.807,2.523c-1.479,1.683-2.222,4.111-2.222,7.291C1942.765,738.271,1943.413,740.633,1944.71,742.33\"/>\n    <path fill=\"#EC0000\" d=\"M1975.31,744.598c0.709-0.123,1.373-0.309,1.991-0.557c-0.123,1.051-0.262,1.977-0.416,2.778 c-1.359,0.494-2.748,0.741-4.166,0.741c-2.285,0-4.051-0.602-5.302-1.805c-1.25-1.205-1.876-3.071-1.876-5.603V715.2 c0.464-0.154,0.996-0.277,1.599-0.37c0.602-0.093,1.148-0.139,1.643-0.139v8.425h8.379c-0.061,1.143-0.17,2.114-0.323,2.916h-8.056 v13.751c0,1.729,0.378,2.994,1.135,3.795c0.755,0.805,1.875,1.204,3.355,1.204C1973.921,744.782,1974.6,744.722,1975.31,744.598\"/>\n    <path fill=\"#EC0000\" d=\"M1981.86,718.534c-0.416-0.401-0.625-0.911-0.625-1.529c0-0.615,0.209-1.134,0.625-1.55 c0.416-0.417,0.933-0.626,1.551-0.626c0.617,0,1.127,0.209,1.527,0.626c0.402,0.416,0.603,0.935,0.603,1.55 c0,0.618-0.2,1.128-0.603,1.529c-0.4,0.4-0.91,0.601-1.527,0.601C1982.793,719.135,1982.276,718.935,1981.86,718.534 M1981.791,723.116h3.24v23.89h-3.24V723.116z\"/>\n    <path fill=\"#EC0000\" d=\"M1994.615,745.986c-1.667-1.049-2.925-2.507-3.773-4.375c-0.85-1.866-1.273-4.004-1.273-6.411 c0-2.593,0.456-4.838,1.365-6.737c0.91-1.897,2.223-3.356,3.936-4.374c1.713-1.019,3.758-1.527,6.134-1.527 c2.438,0,4.499,0.524,6.182,1.573c1.681,1.05,2.938,2.5,3.772,4.352c0.833,1.853,1.25,3.967,1.25,6.343 c0,2.623-0.447,4.893-1.343,6.806c-0.896,1.914-2.207,3.38-3.936,4.397c-1.729,1.019-3.797,1.528-6.204,1.528 C1998.318,747.561,1996.282,747.037,1994.615,745.986 M2006.882,742.098c1.358-1.697,2.039-4.042,2.039-7.037 c0-3.055-0.688-5.417-2.061-7.083c-1.375-1.666-3.357-2.5-5.949-2.5c-2.625,0-4.622,0.85-5.996,2.546 c-1.374,1.697-2.061,4.013-2.061,6.945c0,3.118,0.687,5.508,2.061,7.176c1.374,1.666,3.371,2.5,5.996,2.5 C2003.533,744.645,2005.524,743.796,2006.882,742.098\"/>\n    <path fill=\"#EC0000\" d=\"M2031.581,723.58c1.527,0.679,2.631,1.659,3.311,2.94c0.679,1.279,1.019,2.893,1.019,4.836v15.649h-3.242 v-15.047c0-1.513-0.224-2.738-0.669-3.681c-0.449-0.94-1.205-1.649-2.27-2.13c-1.064-0.477-2.523-0.717-4.374-0.717 c-1.76,0-3.551,0.217-5.371,0.648v20.926h-3.241v-23.149c3.21-0.862,6.112-1.295,8.703-1.295 C2028.01,722.562,2030.054,722.9,2031.581,723.58\"/>\n    <path fill=\"#EC0000\" d=\"M2040.771,745.756c0.03-1.205,0.185-2.176,0.462-2.917c1.021,0.587,2.215,1.035,3.589,1.342 c1.373,0.309,2.692,0.464,3.959,0.464c1.852,0,3.271-0.293,4.259-0.88c0.987-0.586,1.481-1.512,1.481-2.778 c0-0.863-0.223-1.582-0.672-2.152c-0.447-0.571-1.002-1.01-1.666-1.319c-0.664-0.309-1.475-0.617-2.432-0.926l-2.129-0.648 c-2.131-0.648-3.726-1.542-4.791-2.685c-1.065-1.141-1.599-2.607-1.599-4.398c0-2.037,0.734-3.596,2.2-4.676s3.526-1.62,6.18-1.62 c2.84,0,5.279,0.4,7.315,1.203c-0.063,1.05-0.216,1.99-0.464,2.823c-2.099-0.77-4.352-1.156-6.758-1.156 c-1.791,0-3.119,0.27-3.981,0.811c-0.865,0.54-1.298,1.382-1.298,2.521c0,0.834,0.179,1.505,0.534,2.015 c0.354,0.51,0.84,0.926,1.458,1.25c0.617,0.324,1.481,0.672,2.593,1.041l2.175,0.741c2.068,0.711,3.664,1.605,4.793,2.686 c1.127,1.08,1.689,2.545,1.689,4.397c0,2.101-0.772,3.735-2.314,4.907c-1.545,1.174-3.705,1.76-6.481,1.76 C2045.569,747.561,2042.869,746.959,2040.771,745.756\"/>\n    <path fill=\"#EC0000\" d=\"M1470.623,723.158c-0.074-1.689-0.546-3.367-1.421-4.881l-7.719-13.369 c-0.589-1.02-0.994-2.112-1.221-3.232l-0.323,0.559c-1.91,3.31-1.91,7.386,0,10.695l6.175,10.693c1.91,3.31,1.91,7.387,0,10.694 l-0.322,0.56c-0.227-1.121-0.633-2.213-1.221-3.232l-5.654-9.79l-3.607-6.252c-0.59-1.02-0.996-2.111-1.222-3.231l-0.321,0.559 c-1.905,3.297-1.91,7.357-0.019,10.66h-0.002l6.193,10.728c1.912,3.309,1.912,7.386,0,10.695l-0.323,0.559 c-0.225-1.121-0.631-2.213-1.22-3.232l-7.718-13.368c-1.035-1.793-1.509-3.812-1.423-5.812c-8.262,2.16-13.964,6.742-13.964,12.05 c0,7.383,11.035,13.367,24.647,13.367c13.614,0,24.647-5.984,24.647-13.367C1484.587,729.901,1478.885,725.316,1470.623,723.158 M1493.894,745.983c0.093-1.897,0.371-3.194,0.879-4.676c2.594,1.204,5.926,1.805,8.473,1.805c4.307,0,6.713-1.389,6.713-4.119 c0-2.687-1.759-3.937-6.11-5.834l-2.36-1.019c-4.353-1.897-7.316-4.352-7.316-9.26c0-5.276,3.658-8.657,11.157-8.657 c3.01,0,5.835,0.417,8.473,1.342c-0.139,1.853-0.462,3.288-0.925,4.63c-2.5-0.925-5.463-1.342-7.593-1.342 c-4.028,0-5.881,1.573-5.881,4.027c0,2.407,1.807,3.797,5.047,5.186l2.5,1.064c5.88,2.501,8.335,5.14,8.335,9.631 c0,5.324-4.029,8.982-11.898,8.982C1499.588,747.744,1496.486,747.188,1493.894,745.983 M1540.146,723.854v23.149h-4.678 l-0.276-2.777c-1.296,2.036-3.287,3.332-6.527,3.332c-6.112,0-10.186-4.445-10.186-12.223c0-8.148,4.351-12.778,12.917-12.778 C1534.729,722.557,1537.46,722.927,1540.146,723.854 M1535.053,741.724v-14.537c-1.064-0.185-2.222-0.278-3.656-0.278 c-5.278,0-7.732,3.242-7.732,8.427c0,4.723,1.897,8.057,6.437,8.057C1532.089,743.392,1533.71,742.743,1535.053,741.724 M1566.213,731.446v15.557h-5.093v-14.678c0-3.656-1.204-5.417-6.297-5.417c-1.203,0-2.639,0.14-4.027,0.371v19.724h-5.094v-23.149 c3.241-0.787,6.808-1.297,9.26-1.297C1563.48,722.557,1566.213,725.844,1566.213,731.446 M1580.334,743.206 c1.481,0,2.871-0.278,3.982-0.694c-0.138,1.389-0.325,2.962-0.602,4.306c-1.39,0.555-2.871,0.74-4.306,0.74 c-4.954,0-8.103-2.269-8.103-7.916v-24.307c1.574-0.51,3.52-0.74,5.093-0.74v8.749h8.056c-0.093,1.574-0.231,3.011-0.464,4.352 h-7.592v11.344C1576.399,742.048,1577.881,743.206,1580.334,743.206 M1607.652,723.854v23.149h-4.677l-0.278-2.777 c-1.297,2.036-3.287,3.332-6.527,3.332c-6.111,0-10.187-4.445-10.187-12.223c0-8.148,4.353-12.778,12.917-12.778 C1602.234,722.557,1604.967,722.927,1607.652,723.854 M1602.56,741.724v-14.537c-1.065-0.185-2.223-0.278-3.659-0.278 c-5.276,0-7.731,3.242-7.731,8.427c0,4.723,1.899,8.057,6.436,8.057C1599.595,743.392,1601.216,742.743,1602.56,741.724 M1633.718,731.446v15.557h-5.093v-14.678c0-3.656-1.202-5.417-6.296-5.417c-1.203,0-2.639,0.14-4.027,0.371v19.724h-5.093v-23.149 c3.239-0.787,6.804-1.297,9.259-1.297C1630.986,722.557,1633.718,725.844,1633.718,731.446 M1659.554,714.595v32.408h-4.677 l-0.277-2.964c-1.296,2.176-3.286,3.519-6.62,3.519c-6.111,0-10.187-4.445-10.187-12.223c0-8.148,4.354-12.778,12.918-12.778 c1.343,0,2.593,0.139,3.796,0.37v-7.639C1656.081,714.733,1657.886,714.595,1659.554,714.595 M1654.507,741.632v-14.26 c-1.342-0.277-2.732-0.464-4.073-0.464c-5.048,0-7.454,3.149-7.454,8.427c0,4.723,1.897,8.057,6.434,8.057 C1651.452,743.392,1653.118,742.697,1654.507,741.632 M1685.157,737.096h-16.25c0.647,4.119,3.055,6.11,7.592,6.11 c2.778,0,5.604-0.602,8.148-1.76c-0.184,1.343-0.463,3.103-0.787,4.63c-2.314,1.064-4.769,1.481-7.5,1.481 c-8.519,0-12.639-4.722-12.639-12.639c0-6.898,3.195-12.362,11.297-12.362c7.269,0,10.416,4.77,10.416,10.603 C1685.435,734.596,1685.343,735.752,1685.157,737.096 M1668.814,732.836h11.481c0-3.798-2.037-6.02-5.556-6.02 C1671.129,726.816,1669.231,728.899,1668.814,732.836 M1702.983,722.742c0,1.527-0.186,3.381-0.464,4.353 c-1.202-0.14-2.406-0.187-3.843-0.187c-1.25,0-2.5,0.094-3.75,0.278v19.816h-5.092v-23.149c2.176-0.74,5.833-1.297,8.703-1.297 C1700.113,722.557,1701.872,722.604,1702.983,722.742\"/>\n  </g>\n</svg>";

var GlobalTech_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"773.358 1334.172 496.213 47.124\" width=\"496.213\" height=\"47.124\" xmlns=\"http://www.w3.org/2000/svg\">\n  <g transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\">\n    <path fill=\"#EC0000\" d=\"M1738.521,899.193v16.28c-1.395,0.527-2.907,0.946-4.534,1.255c-1.628,0.311-3.234,0.467-4.814,0.467 c-3.413,0-6.304-0.689-8.676-2.07c-2.372-1.379-4.156-3.334-5.351-5.862c-1.194-2.526-1.79-5.495-1.79-8.908 c0-3.565,0.643-6.597,1.931-9.093c1.286-2.496,3.132-4.379,5.535-5.652c2.403-1.271,5.232-1.906,8.489-1.906 c1.705,0,3.317,0.124,4.837,0.372c1.521,0.248,2.868,0.604,4.048,1.069c-0.095,1.117-0.295,2.173-0.604,3.163 c-2.604-0.99-5.366-1.489-8.28-1.489c-2.575,0-4.808,0.513-6.698,1.536c-1.893,1.024-3.342,2.544-4.349,4.56 c-1.009,2.015-1.514,4.448-1.514,7.302c0,2.977,0.489,5.498,1.467,7.559c0.978,2.063,2.41,3.628,4.302,4.698 s4.188,1.604,6.884,1.604c0.9,0,1.869-0.076,2.908-0.233c1.037-0.154,2.023-0.354,2.954-0.604v-14.047H1738.521z\"/>\n    <path fill=\"#EC0000\" d=\"M1745.358,884.586c0.497-0.122,1.048-0.239,1.651-0.349c0.604-0.108,1.141-0.162,1.606-0.162v32.467h-3.258 V884.586z\"/>\n    <path fill=\"#EC0000\" d=\"M1758.245,915.52c-1.676-1.054-2.939-2.519-3.793-4.396c-0.854-1.875-1.279-4.023-1.279-6.441 c0-2.606,0.458-4.862,1.373-6.77c0.913-1.906,2.232-3.374,3.953-4.396c1.723-1.022,3.775-1.534,6.164-1.534 c2.449,0,4.519,0.526,6.211,1.581c1.689,1.055,2.951,2.514,3.791,4.374c0.835,1.86,1.253,3.985,1.253,6.371 c0,2.637-0.448,4.916-1.347,6.839c-0.9,1.923-2.219,3.396-3.954,4.42c-1.737,1.021-3.815,1.534-6.233,1.534 C1761.965,917.102,1759.918,916.574,1758.245,915.52 M1770.569,911.612c1.365-1.705,2.047-4.062,2.047-7.07 c0-3.07-0.689-5.441-2.068-7.116c-1.382-1.676-3.374-2.513-5.979-2.513c-2.637,0-4.643,0.854-6.023,2.558 c-1.381,1.707-2.07,4.033-2.07,6.979c0,3.132,0.689,5.534,2.07,7.209c1.381,1.674,3.387,2.512,6.023,2.512 C1767.205,914.171,1769.205,913.317,1770.569,911.612\"/>\n    <path fill=\"#EC0000\" d=\"M1797.828,895.216c1.892,2.156,2.837,5.233,2.837,9.233c0,4.063-1.031,7.187-3.092,9.372 c-2.063,2.187-5.11,3.28-9.142,3.28c-2.946,0-5.598-0.436-7.954-1.304v-31.212c0.992-0.34,2.078-0.511,3.256-0.511v9.024 c1.769-0.744,3.676-1.117,5.722-1.117C1793.146,891.982,1795.937,893.061,1797.828,895.216 M1795.177,911.752 c1.457-1.645,2.187-4.077,2.187-7.303c0-6.388-2.775-9.582-8.327-9.582c-1.768,0-3.534,0.342-5.303,1.024v17.674 c1.643,0.436,3.304,0.651,4.978,0.651C1791.563,914.217,1793.72,913.396,1795.177,911.752\"/>\n    <path fill=\"#EC0000\" d=\"M1820.179,892.286c1.256,0.201,2.487,0.534,3.698,1v23.257h-3.023l-0.095-1.814 c-0.836,0.745-1.791,1.326-2.859,1.745c-1.069,0.418-2.226,0.628-3.465,0.628c-2.203,0-4.103-0.48-5.699-1.441 c-1.598-0.963-2.829-2.373-3.697-4.233c-0.869-1.86-1.303-4.094-1.303-6.698c0-4.155,1.031-7.319,3.094-9.488 c2.062-2.172,5.154-3.258,9.28-3.258C1817.565,891.982,1818.923,892.085,1820.179,892.286 M1808.991,911.845 c1.304,1.707,3.209,2.56,5.722,2.56c2.295,0,4.263-0.791,5.907-2.374v-16.604c-1.395-0.372-2.9-0.559-4.511-0.559 c-3.071,0-5.351,0.845-6.839,2.534c-1.488,1.691-2.233,4.134-2.233,7.327C1807.037,907.768,1807.688,910.14,1808.991,911.845\"/>\n    <path fill=\"#EC0000\" d=\"M1830.202,884.586c0.496-0.122,1.046-0.239,1.65-0.349c0.605-0.108,1.141-0.162,1.606-0.162v32.467h-3.257 V884.586z\"/>\n    <path fill=\"#EC0000\" d=\"M1867.183,887.471h-10.327v29.072h-3.257v-29.072H1842.9c0.063-1.209,0.186-2.246,0.373-3.116h24.282 C1867.491,885.564,1867.368,886.604,1867.183,887.471\"/>\n    <path fill=\"#EC0000\" d=\"M1886.208,905.659h-17.258c0.216,2.789,1.053,4.915,2.511,6.371c1.458,1.459,3.504,2.187,6.141,2.187 c1.334,0,2.667-0.163,4-0.488s2.606-0.828,3.814-1.512c-0.124,1.116-0.294,2.156-0.512,3.117c-1.116,0.65-2.271,1.109-3.466,1.372 c-1.193,0.264-2.503,0.396-3.928,0.396c-2.576,0-4.747-0.504-6.515-1.512c-1.769-1.008-3.109-2.457-4.023-4.35 c-0.914-1.892-1.372-4.171-1.372-6.839c0-2.387,0.379-4.51,1.139-6.371c0.761-1.86,1.945-3.334,3.56-4.42 c1.611-1.085,3.643-1.628,6.093-1.628c2.233,0,4.101,0.474,5.606,1.418c1.502,0.947,2.611,2.226,3.326,3.84 c0.713,1.611,1.069,3.458,1.069,5.534C1886.394,903.86,1886.331,904.821,1886.208,905.659 M1871.043,896.891 c-1.209,1.379-1.907,3.325-2.093,5.837h14.141v-0.186c0-2.388-0.582-4.272-1.744-5.651c-1.163-1.38-2.861-2.07-5.095-2.07 C1873.989,894.82,1872.254,895.511,1871.043,896.891\"/>\n    <path fill=\"#EC0000\" d=\"M1895.044,915.635c-1.704-0.975-3.023-2.395-3.953-4.254c-0.932-1.86-1.396-4.109-1.396-6.745 c0-2.575,0.458-4.808,1.372-6.698c0.914-1.892,2.287-3.357,4.116-4.396c1.83-1.039,4.093-1.559,6.792-1.559 c1.984,0,3.829,0.373,5.535,1.117c-0.031,0.868-0.155,1.813-0.372,2.837c-1.581-0.712-3.304-1.069-5.163-1.069 c-2.946,0-5.18,0.837-6.698,2.511c-1.521,1.676-2.28,4.063-2.28,7.164c0,2.14,0.357,3.939,1.07,5.396 c0.713,1.458,1.689,2.535,2.932,3.232c1.238,0.697,2.68,1.047,4.326,1.047c1.084,0,2.154-0.163,3.209-0.488 c1.053-0.325,2.031-0.783,2.93-1.372c-0.124,1.209-0.264,2.25-0.419,3.117c-1.552,1.085-3.55,1.628-5.999,1.628 C1898.751,917.102,1896.751,916.613,1895.044,915.635\"/>\n    <path fill=\"#EC0000\" d=\"M1929.046,894.309c1.521,1.551,2.28,3.784,2.28,6.698v15.536h-3.256v-14.604 c0-1.645-0.218-2.979-0.651-4.001c-0.436-1.023-1.132-1.791-2.094-2.303s-2.264-0.768-3.907-0.768c-2.202,0-4.218,0.402-6.047,1.21 v20.466h-3.257v-32.002c0.962-0.31,2.047-0.466,3.257-0.466v9.163c2.077-0.838,4.202-1.256,6.374-1.256 C1925.093,891.982,1927.527,892.759,1929.046,894.309\"/>\n    <path fill=\"#EC0000\" d=\"M1470.613,892.582c-0.073-1.697-0.549-3.381-1.428-4.904l-7.755-13.431c-0.593-1.025-1-2.123-1.227-3.248 l-0.324,0.562c-1.92,3.325-1.92,7.419,0,10.745l6.203,10.745c1.921,3.323,1.921,7.42,0,10.745l-0.323,0.561 c-0.228-1.125-0.635-2.224-1.226-3.247l-5.682-9.836l-3.624-6.282c-0.593-1.024-1.001-2.122-1.228-3.247l-0.325,0.562 c-1.913,3.312-1.917,7.393-0.019,10.711v0.001l6.223,10.778c1.92,3.324,1.92,7.419,0,10.745l-0.323,0.561 c-0.228-1.126-0.637-2.224-1.228-3.248l-7.755-13.432c-1.039-1.8-1.515-3.828-1.427-5.838c-8.303,2.17-14.032,6.775-14.032,12.106 c0,7.418,11.087,13.432,24.765,13.432s24.767-6.014,24.767-13.432C1484.646,899.357,1478.916,894.752,1470.613,892.582 M1493.995,915.517c0.093-1.907,0.372-3.209,0.884-4.698c2.606,1.21,5.954,1.814,8.513,1.814c4.327,0,6.746-1.396,6.746-4.14 c0-2.698-1.769-3.954-6.141-5.862l-2.374-1.022c-4.371-1.907-7.349-4.372-7.349-9.304c0-5.304,3.675-8.698,11.212-8.698 c3.022,0,5.86,0.418,8.513,1.347c-0.14,1.861-0.466,3.304-0.93,4.653c-2.514-0.931-5.49-1.35-7.631-1.35 c-4.047,0-5.908,1.582-5.908,4.048c0,2.419,1.814,3.814,5.071,5.21l2.513,1.069c5.906,2.514,8.373,5.164,8.373,9.676 c0,5.35-4.048,9.025-11.956,9.025C1499.717,917.285,1496.601,916.726,1493.995,915.517 M1540.467,893.281v23.259h-4.698 l-0.277-2.79c-1.303,2.045-3.303,3.349-6.56,3.349c-6.14,0-10.233-4.466-10.233-12.28c0-8.188,4.372-12.839,12.978-12.839 C1535.025,891.979,1537.77,892.35,1540.467,893.281 M1535.351,911.236v-14.605c-1.07-0.187-2.232-0.28-3.675-0.28 c-5.304,0-7.77,3.257-7.77,8.468c0,4.745,1.909,8.094,6.468,8.094C1532.372,912.912,1534.002,912.261,1535.351,911.236 M1566.658,900.91v15.63h-5.116v-14.746c0-3.675-1.21-5.443-6.326-5.443c-1.212,0-2.652,0.141-4.049,0.372v19.817h-5.115v-23.259 c3.256-0.791,6.836-1.302,9.303-1.302C1563.913,891.979,1566.658,895.281,1566.658,900.91 M1580.847,912.727 c1.488,0,2.885-0.279,4-0.698c-0.139,1.396-0.323,2.977-0.604,4.326c-1.395,0.558-2.883,0.744-4.326,0.744 c-4.977,0-8.141-2.279-8.141-7.954v-24.423c1.582-0.512,3.535-0.743,5.117-0.743v8.791h8.095c-0.095,1.582-0.233,3.024-0.465,4.373 h-7.63v11.396C1576.894,911.563,1578.382,912.727,1580.847,912.727 M1608.293,893.281v23.259h-4.696l-0.279-2.79 c-1.302,2.045-3.303,3.349-6.56,3.349c-6.14,0-10.233-4.466-10.233-12.28c0-8.188,4.372-12.839,12.978-12.839 C1602.852,891.979,1605.596,892.35,1608.293,893.281 M1603.177,911.236v-14.605c-1.068-0.187-2.232-0.28-3.675-0.28 c-5.302,0-7.769,3.257-7.769,8.468c0,4.745,1.907,8.094,6.466,8.094C1600.2,912.912,1601.828,912.261,1603.177,911.236 M1634.483,900.91v15.63h-5.115v-14.746c0-3.675-1.209-5.443-6.327-5.443c-1.209,0-2.651,0.141-4.047,0.372v19.817h-5.116v-23.259 c3.256-0.791,6.838-1.302,9.304-1.302C1631.74,891.979,1634.483,895.281,1634.483,900.91 M1660.442,883.979v32.562h-4.699 l-0.279-2.976c-1.302,2.186-3.302,3.534-6.65,3.534c-6.14,0-10.234-4.466-10.234-12.28c0-8.188,4.373-12.839,12.979-12.839 c1.35,0,2.604,0.14,3.815,0.37v-7.674C1656.955,884.116,1658.768,883.979,1660.442,883.979 M1655.373,911.144v-14.327 c-1.349-0.278-2.745-0.466-4.094-0.466c-5.071,0-7.489,3.163-7.489,8.468c0,4.745,1.906,8.094,6.467,8.094 C1652.302,912.912,1653.977,912.214,1655.373,911.144 M1686.168,906.586h-16.326c0.65,4.14,3.069,6.141,7.627,6.141 c2.791,0,5.63-0.606,8.188-1.769c-0.188,1.35-0.466,3.116-0.793,4.651c-2.324,1.072-4.79,1.489-7.535,1.489 c-8.56,0-12.698-4.744-12.698-12.699c0-6.932,3.21-12.42,11.35-12.42c7.304,0,10.466,4.791,10.466,10.651 C1686.446,904.074,1686.354,905.237,1686.168,906.586 M1669.748,902.306h11.536c0-3.814-2.045-6.046-5.582-6.046 C1672.073,896.26,1670.166,898.352,1669.748,902.306 M1704.079,892.165c0,1.534-0.186,3.395-0.466,4.373 c-1.209-0.141-2.419-0.188-3.86-0.188c-1.256,0-2.512,0.094-3.768,0.28v19.909h-5.118v-23.259c2.187-0.744,5.862-1.302,8.745-1.302 C1701.194,891.979,1702.962,892.026,1704.079,892.165\"/>\n  </g>\n</svg>";

var OneTrade_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"1523.394 337.777 455.476 45.385\" width=\"455.476\" height=\"45.385\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M2452.56-97.076c0-9.721,5.017-16.083,13.708-16.083c9.139,0,13.753,6.988,13.753,16.173 c0,9.676-5.018,16.082-13.664,16.082C2457.264-80.904,2452.56-87.804,2452.56-97.076 M2476.75-96.853 c0-8.422-3.898-13.35-10.482-13.35c-6.63,0-10.438,4.838-10.438,12.991c0,8.467,3.897,13.35,10.527,13.35 C2472.987-83.861,2476.75-88.744,2476.75-96.853\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n  <path fill=\"#EC0000\" d=\"M2503.63-96.674v15.142h-3.136v-14.559c0-4.166-1.568-6.316-7.079-6.316c-1.611,0-3.494,0.224-5.196,0.628 v20.247h-3.136v-22.397c3.002-0.807,5.913-1.255,8.422-1.255C2501.076-105.185,2503.63-102.094,2503.63-96.674\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n  <path fill=\"#EC0000\" d=\"M2527.597-92.015h-16.62c0.402,5.376,3.226,8.243,8.332,8.243c2.42,0,5.107-0.537,7.526-1.927 c-0.089,0.807-0.269,2.016-0.493,3.002c-2.239,1.3-4.567,1.702-7.122,1.702c-7.481,0-11.469-4.524-11.469-12.23 c0-6.675,3.047-11.96,10.393-11.96c6.721,0,9.632,4.614,9.632,10.393C2527.775-93.851,2527.731-92.91,2527.597-92.015 M2510.977-94.836h13.619v-0.18c0-4.436-2.15-7.438-6.586-7.438C2513.53-102.453,2511.336-99.496,2510.977-94.836\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n  <path fill=\"#EC0000\" d=\"M2559.046-109.53h-9.945v27.998h-3.137v-27.998h-10.303c0.045-0.807,0.179-2.15,0.357-3.001h23.385 C2559.358-111.725,2559.225-110.381,2559.046-109.53\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n  <path fill=\"#EC0000\" d=\"M2571.724-104.916c0,1.03-0.133,2.15-0.313,2.733c-1.031-0.135-2.196-0.181-3.451-0.181 c-1.299,0-2.911,0.181-4.389,0.494v20.337h-3.138v-22.397c1.972-0.673,5.018-1.165,7.438-1.165 C2569.35-105.095,2570.737-105.051,2571.724-104.916\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n  <path fill=\"#EC0000\" d=\"M2592.151-103.93v22.397h-2.911l-0.09-1.747c-1.522,1.344-3.583,2.285-6.092,2.285 c-6.362,0-10.304-4.256-10.304-11.916c0-7.885,3.896-12.274,11.917-12.274C2587.448-105.185,2589.778-104.826,2592.151-103.93 M2583.326-83.593c2.331,0,4.212-0.851,5.69-2.284v-15.992c-1.344-0.359-2.732-0.538-4.345-0.538c-6.003,0-8.736,3.495-8.736,9.497 C2575.936-87.131,2578.444-83.593,2583.326-83.593\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n  <path fill=\"#EC0000\" d=\"M2616.209-112.8v31.268h-2.911l-0.135-1.881c-1.522,1.478-3.629,2.419-6.81,2.419 c-5.688,0-9.676-4.256-9.676-11.916c0-7.974,3.897-12.274,11.692-12.274c1.658,0,3.225,0.224,4.703,0.627v-7.796 C2614.015-112.666,2615.179-112.8,2616.209-112.8 M2607.161-83.593c2.373,0,4.389-0.94,5.912-2.419v-15.678 c-1.611-0.449-3.314-0.718-4.838-0.718c-5.645,0-8.377,3.359-8.377,9.497C2599.858-87.131,2602.322-83.593,2607.161-83.593\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n  <path fill=\"#EC0000\" d=\"M2640.445-92.015h-16.62c0.404,5.376,3.227,8.243,8.334,8.243c2.418,0,5.106-0.537,7.524-1.927 c-0.089,0.807-0.269,2.016-0.493,3.002c-2.239,1.3-4.568,1.702-7.122,1.702c-7.481,0-11.469-4.524-11.469-12.23 c0-6.675,3.047-11.96,10.393-11.96c6.72,0,9.633,4.614,9.633,10.393C2640.625-93.851,2640.579-92.91,2640.445-92.015 M2623.825-94.836h13.619v-0.18c0-4.436-2.15-7.438-6.586-7.438C2626.379-102.453,2624.185-99.496,2623.825-94.836\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n  <path fill=\"#EC0000\" d=\"M2219.342-104.607c-0.072-1.635-0.529-3.257-1.376-4.725l-7.469-12.937 c-0.568-0.985-0.963-2.043-1.182-3.127l-0.312,0.541c-1.849,3.201-1.849,7.146,0,10.348l5.974,10.349c1.85,3.203,1.85,7.147,0,10.35 l-0.311,0.54c-0.219-1.084-0.612-2.141-1.182-3.128l-5.471-9.474l-3.492-6.05c-0.569-0.986-0.963-2.043-1.182-3.127l-0.312,0.54 c-1.843,3.191-1.849,7.121-0.019,10.316l0,0l5.993,10.382c1.849,3.201,1.849,7.147,0,10.349l-0.313,0.54 c-0.219-1.084-0.611-2.141-1.182-3.128l-7.468-12.935c-1.002-1.736-1.459-3.688-1.375-5.625 c-7.997,2.091-13.515,6.525-13.515,11.661c0,7.145,10.679,12.936,23.852,12.936c13.172,0,23.851-5.791,23.851-12.936 C2232.854-98.082,2227.337-102.519,2219.342-104.607 M2241.86-82.52c0.09-1.837,0.358-3.092,0.851-4.524 c2.51,1.165,5.735,1.747,8.198,1.747c4.168,0,6.497-1.345,6.497-3.988c0-2.598-1.702-3.807-5.914-5.645l-2.284-0.986 c-4.212-1.837-7.078-4.211-7.078-8.961c0-5.105,3.538-8.377,10.796-8.377c2.913,0,5.646,0.403,8.199,1.299 c-0.135,1.792-0.448,3.182-0.896,4.48c-2.419-0.896-5.287-1.299-7.348-1.299c-3.897,0-5.691,1.523-5.691,3.896 c0,2.331,1.748,3.675,4.884,5.02l2.42,1.03c5.69,2.419,8.064,4.972,8.064,9.317c0,5.153-3.897,8.692-11.514,8.692 C2247.37-80.817,2244.369-81.355,2241.86-82.52 M2286.618-103.935v22.401h-4.524l-0.27-2.689c-1.254,1.972-3.181,3.226-6.317,3.226 c-5.913,0-9.855-4.3-9.855-11.826c0-7.886,4.211-12.366,12.5-12.366C2281.376-105.189,2284.02-104.831,2286.618-103.935 M2281.689-86.642v-14.067c-1.029-0.18-2.149-0.27-3.538-0.27c-5.107,0-7.482,3.136-7.482,8.155c0,4.569,1.837,7.795,6.228,7.795 C2278.823-85.028,2280.391-85.655,2281.689-86.642 M2311.842-96.587v15.054h-4.928v-14.203c0-3.538-1.165-5.242-6.093-5.242 c-1.164,0-2.554,0.135-3.897,0.358v19.087h-4.929v-22.401c3.137-0.763,6.586-1.255,8.962-1.255 C2309.2-105.189,2311.842-102.01,2311.842-96.587 M2325.509-85.207c1.433,0,2.777-0.27,3.854-0.672 c-0.136,1.343-0.314,2.865-0.584,4.166c-1.344,0.537-2.777,0.716-4.166,0.716c-4.793,0-7.84-2.194-7.84-7.66v-23.521 c1.523-0.493,3.404-0.717,4.928-0.717v8.467h7.795c-0.09,1.523-0.223,2.912-0.447,4.212h-7.348v10.976 C2321.7-86.328,2323.134-85.207,2325.509-85.207 M2351.942-103.935v22.401h-4.525l-0.268-2.689 c-1.256,1.972-3.182,3.226-6.317,3.226c-5.915,0-9.856-4.3-9.856-11.826c0-7.886,4.21-12.366,12.499-12.366 C2346.7-105.189,2349.344-104.831,2351.942-103.935 M2347.015-86.642v-14.067c-1.03-0.18-2.15-0.27-3.54-0.27 c-5.107,0-7.481,3.136-7.481,8.155c0,4.569,1.837,7.795,6.227,7.795C2344.146-85.028,2345.715-85.655,2347.015-86.642 M2377.167-96.587v15.054h-4.929v-14.203c0-3.538-1.164-5.242-6.093-5.242c-1.164,0-2.554,0.135-3.898,0.358v19.087h-4.927v-22.401 c3.136-0.763,6.585-1.255,8.96-1.255C2374.523-105.189,2377.167-102.01,2377.167-96.587 M2402.167-112.895v31.361h-4.525 l-0.268-2.867c-1.256,2.104-3.182,3.403-6.406,3.403c-5.914,0-9.857-4.3-9.857-11.826c0-7.886,4.213-12.366,12.5-12.366 c1.299,0,2.508,0.135,3.675,0.358v-7.393C2398.808-112.762,2400.554-112.895,2402.167-112.895 M2397.285-86.732v-13.798 c-1.3-0.269-2.645-0.448-3.943-0.448c-4.884,0-7.214,3.047-7.214,8.155c0,4.569,1.838,7.795,6.229,7.795 C2394.327-85.028,2395.94-85.701,2397.285-86.732 M2426.943-91.121h-15.725c0.627,3.986,2.956,5.914,7.347,5.914 c2.688,0,5.421-0.584,7.885-1.703c-0.178,1.299-0.446,3.002-0.761,4.48c-2.24,1.03-4.614,1.433-7.258,1.433 c-8.244,0-12.23-4.569-12.23-12.23c0-6.676,3.091-11.962,10.931-11.962c7.034,0,10.082,4.614,10.082,10.26 C2427.214-93.541,2427.123-92.421,2426.943-91.121 M2411.129-95.244h11.11c0-3.673-1.97-5.823-5.375-5.823 C2413.368-101.067,2411.532-99.052,2411.129-95.244 M2444.193-105.01c0,1.479-0.179,3.271-0.448,4.211 c-1.164-0.135-2.329-0.18-3.719-0.18c-1.21,0-2.419,0.09-3.628,0.27v19.176h-4.929v-22.401c2.105-0.717,5.645-1.255,8.423-1.255 C2441.416-105.189,2443.118-105.145,2444.193-105.01\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n</svg>";

var PrivateBankingt_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"784.89 500 578.496 55.152\" width=\"578.496\" height=\"55.152\" xmlns=\"http://www.w3.org/2000/svg\">\n  <g transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\">\n    <g>\n      <defs>\n        <rect id=\"SVGID_37_\" x=\"1727.17\" y=\"49.678\" width=\"297.973\" height=\"42.301\"/>\n      </defs>\n      <clipPath id=\"SVGID_38_\">\n        <rect x=\"1727.17\" y=\"49.678\" width=\"297.973\" height=\"42.301\" transform=\"matrix(1, 0, 0, 1, 0, 0)\" overflow=\"visible\"/>\n      </clipPath>\n      <path clip-path=\"url(#SVGID_38_)\" fill=\"#1C242D\" d=\"M1747.46,59.59c0,6.515-4.096,10.517-12.379,10.517h-4.653v12.239h-3.258 V50.422c2.28-0.466,5.026-0.744,7.772-0.744C1743.877,49.678,1747.46,53.912,1747.46,59.59 M1744.156,59.868 c0-4.652-3.165-7.165-9.122-7.165c-1.535,0-3.07,0.093-4.606,0.372v14.007h4.606C1741.456,67.082,1744.156,64.336,1744.156,59.868 M1763.236,58.101c0,0.978-0.14,2.188-0.326,2.792c-1.069-0.139-2.28-0.187-3.583-0.187c-1.35,0-3.025,0.187-4.561,0.512v21.174 h-3.258V59.125c2.048-0.698,5.213-1.211,7.725-1.211C1760.769,57.914,1762.212,57.961,1763.236,58.101 M1767.005,52.47 c0-1.256,0.932-2.188,2.188-2.188s2.141,0.932,2.141,2.188c0,1.257-0.885,2.141-2.141,2.141S1767.005,53.727,1767.005,52.47 M1767.563,58.38h3.258v24.012h-3.258V58.38z M1796.229,58.38l-8.889,24.012h-4.049l-8.98-24.012h3.537l7.539,20.849l7.352-20.849 H1796.229z M1817.776,59.125v23.267h-3.025l-0.093-1.814c-1.583,1.396-3.724,2.373-6.329,2.373 c-6.607,0-10.703-4.421-10.703-12.378c0-8.19,4.049-12.751,12.379-12.751C1812.89,57.821,1815.31,58.193,1817.776,59.125 M1808.608,80.252c2.42,0,4.375-0.885,5.91-2.373V61.266c-1.396-0.373-2.839-0.56-4.514-0.56c-6.236,0-9.074,3.63-9.074,9.866 C1800.931,76.575,1803.536,80.252,1808.608,80.252 M1835.646,79.414c-0.093,0.885-0.233,1.908-0.419,2.792 c-1.396,0.512-2.746,0.744-4.188,0.744c-4.468,0-7.213-2.233-7.213-7.445V50.422c0.978-0.325,2.28-0.512,3.257-0.512v8.609h8.424 c-0.047,1.116-0.141,2.047-0.326,2.932h-8.098v13.682c0,3.535,1.629,5.025,4.515,5.025 C1832.9,80.158,1834.39,79.879,1835.646,79.414 M1857.937,71.503h-17.217c0.418,5.584,3.35,8.563,8.654,8.563 c2.514,0,5.306-0.559,7.818-2.001c-0.093,0.838-0.279,2.094-0.511,3.118c-2.328,1.35-4.748,1.768-7.399,1.768 c-7.771,0-11.867-4.699-11.867-12.704c0-6.934,3.117-12.425,10.75-12.425c6.98,0,9.958,4.792,9.958,10.796 C1858.123,69.595,1858.076,70.572,1857.937,71.503 M1840.72,68.571h14.146v-0.187c0-4.606-2.234-7.725-6.842-7.725 C1843.371,60.66,1841.092,63.731,1840.72,68.571 M1893.77,73.225c0,5.816-3.629,9.167-12.053,9.167h-9.354V50.33 c2.466-0.42,5.211-0.652,7.817-0.652c8.656,0,12.1,3.258,12.1,8.469c0,3.258-1.954,6.283-5.444,7.446 C1891.116,66.384,1893.77,69.316,1893.77,73.225 M1875.62,52.981v11.262h5.817c5.025,0,7.539-2.373,7.539-5.724 s-1.861-5.816-8.748-5.816C1878.739,52.703,1877.249,52.796,1875.62,52.981 M1890.419,73.363c0-3.769-2.886-6.095-8.749-6.095 h-6.05v12.099h5.771C1887.581,79.367,1890.419,77.413,1890.419,73.363 M1917.596,59.125v23.267h-3.025l-0.092-1.814 c-1.582,1.396-3.723,2.373-6.329,2.373c-6.608,0-10.703-4.421-10.703-12.378c0-8.19,4.048-12.751,12.379-12.751 C1912.71,57.821,1915.13,58.193,1917.596,59.125 M1908.429,80.252c2.42,0,4.374-0.885,5.91-2.373V61.266 c-1.396-0.373-2.839-0.56-4.514-0.56c-6.236,0-9.074,3.63-9.074,9.866C1900.751,76.575,1903.356,80.252,1908.429,80.252 M1943.191,66.663v15.729h-3.258V67.269c0-4.329-1.629-6.563-7.353-6.563c-1.675,0-3.63,0.233-5.397,0.652v21.033h-3.259V59.125 c3.118-0.838,6.144-1.304,8.749-1.304C1940.539,57.821,1943.191,61.032,1943.191,66.663 M1949.241,50.189 c1.07-0.325,2.187-0.466,3.257-0.466v32.668h-3.257V50.189z M1968.414,82.392h-4.05l-10.656-12.843v-0.326l10.007-10.843h3.954 l-10.145,10.982L1968.414,82.392z M1970.788,52.47c0-1.256,0.93-2.188,2.187-2.188s2.141,0.932,2.141,2.188 c0,1.257-0.884,2.141-2.141,2.141S1970.788,53.727,1970.788,52.47 M1971.346,58.38h3.258v24.012h-3.258V58.38z M2000.198,66.663 v15.729h-3.257V67.269c0-4.329-1.63-6.563-7.354-6.563c-1.675,0-3.629,0.233-5.398,0.652v21.033h-3.258V59.125 c3.118-0.838,6.143-1.304,8.749-1.304C1997.546,57.821,2000.198,61.032,2000.198,66.663 M2025.141,59.125v22.383 c0,6.469-3.396,10.471-11.168,10.471c-2.373,0-4.793-0.418-6.98-1.35c0-0.791,0.14-2.048,0.326-2.886 c2.141,1.023,4.746,1.443,6.654,1.443c5.026,0,7.911-2.048,7.911-7.26V80.67c-1.536,1.35-3.63,2.28-6.189,2.28 c-6.607,0-10.702-4.421-10.702-12.378c0-8.19,4.048-12.751,12.378-12.751C2020.256,57.821,2022.675,58.193,2025.141,59.125 M2021.884,77.879V61.266c-1.396-0.373-2.838-0.56-4.514-0.56c-6.236,0-9.074,3.63-9.074,9.866c0,6.003,2.605,9.68,7.678,9.68 C2018.394,80.252,2020.348,79.367,2021.884,77.879\"/>\n    </g>\n  </g>\n  <path fill=\"#E20917\" d=\"M1482.162,58.422c-0.073-1.7-0.549-3.385-1.429-4.908l-7.758-13.438c-0.592-1.024-1-2.122-1.228-3.249 l-0.324,0.563c-1.921,3.326-1.921,7.424,0,10.75l6.206,10.75c1.92,3.325,1.92,7.424,0,10.75l-0.324,0.562 c-0.227-1.126-0.635-2.225-1.227-3.249l-5.683-9.842l-3.628-6.284c-0.592-1.024-1-2.122-1.227-3.248l-0.324,0.562 c-1.914,3.314-1.92,7.396-0.02,10.716l0,0l6.226,10.784c1.921,3.326,1.921,7.424,0,10.749l-0.324,0.562 c-0.228-1.126-0.636-2.224-1.228-3.248l-7.758-13.438c-1.041-1.802-1.516-3.831-1.43-5.841c-8.305,2.17-14.037,6.777-14.037,12.111 c0,7.423,11.093,13.438,24.776,13.438s24.776-6.016,24.776-13.438C1496.2,65.199,1490.468,60.592,1482.162,58.422 M1505.554,81.365 c0.094-1.908,0.373-3.212,0.885-4.7c2.606,1.21,5.957,1.814,8.518,1.814c4.328,0,6.748-1.396,6.748-4.142 c0-2.699-1.77-3.955-6.144-5.863l-2.374-1.024c-4.374-1.908-7.354-4.375-7.354-9.308c0-5.305,3.678-8.703,11.217-8.703 c3.025,0,5.863,0.419,8.517,1.35c-0.14,1.861-0.466,3.305-0.931,4.654c-2.514-0.932-5.492-1.35-7.633-1.35 c-4.049,0-5.91,1.582-5.91,4.049c0,2.42,1.814,3.815,5.072,5.213l2.514,1.069c5.91,2.514,8.377,5.166,8.377,9.681 c0,5.352-4.049,9.028-11.96,9.028C1511.278,83.134,1508.161,82.575,1505.554,81.365 M1552.048,59.119V82.39h-4.7l-0.278-2.792 c-1.304,2.047-3.305,3.35-6.563,3.35c-6.143,0-10.238-4.468-10.238-12.285c0-8.191,4.374-12.846,12.984-12.846 C1546.604,57.816,1549.349,58.189,1552.048,59.119 M1546.929,77.084V62.471c-1.07-0.187-2.234-0.28-3.676-0.28 c-5.307,0-7.772,3.259-7.772,8.472c0,4.746,1.908,8.098,6.469,8.098C1543.95,78.76,1545.579,78.107,1546.929,77.084 M1578.251,66.752V82.39h-5.119V67.637c0-3.678-1.211-5.446-6.33-5.446c-1.209,0-2.652,0.141-4.049,0.372V82.39h-5.119V59.119 c3.258-0.791,6.842-1.303,9.309-1.303C1575.505,57.816,1578.251,61.12,1578.251,66.752 M1592.446,78.573 c1.49,0,2.887-0.279,4.003-0.698c-0.14,1.396-0.325,2.979-0.604,4.328c-1.396,0.559-2.886,0.744-4.328,0.744 c-4.98,0-8.145-2.28-8.145-7.958V50.556c1.582-0.512,3.537-0.744,5.119-0.744v8.796h8.098c-0.094,1.582-0.232,3.025-0.465,4.375 h-7.633v11.401C1588.491,77.409,1589.979,78.573,1592.446,78.573 M1619.906,59.119V82.39h-4.7l-0.279-2.792 c-1.304,2.047-3.305,3.35-6.563,3.35c-6.143,0-10.238-4.468-10.238-12.285c0-8.191,4.374-12.846,12.984-12.846 C1614.461,57.816,1617.206,58.189,1619.906,59.119 M1614.786,77.084V62.471c-1.07-0.187-2.232-0.28-3.676-0.28 c-5.306,0-7.771,3.259-7.771,8.472c0,4.746,1.907,8.098,6.469,8.098C1611.808,78.76,1613.438,78.107,1614.786,77.084 M1646.108,66.752V82.39h-5.119V67.637c0-3.678-1.209-5.446-6.329-5.446c-1.21,0-2.653,0.141-4.048,0.372V82.39h-5.12V59.119 c3.258-0.791,6.841-1.303,9.308-1.303C1643.363,57.816,1646.108,61.12,1646.108,66.752 M1672.079,49.812V82.39h-4.701l-0.278-2.979 c-1.304,2.187-3.305,3.536-6.655,3.536c-6.143,0-10.239-4.468-10.239-12.285c0-8.191,4.375-12.846,12.985-12.846 c1.35,0,2.605,0.14,3.816,0.373v-7.68C1668.589,49.952,1670.403,49.812,1672.079,49.812 M1667.007,76.99V62.657 c-1.35-0.28-2.746-0.467-4.096-0.467c-5.073,0-7.493,3.166-7.493,8.472c0,4.746,1.908,8.098,6.47,8.098 C1663.935,78.76,1665.61,78.062,1667.007,76.99 M1697.815,72.43h-16.334c0.65,4.142,3.071,6.144,7.632,6.144 c2.792,0,5.632-0.605,8.19-1.769c-0.186,1.349-0.465,3.118-0.791,4.654c-2.326,1.07-4.793,1.488-7.539,1.488 c-8.563,0-12.705-4.746-12.705-12.705c0-6.934,3.211-12.426,11.355-12.426c7.307,0,10.473,4.793,10.473,10.658 C1698.097,69.916,1698.003,71.08,1697.815,72.43 M1681.388,68.148h11.542c0-3.816-2.048-6.051-5.585-6.051 C1683.715,62.098,1681.806,64.192,1681.388,68.148 M1715.735,58.003c0,1.536-0.187,3.397-0.466,4.374 c-1.21-0.14-2.42-0.187-3.862-0.187c-1.258,0-2.514,0.094-3.77,0.28V82.39h-5.12V59.119c2.188-0.744,5.864-1.303,8.75-1.303 C1712.85,57.816,1714.618,57.863,1715.735,58.003\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n</svg>";

var Select_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"787.26 659.032 391.393 46.753\" width=\"391.393\" height=\"46.753\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M1597.25,221.798c0.23-1.339,0.369-2.77,0.462-4.34h-8.031v-8.722c-1.568,0-3.508,0.23-5.076,0.738v24.229 c0,5.631,3.138,7.893,8.076,7.893c1.432,0,2.907-0.185,4.292-0.739c0.277-1.338,0.461-2.907,0.601-4.291 c-1.107,0.415-2.492,0.691-3.97,0.691c-2.445,0-3.923-1.153-3.923-4.152v-11.308H1597.25z M1568.312,216.674 c-2.446,0-6,0.508-9.231,1.293v23.075h5.077v-19.66c1.385-0.231,2.814-0.37,4.016-0.37c5.077,0,6.276,1.754,6.276,5.4v14.63h5.076 v-15.507C1579.525,219.951,1576.804,216.674,1568.312,216.674 M1836.394,238.827c-2.861,0-4.476-1.477-4.476-4.984v-13.567h8.029 c0.185-0.877,0.276-1.8,0.322-2.906h-8.352v-8.537c-0.97,0-2.262,0.184-3.23,0.506v24.874c0,5.17,2.723,7.385,7.152,7.385 c1.431,0,2.77-0.231,4.153-0.739c0.185-0.877,0.323-1.892,0.416-2.769C1839.163,238.551,1837.686,238.827,1836.394,238.827 M1599.235,229.412c0,7.754,4.063,12.185,10.153,12.185c3.231,0,5.215-1.293,6.507-3.323l0.277,2.769h4.663v-23.075 c-2.679-0.924-5.401-1.293-8.724-1.293C1603.574,216.674,1599.235,221.289,1599.235,229.412 M1615.758,235.782 c-1.338,1.016-2.954,1.66-4.938,1.66c-4.522,0-6.416-3.323-6.416-8.03c0-5.169,2.446-8.4,7.708-8.4c1.431,0,2.584,0.093,3.646,0.277 V235.782z M1484.235,217.274c-0.072-1.686-0.544-3.356-1.416-4.867l-7.694-13.327c-0.587-1.016-0.992-2.104-1.217-3.221 l-0.322,0.557c-1.904,3.298-1.904,7.362,0,10.66l6.155,10.661c1.905,3.299,1.905,7.362,0,10.66l-0.321,0.558 c-0.226-1.117-0.63-2.205-1.218-3.222l-5.634-9.76l-3.598-6.231c-0.587-1.017-0.993-2.105-1.218-3.223l-0.322,0.557 c-1.897,3.288-1.902,7.335-0.019,10.627v0.001l6.174,10.693c1.904,3.299,1.904,7.362,0,10.662l-0.321,0.556 c-0.226-1.115-0.63-2.205-1.217-3.222l-7.694-13.325c-1.031-1.788-1.502-3.8-1.417-5.793c-8.235,2.152-13.921,6.721-13.921,12.011 c0,7.359,11.001,13.326,24.57,13.326c13.57,0,24.571-5.967,24.571-13.326C1498.157,223.996,1492.472,219.426,1484.235,217.274 M1520.448,223.229l-2.491-1.062c-3.231-1.386-5.031-2.77-5.031-5.17c0-2.445,1.846-4.015,5.861-4.015 c2.122,0,5.077,0.414,7.569,1.338c0.461-1.338,0.785-2.77,0.922-4.615c-2.63-0.922-5.445-1.339-8.445-1.339 c-7.477,0-11.123,3.37-11.123,8.631c0,4.892,2.954,7.339,7.292,9.231l2.354,1.015c4.339,1.892,6.093,3.138,6.093,5.815 c0,2.724-2.399,4.107-6.691,4.107c-2.539,0-5.862-0.6-8.446-1.8c-0.508,1.478-0.784,2.77-0.877,4.661 c2.584,1.2,5.677,1.754,9.461,1.754c7.846,0,11.861-3.646,11.861-8.954C1528.756,228.351,1526.31,225.721,1520.448,223.229 M1531.941,229.412c0,7.754,4.062,12.185,10.153,12.185c3.23,0,5.215-1.293,6.508-3.323l0.277,2.769h4.661v-23.075 c-2.677-0.924-5.399-1.293-8.722-1.293C1536.279,216.674,1531.941,221.289,1531.941,229.412 M1548.464,235.782 c-1.338,1.016-2.953,1.66-4.938,1.66c-4.523,0-6.416-3.323-6.416-8.03c0-5.169,2.446-8.4,7.709-8.4c1.43,0,2.584,0.093,3.645,0.277 V235.782z M1793.198,216.676c-7.568,0-10.66,5.446-10.66,12.322c0,7.937,4.062,12.599,11.768,12.599c2.631,0,5.03-0.416,7.338-1.754 c0.23-1.016,0.415-2.262,0.508-3.092c-2.492,1.431-5.262,1.983-7.753,1.983c-5.261,0-8.168-2.952-8.584-8.491h17.075 c0.139-0.922,0.184-1.892,0.184-2.861C1803.073,221.43,1800.12,216.676,1793.198,216.676 M1799.844,227.336h-14.029 c0.369-4.799,2.631-7.845,7.246-7.845c4.568,0,6.783,3.092,6.783,7.661V227.336z M1736.757,223.782l-2.215-0.876 c-4.015-1.568-6.138-3.185-6.138-6.414c0-3.369,2.723-4.984,7.106-4.984c2.446,0,5.17,0.462,7.753,1.477 c0.276-0.831,0.462-1.938,0.555-3.046c-2.585-0.969-5.169-1.478-8.308-1.478c-6.506,0-10.428,2.861-10.428,8.031 c0,4.938,2.859,7.383,7.566,9.229l2.216,0.876c5.077,2.031,6.922,3.554,6.922,6.738c0,3.415-2.86,5.306-7.753,5.306 c-2.77,0-6.184-0.645-8.951-2.169c-0.324,0.924-0.51,1.801-0.555,3.139c2.723,1.431,5.906,2.077,9.553,2.077 c7.152,0,11.029-3.415,11.029-8.491C1745.11,228.674,1742.803,226.183,1736.757,223.782 M1702.76,217.967v23.075h5.077v-19.753 c1.246-0.185,2.492-0.277,3.738-0.277c1.431,0,2.631,0.046,3.831,0.186c0.276-0.969,0.462-2.815,0.462-4.34 c-1.108-0.137-2.862-0.184-4.432-0.184C1708.575,216.674,1704.93,217.228,1702.76,217.967 M1759.51,216.676 c-7.568,0-10.66,5.446-10.66,12.322c0,7.937,4.061,12.599,11.768,12.599c2.63,0,5.03-0.416,7.337-1.754 c0.231-1.016,0.416-2.262,0.508-3.092c-2.491,1.431-5.26,1.983-7.752,1.983c-5.262,0-8.17-2.952-8.584-8.491h17.075 c0.138-0.922,0.184-1.892,0.184-2.861C1769.385,221.43,1766.432,216.676,1759.51,216.676 M1766.154,227.336h-14.028 c0.369-4.799,2.631-7.845,7.246-7.845c4.567,0,6.782,3.092,6.782,7.661V227.336z M1687.99,216.674 c-8.077,0-11.261,5.446-11.261,12.323c0,7.892,4.107,12.6,12.599,12.6c2.724,0,5.17-0.415,7.478-1.478 c0.323-1.521,0.6-3.275,0.784-4.615c-2.538,1.154-5.354,1.754-8.123,1.754c-4.522,0-6.923-1.984-7.568-6.092h16.199 c0.185-1.338,0.278-2.492,0.278-3.923C1698.376,221.428,1695.235,216.674,1687.99,216.674 M1681.806,226.92 c0.415-3.923,2.309-5.999,5.908-5.999c3.507,0,5.538,2.215,5.538,5.999H1681.806z M1635.604,216.674c-2.445,0-6,0.508-9.23,1.293 v23.075h5.077v-19.66c1.385-0.231,2.815-0.37,4.015-0.37c5.077,0,6.277,1.754,6.277,5.4v14.63h5.076v-15.507 C1646.819,219.951,1644.097,216.674,1635.604,216.674 M1774.462,241.042h3.23v-32.21c-1.016,0-2.4,0.276-3.23,0.506V241.042z M1818.903,219.537c1.522,0,3.368,0.276,5.122,1.063c0.186-0.924,0.323-1.848,0.369-2.815c-1.8-0.784-3.6-1.108-5.491-1.108 c-8.214,0-12.184,4.984-12.184,12.553c0,7.938,4.477,12.368,11.26,12.368c2.215,0,4.292-0.462,5.955-1.616 c0.184-1.015,0.322-2.169,0.414-3.092c-1.799,1.2-3.969,1.846-6.091,1.846c-4.755,0-8.262-2.999-8.262-9.598 C1809.996,223.091,1812.997,219.537,1818.903,219.537 M1667.544,217.043c-1.2-0.23-2.446-0.369-3.784-0.369 c-8.538,0-12.877,4.615-12.877,12.738c0,7.754,4.062,12.185,10.153,12.185c3.324,0,5.308-1.338,6.6-3.507l0.277,2.952h4.661v-32.306 c-1.662,0-3.462,0.138-5.03,0.692V217.043z M1667.544,235.688c-1.385,1.063-3.047,1.754-5.077,1.754 c-4.522,0-6.415-3.323-6.415-8.03c0-5.262,2.4-8.4,7.43-8.4c1.34,0,2.725,0.186,4.063,0.462V235.688z\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n</svg>";

var Shareholders_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"55.206 1167.01 509.06 44.851\" width=\"509.06\" height=\"44.851\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M981.277,745.813c0.045-1.284,0.222-2.126,0.531-3.011c2.657,1.461,5.933,2.08,8.589,2.08 c4.693,0,7.438-1.814,7.438-5.091c0-3.055-1.771-4.516-6.641-6.464l-2.126-0.841c-4.514-1.772-7.26-4.117-7.26-8.855 c0-4.958,3.763-7.703,10.006-7.703c3.01,0,5.49,0.486,7.97,1.416c-0.091,1.063-0.268,2.126-0.532,2.923 c-2.48-0.974-5.092-1.417-7.438-1.417c-4.206,0-6.819,1.55-6.819,4.781c0,3.099,2.037,4.648,5.889,6.153l2.126,0.842 c5.8,2.303,8.014,4.693,8.014,9.032c0,4.87-3.719,8.146-10.582,8.146C986.943,747.806,983.889,747.185,981.277,745.813 M1024.267,732.397v14.787h-3.1v-13.901c0-4.56-1.637-6.729-6.331-6.729c-1.947,0-3.938,0.354-5.756,1.15v19.48h-3.098v-30.458 c0.975-0.312,2.081-0.443,3.098-0.443v8.722c1.86-0.753,3.897-1.196,6.067-1.196 C1021.787,723.809,1024.267,727.086,1024.267,732.397 M1047.997,725.049v22.136h-2.877l-0.089-1.727 c-1.505,1.329-3.541,2.259-6.021,2.259c-6.287,0-10.183-4.206-10.183-11.776c0-7.792,3.851-12.132,11.776-12.132 C1043.35,723.809,1045.651,724.163,1047.997,725.049 M1039.276,745.148c2.303,0,4.161-0.841,5.622-2.258v-15.805 c-1.328-0.355-2.7-0.532-4.294-0.532c-5.934,0-8.634,3.454-8.634,9.387C1031.971,741.65,1034.45,745.148,1039.276,745.148 M1065.177,724.075c0,0.93-0.134,2.08-0.312,2.655c-1.017-0.131-2.168-0.177-3.409-0.177c-1.284,0-2.877,0.177-4.338,0.487v20.144 h-3.099v-22.136c1.948-0.664,4.959-1.151,7.349-1.151C1062.829,723.897,1064.202,723.941,1065.177,724.075 M1085.94,736.825h-16.381 c0.398,5.313,3.188,8.146,8.234,8.146c2.391,0,5.048-0.53,7.438-1.903c-0.089,0.797-0.266,1.991-0.486,2.966 c-2.214,1.284-4.517,1.683-7.04,1.683c-7.394,0-11.289-4.473-11.289-12.088c0-6.596,2.966-11.82,10.227-11.82 c6.641,0,9.475,4.562,9.475,10.271C1086.117,735.01,1086.072,735.94,1085.94,736.825 M1069.56,734.036h13.459v-0.177 c0-4.383-2.126-7.349-6.508-7.349C1072.083,726.511,1069.914,729.433,1069.56,734.036 M1109.273,732.397v14.787h-3.1v-13.901 c0-4.56-1.639-6.729-6.332-6.729c-1.948,0-3.94,0.354-5.756,1.15v19.48h-3.1v-30.458c0.975-0.312,2.082-0.443,3.1-0.443v8.722 c1.86-0.753,3.896-1.196,6.066-1.196C1106.793,723.809,1109.273,727.086,1109.273,732.397 M1113.657,735.896 c0-7.482,4.072-12.087,10.934-12.087c7.172,0,10.715,5.004,10.715,11.732c0,7.57-3.985,12.176-10.98,12.176 C1117.241,747.717,1113.657,742.714,1113.657,735.896 M1132.161,735.764c0-5.8-2.656-9.164-7.659-9.164 c-5.179,0-7.702,3.629-7.702,9.075c0,5.933,2.656,9.253,7.702,9.253C1129.639,744.928,1132.161,741.342,1132.161,735.764 M1139.954,716.771c0.797-0.222,2.126-0.487,3.1-0.487v30.901h-3.1V716.771z M1167.183,716.283v30.901h-2.878l-0.133-1.858 c-1.507,1.461-3.587,2.391-6.729,2.391c-5.622,0-9.563-4.206-9.563-11.776c0-7.881,3.852-12.132,11.554-12.132 c1.639,0,3.188,0.223,4.649,0.619v-7.701C1165.013,716.415,1166.164,716.283,1167.183,716.283 M1158.239,745.148 c2.346,0,4.338-0.93,5.844-2.391v-15.495c-1.594-0.443-3.276-0.709-4.781-0.709c-5.578,0-8.279,3.321-8.279,9.387 C1151.022,741.65,1153.458,745.148,1158.239,745.148 M1191.354,736.825h-16.381c0.4,5.313,3.188,8.146,8.236,8.146 c2.391,0,5.046-0.53,7.437-1.903c-0.088,0.797-0.265,1.991-0.485,2.966c-2.215,1.284-4.517,1.683-7.04,1.683 c-7.394,0-11.29-4.473-11.29-12.088c0-6.596,2.967-11.82,10.228-11.82c6.642,0,9.474,4.562,9.474,10.271 C1191.532,735.01,1191.488,735.94,1191.354,736.825 M1174.974,734.036h13.461v-0.177c0-4.383-2.126-7.349-6.509-7.349 C1177.499,726.511,1175.329,729.433,1174.974,734.036 M1207.561,724.075c0,0.93-0.134,2.08-0.312,2.655 c-1.018-0.131-2.169-0.177-3.408-0.177c-1.284,0-2.878,0.177-4.339,0.487v20.144h-3.099v-22.136c1.948-0.664,4.959-1.151,7.35-1.151 C1205.213,723.897,1206.586,723.941,1207.561,724.075 M1209.861,745.99c0.045-1.24,0.222-2.081,0.443-2.701 c2.081,1.195,4.959,1.728,7.217,1.728c3.409,0,5.489-1.063,5.489-3.586c0-2.657-2.435-3.587-4.561-4.252l-2.035-0.619 c-3.94-1.194-6.11-3.188-6.11-6.729c0-3.941,3.011-6.021,8.014-6.021c2.567,0,4.958,0.354,6.995,1.151 c-0.045,0.754-0.177,1.728-0.442,2.613c-2.037-0.754-4.295-1.108-6.464-1.108c-3.409,0-5.137,1.108-5.137,3.277 c0,2.479,1.728,3.232,4.472,4.161l2.081,0.709c3.498,1.194,6.198,2.878,6.198,6.729c0,4.027-3.1,6.375-8.411,6.375 C1214.511,747.717,1211.944,747.185,1209.861,745.99 M750.75,724.381c-0.069-1.617-0.522-3.219-1.359-4.67l-7.381-12.783 c-0.563-0.976-0.952-2.02-1.168-3.091l-0.309,0.533c-1.826,3.165-1.826,7.063,0,10.228l5.905,10.229 c1.826,3.163,1.826,7.062,0,10.227l-0.309,0.534c-0.216-1.072-0.604-2.115-1.168-3.091l-5.405-9.363l-3.45-5.979 c-0.564-0.975-0.952-2.02-1.169-3.09l-0.309,0.533c-1.821,3.153-1.826,7.037-0.019,10.195v0.001l5.923,10.259 c1.828,3.164,1.828,7.063,0,10.227l-0.308,0.535c-0.216-1.071-0.604-2.116-1.168-3.091l-7.382-12.784 c-0.989-1.716-1.442-3.646-1.358-5.557c-7.902,2.063-13.355,6.446-13.355,11.521c0,7.061,10.553,12.784,23.571,12.784 c13.018,0,23.572-5.724,23.572-12.784C764.105,730.829,758.651,726.444,750.75,724.381 M773.004,746.209 c0.089-1.815,0.356-3.054,0.843-4.472c2.479,1.152,5.667,1.727,8.102,1.727c4.118,0,6.42-1.328,6.42-3.94 c0-2.568-1.683-3.763-5.844-5.578l-2.258-0.976c-4.161-1.813-6.996-4.161-6.996-8.854c0-5.047,3.498-8.279,10.67-8.279 c2.879,0,5.579,0.398,8.104,1.283c-0.133,1.771-0.442,3.144-0.886,4.428c-2.391-0.886-5.224-1.284-7.261-1.284 c-3.853,0-5.624,1.505-5.624,3.853c0,2.303,1.728,3.631,4.827,4.959l2.39,1.019c5.624,2.391,7.971,4.914,7.971,9.209 c0,5.092-3.853,8.59-11.379,8.59C778.451,747.892,775.484,747.36,773.004,746.209 M817.237,725.045v22.138h-4.471l-0.267-2.655 c-1.239,1.947-3.144,3.188-6.241,3.188c-5.846,0-9.742-4.251-9.742-11.688c0-7.794,4.162-12.221,12.354-12.221 C812.058,723.806,814.669,724.159,817.237,725.045 M812.366,742.136v-13.903c-1.017-0.177-2.123-0.265-3.496-0.265 c-5.048,0-7.395,3.099-7.395,8.059c0,4.516,1.814,7.704,6.154,7.704C809.533,743.73,811.083,743.109,812.366,742.136 M842.167,732.307v14.876h-4.87v-14.035c0-3.498-1.151-5.18-6.022-5.18c-1.15,0-2.524,0.132-3.852,0.354v18.86h-4.87v-22.138 c3.1-0.752,6.508-1.239,8.855-1.239C839.554,723.806,842.167,726.949,842.167,732.307 M855.672,743.553 c1.417,0,2.745-0.266,3.807-0.663c-0.132,1.327-0.309,2.833-0.574,4.116c-1.327,0.532-2.745,0.709-4.118,0.709 c-4.736,0-7.748-2.17-7.748-7.571v-23.245c1.506-0.488,3.364-0.709,4.871-0.709v8.368h7.704c-0.089,1.505-0.222,2.878-0.443,4.163 h-7.261v10.847C851.909,742.445,853.325,743.553,855.672,743.553 M881.796,725.045v22.138h-4.472l-0.265-2.655 c-1.241,1.947-3.146,3.188-6.244,3.188c-5.844,0-9.74-4.251-9.74-11.688c0-7.794,4.16-12.221,12.352-12.221 C876.615,723.806,879.229,724.159,881.796,725.045 M876.925,742.136v-13.903c-1.018-0.177-2.125-0.265-3.498-0.265 c-5.047,0-7.393,3.099-7.393,8.059c0,4.516,1.815,7.704,6.154,7.704C874.091,743.73,875.642,743.109,876.925,742.136 M906.726,732.307v14.876h-4.87v-14.035c0-3.498-1.152-5.18-6.022-5.18c-1.151,0-2.524,0.132-3.853,0.354v18.86h-4.87v-22.138 c3.099-0.752,6.509-1.239,8.854-1.239C904.113,723.806,906.726,726.949,906.726,732.307 M931.433,716.189v30.993h-4.473 l-0.266-2.833c-1.238,2.081-3.143,3.365-6.331,3.365c-5.845,0-9.741-4.251-9.741-11.688c0-7.794,4.163-12.221,12.354-12.221 c1.283,0,2.48,0.133,3.63,0.354v-7.306C928.111,716.323,929.839,716.189,931.433,716.189 M926.605,742.047V728.41 c-1.284-0.266-2.61-0.442-3.896-0.442c-4.826,0-7.129,3.011-7.129,8.059c0,4.516,1.815,7.704,6.154,7.704 C923.684,743.73,925.278,743.066,926.605,742.047 M955.918,737.709h-15.54c0.619,3.939,2.921,5.844,7.26,5.844 c2.657,0,5.359-0.575,7.794-1.682c-0.177,1.284-0.443,2.966-0.753,4.427c-2.215,1.019-4.561,1.417-7.172,1.417 c-8.148,0-12.088-4.517-12.088-12.088c0-6.597,3.055-11.821,10.803-11.821c6.953,0,9.961,4.561,9.961,10.14 C956.183,735.317,956.095,736.425,955.918,737.709 M940.288,733.635h10.98c0-3.631-1.947-5.757-5.313-5.757 C942.502,727.878,940.687,729.871,940.288,733.635 M972.966,723.982c0,1.461-0.177,3.232-0.443,4.162 c-1.15-0.133-2.303-0.177-3.674-0.177c-1.196,0-2.392,0.088-3.586,0.265v18.95h-4.871v-22.138c2.081-0.708,5.579-1.239,8.323-1.239 C970.22,723.806,971.903,723.85,972.966,723.982\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n</svg>";

var Universidades_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"775.347 822.613 546.697 46.641\" width=\"546.697\" height=\"46.641\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M1655.099,380.571c-1.197-0.229-2.44-0.366-3.775-0.366c-8.518,0-12.845,4.603-12.845,12.706 c0,7.734,4.051,12.155,10.128,12.155c3.314,0,5.295-1.336,6.584-3.499l0.275,2.946h4.651v-32.229c-1.657,0-3.453,0.138-5.019,0.69 V380.571z M1655.099,399.173c-1.38,1.059-3.039,1.75-5.065,1.75c-4.511,0-6.399-3.315-6.399-8.012c0-5.247,2.394-8.379,7.412-8.379 c1.337,0,2.717,0.184,4.053,0.46V399.173z M1508.361,386.743l-2.488-1.061c-3.222-1.381-5.017-2.762-5.017-5.156 c0-2.439,1.841-4.005,5.848-4.005c2.116,0,5.063,0.414,7.549,1.335c0.461-1.335,0.783-2.763,0.921-4.604 c-2.624-0.921-5.433-1.336-8.425-1.336c-7.459,0-11.096,3.362-11.096,8.61c0,4.881,2.946,7.32,7.274,9.209l2.349,1.013 c4.327,1.887,6.076,3.13,6.076,5.8c0,2.717-2.394,4.098-6.675,4.098c-2.533,0-5.847-0.599-8.426-1.795 c-0.507,1.473-0.783,2.763-0.876,4.649c2.579,1.198,5.665,1.75,9.438,1.75c7.828,0,11.833-3.637,11.833-8.932 C1516.647,391.853,1514.208,389.228,1508.361,386.743 M1675.495,380.205c-8.057,0-11.232,5.432-11.232,12.293 c0,7.872,4.096,12.568,12.567,12.568c2.717,0,5.158-0.415,7.459-1.474c0.322-1.521,0.599-3.27,0.783-4.604 c-2.532,1.151-5.341,1.749-8.104,1.749c-4.512,0-6.906-1.979-7.55-6.076h16.16c0.183-1.335,0.275-2.486,0.275-3.913 C1685.854,384.946,1682.724,380.205,1675.495,380.205 M1669.326,390.424c0.414-3.912,2.303-5.984,5.894-5.984 c3.499,0,5.524,2.21,5.524,5.984H1669.326z M1472.234,380.803c-0.071-1.682-0.543-3.349-1.413-4.855l-7.675-13.294 c-0.584-1.013-0.989-2.101-1.214-3.214l-0.32,0.556c-1.9,3.29-1.9,7.344,0,10.634l6.141,10.635c1.899,3.291,1.899,7.347,0,10.636 l-0.322,0.556c-0.223-1.114-0.629-2.2-1.213-3.215l-5.622-9.736l-3.589-6.215c-0.585-1.015-0.989-2.102-1.215-3.214l-0.32,0.556 c-1.894,3.277-1.899,7.316-0.018,10.6l-0.002,0.001l6.16,10.668c1.899,3.29,1.899,7.344,0,10.635l-0.321,0.555 c-0.224-1.112-0.628-2.198-1.214-3.213l-7.676-13.294c-1.029-1.783-1.499-3.79-1.412-5.778c-8.217,2.146-13.888,6.704-13.888,11.981 c0,7.343,10.974,13.293,24.511,13.293c13.536,0,24.511-5.95,24.511-13.293C1486.123,387.508,1480.453,382.948,1472.234,380.803 M1519.826,392.911c0,7.734,4.052,12.155,10.128,12.155c3.223,0,5.201-1.29,6.492-3.315l0.276,2.763h4.649v-23.021 c-2.671-0.922-5.385-1.288-8.701-1.288C1524.153,380.205,1519.826,384.808,1519.826,392.911 M1536.308,399.265 c-1.334,1.014-2.946,1.658-4.926,1.658c-4.512,0-6.4-3.315-6.4-8.012c0-5.157,2.441-8.379,7.689-8.379 c1.426,0,2.579,0.092,3.637,0.275V399.265z M1556.106,380.205c-2.44,0-5.984,0.506-9.209,1.288v23.021h5.066V384.9 c1.381-0.23,2.807-0.368,4.004-0.368c5.064,0,6.262,1.749,6.262,5.386v14.596h5.063v-15.47 C1567.293,383.473,1564.578,380.205,1556.106,380.205 M1623.237,380.205c-2.44,0-5.985,0.506-9.207,1.288v23.021h5.063V384.9 c1.382-0.23,2.809-0.368,4.008-0.368c5.063,0,6.261,1.749,6.261,5.386v14.596h5.063v-15.47 C1634.425,383.473,1631.708,380.205,1623.237,380.205 M1690.229,381.493v23.021h5.064v-19.706c1.244-0.184,2.486-0.275,3.729-0.275 c1.428,0,2.624,0.046,3.821,0.184c0.276-0.967,0.46-2.809,0.46-4.327c-1.104-0.139-2.854-0.184-4.42-0.184 C1696.031,380.205,1692.394,380.757,1690.229,381.493 M1586.957,392.911c0,7.734,4.05,12.155,10.128,12.155 c3.224,0,5.203-1.29,6.492-3.315l0.276,2.763h4.65v-23.021c-2.671-0.922-5.388-1.288-8.702-1.288 C1591.284,380.205,1586.957,384.808,1586.957,392.911 M1603.438,399.265c-1.334,1.014-2.946,1.658-4.927,1.658 c-4.513,0-6.399-3.315-6.399-8.012c0-5.157,2.441-8.379,7.689-8.379c1.426,0,2.578,0.092,3.637,0.275V399.265z M1584.976,385.315 c0.23-1.336,0.369-2.764,0.46-4.329h-8.01v-8.701c-1.567,0-3.501,0.23-5.065,0.737v24.171c0,5.616,3.13,7.873,8.057,7.873 c1.428,0,2.9-0.184,4.281-0.737c0.277-1.336,0.461-2.9,0.599-4.282c-1.104,0.415-2.485,0.69-3.96,0.69 c-2.439,0-3.911-1.15-3.911-4.143v-11.279H1584.976z M1752.411,380.208c-2.577,0-5.57,0.459-8.654,1.289v23.018h3.223v-20.809 c1.749-0.414,3.683-0.645,5.34-0.645c5.662,0,7.273,2.21,7.273,6.491v14.962h3.223v-15.562 C1762.815,383.384,1760.192,380.208,1752.411,380.208 M1884.493,380.852c-1.52-0.415-3.131-0.644-4.834-0.644 c-8.01,0-12.016,4.419-12.016,12.613c0,7.872,4.096,12.246,9.943,12.246c3.271,0,5.433-0.967,6.998-2.487l0.137,1.935h2.993v-32.133 c-1.059,0-2.256,0.138-3.222,0.46V380.852z M1884.493,399.91c-1.566,1.521-3.636,2.486-6.078,2.486 c-4.972,0-7.504-3.636-7.504-9.575c0-6.306,2.809-9.76,8.609-9.76c1.564,0,3.314,0.277,4.973,0.737V399.91z M1859.402,404.515h3.224 V380.76h-3.224V404.515z M1861.014,372.75c-1.242,0-2.163,0.92-2.163,2.163c0,1.242,0.921,2.118,2.163,2.118 c1.243,0,2.118-0.876,2.118-2.118C1863.132,373.67,1862.257,372.75,1861.014,372.75 M1892.733,392.821 c0,7.872,4.052,12.246,10.589,12.246c2.578,0,4.696-0.967,6.261-2.348l0.092,1.795h2.993v-23.018 c-2.439-0.921-4.833-1.289-7.688-1.289C1896.739,380.208,1892.733,384.719,1892.733,392.821 M1909.445,400.049 c-1.519,1.473-3.452,2.348-5.847,2.348c-5.018,0-7.596-3.636-7.596-9.575c0-6.168,2.809-9.76,8.977-9.76 c1.657,0,3.084,0.185,4.466,0.553V400.049z M1977.351,391.44l-2.164-0.737c-2.854-0.966-4.65-1.75-4.65-4.326 c0-2.256,1.797-3.407,5.342-3.407c2.256,0,4.604,0.369,6.721,1.151c0.277-0.922,0.416-1.936,0.461-2.716 c-2.117-0.829-4.604-1.197-7.273-1.197c-5.202,0-8.332,2.163-8.332,6.261c0,3.683,2.254,5.754,6.353,6.997l2.117,0.646 c2.21,0.689,4.741,1.656,4.741,4.419c0,2.624-2.163,3.729-5.707,3.729c-2.349,0-5.34-0.552-7.504-1.796 c-0.23,0.645-0.416,1.521-0.461,2.809c2.163,1.243,4.833,1.796,8.055,1.796c5.525,0,8.748-2.439,8.748-6.63 C1983.796,394.433,1980.988,392.684,1977.351,391.44 M1953.229,380.208c-7.551,0-10.636,5.432-10.636,12.291 c0,7.918,4.053,12.568,11.739,12.568c2.624,0,5.018-0.414,7.32-1.75c0.23-1.013,0.414-2.255,0.507-3.084 c-2.487,1.426-5.25,1.979-7.735,1.979c-5.247,0-8.147-2.947-8.562-8.471h17.032c0.138-0.921,0.186-1.887,0.186-2.854 C1963.08,384.949,1960.134,380.208,1953.229,380.208 M1959.856,390.842h-13.994c0.367-4.788,2.624-7.826,7.229-7.826 c4.557,0,6.766,3.084,6.766,7.642V390.842z M1934.536,380.852c-1.518-0.415-3.131-0.644-4.834-0.644 c-8.01,0-12.016,4.419-12.016,12.613c0,7.872,4.098,12.246,9.944,12.246c3.269,0,5.433-0.967,6.997-2.487l0.137,1.935h2.994v-32.133 c-1.06,0-2.256,0.138-3.223,0.46V380.852z M1934.536,399.91c-1.565,1.521-3.637,2.486-6.077,2.486c-4.972,0-7.504-3.636-7.504-9.575 c0-6.306,2.809-9.76,8.608-9.76c1.565,0,3.314,0.277,4.973,0.737V399.91z M1823.908,381.497v23.018h3.222v-20.946 c1.52-0.322,3.178-0.507,4.512-0.507c1.289,0,2.486,0.046,3.545,0.185c0.186-0.599,0.323-1.796,0.323-2.762 c-1.014-0.139-2.44-0.185-3.96-0.185C1829.063,380.3,1825.934,380.806,1823.908,381.497 M1770.413,372.75 c-1.244,0-2.165,0.92-2.165,2.163c0,1.242,0.921,2.118,2.165,2.118c1.242,0,2.117-0.876,2.117-2.118 C1772.53,373.67,1771.655,372.75,1770.413,372.75 M1768.801,404.515h3.222V380.76h-3.222V404.515z M1786.433,401.384l-7.458-20.624 h-3.498l8.886,23.755h4.005l8.792-23.755h-3.451L1786.433,401.384z M1808.991,380.208c-7.549,0-10.635,5.432-10.635,12.291 c0,7.918,4.052,12.568,11.74,12.568c2.623,0,5.018-0.414,7.319-1.75c0.23-1.013,0.415-2.255,0.506-3.084 c-2.485,1.426-5.248,1.979-7.733,1.979c-5.248,0-8.148-2.947-8.563-8.471h17.034c0.138-0.921,0.184-1.887,0.184-2.854 C1818.844,384.949,1815.897,380.208,1808.991,380.208 M1815.621,390.842h-13.995c0.368-4.788,2.624-7.826,7.228-7.826 c4.557,0,6.768,3.084,6.768,7.642V390.842z M1848.261,391.44l-2.163-0.737c-2.854-0.966-4.649-1.75-4.649-4.326 c0-2.256,1.795-3.407,5.34-3.407c2.256,0,4.604,0.369,6.723,1.151c0.274-0.922,0.413-1.936,0.459-2.716 c-2.118-0.829-4.603-1.197-7.273-1.197c-5.202,0-8.332,2.163-8.332,6.261c0,3.683,2.256,5.754,6.353,6.997l2.118,0.646 c2.209,0.689,4.741,1.656,4.741,4.419c0,2.624-2.164,3.729-5.708,3.729c-2.349,0-5.34-0.552-7.504-1.796 c-0.23,0.645-0.415,1.521-0.461,2.809c2.165,1.243,4.835,1.796,8.057,1.796c5.523,0,8.747-2.439,8.747-6.63 C1854.707,394.433,1851.899,392.684,1848.261,391.44 M1733.813,393.512c0,5.111-3.039,8.609-8.563,8.609 c-5.432,0-8.609-3.498-8.609-8.748v-20.991c-1.012,0-2.395,0.275-3.223,0.507v20.945c0,6.399,4.099,11.324,11.832,11.324 c7.689,0,11.785-4.925,11.785-11.324v-21.452c-1.012,0-2.394,0.275-3.222,0.507V393.512z\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n</svg>";

var Universities_Extended_logo = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"776.792 995.661 496.912 46.641\" width=\"496.912\" height=\"46.641\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#EC0000\" d=\"M1738.472,545.429v21.452c0,6.4-4.096,11.326-11.783,11.326c-7.734,0-11.832-4.926-11.832-11.326v-20.944 c0.829-0.23,2.21-0.508,3.222-0.508v20.993c0,5.247,3.177,8.746,8.61,8.746c5.522,0,8.562-3.499,8.562-8.608v-20.623 C1736.078,545.706,1737.46,545.429,1738.472,545.429 M1764.254,562.002v15.56h-3.224v-14.961c0-4.281-1.611-6.491-7.273-6.491 c-1.656,0-3.591,0.23-5.34,0.646v20.807h-3.223v-23.017c3.085-0.829,6.076-1.29,8.654-1.29 C1761.629,553.255,1764.254,556.433,1764.254,562.002 M1769.685,547.962c0-1.244,0.922-2.164,2.165-2.164s2.117,0.92,2.117,2.164 c0,1.243-0.874,2.117-2.117,2.117S1769.685,549.205,1769.685,547.962 M1770.239,553.809h3.222v23.753h-3.222V553.809z M1798.596,553.809l-8.792,23.753h-4.005l-8.886-23.753h3.499l7.458,20.622l7.273-20.622H1798.596z M1820.095,566.79h-17.033 c0.415,5.524,3.314,8.471,8.563,8.471c2.485,0,5.247-0.553,7.732-1.979c-0.091,0.828-0.275,2.07-0.506,3.084 c-2.301,1.335-4.694,1.749-7.319,1.749c-7.688,0-11.738-4.648-11.738-12.567c0-6.859,3.084-12.292,10.634-12.292 c6.904,0,9.853,4.742,9.853,10.68C1820.28,564.902,1820.233,565.869,1820.095,566.79 M1803.062,563.89h13.995v-0.184 c0-4.558-2.21-7.642-6.767-7.642C1805.687,556.064,1803.43,559.103,1803.062,563.89 M1836.944,553.531 c0,0.968-0.138,2.163-0.322,2.763c-1.06-0.138-2.256-0.185-3.545-0.185c-1.335,0-2.992,0.185-4.512,0.506v20.946h-3.223v-23.017 c2.025-0.691,5.156-1.197,7.642-1.197C1834.504,553.348,1835.931,553.394,1836.944,553.531 M1839.338,576.319 c0.047-1.289,0.23-2.164,0.46-2.809c2.164,1.244,5.156,1.795,7.505,1.795c3.544,0,5.708-1.104,5.708-3.729 c0-2.762-2.531-3.729-4.742-4.419l-2.117-0.646c-4.098-1.242-6.354-3.313-6.354-6.996c0-4.098,3.131-6.262,8.333-6.262 c2.671,0,5.155,0.369,7.274,1.197c-0.047,0.783-0.185,1.795-0.461,2.717c-2.117-0.782-4.465-1.15-6.721-1.15 c-3.545,0-5.34,1.15-5.34,3.405c0,2.578,1.795,3.361,4.648,4.328l2.164,0.735c3.637,1.244,6.444,2.993,6.444,6.999 c0,4.188-3.222,6.628-8.747,6.628C1844.173,578.114,1841.501,577.562,1839.338,576.319 M1860.284,547.962 c0-1.244,0.921-2.164,2.163-2.164c1.244,0,2.118,0.92,2.118,2.164c0,1.243-0.874,2.117-2.118,2.117 C1861.205,550.079,1860.284,549.205,1860.284,547.962 M1860.837,553.809h3.223v23.753h-3.223V553.809z M1881.736,574.615 c-0.091,0.874-0.23,1.888-0.415,2.764c-1.38,0.505-2.715,0.735-4.143,0.735c-4.419,0-7.135-2.21-7.135-7.366v-24.812 c0.967-0.323,2.256-0.508,3.222-0.508v8.518h8.333c-0.047,1.104-0.138,2.025-0.322,2.899h-8.011v13.534 c0,3.499,1.612,4.972,4.466,4.972C1879.021,575.352,1880.493,575.076,1881.736,574.615 M1885.649,547.962 c0-1.244,0.921-2.164,2.164-2.164c1.244,0,2.117,0.92,2.117,2.164c0,1.243-0.873,2.117-2.117,2.117 C1886.57,550.079,1885.649,549.205,1885.649,547.962 M1886.202,553.809h3.222v23.753h-3.222V553.809z M1914.56,566.79h-17.033 c0.415,5.524,3.314,8.471,8.563,8.471c2.485,0,5.247-0.553,7.732-1.979c-0.091,0.828-0.275,2.07-0.506,3.084 c-2.301,1.335-4.695,1.749-7.319,1.749c-7.688,0-11.739-4.648-11.739-12.567c0-6.859,3.085-12.292,10.634-12.292 c6.906,0,9.854,4.742,9.854,10.68C1914.745,564.902,1914.698,565.869,1914.56,566.79 M1897.526,563.89h13.995v-0.184 c0-4.558-2.21-7.642-6.767-7.642C1900.151,556.064,1897.895,559.103,1897.526,563.89 M1918.656,576.319 c0.047-1.289,0.231-2.164,0.462-2.809c2.163,1.244,5.155,1.795,7.503,1.795c3.545,0,5.708-1.104,5.708-3.729 c0-2.762-2.531-3.729-4.74-4.419l-2.119-0.646c-4.096-1.242-6.352-3.313-6.352-6.996c0-4.098,3.13-6.262,8.331-6.262 c2.671,0,5.156,0.369,7.274,1.197c-0.045,0.783-0.185,1.795-0.461,2.717c-2.117-0.782-4.465-1.15-6.721-1.15 c-3.545,0-5.34,1.15-5.34,3.405c0,2.578,1.795,3.361,4.649,4.328l2.163,0.735c3.637,1.244,6.445,2.993,6.445,6.999 c0,4.188-3.223,6.628-8.747,6.628C1923.491,578.114,1920.821,577.562,1918.656,576.319 M1473.679,553.851 c-0.073-1.682-0.543-3.349-1.412-4.854l-7.676-13.294c-0.586-1.014-0.989-2.101-1.214-3.215l-0.321,0.557 c-1.899,3.29-1.899,7.344,0,10.634l6.14,10.636c1.9,3.289,1.9,7.344,0,10.634l-0.32,0.555c-0.226-1.112-0.629-2.2-1.214-3.214 l-5.621-9.736l-3.589-6.216c-0.585-1.013-0.989-2.099-1.214-3.214l-0.322,0.557c-1.893,3.278-1.898,7.315-0.018,10.601h-0.001 l6.159,10.668c1.899,3.29,1.899,7.344,0,10.634l-0.32,0.557c-0.225-1.114-0.629-2.201-1.214-3.215l-7.675-13.293 c-1.03-1.782-1.501-3.791-1.414-5.777c-8.217,2.145-13.887,6.704-13.887,11.979c0,7.343,10.974,13.294,24.51,13.294 c13.537,0,24.511-5.951,24.511-13.294C1487.566,560.557,1481.896,555.996,1473.679,553.851 M1496.82,576.548 c0.091-1.888,0.368-3.177,0.874-4.649c2.578,1.197,5.893,1.795,8.426,1.795c4.281,0,6.676-1.381,6.676-4.098 c0-2.671-1.75-3.913-6.077-5.8l-2.349-1.014c-4.327-1.888-7.274-4.328-7.274-9.209c0-5.247,3.638-8.607,11.097-8.607 c2.991,0,5.799,0.414,8.424,1.335c-0.138,1.842-0.46,3.269-0.92,4.604c-2.486-0.921-5.434-1.335-7.551-1.335 c-4.005,0-5.848,1.565-5.848,4.004c0,2.396,1.797,3.776,5.019,5.158l2.486,1.059c5.848,2.486,8.286,5.11,8.286,9.575 c0,5.295-4.004,8.933-11.831,8.933C1502.482,578.298,1499.397,577.744,1496.82,576.548 M1542.813,554.541v23.02h-4.649l-0.276-2.763 c-1.288,2.025-3.27,3.314-6.49,3.314c-6.078,0-10.13-4.419-10.13-12.153c0-8.103,4.328-12.706,12.845-12.706 C1537.427,553.253,1540.144,553.62,1542.813,554.541 M1537.749,572.313v-14.456c-1.059-0.186-2.209-0.276-3.637-0.276 c-5.248,0-7.688,3.223-7.688,8.379c0,4.696,1.888,8.011,6.399,8.011C1534.803,573.97,1536.414,573.325,1537.749,572.313 M1568.734,562.092v15.469h-5.063v-14.594c0-3.637-1.197-5.387-6.262-5.387c-1.196,0-2.625,0.138-4.005,0.368v19.612h-5.064v-23.02 c3.223-0.783,6.769-1.288,9.208-1.288C1566.019,553.253,1568.734,556.521,1568.734,562.092 M1582.777,573.786 c1.474,0,2.854-0.277,3.96-0.69c-0.138,1.381-0.322,2.946-0.6,4.28c-1.38,0.553-2.854,0.736-4.279,0.736 c-4.928,0-8.058-2.256-8.058-7.873V546.07c1.565-0.506,3.499-0.736,5.064-0.736v8.701h8.01c-0.092,1.565-0.229,2.992-0.46,4.326 h-7.55v11.28C1578.865,572.635,1580.339,573.786,1582.777,573.786 M1609.942,554.541v23.02h-4.65l-0.275-2.763 c-1.291,2.025-3.27,3.314-6.492,3.314c-6.078,0-10.129-4.419-10.129-12.153c0-8.103,4.328-12.706,12.846-12.706 C1604.556,553.253,1607.272,553.62,1609.942,554.541 M1604.877,572.313v-14.456c-1.058-0.186-2.21-0.276-3.636-0.276 c-5.249,0-7.688,3.223-7.688,8.379c0,4.696,1.886,8.011,6.398,8.011C1601.931,573.97,1603.543,573.325,1604.877,572.313 M1635.862,562.092v15.469h-5.063v-14.594c0-3.637-1.198-5.387-6.262-5.387c-1.197,0-2.625,0.138-4.006,0.368v19.612h-5.064v-23.02 c3.223-0.783,6.769-1.288,9.207-1.288C1633.147,553.253,1635.862,556.521,1635.862,562.092 M1661.554,545.334v32.227h-4.649 l-0.275-2.946c-1.29,2.164-3.27,3.498-6.585,3.498c-6.076,0-10.129-4.419-10.129-12.153c0-8.103,4.328-12.706,12.846-12.706 c1.335,0,2.578,0.138,3.775,0.367v-7.597C1658.102,545.472,1659.897,545.334,1661.554,545.334 M1656.536,572.22v-14.18 c-1.336-0.276-2.716-0.46-4.051-0.46c-5.019,0-7.413,3.13-7.413,8.379c0,4.696,1.888,8.011,6.4,8.011 C1653.497,573.97,1655.154,573.278,1656.536,572.22 M1687.014,567.708h-16.158c0.644,4.098,3.038,6.078,7.55,6.078 c2.763,0,5.57-0.599,8.103-1.75c-0.185,1.335-0.46,3.084-0.781,4.604c-2.303,1.06-4.743,1.473-7.459,1.473 c-8.472,0-12.568-4.694-12.568-12.568c0-6.859,3.177-12.291,11.233-12.291c7.228,0,10.359,4.741,10.359,10.543 C1687.292,565.223,1687.199,566.374,1687.014,567.708 M1670.763,563.473h11.418c0-3.774-2.025-5.985-5.525-5.985 C1673.065,557.487,1671.178,559.56,1670.763,563.473 M1704.741,553.436c0,1.52-0.185,3.361-0.461,4.328 c-1.197-0.139-2.393-0.184-3.821-0.184c-1.242,0-2.485,0.091-3.729,0.276v19.704h-5.064v-23.02c2.165-0.737,5.803-1.288,8.656-1.288 C1701.888,553.253,1703.636,553.298,1704.741,553.436\" transform=\"matrix(1, 0, 0, 1, -661.754578, 463.173279)\"/>\n</svg>";

var Tuiio_logo = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"454px\" height=\"78px\" viewBox=\"0 0 454 78\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <title>Tuiio</title>\n    <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"Tuiio\" transform=\"translate(0.169000, 1.000000)\">\n            <path d=\"M35.324,29.932 C35.25,28.243 34.778,26.566 33.903,25.051 L26.187,11.685 C25.599,10.666 25.192,9.573 24.966,8.454 L24.643,9.013 C22.733,12.321 22.733,16.397 24.643,19.705 L30.817,30.398 C32.727,33.706 32.727,37.782 30.817,41.09 L30.494,41.649 C30.268,40.529 29.861,39.437 29.273,38.418 L23.622,28.629 L20.013,22.379 C19.424,21.36 19.018,20.267 18.792,19.148 L18.47,19.707 C16.567,23.003 16.561,27.063 18.451,30.365 L18.451,30.365 L24.643,41.091 C26.553,44.399 26.553,48.475 24.643,51.783 L24.321,52.342 C24.095,51.222 23.688,50.13 23.1,49.111 L15.384,35.745 C14.348,33.952 13.876,31.934 13.962,29.934 C5.701,32.093 -9.09494702e-13,36.676 -9.09494702e-13,41.981 C-9.09494702e-13,49.362 11.033,55.347 24.644,55.347 C38.255,55.347 49.288,49.363 49.288,41.981 C49.286,36.674 43.586,32.09 35.324,29.932 M58.591,52.753 C58.684,50.856 58.961,49.559 59.47,48.078 C62.062,49.282 65.395,49.883 67.941,49.883 C72.246,49.883 74.653,48.494 74.653,45.763 C74.653,43.078 72.894,41.828 68.542,39.931 L66.181,38.912 C61.829,37.015 58.868,34.56 58.868,29.654 C58.868,24.378 62.525,20.998 70.023,20.998 C73.032,20.998 75.856,21.415 78.495,22.341 C78.356,24.193 78.032,25.628 77.569,26.97 C75.07,26.044 72.107,25.628 69.978,25.628 C65.951,25.628 64.099,27.202 64.099,29.655 C64.099,32.062 65.904,33.45 69.145,34.84 L71.645,35.904 C77.524,38.404 79.977,41.043 79.977,45.532 C79.977,50.856 75.95,54.5120013 68.081,54.5120013 C64.284,54.513 61.183,53.957 58.591,52.753 M104.836,30.627 L104.836,53.773 L100.161,53.773 L99.884,50.995 C98.588,53.032 96.597,54.328 93.357,54.328 C87.246,54.328 83.173,49.885 83.173,42.108 C83.173,33.961 87.525,29.331998 96.088,29.331998 C99.42,29.331 102.151,29.701 104.836,30.627 M99.744,48.495 L99.744,33.96 C98.679,33.775 97.522,33.682 96.087,33.682 C90.81,33.682 88.357,36.922 88.357,42.107 C88.357,46.828 90.255,50.1610012 94.791,50.1610012 C96.782,50.162 98.402,49.514 99.744,48.495 M130.898,38.219 L130.898,53.773 L125.806,53.773 L125.806,39.099 C125.806,35.442 124.602,33.683 119.511,33.683 C118.307,33.683 116.872,33.822 115.483,34.053 L115.483,53.773 L110.391,53.773 L110.391,30.627 C113.631,29.84 117.195,29.331 119.649,29.331 C128.167,29.331 130.898,32.617 130.898,38.219 M145.018,49.976 C146.5,49.976 147.888,49.699 148.999,49.282 C148.86,50.67 148.675,52.244 148.397,53.586 C147.008,54.142 145.527,54.327 144.093,54.327 C139.139,54.327 135.991,52.059 135.991,46.412 L135.991,22.11 C137.565,21.6 139.509,21.369 141.083,21.369 L141.083,30.118 L149.137,30.118 C149.045,31.692 148.906,33.127 148.674,34.469 L141.083,34.469 L141.083,45.811 C141.084,48.819 142.564,49.976 145.018,49.976 M172.331,30.627 L172.331,53.773 L167.655,53.773 L167.378,50.995 C166.082,53.032 164.091,54.328 160.851,54.328 C154.741,54.328 150.667,49.885 150.667,42.108 C150.667,33.961 155.019,29.331998 163.582,29.331998 C166.915,29.331 169.646,29.701 172.331,30.627 M167.238,48.495 L167.238,33.96 C166.174,33.775 165.016,33.682 163.581,33.682 C158.304,33.682 155.851,36.922 155.851,42.107 C155.851,46.828 157.749,50.1610012 162.285,50.1610012 C164.276,50.162 165.896,49.514 167.238,48.495 M198.393,38.219 L198.393,53.773 L193.301,53.773 L193.301,39.099 C193.301,35.442 192.097,33.683 187.006,33.683 C185.802,33.683 184.367,33.822 182.979,34.053 L182.979,53.773 L177.887,53.773 L177.887,30.627 C181.127,29.84 184.692,29.331 187.145,29.331 C195.662,29.331 198.393,32.617 198.393,38.219 M224.225,21.369 L224.225,53.772 L219.549,53.772 L219.272,50.809 C217.976,52.985 215.985,54.327 212.652,54.327 C206.542,54.327 202.468,49.884 202.468,42.107 C202.468,33.96 206.819,29.331 215.383,29.331 C216.725,29.331 217.975,29.47 219.179,29.701 L219.179,22.063 C220.752,21.508 222.557,21.369 224.225,21.369 M219.178,48.402 L219.178,34.145 C217.835,33.867 216.447,33.682 215.104,33.682 C210.058,33.682 207.651,36.83 207.651,42.107 C207.651,46.828 209.549,50.1610011 214.085,50.1610011 C216.123,50.162 217.79,49.467 219.178,48.402 M249.823,43.866 L233.576,43.866 C234.224,47.986 236.631,49.976 241.167,49.976 C243.945,49.976 246.769,49.374 249.314,48.217 C249.128,49.559 248.852,51.319 248.527,52.845 C246.213,53.91 243.759,54.326 241.028,54.326 C232.51,54.326 228.391,49.604 228.391,41.689 C228.391,34.792 231.585,29.33 239.685,29.33 C246.953,29.33 250.101,34.098 250.101,39.931 C250.101,41.367 250.009,42.523 249.823,43.866 M233.483,39.607 L244.963,39.607 C244.963,35.811 242.926,33.589 239.408,33.589 C235.798,33.589 233.9,35.672 233.483,39.607 M267.646,29.516 C267.646,31.043 267.462,32.895 267.184,33.867 C265.98,33.728 264.777,33.682 263.342,33.682 C262.092,33.682 260.843,33.775 259.593,33.96 L259.593,53.773 L254.501,53.773 L254.501,30.627 C256.677,29.886 260.334,29.331 263.204,29.331 C264.777,29.331 266.535,29.377 267.646,29.516\" id=\"Shape-Copy-2\" fill=\"#767676\" fill-rule=\"nonzero\"></path>\n            <g id=\"Group\" transform=\"translate(312.831000, 13.000000)\" fill=\"#767676\" fill-rule=\"nonzero\">\n                <path d=\"M92.1879815,1.74963061 C91.6293893,1.20762548 90.9764009,0.774972256 90.2475063,0.464032467 C89.5244506,0.155945337 88.7507907,0 87.9498824,0 C87.1149136,0 86.3237369,0.155945337 85.5997081,0.464032467 C84.8776255,0.771168711 84.2460465,1.1990675 83.7234612,1.73821998 C83.1969832,2.27642157 82.7736599,2.92112242 82.4641959,3.65140302 C82.1557051,4.37502742 82,5.16616474 82,6.00104283 C82,6.8368718 82.154732,7.62705824 82.4632228,8.34973175 C82.7736599,9.08096324 83.1969832,9.7247132 83.7234612,10.2638657 C84.2450734,10.8001655 84.8766523,11.230917 85.5997081,11.5371023 C87.0127321,12.140915 88.771227,12.1675399 90.2465331,11.5371023 C90.9773741,11.2271134 91.6313357,10.7954111 92.1879815,10.2505533 C92.7436542,9.7114008 93.1913065,9.06669995 93.5163409,8.34022289 C93.8374828,7.62040204 94,6.83401915 94,6.00104283 C94,5.1690174 93.8374828,4.38168363 93.5163409,3.66186277 C93.1913065,2.93348394 92.7436542,2.29068486 92.1879815,1.74963061\" id=\"Path\"></path>\n                <path d=\"M82.853229,37.618516 C83.0626223,38.3397079 83.4246575,38.9536308 83.9295499,39.4430452 C84.4403131,39.9410794 85.1448141,40.3251404 86.0234834,40.5866084 C87.6956947,41.0856004 90.2407045,41.1650943 93.4667319,40.6469472 C94.7544031,40.4381559 95.9403131,40.1364621 97,39.744739 L97,33.5949742 L93.5567515,33.5949742 L93.5567515,16 L80,16 L80,22.16892 L82.5166341,22.16892 L82.5166341,34.9569062 C82.5166341,35.959679 82.630137,36.8542251 82.853229,37.618516\" id=\"Path\"></path>\n                <path d=\"M17.7287223,41 C14.1321407,41 11.2961684,39.9709065 9.22275326,37.9117576 C7.14933809,35.8526088 6.11116966,33.0432796 6.11116966,29.4828084 L6.11116966,19.8574176 L1.04595956,19.8574176 C0.348653186,19.8574176 0,19.50541 0,18.8004328 L0,14.1820149 C0,13.4789613 0.348653186,13.1231065 1.04595956,13.1231065 L6.11116966,13.1231065 L6.11116966,6.05794662 C6.11116966,5.354893 6.45884896,5 7.15810311,5 L13.3247846,5 C14.022091,5 14.3707442,5.35393123 14.3707442,6.05794662 L14.3707442,13.1231065 L23.0150058,13.1231065 C23.7123122,13.1231065 24.0609654,13.4779995 24.0609654,14.1820149 L24.0609654,18.8004328 C24.0609654,19.5044482 23.7123122,19.8574176 23.0150058,19.8574176 L14.3707442,19.8574176 L14.3707442,29.2058187 C14.3707442,30.615773 14.7827003,31.7275787 15.6085603,32.545083 C16.4353943,33.3606636 17.5436829,33.7674922 18.9412173,33.7674922 C20.372838,33.7674922 21.7479729,33.6001443 23.0705176,33.2664102 C23.7668501,33.1558067 24.1710151,33.4337581 24.2810649,34.102188 L24.9968752,38.8879538 C25.0329092,39.4804039 24.7572978,39.8881943 24.1700412,40.1103631 C21.8200408,40.7037749 19.6745577,41 17.7287223,41\" id=\"Path\"></path>\n                <path d=\"M61.996926,39.1549077 C62.0322679,39.7905468 61.7629052,40.1798516 61.1869276,40.3305503 C59.674867,40.7768501 58.3051292,41 57.081535,41 C53.5903275,41 51.1775257,39.9190271 49.8459954,37.7590133 C47.5783821,39.9190271 44.5170086,41 40.6647405,41 C37.1725778,41 34.3557321,39.8736243 32.2132482,37.6189408 C30.0717195,35.3661894 29,32.3763671 29,28.6494739 L29,14.0626186 C29,13.3574263 29.3419569,13 30.0258706,13 L36.0750682,13 C36.7580267,13 37.0999836,13.3564602 37.0999836,14.0626186 L37.0999836,27.5317923 C37.0999836,29.4319476 37.613874,30.9592203 38.6397446,32.1136105 C39.6656151,33.2680007 41.0420392,33.8466448 42.7709272,33.8466448 C44.5704991,33.8466448 46.0109207,33.2969812 47.0902817,32.1966879 C48.1705979,31.0983267 48.7093232,29.6357771 48.7093232,27.8109712 L48.7093232,14.0626186 C48.7093232,13.3574263 49.0522352,13 49.7371041,13 L55.838837,13 C56.5237059,13 56.8656628,13.3564602 56.8656628,14.0626186 L56.8656628,31.6122477 C56.8656628,33.0641711 57.4588338,33.7906158 58.6470861,33.7906158 C59.2956579,33.7906158 59.8534869,33.7336208 60.3215284,33.6225289 C61.0035317,33.5481456 61.4018446,33.8466448 61.5097807,34.5170605 L61.996926,39.1549077 Z\" id=\"Path\"></path>\n                <path d=\"M67.3393771,19.7094528 C67.3393771,19.0941972 67.8499444,18.647002 68.4145717,18.647002 L74.6424917,18.647002 C75.2081201,18.647002 75.7176863,19.0941972 75.7176863,19.7094528 L75.7176863,39.9375492 C75.7176863,40.4967847 75.2081201,41 74.6424917,41 L68.4145717,41 C67.8499444,41 67.3393771,40.4967847 67.3393771,39.9375492 L67.3393771,19.7094528 Z M67,7.47098594 C67,5.01189538 68.9812013,3 71.4719689,3 C73.9627364,3 76,5.01189538 76,7.47098594 C76,9.93007651 73.9627364,11.8849859 71.4719689,11.8849859 C68.9822024,11.8849859 67,9.93007651 67,7.47098594\" id=\"Shape\"></path>\n                <path d=\"M110.789677,31.9959208 C112.116257,33.3621439 113.853835,34.043801 115.998553,34.043801 C118.143271,34.043801 119.880849,33.3621439 121.208394,31.9959208 C122.534973,30.631637 123.198746,28.8087134 123.198746,26.5261803 C123.198746,24.2455865 122.534973,22.4139361 121.208394,21.0292898 C119.880849,19.6456132 118.143271,18.9542597 115.998553,18.9542597 C113.853835,18.9542597 112.116257,19.6456132 110.789677,21.0292898 C109.462132,22.4139361 108.799325,24.2455865 108.799325,26.5261803 C108.800289,28.8087134 109.462132,30.631637 110.789677,31.9959208 M126.882296,37.0167179 C124.135552,39.6725625 120.507959,41 115.999518,41 C111.491076,41 107.863483,39.6725625 105.117704,37.0167179 C102.371925,34.3628126 101,30.8653203 101,26.5271499 C101,22.1511636 102.371925,18.6371874 105.117704,15.9823124 C107.864448,13.3264678 111.491076,12 115.999518,12 C120.507959,12 124.136517,13.3264678 126.882296,15.9823124 C129.62711,18.6371874 131,22.1511636 131,26.5271499 C130.999035,30.8653203 129.62711,34.361843 126.882296,37.0167179\" id=\"Shape\"></path>\n                <path d=\"M136.489071,16.4056261 L137.19621,16.4056261 C137.576977,16.4056261 137.768332,16.253176 137.768332,15.946461 C137.768332,15.8212341 137.713937,15.7186933 137.610003,15.6370236 C137.505098,15.5553539 137.366195,15.5145191 137.19621,15.5145191 L136.489071,15.5145191 L136.489071,16.4056261 Z M135.962602,17.930127 C135.812043,17.930127 135.73725,17.8584392 135.73725,17.7150635 L135.73725,15.084392 C135.73725,14.9410163 135.812043,14.8693285 135.962602,14.8693285 L137.19621,14.8693285 C137.597375,14.8693285 137.922776,14.969147 138.173383,15.1715064 C138.424961,15.3729583 138.549293,15.6370236 138.549293,15.9618875 C138.549293,16.4319419 138.319085,16.7431942 137.858667,16.8956443 L138.45993,17.6715064 C138.509468,17.738657 138.522096,17.7985481 138.496841,17.8502722 C138.471586,17.9038113 138.413305,17.930127 138.323941,17.930127 L137.902378,17.930127 C137.781931,17.930127 137.692567,17.8865699 137.633315,17.8012704 L137.031081,17.0108893 L136.489071,17.0108893 L136.489071,17.7141561 C136.489071,17.8575318 136.413306,17.9292196 136.263719,17.9292196 L135.962602,17.9292196 L135.962602,17.930127 Z M134.910635,18.3693285 C135.4915,18.8901996 136.186983,19.1515426 136.999998,19.1515426 C137.811071,19.1515426 138.508497,18.8901996 139.089361,18.3693285 C139.672168,17.845735 139.961629,17.2214156 139.961629,16.4927405 C139.961629,15.7640653 139.671197,15.1424682 139.089361,14.623412 C138.507525,14.107078 137.811071,13.8484574 136.999998,13.8484574 C136.186983,13.8484574 135.490528,14.107078 134.910635,14.623412 C134.3288,15.1415608 134.037396,15.7640653 134.037396,16.4927405 C134.037396,17.2214156 134.3288,17.845735 134.910635,18.3693285 M139.842153,18.9791289 C139.069934,19.6597096 138.122873,20 137,20 C135.877124,20 134.929091,19.6597096 134.157843,18.9791289 C133.385624,18.2994555 133,17.469147 133,16.4927405 C133,15.5254083 133.385624,14.7005445 134.157843,14.0199637 C134.929091,13.3393829 135.877124,13 137,13 C138.122873,13 139.069934,13.3393829 139.842153,14.0199637 C140.614372,14.7005445 141,15.5245009 141,16.4927405 C141.000968,17.469147 140.614372,18.2994555 139.842153,18.9791289\" id=\"Shape\"></path>\n            </g>\n            <line x1=\"290.331\" y1=\"0.5\" x2=\"290.331\" y2=\"75.5\" id=\"Line\" stroke=\"#979797\" stroke-width=\"2\" stroke-linecap=\"square\"></line>\n        </g>\n    </g>\n</svg>";

var LOGOS = [{
  id: 'santander_logo',
  label: 'Santander',
  svg: santander_logo
}, {
  id: 'Aquanima_logo',
  label: 'Aquanima',
  svg: Aquanima_logo
}, {
  id: 'Getnet_logo',
  label: 'Getnet',
  svg: Getnet_logo
}, {
  id: 'Prospera_Santander_logo',
  label: 'Prospera Santander',
  svg: Prospera_Santander_logo
}, {
  id: 'Accionistas_Extended_logo',
  label: 'Accionistas',
  svg: Accionistas_Extended_logo
}, {
  id: 'Acionistas_Extended_logo',
  label: 'Acionistas',
  svg: Acionistas_Extended_logo
}, {
  id: 'AssetManagement_Extended_logo',
  label: 'AssetManagement',
  svg: AssetManagement_Extended_logo
}, {
  id: 'CIB_Compact_logo',
  label: 'CIB',
  svg: CIB_Compact_logo
}, {
  id: 'ConsumerBank_Extended_logo',
  label: 'ConsumerBank',
  svg: ConsumerBank_Extended_logo
}, {
  id: 'ConsumerFinance_Extended_logo',
  label: 'ConsumerFinance',
  svg: ConsumerFinance_Extended_logo
}, {
  id: 'Santander_Empresas_Extended_logo',
  label: 'Santander Empresas',
  svg: Santander_Empresas_Extended_logo
}, {
  id: 'GlobalOperations_Extended_logo',
  label: 'GlobalOperations',
  svg: GlobalOperations_Extended_logo
}, {
  id: 'GlobalTech_Extended_logo',
  label: 'GlobalTech',
  svg: GlobalTech_Extended_logo
}, {
  id: 'OneTrade_Extended_logo',
  label: 'OneTrade',
  svg: OneTrade_Extended_logo
}, {
  id: 'PrivateBankingt_Extended_logo',
  label: 'PrivateBankingt',
  svg: PrivateBankingt_Extended_logo
}, {
  id: 'Select_Extended_logo',
  label: 'Select',
  svg: Select_Extended_logo
}, {
  id: 'Shareholders_Extended_logo',
  label: 'Shareholders',
  svg: Shareholders_Extended_logo
}, {
  id: 'Universidades_Extended_logo',
  label: 'Universidades',
  svg: Universidades_Extended_logo
}, {
  id: 'Universities_Extended_logo',
  label: 'Universities',
  svg: Universities_Extended_logo
}, {
  id: 'Tuiio_logo',
  label: 'Tuiio',
  svg: Tuiio_logo
}];
function setFills(svg, color) {
  svg.childNodes.forEach(function (node) {
    if (node.getAttribute && node.getAttribute('fill')) {
      node.setAttribute('fill', color);
    }

    setFills(node, color);
  });
}

var custom_colors = ['#CC0000', '#990000', '#9BC3D3', '#CEDEE7', '#444444', '#1BB3BC', '#FFCC33', '#9E3667', '#63BA68', '#3366FF', '#1C7E82', '#926E15', '#722745', '#3D8143', '#0B3CE1', '#7BD1D5', '#FDDF8A', '#C387A3', '#A2D4A6', '#85A5FB'];
var low_colors = ['#CC0000', '#1BB3BC', '#9E3667', '#9BC3D3', '#FFCC33', '#63BA68', '#3366FF', '#444444'];
var low_colors_dark = ['#FF6161', '#22CFD8', '#bc5478', '#84C0ff', '#FFD684', '#8cce80', '#5a85ff', '#767676'];
var mid_colors = ['#990000', '#137E84', '#946F00', '#CEDEE7', '#732645', '#3A8340', '#0032E6'];
var mid_colors_dark = ['#BC4D4E', '#209AA1', '#BC982D', '#6590BD', '#8D445E', '#6B9964', '#4866BD'];
var high_colors = ['#77D2D7', '#FFE185', '#C587A4', '#A2D6A5', '#85A4FF'];
var high_colors_dark = ['#A4E1E5', '#FFEBAE', '#D9AFC3', '#C1E4C3', '#AEC2FF'];
var low_and_mid_colors = ['#CC0000', '#990000', '#1BB3BC', '#137E84', '#9E3667', '#732645', '#9BC3D3', '#CEDEE7', '#FFCC33', '#946F00', '#63BA68', '#3A8340', '#3366FF', '#0032E6', '#444444'];
var low_and_mid_colors_dark = ['#FF6161', '#BC4D4E', '#22CFD8', '#209AA1', '#bc5478', '#8D445E', '#84C0ff', '#6590BD', '#FFD684', '#BC982D', '#8cce80', '#6B9964', '#5a85ff', '#4866BD', '#767676'];
var low_and_mid_and_high_colors = ['#CC0000', '#990000', '#1BB3BC', '#137E84', '#77D2D7', '#9E3667', '#732645', '#C587A4', '#9BC3D3', '#CEDEE7', '#FFCC33', '#946F00', '#FFE185', '#63BA68', '#3A8340', '#A2D6A5', '#3366FF', '#0032E6', '#85A4FF', '#444444'];
var low_and_mid_and_high_colors_dark = ['#FF6161', '#BC4D4E', '#22CFD8', '#209AA1', '#A4E1E5', '#bc5478', '#8D445E', '#D9AFC3', '#84C0ff', '#6590BD', '#FFD684', '#BC982D', '#FFEBAE', '#8cce80', '#6B9964', '#C1E4C3', '#5a85ff', '#4866BD', '#AEC2FF', '#767676'];
var white = '#f0f0f0';
var skin_background = '#fff';
var skin_background_dark = '#1f1f1f';
var accessible_color_map_light = {
  '#1BB3BC': '#137E84',
  '#9BC3D3': '#257FA4',
  '#FFCC33': '#946F00',
  '#63BA68': '#008437'
};
var accessible_color_map_dark = {
  '#BC5478': '#C66C8D',
  '#767676': '#868686',
  '#BC4D46': '#C76B6D',
  '#8D445E': '#BB728A',
  '#4866BD': '#6D84CA'
};
var PRIMARY_COLOR = [low_colors[0]];
var PRIMARY_COLOR_DARK = [low_colors_dark[0]];
var PRIMARY_CAT_SCHEME = [].concat(low_colors, mid_colors, high_colors);
var PRIMARY_CAT_SCHEME_DARK = [].concat(low_colors_dark, mid_colors_dark, high_colors_dark);
var PRIMARY_CAT_SCHEME_LOW = [].concat(low_colors);
var PRIMARY_CAT_SCHEME_LOW_DARK = [].concat(low_colors_dark);
var PRIMARY_CAT_SCHEME_MID = [].concat(low_and_mid_colors);
var PRIMARY_CAT_SCHEME_MID_DARK = [].concat(low_and_mid_colors_dark);
var PRIMARY_CAT_SCHEME_HIGH = [].concat(low_and_mid_and_high_colors);
var PRIMARY_CAT_SCHEME_HIGH_DARK = [].concat(low_and_mid_and_high_colors_dark);
var PRIMARY_SEQ3_SCHEME = [white, low_colors[3], low_colors[0]];
var PRIMARY_SEQ3_SCHEME_DARK = [white, low_colors_dark[3], low_colors_dark[0]];
var PRIMARY_SEQ2_SCHEME = [custom_colors[3], low_colors[0]];
var PRIMARY_SEQ2_SCHEME_DARK = [custom_colors[3], low_colors_dark[0]];
var PRIMARY_BIN_SCHEME = [low_colors[0], low_colors[5]];
var PRIMARY_BIN_SCHEME_DARK = [low_colors_dark[0], low_colors_dark[5]];
var CUSTOM_COLORS = custom_colors;
var SKIN_BACKGROUND = skin_background;
var SKIN_BACKGROUND_DARK = skin_background_dark;
function mapAccessibleColor(colorCode, mode) {
  var c = colorCode.toUpperCase();
  var cmap = mode === 'light' ? accessible_color_map_light : accessible_color_map_dark;
  return cmap[c] ? cmap[c] : c;
}

var COLORS = /*#__PURE__*/Object.freeze({
	__proto__: null,
	PRIMARY_COLOR: PRIMARY_COLOR,
	PRIMARY_COLOR_DARK: PRIMARY_COLOR_DARK,
	PRIMARY_CAT_SCHEME: PRIMARY_CAT_SCHEME,
	PRIMARY_CAT_SCHEME_DARK: PRIMARY_CAT_SCHEME_DARK,
	PRIMARY_CAT_SCHEME_LOW: PRIMARY_CAT_SCHEME_LOW,
	PRIMARY_CAT_SCHEME_LOW_DARK: PRIMARY_CAT_SCHEME_LOW_DARK,
	PRIMARY_CAT_SCHEME_MID: PRIMARY_CAT_SCHEME_MID,
	PRIMARY_CAT_SCHEME_MID_DARK: PRIMARY_CAT_SCHEME_MID_DARK,
	PRIMARY_CAT_SCHEME_HIGH: PRIMARY_CAT_SCHEME_HIGH,
	PRIMARY_CAT_SCHEME_HIGH_DARK: PRIMARY_CAT_SCHEME_HIGH_DARK,
	PRIMARY_SEQ3_SCHEME: PRIMARY_SEQ3_SCHEME,
	PRIMARY_SEQ3_SCHEME_DARK: PRIMARY_SEQ3_SCHEME_DARK,
	PRIMARY_SEQ2_SCHEME: PRIMARY_SEQ2_SCHEME,
	PRIMARY_SEQ2_SCHEME_DARK: PRIMARY_SEQ2_SCHEME_DARK,
	PRIMARY_BIN_SCHEME: PRIMARY_BIN_SCHEME,
	PRIMARY_BIN_SCHEME_DARK: PRIMARY_BIN_SCHEME_DARK,
	CUSTOM_COLORS: CUSTOM_COLORS,
	SKIN_BACKGROUND: SKIN_BACKGROUND,
	SKIN_BACKGROUND_DARK: SKIN_BACKGROUND_DARK,
	mapAccessibleColor: mapAccessibleColor
});

var xhtml$1 = "http://www.w3.org/1999/xhtml";
var namespaces$1 = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml$1,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

function namespace$1 (name) {
  var prefix = name += "",
      i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return namespaces$1.hasOwnProperty(prefix) ? {
    space: namespaces$1[prefix],
    local: name
  } : name;
}

function creatorInherit$1(name) {
  return function () {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === xhtml$1 && document.documentElement.namespaceURI === xhtml$1 ? document.createElement(name) : document.createElementNS(uri, name);
  };
}

function creatorFixed$1(fullname) {
  return function () {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function creator$1 (name) {
  var fullname = namespace$1(name);
  return (fullname.local ? creatorFixed$1 : creatorInherit$1)(fullname);
}

function none$1() {}

function selector$1 (selector) {
  return selector == null ? none$1 : function () {
    return this.querySelector(selector);
  };
}

function selection_select$1 (select) {
  if (typeof select !== "function") select = selector$1(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new Selection$2(subgroups, this._parents);
}

function empty$1() {
  return [];
}

function selectorAll$1 (selector) {
  return selector == null ? empty$1 : function () {
    return this.querySelectorAll(selector);
  };
}

function selection_selectAll$1 (select) {
  if (typeof select !== "function") select = selectorAll$1(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new Selection$2(subgroups, parents);
}

function matcher$1 (selector) {
  return function () {
    return this.matches(selector);
  };
}

function selection_filter$1 (match) {
  if (typeof match !== "function") match = matcher$1(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Selection$2(subgroups, this._parents);
}

function sparse$1 (update) {
  return new Array(update.length);
}

function selection_enter$1 () {
  return new Selection$2(this._enter || this._groups.map(sparse$1), this._parents);
}
function EnterNode$1(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}
EnterNode$1.prototype = {
  constructor: EnterNode$1,
  appendChild: function (child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function (child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function (selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function (selector) {
    return this._parent.querySelectorAll(selector);
  }
};

function constant$5 (x) {
  return function () {
    return x;
  };
}

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex$1(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length; // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.

  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode$1(parent, data[i]);
    }
  } // Put any non-null nodes that don’t fit into exit.


  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey$1(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue; // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.

  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);

      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  } // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.


  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);

    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new EnterNode$1(parent, data[i]);
    }
  } // Add any remaining nodes that were not bound to data to exit.


  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
      exit[i] = node;
    }
  }
}

function selection_data$1 (value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function (d) {
      data[++j] = d;
    });
    return data;
  }

  var bind = key ? bindKey$1 : bindIndex$1,
      parents = this._parents,
      groups = this._groups;
  if (typeof value !== "function") value = constant$5(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.

    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;

        while (!(next = updateGroup[i1]) && ++i1 < dataLength);

        previous._next = next || null;
      }
    }
  }

  update = new Selection$2(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}

function selection_exit$1 () {
  return new Selection$2(this._exit || this._groups.map(sparse$1), this._parents);
}

function selection_join$1 (onenter, onupdate, onexit) {
  var enter = this.enter(),
      update = this,
      exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove();else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

function selection_merge$1 (selection) {
  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Selection$2(merges, this._parents);
}

function selection_order$1 () {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}

function selection_sort$1 (compare) {
  if (!compare) compare = ascending$2;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }

    sortgroup.sort(compareNode);
  }

  return new Selection$2(sortgroups, this._parents).order();
}

function ascending$2(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function selection_call$1 () {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

function selection_nodes$1 () {
  var nodes = new Array(this.size()),
      i = -1;
  this.each(function () {
    nodes[++i] = this;
  });
  return nodes;
}

function selection_node$1 () {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}

function selection_size$1 () {
  var size = 0;
  this.each(function () {
    ++size;
  });
  return size;
}

function selection_empty$1 () {
  return !this.node();
}

function selection_each$1 (callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}

function attrRemove$2(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS$2(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant$2(name, value) {
  return function () {
    this.setAttribute(name, value);
  };
}

function attrConstantNS$2(fullname, value) {
  return function () {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction$2(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
  };
}

function attrFunctionNS$2(fullname, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function selection_attr$1 (name, value) {
  var fullname = namespace$1(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }

  return this.each((value == null ? fullname.local ? attrRemoveNS$2 : attrRemove$2 : typeof value === "function" ? fullname.local ? attrFunctionNS$2 : attrFunction$2 : fullname.local ? attrConstantNS$2 : attrConstant$2)(fullname, value));
}

function defaultView$1 (node) {
  return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node
  node.document && node // node is a Window
  || node.defaultView; // node is a Document
}

function styleRemove$2(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant$2(name, value, priority) {
  return function () {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction$2(name, value, priority) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
  };
}

function selection_style$1 (name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove$2 : typeof value === "function" ? styleFunction$2 : styleConstant$2)(name, value, priority == null ? "" : priority)) : styleValue$1(this.node(), name);
}
function styleValue$1(node, name) {
  return node.style.getPropertyValue(name) || defaultView$1(node).getComputedStyle(node, null).getPropertyValue(name);
}

function propertyRemove$1(name) {
  return function () {
    delete this[name];
  };
}

function propertyConstant$1(name, value) {
  return function () {
    this[name] = value;
  };
}

function propertyFunction$1(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];else this[name] = v;
  };
}

function selection_property$1 (name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove$1 : typeof value === "function" ? propertyFunction$1 : propertyConstant$1)(name, value)) : this.node()[name];
}

function classArray$1(string) {
  return string.trim().split(/^|\s+/);
}

function classList$1(node) {
  return node.classList || new ClassList$1(node);
}

function ClassList$1(node) {
  this._node = node;
  this._names = classArray$1(node.getAttribute("class") || "");
}

ClassList$1.prototype = {
  add: function (name) {
    var i = this._names.indexOf(name);

    if (i < 0) {
      this._names.push(name);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function (name) {
    var i = this._names.indexOf(name);

    if (i >= 0) {
      this._names.splice(i, 1);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function (name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd$1(node, names) {
  var list = classList$1(node),
      i = -1,
      n = names.length;

  while (++i < n) list.add(names[i]);
}

function classedRemove$1(node, names) {
  var list = classList$1(node),
      i = -1,
      n = names.length;

  while (++i < n) list.remove(names[i]);
}

function classedTrue$1(names) {
  return function () {
    classedAdd$1(this, names);
  };
}

function classedFalse$1(names) {
  return function () {
    classedRemove$1(this, names);
  };
}

function classedFunction$1(names, value) {
  return function () {
    (value.apply(this, arguments) ? classedAdd$1 : classedRemove$1)(this, names);
  };
}

function selection_classed$1 (name, value) {
  var names = classArray$1(name + "");

  if (arguments.length < 2) {
    var list = classList$1(this.node()),
        i = -1,
        n = names.length;

    while (++i < n) if (!list.contains(names[i])) return false;

    return true;
  }

  return this.each((typeof value === "function" ? classedFunction$1 : value ? classedTrue$1 : classedFalse$1)(names, value));
}

function textRemove$1() {
  this.textContent = "";
}

function textConstant$2(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction$2(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function selection_text$1 (value) {
  return arguments.length ? this.each(value == null ? textRemove$1 : (typeof value === "function" ? textFunction$2 : textConstant$2)(value)) : this.node().textContent;
}

function htmlRemove$1() {
  this.innerHTML = "";
}

function htmlConstant$1(value) {
  return function () {
    this.innerHTML = value;
  };
}

function htmlFunction$1(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function selection_html$1 (value) {
  return arguments.length ? this.each(value == null ? htmlRemove$1 : (typeof value === "function" ? htmlFunction$1 : htmlConstant$1)(value)) : this.node().innerHTML;
}

function raise$1() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function selection_raise$1 () {
  return this.each(raise$1);
}

function lower$1() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function selection_lower$1 () {
  return this.each(lower$1);
}

function selection_append$1 (name) {
  var create = typeof name === "function" ? name : creator$1(name);
  return this.select(function () {
    return this.appendChild(create.apply(this, arguments));
  });
}

function constantNull$1() {
  return null;
}

function selection_insert$1 (name, before) {
  var create = typeof name === "function" ? name : creator$1(name),
      select = before == null ? constantNull$1 : typeof before === "function" ? before : selector$1(before);
  return this.select(function () {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

function remove$1() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function selection_remove$1 () {
  return this.each(remove$1);
}

function selection_cloneShallow$1() {
  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
}

function selection_cloneDeep$1() {
  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
}

function selection_clone$1 (deep) {
  return this.select(deep ? selection_cloneDeep$1 : selection_cloneShallow$1);
}

function selection_datum$1 (value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

var filterEvents = {};
var event = null;

if (typeof document !== "undefined") {
  var element = document.documentElement;

  if (!("onmouseenter" in element)) {
    filterEvents = {
      mouseenter: "mouseover",
      mouseleave: "mouseout"
    };
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener$1(listener, index, group);
  return function (event) {
    var related = event.relatedTarget;

    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
      listener.call(this, event);
    }
  };
}

function contextListener$1(listener, index, group) {
  return function (event1) {
    var event0 = event; // Events can be reentrant (e.g., focus).

    event = event1;

    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      event = event0;
    }
  };
}

function parseTypenames$2(typenames) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {
      type: t,
      name: name
    };
  });
}

function onRemove$1(typename) {
  return function () {
    var on = this.__on;
    if (!on) return;

    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }

    if (++i) on.length = i;else delete this.__on;
  };
}

function onAdd$1(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener$1;
  return function (d, i, group) {
    var on = this.__on,
        o,
        listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {
      type: typename.type,
      name: typename.name,
      value: value,
      listener: listener,
      capture: capture
    };
    if (!on) this.__on = [o];else on.push(o);
  };
}

function selection_on$1 (typename, value, capture) {
  var typenames = parseTypenames$2(typename + ""),
      i,
      n = typenames.length,
      t;

  if (arguments.length < 2) {
    var on = this.node().__on;

    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd$1 : onRemove$1;
  if (capture == null) capture = false;

  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));

  return this;
}
function customEvent(event1, listener, that, args) {
  var event0 = event;
  event1.sourceEvent = event;
  event = event1;

  try {
    return listener.apply(that, args);
  } finally {
    event = event0;
  }
}

function dispatchEvent$1(node, type, params) {
  var window = defaultView$1(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant$1(type, params) {
  return function () {
    return dispatchEvent$1(this, type, params);
  };
}

function dispatchFunction$1(type, params) {
  return function () {
    return dispatchEvent$1(this, type, params.apply(this, arguments));
  };
}

function selection_dispatch$1 (type, params) {
  return this.each((typeof params === "function" ? dispatchFunction$1 : dispatchConstant$1)(type, params));
}

var root$1 = [null];
function Selection$2(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection$1() {
  return new Selection$2([[document.documentElement]], root$1);
}

Selection$2.prototype = selection$1.prototype = {
  constructor: Selection$2,
  select: selection_select$1,
  selectAll: selection_selectAll$1,
  filter: selection_filter$1,
  data: selection_data$1,
  enter: selection_enter$1,
  exit: selection_exit$1,
  join: selection_join$1,
  merge: selection_merge$1,
  order: selection_order$1,
  sort: selection_sort$1,
  call: selection_call$1,
  nodes: selection_nodes$1,
  node: selection_node$1,
  size: selection_size$1,
  empty: selection_empty$1,
  each: selection_each$1,
  attr: selection_attr$1,
  style: selection_style$1,
  property: selection_property$1,
  classed: selection_classed$1,
  text: selection_text$1,
  html: selection_html$1,
  raise: selection_raise$1,
  lower: selection_lower$1,
  append: selection_append$1,
  insert: selection_insert$1,
  remove: selection_remove$1,
  clone: selection_clone$1,
  datum: selection_datum$1,
  on: selection_on$1,
  dispatch: selection_dispatch$1
};

function select (selector) {
  return typeof selector === "string" ? new Selection$2([[document.querySelector(selector)]], [document.documentElement]) : new Selection$2([[selector]], root$1);
}

function sourceEvent$1 () {
  var current = event,
      source;

  while (source = current.sourceEvent) current = source;

  return current;
}

function point$1 (node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
}

function mouse (node) {
  var event = sourceEvent$1();
  if (event.changedTouches) event = event.changedTouches[0];
  return point$1(node, event);
}

function touch (node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = sourceEvent$1().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return point$1(node, touch);
    }
  }

  return null;
}

var noop$1 = {
  value: function () {}
};

function dispatch$1() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _) throw new Error("illegal type: " + t);
    _[t] = [];
  }

  return new Dispatch$1(_);
}

function Dispatch$1(_) {
  this._ = _;
}

function parseTypenames$3(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {
      type: t,
      name: name
    };
  });
}

Dispatch$1.prototype = dispatch$1.prototype = {
  constructor: Dispatch$1,
  on: function (typename, callback) {
    var _ = this._,
        T = parseTypenames$3(typename + "", _),
        t,
        i = -1,
        n = T.length; // If no callback was specified, return the callback of the given type and name.

    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get$2(_[t], typename.name))) return t;

      return;
    } // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.


    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set$2(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set$2(_[t], typename.name, null);
    }

    return this;
  },
  copy: function () {
    var copy = {},
        _ = this._;

    for (var t in _) copy[t] = _[t].slice();

    return new Dispatch$1(copy);
  },
  call: function (type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function (type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get$2(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set$2(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }

  if (callback != null) type.push({
    name: name,
    value: callback
  });
  return type;
}

function nopropagation$1() {
  event.stopImmediatePropagation();
}
function noevent$2 () {
  event.preventDefault();
  event.stopImmediatePropagation();
}

function nodrag (view) {
  var root = view.document.documentElement,
      selection = select(view).on("dragstart.drag", noevent$2, true);

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", noevent$2, true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
}
function yesdrag$1(view, noclick) {
  var root = view.document.documentElement,
      selection = select(view).on("dragstart.drag", null);

  if (noclick) {
    selection.on("click.drag", noevent$2, true);
    setTimeout(function () {
      selection.on("click.drag", null);
    }, 0);
  }

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}

function constant$6 (x) {
  return function () {
    return x;
  };
}

function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
  this.target = target;
  this.type = type;
  this.subject = subject;
  this.identifier = id;
  this.active = active;
  this.x = x;
  this.y = y;
  this.dx = dx;
  this.dy = dy;
  this._ = dispatch;
}

DragEvent.prototype.on = function () {
  var value = this._.on.apply(this._, arguments);

  return value === this._ ? this : value;
};

function defaultFilter$1() {
  return !event.button;
}

function defaultContainer() {
  return this.parentNode;
}

function defaultSubject(d) {
  return d == null ? {
    x: event.x,
    y: event.y
  } : d;
}

function defaultTouchable$1() {
  return "ontouchstart" in this;
}

function drag () {
  var filter = defaultFilter$1,
      container = defaultContainer,
      subject = defaultSubject,
      touchable = defaultTouchable$1,
      gestures = {},
      listeners = dispatch$1("start", "drag", "end"),
      active = 0,
      mousedownx,
      mousedowny,
      mousemoving,
      touchending,
      clickDistance2 = 0;

  function drag(selection) {
    selection.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var gesture = beforestart("mouse", container.apply(this, arguments), mouse, this, arguments);
    if (!gesture) return;
    select(event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
    nodrag(event.view);
    nopropagation$1();
    mousemoving = false;
    mousedownx = event.clientX;
    mousedowny = event.clientY;
    gesture("start");
  }

  function mousemoved() {
    noevent$2();

    if (!mousemoving) {
      var dx = event.clientX - mousedownx,
          dy = event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }

    gestures.mouse("drag");
  }

  function mouseupped() {
    select(event.view).on("mousemove.drag mouseup.drag", null);
    yesdrag$1(event.view, mousemoving);
    noevent$2();
    gestures.mouse("end");
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = event.changedTouches,
        c = container.apply(this, arguments),
        n = touches.length,
        i,
        gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {
        nopropagation$1();
        gesture("start");
      }
    }
  }

  function touchmoved() {
    var touches = event.changedTouches,
        n = touches.length,
        i,
        gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        noevent$2();
        gesture("drag");
      }
    }
  }

  function touchended() {
    var touches = event.changedTouches,
        n = touches.length,
        i,
        gesture;
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function () {
      touchending = null;
    }, 500); // Ghost clicks are delayed!

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        nopropagation$1();
        gesture("end");
      }
    }
  }

  function beforestart(id, container, point, that, args) {
    var p = point(container, id),
        s,
        dx,
        dy,
        sublisteners = listeners.copy();
    if (!customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function () {
      if ((event.subject = s = subject.apply(that, args)) == null) return false;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return true;
    })) return;
    return function gesture(type) {
      var p0 = p,
          n;

      switch (type) {
        case "start":
          gestures[id] = gesture, n = active++;
          break;

        case "end":
          delete gestures[id], --active;
        // nobreak

        case "drag":
          p = point(container, id), n = active;
          break;
      }

      customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
    };
  }

  drag.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$6(!!_), drag) : filter;
  };

  drag.container = function (_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : constant$6(_), drag) : container;
  };

  drag.subject = function (_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : constant$6(_), drag) : subject;
  };

  drag.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$6(!!_), drag) : touchable;
  };

  drag.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };

  drag.clickDistance = function (_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };

  return drag;
}

var pi = Math.PI,
    tau = 2 * pi,
    epsilon$1 = 1e-6,
    tauEpsilon = tau - epsilon$1;

function Path$1() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath

  this._ = "";
}

function path() {
  return new Path$1();
}

Path$1.prototype = path.prototype = {
  constructor: Path$1,
  moveTo: function (x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function () {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function (x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function (x1, y1, x, y) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function (x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon$1)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        } // Otherwise, draw an arc!
        else {
            var x20 = x2 - x0,
                y20 = y2 - y0,
                l21_2 = x21 * x21 + y21 * y21,
                l20_2 = x20 * x20 + y20 * y20,
                l21 = Math.sqrt(l21_2),
                l01 = Math.sqrt(l01_2),
                l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                t01 = l / l01,
                t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

            if (Math.abs(t01 - 1) > epsilon$1) {
              this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            }

            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
          }
  },
  arc: function (x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
        this._ += "L" + x0 + "," + y0;
      } // Is this arc empty? We’re done.


    if (!r) return; // Does the angle go the wrong way? Flip the direction.

    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.

    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } // Is this arc non-empty? Draw an arc!
    else if (da > epsilon$1) {
        this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
  },
  rect: function (x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function () {
    return this._;
  }
};

function constant$7 (x) {
  return function constant() {
    return x;
  };
}

var epsilon$2 = 1e-12;
var pi$1 = Math.PI;
var halfPi = pi$1 / 2;
var tau$1 = 2 * pi$1;

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0,
      y10 = y1 - y0,
      x32 = x3 - x2,
      y32 = y3 - y2,
      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
  return [x0 + t * x10, y0 + t * y10];
} // Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html


function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00; // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?

  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

function arc () {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = constant$7(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - halfPi,
        a1 = endAngle.apply(this, arguments) - halfPi,
        da = Math.abs(a1 - a0),
        cw = a1 > a0;
    if (!context) context = buffer = path(); // Ensure that the outer radius is always larger than the inner radius.

    if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?

    if (!(r1 > epsilon$2)) context.moveTo(0, 0); // Or is it a circle or annulus?
    else if (da > tau$1 - epsilon$2) {
        context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));
        context.arc(0, 0, r1, a0, a1, !cw);

        if (r0 > epsilon$2) {
          context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));
          context.arc(0, 0, r0, a1, a0, cw);
        }
      } // Or is it a circular or annular sector?
      else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = ap > epsilon$2 && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)),
              rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.

          if (rp > epsilon$2) {
            var p0 = asin(rp / r0 * Math.sin(ap)),
                p1 = asin(rp / r1 * Math.sin(ap));
            if ((da0 -= p0 * 2) > epsilon$2) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > epsilon$2) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * Math.cos(a01),
              y01 = r1 * Math.sin(a01),
              x10 = r0 * Math.cos(a10),
              y10 = r0 * Math.sin(a10); // Apply rounded corners?

          if (rc > epsilon$2) {
            var x11 = r1 * Math.cos(a11),
                y11 = r1 * Math.sin(a11),
                x00 = r0 * Math.cos(a00),
                y00 = r0 * Math.sin(a00); // Restrict the corner radius according to the sector angle.

            if (da < pi$1) {
              var oc = da0 > epsilon$2 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
                  ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),
                  lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
              rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
            }
          } // Is the sector collapsed to a line?


          if (!(da1 > epsilon$2)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?
          else if (rc1 > epsilon$2) {
              t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
              t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
              context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                  context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
                }
            } // Or is the outer ring just a circular arc?
            else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?

          if (!(r0 > epsilon$2) || !(da0 > epsilon$2)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > epsilon$2) {
              t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
              t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
              context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                  context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
                }
            } // Or is the inner ring just a circular arc?
            else context.arc(0, 0, r0, a10, a00, cw);
        }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function () {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$1 / 2;
    return [Math.cos(a) * r, Math.sin(a) * r];
  };

  arc.innerRadius = function (_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$7(+_), arc) : innerRadius;
  };

  arc.outerRadius = function (_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$7(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function (_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$7(+_), arc) : cornerRadius;
  };

  arc.padRadius = function (_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$7(+_), arc) : padRadius;
  };

  arc.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$7(+_), arc) : startAngle;
  };

  arc.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$7(+_), arc) : endAngle;
  };

  arc.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$7(+_), arc) : padAngle;
  };

  arc.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };

  return arc;
}

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        this._context.lineTo(x, y);

        break;
    }
  }
};
function curveLinear (context) {
  return new Linear(context);
}

function x(p) {
  return p[0];
}
function y(p) {
  return p[1];
}

function line$1 () {
  var x$1 = x,
      y$1 = y,
      defined = constant$7(true),
      context = null,
      curve = curveLinear,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;
    if (context == null) output = curve(buffer = path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
      }

      if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function (_) {
    return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant$7(+_), line) : x$1;
  };

  line.y = function (_) {
    return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$7(+_), line) : y$1;
  };

  line.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$7(!!_), line) : defined;
  };

  line.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}

function point$2(that, x, y) {
  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        point$2(this, this._x1, this._y1);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        this._x1 = x, this._y1 = y;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point$2(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

function point$3(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > epsilon$2) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > epsilon$2) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        this.point(this._x2, this._y2);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point$3(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};
var curveCatmullRom = (function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function sign(x) {
  return x < 0 ? -1 : 1;
} // Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.


function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
} // Calculate a one-sided slope.


function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
} // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".


function point$4(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;

  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;

      case 3:
        point$4(this, this._t0, slope2(this, this._t0));
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    var t1 = NaN;
    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        point$4(this, slope2(this, t1 = slope3(this, x, y)), t1);
        break;

      default:
        point$4(this, this._t0, t1 = slope3(this, x, y));
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function (x, y) {
    this._context.moveTo(y, x);
  },
  closePath: function () {
    this._context.closePath();
  },
  lineTo: function (x, y) {
    this._context.lineTo(y, x);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
  }
};

var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var get$3 = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var Annotation = function () {
  function Annotation(_ref) {
    var _ref$x = _ref.x,
        x = _ref$x === undefined ? 0 : _ref$x,
        _ref$y = _ref.y,
        y = _ref$y === undefined ? 0 : _ref$y,
        nx = _ref.nx,
        ny = _ref.ny,
        _ref$dy = _ref.dy,
        dy = _ref$dy === undefined ? 0 : _ref$dy,
        _ref$dx = _ref.dx,
        dx = _ref$dx === undefined ? 0 : _ref$dx,
        _ref$color = _ref.color,
        color = _ref$color === undefined ? "grey" : _ref$color,
        data = _ref.data,
        type = _ref.type,
        subject = _ref.subject,
        connector = _ref.connector,
        note = _ref.note,
        disable = _ref.disable,
        id = _ref.id,
        className = _ref.className;
    classCallCheck(this, Annotation);
    this._dx = nx !== undefined ? nx - x : dx;
    this._dy = ny !== undefined ? ny - y : dy;
    this._x = x;
    this._y = y;
    this._color = color;
    this.id = id;
    this._className = className || "";
    this._type = type || "";
    this.data = data;
    this.note = note || {};
    this.connector = connector || {};
    this.subject = subject || {};
    this.disable = disable || [];
  }

  createClass(Annotation, [{
    key: "updatePosition",
    value: function updatePosition() {
      if (this.type.setPosition) {
        this.type.setPosition();

        if (this.type.subject && this.type.subject.selectAll(":not(.handle)").nodes().length !== 0) {
          this.type.redrawSubject();
        }
      }
    }
  }, {
    key: "clearComponents",
    value: function clearComponents() {
      this.type.clearComponents && this.type.clearComponents();
    }
  }, {
    key: "updateOffset",
    value: function updateOffset() {
      if (this.type.setOffset) {
        this.type.setOffset();

        if (this.type.connector.selectAll(":not(.handle)").nodes().length !== 0) {
          this.type.redrawConnector();
        }

        this.type.redrawNote();
      }
    }
  }, {
    key: "className",
    get: function get$$1() {
      return this._className;
    },
    set: function set$$1(className) {
      this._className = className;
      if (this.type.setClassName) this.type.setClassName();
    }
  }, {
    key: "type",
    get: function get$$1() {
      return this._type;
    },
    set: function set$$1(type) {
      this._type = type;
      this.clearComponents();
    }
  }, {
    key: "x",
    get: function get$$1() {
      return this._x;
    },
    set: function set$$1(x) {
      this._x = x;
      this.updatePosition();
    }
  }, {
    key: "y",
    get: function get$$1() {
      return this._y;
    },
    set: function set$$1(y) {
      this._y = y;
      this.updatePosition();
    }
  }, {
    key: "color",
    get: function get$$1() {
      return this._color;
    },
    set: function set$$1(color) {
      this._color = color;
      this.updatePosition();
    }
  }, {
    key: "dx",
    get: function get$$1() {
      return this._dx;
    },
    set: function set$$1(dx) {
      this._dx = dx;
      this.updateOffset();
    }
  }, {
    key: "dy",
    get: function get$$1() {
      return this._dy;
    },
    set: function set$$1(dy) {
      this._dy = dy;
      this.updateOffset();
    }
  }, {
    key: "nx",
    set: function set$$1(nx) {
      this._dx = nx - this._x;
      this.updateOffset();
    }
  }, {
    key: "ny",
    set: function set$$1(ny) {
      this._dy = ny - this._y;
      this.updateOffset();
    }
  }, {
    key: "offset",
    get: function get$$1() {
      return {
        x: this._dx,
        y: this._dy
      };
    },
    set: function set$$1(_ref2) {
      var x = _ref2.x,
          y = _ref2.y;
      this._dx = x;
      this._dy = y;
      this.updateOffset();
    }
  }, {
    key: "position",
    get: function get$$1() {
      return {
        x: this._x,
        y: this._y
      };
    },
    set: function set$$1(_ref3) {
      var x = _ref3.x,
          y = _ref3.y;
      this._x = x;
      this._y = y;
      this.updatePosition();
    }
  }, {
    key: "translation",
    get: function get$$1() {
      return {
        x: this._x + this._dx,
        y: this._y + this._dy
      };
    }
  }, {
    key: "json",
    get: function get$$1() {
      var json = {
        x: this._x,
        y: this._y,
        dx: this._dx,
        dy: this._dy
      };
      if (this.data && Object.keys(this.data).length > 0) json.data = this.data;
      if (this.type) json.type = this.type;
      if (this._className) json.className = this._className;
      if (Object.keys(this.connector).length > 0) json.connector = this.connector;
      if (Object.keys(this.subject).length > 0) json.subject = this.subject;
      if (Object.keys(this.note).length > 0) json.note = this.note;
      return json;
    }
  }]);
  return Annotation;
}();

var AnnotationCollection = function () {
  function AnnotationCollection(_ref) {
    var annotations = _ref.annotations,
        accessors = _ref.accessors,
        accessorsInverse = _ref.accessorsInverse;
    classCallCheck(this, AnnotationCollection);
    this.accessors = accessors;
    this.accessorsInverse = accessorsInverse;
    this.annotations = annotations;
  }

  createClass(AnnotationCollection, [{
    key: "clearTypes",
    value: function clearTypes(newSettings) {
      this.annotations.forEach(function (d) {
        d.type = undefined;
        d.subject = newSettings && newSettings.subject || d.subject;
        d.connector = newSettings && newSettings.connector || d.connector;
        d.note = newSettings && newSettings.note || d.note;
      });
    }
  }, {
    key: "setPositionWithAccessors",
    value: function setPositionWithAccessors() {
      var _this = this;

      this.annotations.forEach(function (d) {
        d.type.setPositionWithAccessors(_this.accessors);
      });
    }
  }, {
    key: "editMode",
    value: function editMode(_editMode) {
      this.annotations.forEach(function (a) {
        if (a.type) {
          a.type.editMode = _editMode;
          a.type.updateEditMode();
        }
      });
    }
  }, {
    key: "updateDisable",
    value: function updateDisable(disable) {
      this.annotations.forEach(function (a) {
        a.disable = disable;

        if (a.type) {
          disable.forEach(function (d) {
            if (a.type[d]) {
              a.type[d].remove && a.type[d].remove();
              a.type[d] = undefined;
            }
          });
        }
      });
    }
  }, {
    key: "updateTextWrap",
    value: function updateTextWrap(textWrap) {
      this.annotations.forEach(function (a) {
        if (a.type && a.type.updateTextWrap) {
          a.type.updateTextWrap(textWrap);
        }
      });
    }
  }, {
    key: "updateText",
    value: function updateText() {
      this.annotations.forEach(function (a) {
        if (a.type && a.type.drawText) {
          a.type.drawText();
        }
      });
    }
  }, {
    key: "updateNotePadding",
    value: function updateNotePadding(notePadding) {
      this.annotations.forEach(function (a) {
        if (a.type) {
          a.type.notePadding = notePadding;
        }
      });
    }
  }, {
    key: "json",
    get: function get$$1() {
      var _this2 = this;

      return this.annotations.map(function (a) {
        var json = a.json;

        if (_this2.accessorsInverse && a.data) {
          json.data = {};
          Object.keys(_this2.accessorsInverse).forEach(function (k) {
            json.data[k] = _this2.accessorsInverse[k]({
              x: a.x,
              y: a.y
            }); //TODO make this feasible to map back to data for other types of subjects
          });
        }

        return json;
      });
    }
  }, {
    key: "noteNodes",
    get: function get$$1() {
      return this.annotations.map(function (a) {
        return _extends({}, a.type.getNoteBBoxOffset(), {
          positionX: a.x,
          positionY: a.y
        });
      });
    } //TODO: come back and rethink if a.x and a.y are applicable in all situations
    // get connectorNodes() {
    //   return this.annotations.map(a => ({ ...a.type.getConnectorBBox(), startX: a.x, startY: a.y}))
    // }
    // get subjectNodes() {
    //   return this.annotations.map(a => ({ ...a.type.getSubjectBBox(), startX: a.x, startY: a.y}))
    // }
    // get annotationNodes() {
    //   return this.annotations.map(a => ({ ...a.type.getAnnotationBBox(), startX: a.x, startY: a.y}))
    // }

  }]);
  return AnnotationCollection;
}();

var pointHandle = function pointHandle(_ref) {
  var _ref$cx = _ref.cx,
      cx = _ref$cx === undefined ? 0 : _ref$cx,
      _ref$cy = _ref.cy,
      cy = _ref$cy === undefined ? 0 : _ref$cy;
  return {
    move: {
      x: cx,
      y: cy
    }
  };
};

var circleHandles = function circleHandles(_ref2) {
  var _ref2$cx = _ref2.cx,
      cx = _ref2$cx === undefined ? 0 : _ref2$cx,
      _ref2$cy = _ref2.cy,
      cy = _ref2$cy === undefined ? 0 : _ref2$cy,
      r1 = _ref2.r1,
      r2 = _ref2.r2,
      padding = _ref2.padding;
  var h = {
    move: {
      x: cx,
      y: cy
    }
  };

  if (r1 !== undefined) {
    h.r1 = {
      x: cx + r1 / Math.sqrt(2),
      y: cy + r1 / Math.sqrt(2)
    };
  }

  if (r2 !== undefined) {
    h.r2 = {
      x: cx + r2 / Math.sqrt(2),
      y: cy + r2 / Math.sqrt(2)
    };
  }

  if (padding !== undefined) {
    h.padding = {
      x: cx + r1 + padding,
      y: cy
    };
  }

  return h;
}; //arc handles


var addHandles = function addHandles(_ref5) {
  var group = _ref5.group,
      handles = _ref5.handles,
      _ref5$r = _ref5.r,
      r = _ref5$r === undefined ? 10 : _ref5$r; //give it a group and x,y to draw handles
  //then give it instructions on what the handles change

  var h = group.selectAll("circle.handle").data(handles);
  h.enter().append("circle").attr("class", "handle").attr("fill", "grey").attr("fill-opacity", 0.1).attr("cursor", "move").attr("stroke-dasharray", 5).attr("stroke", "grey").call(drag().container(select("g.annotations").node()).on("start", function (d) {
    return d.start && d.start(d);
  }).on("drag", function (d) {
    return d.drag && d.drag(d);
  }).on("end", function (d) {
    return d.end && d.end(d);
  }));
  group.selectAll("circle.handle").attr("cx", function (d) {
    return d.x;
  }).attr("cy", function (d) {
    return d.y;
  }).attr("r", function (d) {
    return d.r || r;
  }).attr("class", function (d) {
    return "handle " + (d.className || "");
  });
  h.exit().remove();
};

var leftRightDynamic = function leftRightDynamic(align, y) {
  if (align === "dynamic" || align === "left" || align === "right") {
    if (y < 0) {
      align = "top";
    } else {
      align = "bottom";
    }
  }

  return align;
};

var topBottomDynamic = function topBottomDynamic(align, x) {
  if (align === "dynamic" || align === "top" || align === "bottom") {
    if (x < 0) {
      align = "right";
    } else {
      align = "left";
    }
  }

  return align;
};

var orientationTopBottom = ["topBottom", "top", "bottom"];
var orientationLeftRight = ["leftRight", "left", "right"];

var noteAlignment = function (_ref) {
  var _ref$padding = _ref.padding,
      padding = _ref$padding === undefined ? 0 : _ref$padding,
      _ref$bbox = _ref.bbox,
      bbox = _ref$bbox === undefined ? {
    x: 0,
    y: 0,
    width: 0,
    height: 0
  } : _ref$bbox,
      align = _ref.align,
      orientation = _ref.orientation,
      _ref$offset = _ref.offset,
      offset = _ref$offset === undefined ? {
    x: 0,
    y: 0
  } : _ref$offset;
  var x = -bbox.x;
  var y = 0; //-bbox.y

  if (orientationTopBottom.indexOf(orientation) !== -1) {
    align = topBottomDynamic(align, offset.x);

    if (offset.y < 0 && orientation === "topBottom" || orientation === "top") {
      y -= bbox.height + padding;
    } else {
      y += padding;
    }

    if (align === "middle") {
      x -= bbox.width / 2;
    } else if (align === "right") {
      x -= bbox.width;
    }
  } else if (orientationLeftRight.indexOf(orientation) !== -1) {
    align = leftRightDynamic(align, offset.y);

    if (offset.x < 0 && orientation === "leftRight" || orientation === "left") {
      x -= bbox.width + padding;
    } else {
      x += padding;
    }

    if (align === "middle") {
      y -= bbox.height / 2;
    } else if (align === "top") {
      y -= bbox.height;
    }
  }

  return {
    x: x,
    y: y
  };
};

var lineBuilder = function lineBuilder(_ref) {
  var data = _ref.data,
      _ref$curve = _ref.curve,
      curve = _ref$curve === undefined ? curveLinear : _ref$curve,
      canvasContext = _ref.canvasContext,
      className = _ref.className,
      classID = _ref.classID;
  var lineGen = line$1().curve(curve);
  var builder = {
    type: 'path',
    className: className,
    classID: classID,
    data: data
  };

  if (canvasContext) {
    lineGen.context(canvasContext);
    builder.pathMethods = lineGen;
  } else {
    builder.attrs = {
      d: lineGen(data)
    };
  }

  return builder;
};

var arcBuilder = function arcBuilder(_ref2) {
  var data = _ref2.data,
      canvasContext = _ref2.canvasContext,
      className = _ref2.className,
      classID = _ref2.classID;
  var builder = {
    type: 'path',
    className: className,
    classID: classID,
    data: data
  };
  var arcShape = arc().innerRadius(data.innerRadius || 0).outerRadius(data.outerRadius || data.radius || 2).startAngle(data.startAngle || 0).endAngle(data.endAngle || 2 * Math.PI);

  if (canvasContext) {
    arcShape.context(canvasContext);
    builder.pathMethods = lineGen;
  } else {
    builder.attrs = {
      d: arcShape()
    };
  }

  return builder;
};

var noteVertical = function (_ref) {
  var align = _ref.align,
      _ref$x = _ref.x,
      x = _ref$x === undefined ? 0 : _ref$x,
      _ref$y = _ref.y,
      y = _ref$y === undefined ? 0 : _ref$y,
      bbox = _ref.bbox,
      offset = _ref.offset;
  align = leftRightDynamic(align, offset.y);

  if (align === "top") {
    y -= bbox.height;
  } else if (align === "middle") {
    y -= bbox.height / 2;
  }

  var data = [[x, y], [x, y + bbox.height]];
  return {
    components: [lineBuilder({
      data: data,
      className: "note-line"
    })]
  };
};

var noteHorizontal = function (_ref) {
  var align = _ref.align,
      _ref$x = _ref.x,
      x = _ref$x === undefined ? 0 : _ref$x,
      _ref$y = _ref.y,
      y = _ref$y === undefined ? 0 : _ref$y,
      offset = _ref.offset,
      bbox = _ref.bbox;
  align = topBottomDynamic(align, offset.x);

  if (align === "right") {
    x -= bbox.width;
  } else if (align === "middle") {
    x -= bbox.width / 2;
  }

  var data = [[x, y], [x + bbox.width, y]];
  return {
    components: [lineBuilder({
      data: data,
      className: "note-line"
    })]
  };
};

var lineSetup = function lineSetup(_ref) {
  var type = _ref.type,
      subjectType = _ref.subjectType;
  var annotation = type.annotation;
  var offset = annotation.position;
  var x1 = annotation.x - offset.x,
      x2 = x1 + annotation.dx,
      y1 = annotation.y - offset.y,
      y2 = y1 + annotation.dy;
  var subjectData = annotation.subject;

  if (subjectType === "circle" && (subjectData.outerRadius || subjectData.radius)) {
    var h = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    var angle = Math.asin(-y2 / h);
    var r = subjectData.outerRadius || subjectData.radius + (subjectData.radiusPadding || 0);
    x1 = Math.abs(Math.cos(angle) * r) * (x2 < 0 ? -1 : 1);
    y1 = Math.abs(Math.sin(angle) * r) * (y2 < 0 ? -1 : 1);
  }

  if (subjectType === "rect") {
    var width = subjectData.width,
        height = subjectData.height;

    if (width > 0 && annotation.dx > 0 || width < 0 && annotation.dx < 0) {
      if (Math.abs(width) > Math.abs(annotation.dx)) x1 = width / 2;else x1 = width;
    }

    if (height > 0 && annotation.dy > 0 || height < 0 && annotation.dy < 0) {
      if (Math.abs(height) > Math.abs(annotation.dy)) y1 = height / 2;else y1 = height;
    }

    if (x1 === width / 2 && y1 === height / 2) {
      x1 = x2;
      y1 = y2;
    }
  }

  return [[x1, y1], [x2, y2]];
};

var connectorLine = function (connectorData) {
  var data = lineSetup(connectorData);
  return {
    components: [lineBuilder({
      data: data,
      className: "connector"
    })]
  };
};

var connectorElbow = function (_ref) {
  var type = _ref.type,
      subjectType = _ref.subjectType;
  var annotation = type.annotation;
  var offset = annotation.position;
  var x1 = annotation.x - offset.x,
      x2 = x1 + annotation.dx,
      y1 = annotation.y - offset.y,
      y2 = y1 + annotation.dy;
  var subjectData = annotation.subject;

  if (subjectType === "rect") {
    var width = subjectData.width,
        height = subjectData.height;

    if (width > 0 && annotation.dx > 0 || width < 0 && annotation.dx < 0) {
      if (Math.abs(width) > Math.abs(annotation.dx)) x1 = width / 2;else x1 = width;
    }

    if (height > 0 && annotation.dy > 0 || height < 0 && annotation.dy < 0) {
      if (Math.abs(height) > Math.abs(annotation.dy)) y1 = height / 2;else y1 = height;
    }

    if (x1 === width / 2 && y1 === height / 2) {
      x1 = x2;
      y1 = y2;
    }
  }

  var data = [[x1, y1], [x2, y2]];
  var diffY = y2 - y1;
  var diffX = x2 - x1;
  var xe = x2;
  var ye = y2;
  var opposite = y2 < y1 && x2 > x1 || x2 < x1 && y2 > y1 ? -1 : 1;

  if (Math.abs(diffX) < Math.abs(diffY)) {
    xe = x2;
    ye = y1 + diffX * opposite;
  } else {
    ye = y2;
    xe = x1 + diffY * opposite;
  }

  if (subjectType === "circle" && (subjectData.outerRadius || subjectData.radius)) {
    var r = (subjectData.outerRadius || subjectData.radius) + (subjectData.radiusPadding || 0);
    var length = r / Math.sqrt(2);

    if (Math.abs(diffX) > length && Math.abs(diffY) > length) {
      x1 = length * (x2 < 0 ? -1 : 1);
      y1 = length * (y2 < 0 ? -1 : 1);
      data = [[x1, y1], [xe, ye], [x2, y2]];
    } else if (Math.abs(diffX) > Math.abs(diffY)) {
      var angle = Math.asin(-y2 / r);
      x1 = Math.abs(Math.cos(angle) * r) * (x2 < 0 ? -1 : 1);
      data = [[x1, y2], [x2, y2]];
    } else {
      var _angle = Math.acos(x2 / r);

      y1 = Math.abs(Math.sin(_angle) * r) * (y2 < 0 ? -1 : 1);
      data = [[x2, y1], [x2, y2]];
    }
  } else {
    data = [[x1, y1], [xe, ye], [x2, y2]];
  }

  return {
    components: [lineBuilder({
      data: data,
      className: "connector"
    })]
  };
};

var connectorCurve = function (_ref) {
  var type = _ref.type,
      connectorData = _ref.connectorData,
      subjectType = _ref.subjectType;

  if (!connectorData) {
    connectorData = {};
  }

  if (!connectorData.points || typeof connectorData.points === "number") {
    connectorData.points = createPoints(type.annotation.offset, connectorData.points);
  }

  if (!connectorData.curve) {
    connectorData.curve = curveCatmullRom;
  }

  var handles = [];

  if (type.editMode) {
    var cHandles = connectorData.points.map(function (c, i) {
      return _extends({}, pointHandle({
        cx: c[0],
        cy: c[1]
      }), {
        index: i
      });
    });

    var updatePoint = function updatePoint(index) {
      connectorData.points[index][0] += event.dx;
      connectorData.points[index][1] += event.dy;
      type.redrawConnector();
    };

    handles = type.mapHandles(cHandles.map(function (h) {
      return _extends({}, h.move, {
        drag: updatePoint.bind(type, h.index)
      });
    }));
  }

  var data = lineSetup({
    type: type,
    subjectType: subjectType
  });
  data = [data[0]].concat(toConsumableArray(connectorData.points), [data[1]]);
  var components = [lineBuilder({
    data: data,
    curve: connectorData.curve,
    className: "connector"
  })];
  return {
    components: components,
    handles: handles
  };
};

var createPoints = function createPoints(offset) {
  var anchors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var diff = {
    x: offset.x / (anchors + 1),
    y: offset.y / (anchors + 1)
  };
  var p = [];
  var i = 1;

  for (; i <= anchors; i++) {
    p.push([diff.x * i + i % 2 * 20, diff.y * i - i % 2 * 20]);
  }

  return p;
};

var connectorArrow = function (_ref) {
  var annotation = _ref.annotation,
      start = _ref.start,
      end = _ref.end,
      _ref$scale = _ref.scale,
      scale = _ref$scale === undefined ? 1 : _ref$scale;
  var offset = annotation.position;

  if (!start) {
    start = [annotation.dx, annotation.dy];
  } else {
    start = [-end[0] + start[0], -end[1] + start[1]];
  }

  if (!end) {
    end = [annotation.x - offset.x, annotation.y - offset.y];
  }

  var x1 = end[0],
      y1 = end[1];
  var dx = start[0];
  var dy = start[1];
  var size = 10 * scale;
  var angleOffset = 16 / 180 * Math.PI;
  var angle = Math.atan(dy / dx);

  if (dx < 0) {
    angle += Math.PI;
  }

  var data = [[x1, y1], [Math.cos(angle + angleOffset) * size + x1, Math.sin(angle + angleOffset) * size + y1], [Math.cos(angle - angleOffset) * size + x1, Math.sin(angle - angleOffset) * size + y1], [x1, y1]]; //TODO add in reverse
  // if (canvasContext.arrowReverse){
  //   data = [[x1, y1],
  //   [Math.cos(angle + angleOffset)*size, Math.sin(angle + angleOffset)*size],
  //   [Math.cos(angle - angleOffset)*size, Math.sin(angle - angleOffset)*size],
  //   [x1, y1]
  //   ]
  // } else {
  //   data = [[x1, y1],
  //   [Math.cos(angle + angleOffset)*size, Math.sin(angle + angleOffset)*size],
  //   [Math.cos(angle - angleOffset)*size, Math.sin(angle - angleOffset)*size],
  //   [x1, y1]
  //   ]
  // }

  return {
    components: [lineBuilder({
      data: data,
      className: "connector-end connector-arrow",
      classID: "connector-end"
    })]
  };
};

var connectorDot = function (_ref) {
  var line$$1 = _ref.line,
      _ref$scale = _ref.scale,
      scale = _ref$scale === undefined ? 1 : _ref$scale;
  var dot = arcBuilder({
    className: "connector-end connector-dot",
    classID: "connector-end",
    data: {
      radius: 3 * Math.sqrt(scale)
    }
  });
  dot.attrs.transform = "translate(" + line$$1.data[0][0] + ", " + line$$1.data[0][1] + ")";
  return {
    components: [dot]
  };
};

var subjectCircle = function (_ref) {
  var subjectData = _ref.subjectData,
      type = _ref.type;

  if (!subjectData.radius && !subjectData.outerRadius) {
    subjectData.radius = 20;
  }

  var handles = [];
  var c = arcBuilder({
    data: subjectData,
    className: "subject"
  });

  if (type.editMode) {
    var h = circleHandles({
      r1: c.data.outerRadius || c.data.radius,
      r2: c.data.innerRadius,
      padding: subjectData.radiusPadding
    });

    var updateRadius = function updateRadius(attr) {
      var r = subjectData[attr] + event.dx * Math.sqrt(2);
      subjectData[attr] = r;
      type.redrawSubject();
      type.redrawConnector();
    };

    var cHandles = [_extends({}, h.r1, {
      drag: updateRadius.bind(type, subjectData.outerRadius !== undefined ? "outerRadius" : "radius")
    })];

    if (subjectData.innerRadius) {
      cHandles.push(_extends({}, h.r2, {
        drag: updateRadius.bind(type, "innerRadius")
      }));
    }

    handles = type.mapHandles(cHandles);
  }

  c.attrs["fill-opacity"] = 0;
  return {
    components: [c],
    handles: handles
  };
};

var subjectRect = function (_ref) {
  var subjectData = _ref.subjectData,
      type = _ref.type;

  if (!subjectData.width) {
    subjectData.width = 100;
  }

  if (!subjectData.height) {
    subjectData.height = 100;
  }

  var handles = [];
  var width = subjectData.width,
      height = subjectData.height;
  var data = [[0, 0], [width, 0], [width, height], [0, height], [0, 0]];
  var rect = lineBuilder({
    data: data,
    className: "subject"
  });

  if (type.editMode) {
    var updateWidth = function updateWidth() {
      subjectData.width = event.x;
      type.redrawSubject();
      type.redrawConnector();
    };

    var updateHeight = function updateHeight() {
      subjectData.height = event.y;
      type.redrawSubject();
      type.redrawConnector();
    };

    var rHandles = [{
      x: width,
      y: height / 2,
      drag: updateWidth.bind(type)
    }, {
      x: width / 2,
      y: height,
      drag: updateHeight.bind(type)
    }];
    handles = type.mapHandles(rHandles);
  }

  rect.attrs["fill-opacity"] = 0.1;
  return {
    components: [rect],
    handles: handles
  };
};

var subjectThreshold = function (_ref) {
  var subjectData = _ref.subjectData,
      type = _ref.type;
  var offset = type.annotation.position;
  var x1 = (subjectData.x1 !== undefined ? subjectData.x1 : offset.x) - offset.x,
      x2 = (subjectData.x2 !== undefined ? subjectData.x2 : offset.x) - offset.x,
      y1 = (subjectData.y1 !== undefined ? subjectData.y1 : offset.y) - offset.y,
      y2 = (subjectData.y2 !== undefined ? subjectData.y2 : offset.y) - offset.y;
  var data = [[x1, y1], [x2, y2]];
  return {
    components: [lineBuilder({
      data: data,
      className: 'subject'
    })]
  };
};

var subjectBadge = function (_ref) {
  var _ref$subjectData = _ref.subjectData,
      subjectData = _ref$subjectData === undefined ? {} : _ref$subjectData,
      _ref$type = _ref.type,
      type = _ref$type === undefined ? {} : _ref$type;
  var annotation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var typeSettings = type.typeSettings && type.typeSettings.subject;

  if (!subjectData.radius) {
    if (typeSettings && typeSettings.radius) {
      subjectData.radius = typeSettings.radius;
    } else {
      subjectData.radius = 14;
    }
  }

  if (!subjectData.x) {
    if (typeSettings && typeSettings.x) {
      subjectData.x = typeSettings.x;
    }
  }

  if (!subjectData.y) {
    if (typeSettings && typeSettings.y) {
      subjectData.y = typeSettings.y;
    }
  }

  var handles = [];
  var components = [];
  var radius = subjectData.radius;
  var innerRadius = radius * 0.7;
  var x = 0;
  var y = 0;
  var notCornerOffset = Math.sqrt(2) * radius;
  var placement = {
    xleftcorner: -radius,
    xrightcorner: radius,
    ytopcorner: -radius,
    ybottomcorner: radius,
    xleft: -notCornerOffset,
    xright: notCornerOffset,
    ytop: -notCornerOffset,
    ybottom: notCornerOffset
  };

  if (subjectData.x && !subjectData.y) {
    x = placement["x" + subjectData.x];
  } else if (subjectData.y && !subjectData.x) {
    y = placement["y" + subjectData.y];
  } else if (subjectData.x && subjectData.y) {
    x = placement["x" + subjectData.x + "corner"];
    y = placement["y" + subjectData.y + "corner"];
  }

  var transform = "translate(" + x + ", " + y + ")";
  var circlebg = arcBuilder({
    className: "subject",
    data: {
      radius: radius
    }
  });
  circlebg.attrs.transform = transform;
  circlebg.attrs.fill = annotation.color;
  circlebg.attrs["stroke-linecap"] = "round";
  circlebg.attrs["stroke-width"] = "3px";
  var circle = arcBuilder({
    className: "subject-ring",
    data: {
      outerRadius: radius,
      innerRadius: innerRadius
    }
  });
  circle.attrs.transform = transform; // circle.attrs.fill = annotation.color

  circle.attrs["stroke-width"] = "3px";
  circle.attrs.fill = "white";
  var pointer = void 0;

  if (x && y || !x && !y) {
    pointer = lineBuilder({
      className: "subject-pointer",
      data: [[0, 0], [x || 0, 0], [0, y || 0], [0, 0]]
    });
  } else if (x || y) {
    var notCornerPointerXY = function notCornerPointerXY(v) {
      var sign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      return v && v / Math.sqrt(2) / Math.sqrt(2) || sign * radius / Math.sqrt(2);
    };

    pointer = lineBuilder({
      className: "subject-pointer",
      data: [[0, 0], [notCornerPointerXY(x), notCornerPointerXY(y)], [notCornerPointerXY(x, -1), notCornerPointerXY(y, -1)], [0, 0]]
    });
  }

  if (pointer) {
    pointer.attrs.fill = annotation.color;
    pointer.attrs["stroke-linecap"] = "round";
    pointer.attrs["stroke-width"] = "3px";
    components.push(pointer);
  }

  if (type.editMode) {
    var dragBadge = function dragBadge() {
      subjectData.x = event.x < -radius * 2 ? "left" : event.x > radius * 2 ? "right" : undefined;
      subjectData.y = event.y < -radius * 2 ? "top" : event.y > radius * 2 ? "bottom" : undefined;
      type.redrawSubject();
    };

    var bHandles = {
      x: x * 2,
      y: y * 2,
      drag: dragBadge.bind(type)
    };

    if (!bHandles.x && !bHandles.y) {
      bHandles.y = -radius;
    }

    handles = type.mapHandles([bHandles]);
  }

  var text = void 0;

  if (subjectData.text) {
    text = {
      type: "text",
      className: "badge-text",
      attrs: {
        fill: "white",
        stroke: "none",
        "font-size": ".7em",
        text: subjectData.text,
        "text-anchor": "middle",
        dy: ".25em",
        x: x,
        y: y
      }
    };
  }

  components.push(circlebg);
  components.push(circle);
  components.push(text);
  return {
    components: components,
    handles: handles
  };
}; //Note options
//Connector options
//Subject options


var Type = function () {
  function Type(_ref) {
    var a = _ref.a,
        annotation = _ref.annotation,
        editMode = _ref.editMode,
        dispatcher = _ref.dispatcher,
        notePadding = _ref.notePadding,
        accessors = _ref.accessors;
    classCallCheck(this, Type);
    this.a = a;
    this.note = annotation.disable.indexOf("note") === -1 && a.select("g.annotation-note");
    this.noteContent = this.note && a.select("g.annotation-note-content");
    this.connector = annotation.disable.indexOf("connector") === -1 && a.select("g.annotation-connector");
    this.subject = annotation.disable.indexOf("subject") === -1 && a.select("g.annotation-subject");
    this.dispatcher = dispatcher;

    if (dispatcher) {
      var handler = addHandlers.bind(null, dispatcher, annotation);
      handler({
        component: this.note,
        name: "note"
      });
      handler({
        component: this.connector,
        name: "connector"
      });
      handler({
        component: this.subject,
        name: "subject"
      });
    }

    this.annotation = annotation;
    this.editMode = annotation.editMode || editMode;
    this.notePadding = notePadding !== undefined ? notePadding : 3;
    this.offsetCornerX = 0;
    this.offsetCornerY = 0;

    if (accessors && annotation.data) {
      this.init(accessors);
    }
  }

  createClass(Type, [{
    key: "init",
    value: function init(accessors) {
      if (!this.annotation.x) {
        this.mapX(accessors);
      }

      if (!this.annotation.y) {
        this.mapY(accessors);
      }
    }
  }, {
    key: "mapY",
    value: function mapY(accessors) {
      if (accessors.y) {
        this.annotation.y = accessors.y(this.annotation.data);
      }
    }
  }, {
    key: "mapX",
    value: function mapX(accessors) {
      if (accessors.x) {
        this.annotation.x = accessors.x(this.annotation.data);
      }
    }
  }, {
    key: "updateEditMode",
    value: function updateEditMode() {
      this.a.selectAll("circle.handle").remove();
    }
  }, {
    key: "drawOnSVG",
    value: function drawOnSVG(component, builders) {
      var _this = this;

      if (!Array.isArray(builders)) {
        builders = [builders];
      }

      builders.filter(function (b) {
        return b;
      }).forEach(function (_ref2) {
        var type = _ref2.type,
            className = _ref2.className,
            attrs = _ref2.attrs,
            handles = _ref2.handles,
            classID = _ref2.classID;

        if (type === "handle") {
          addHandles({
            group: component,
            r: attrs && attrs.r,
            handles: handles
          });
        } else {
          newWithClass(component, [_this.annotation], type, className, classID);
          var el = component.select(type + "." + (classID || className));
          var addAttrs = Object.keys(attrs);
          var removeAttrs = [];
          var currentAttrs = el.node().attributes;

          for (var i = currentAttrs.length - 1; i >= 0; i--) {
            var name = currentAttrs[i].name;
            if (addAttrs.indexOf(name) === -1 && name !== "class") removeAttrs.push(name);
          }

          addAttrs.forEach(function (attr) {
            if (attr === "text") {
              el.text(attrs[attr]);
            } else {
              el.attr(attr, attrs[attr]);
            }
          });
          removeAttrs.forEach(function (attr) {
            return el.attr(attr, null);
          });
        }
      });
    } //TODO: how to extend this to a drawOnCanvas mode?

  }, {
    key: "getNoteBBox",
    value: function getNoteBBox() {
      return bboxWithoutHandles(this.note, ".annotation-note-content text");
    }
  }, {
    key: "getNoteBBoxOffset",
    value: function getNoteBBoxOffset() {
      var bbox = bboxWithoutHandles(this.note, ".annotation-note-content");
      var transform = this.noteContent.attr("transform").split(/\(|\,|\)/g);
      bbox.offsetCornerX = parseFloat(transform[1]) + this.annotation.dx;
      bbox.offsetCornerY = parseFloat(transform[2]) + this.annotation.dy;
      bbox.offsetX = this.annotation.dx;
      bbox.offsetY = this.annotation.dy;
      return bbox;
    }
  }, {
    key: "drawSubject",
    value: function drawSubject() {
      var _this2 = this;

      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var subjectData = this.annotation.subject;
      var type = context.type;
      var subjectParams = {
        type: this,
        subjectData: subjectData
      };
      var subject = {};
      if (type === "circle") subject = subjectCircle(subjectParams);else if (type === "rect") subject = subjectRect(subjectParams);else if (type === "threshold") subject = subjectThreshold(subjectParams);else if (type === "badge") subject = subjectBadge(subjectParams, this.annotation);
      var _subject = subject,
          _subject$components = _subject.components,
          components = _subject$components === undefined ? [] : _subject$components,
          _subject$handles = _subject.handles,
          handles = _subject$handles === undefined ? [] : _subject$handles;
      components.forEach(function (c) {
        if (c && c.attrs && !c.attrs.stroke) {
          c.attrs.stroke = _this2.annotation.color;
        }
      });

      if (this.editMode) {
        handles = handles.concat(this.mapHandles([{
          drag: this.dragSubject.bind(this)
        }]));
        components.push({
          type: "handle",
          handles: handles
        });
      }

      return components;
    }
  }, {
    key: "drawConnector",
    value: function drawConnector() {
      var _this3 = this;

      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var connectorData = this.annotation.connector;
      var type = connectorData.type || context.type;
      var connectorParams = {
        type: this,
        connectorData: connectorData
      };
      connectorParams.subjectType = this.typeSettings && this.typeSettings.subject && this.typeSettings.subject.type;
      var connector = {};
      if (type === "curve") connector = connectorCurve(connectorParams);else if (type === "elbow") connector = connectorElbow(connectorParams);else connector = connectorLine(connectorParams);
      var _connector = connector,
          _connector$components = _connector.components,
          components = _connector$components === undefined ? [] : _connector$components,
          _connector$handles = _connector.handles,
          handles = _connector$handles === undefined ? [] : _connector$handles;
      var line$$1 = components[0]; //TODO: genericize this into fill t/f stroke t/f

      if (line$$1) {
        line$$1.attrs.stroke = this.annotation.color;
        line$$1.attrs.fill = "none";
      }

      var endType = connectorData.end || context.end;
      var end = {};

      if (endType === "arrow") {
        var s = line$$1.data[1];
        var e = line$$1.data[0];
        var distance = Math.sqrt(Math.pow(s[0] - e[0], 2) + Math.pow(s[1] - e[1], 2));

        if (distance < 5 && line$$1.data[2]) {
          s = line$$1.data[2];
        }

        end = connectorArrow({
          annotation: this.annotation,
          start: s,
          end: e,
          scale: connectorData.endScale
        });
      } else if (endType === "dot") {
        end = connectorDot({
          line: line$$1,
          scale: connectorData.endScale
        });
      } else if (!endType || endType === "none") {
        this.connector && this.connector.select(".connector-end").remove();
      }

      if (end.components) {
        end.components.forEach(function (c) {
          c.attrs.fill = _this3.annotation.color;
          c.attrs.stroke = _this3.annotation.color;
        });
        components = components.concat(end.components);
      }

      if (this.editMode) {
        if (handles.length !== 0) components.push({
          type: "handle",
          handles: handles
        });
      }

      return components;
    }
  }, {
    key: "drawNote",
    value: function drawNote() {
      var _this4 = this;

      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var noteData = this.annotation.note;
      var align = noteData.align || context.align || "dynamic";
      var noteParams = {
        bbox: context.bbox,
        align: align,
        offset: this.annotation.offset
      };
      var lineType = noteData.lineType || context.lineType;
      var note = {};
      if (lineType === "vertical") note = noteVertical(noteParams);else if (lineType === "horizontal") note = noteHorizontal(noteParams);
      var _note = note,
          _note$components = _note.components,
          components = _note$components === undefined ? [] : _note$components,
          _note$handles = _note.handles,
          handles = _note$handles === undefined ? [] : _note$handles;
      components.forEach(function (c) {
        c.attrs.stroke = _this4.annotation.color;
      });

      if (this.editMode) {
        handles = this.mapHandles([{
          x: 0,
          y: 0,
          drag: this.dragNote.bind(this)
        }]);
        components.push({
          type: "handle",
          handles: handles
        });
        var dragging = this.dragNote.bind(this),
            start = this.dragstarted.bind(this),
            end = this.dragended.bind(this);
        this.note.call(drag().container(select("g.annotations").node()).on("start", function (d) {
          return start(d);
        }).on("drag", function (d) {
          return dragging(d);
        }).on("end", function (d) {
          return end(d);
        }));
      } else {
        this.note.on("mousedown.drag", null);
      }

      return components;
    }
  }, {
    key: "drawNoteContent",
    value: function drawNoteContent(context) {
      var noteData = this.annotation.note;
      var padding = noteData.padding !== undefined ? noteData.padding : this.notePadding;
      var orientation = noteData.orientation || context.orientation || "topBottom";
      var lineType = noteData.lineType || context.lineType;
      var align = noteData.align || context.align || "dynamic";
      if (lineType === "vertical") orientation = "leftRight";else if (lineType === "horizontal") orientation = "topBottom";
      var noteParams = {
        padding: padding,
        bbox: context.bbox,
        offset: this.annotation.offset,
        orientation: orientation,
        align: align
      };

      var _noteAlignment = noteAlignment(noteParams),
          x = _noteAlignment.x,
          y = _noteAlignment.y;

      this.offsetCornerX = x + this.annotation.dx;
      this.offsetCornerY = y + this.annotation.dy;
      this.note && this.noteContent.attr("transform", "translate(" + x + ", " + y + ")");
      return [];
    }
  }, {
    key: "drawOnScreen",
    value: function drawOnScreen(component, drawFunction) {
      return this.drawOnSVG(component, drawFunction);
    }
  }, {
    key: "redrawSubject",
    value: function redrawSubject() {
      this.subject && this.drawOnScreen(this.subject, this.drawSubject());
    }
  }, {
    key: "redrawConnector",
    value: function redrawConnector() {
      this.connector && this.drawOnScreen(this.connector, this.drawConnector());
    }
  }, {
    key: "redrawNote",
    value: function redrawNote() {
      var bbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getNoteBBox();
      this.noteContent && this.drawOnScreen(this.noteContent, this.drawNoteContent({
        bbox: bbox
      }));
      this.note && this.drawOnScreen(this.note, this.drawNote({
        bbox: bbox
      }));
    }
  }, {
    key: "setPosition",
    value: function setPosition() {
      var position = this.annotation.position;
      this.a.attr("transform", "translate(" + position.x + ", " + position.y + ")");
    }
  }, {
    key: "clearComponents",
    value: function clearComponents() {
      this.subject && this.subject.select("*").remove();
      this.connector && this.connector.select("*").remove(); // this.note && this.note.select("*").remove()
    }
  }, {
    key: "setOffset",
    value: function setOffset() {
      if (this.note) {
        var offset = this.annotation.offset;
        this.note.attr("transform", "translate(" + offset.x + ", " + offset.y + ")");
      }
    }
  }, {
    key: "setPositionWithAccessors",
    value: function setPositionWithAccessors(accessors) {
      if (accessors && this.annotation.data) {
        this.mapX(accessors);
        this.mapY(accessors);
      }

      this.setPosition();
    }
  }, {
    key: "setClassName",
    value: function setClassName() {
      this.a.attr("class", "annotation " + (this.className && this.className()) + " " + (this.editMode ? "editable" : "") + " " + (this.annotation.className || ""));
    }
  }, {
    key: "draw",
    value: function draw() {
      this.setClassName();
      this.setPosition();
      this.setOffset();
      this.redrawSubject();
      this.redrawConnector();
      this.redrawNote();
    }
  }, {
    key: "dragstarted",
    value: function dragstarted() {
      event.sourceEvent.stopPropagation();
      this.dispatcher && this.dispatcher.call("dragstart", this.a, this.annotation);
      this.a.classed("dragging", true);
      this.a.selectAll("circle.handle").style("pointer-events", "none");
    }
  }, {
    key: "dragended",
    value: function dragended() {
      this.dispatcher && this.dispatcher.call("dragend", this.a, this.annotation);
      this.a.classed("dragging", false);
      this.a.selectAll("circle.handle").style("pointer-events", "all");
    }
  }, {
    key: "dragSubject",
    value: function dragSubject() {
      var position = this.annotation.position;
      position.x += event.dx;
      position.y += event.dy;
      this.annotation.position = position;
    }
  }, {
    key: "dragNote",
    value: function dragNote() {
      var offset = this.annotation.offset;
      offset.x += event.dx;
      offset.y += event.dy;
      this.annotation.offset = offset;
    }
  }, {
    key: "mapHandles",
    value: function mapHandles(handles) {
      var _this5 = this;

      return handles.map(function (h) {
        return _extends({}, h, {
          start: _this5.dragstarted.bind(_this5),
          end: _this5.dragended.bind(_this5)
        });
      });
    }
  }]);
  return Type;
}();

var customType = function customType(initialType, typeSettings, _init) {
  return function (_initialType) {
    inherits(customType, _initialType);

    function customType(settings) {
      classCallCheck(this, customType);

      var _this6 = possibleConstructorReturn(this, (customType.__proto__ || Object.getPrototypeOf(customType)).call(this, settings));

      _this6.typeSettings = typeSettings;

      if (typeSettings.disable) {
        typeSettings.disable.forEach(function (d) {
          _this6[d] && _this6[d].remove();
          _this6[d] = undefined;

          if (d === "note") {
            _this6.noteContent = undefined;
          }
        });
      }

      return _this6;
    }

    createClass(customType, [{
      key: "className",
      value: function className() {
        return "" + (typeSettings.className || get$3(customType.prototype.__proto__ || Object.getPrototypeOf(customType.prototype), "className", this) && get$3(customType.prototype.__proto__ || Object.getPrototypeOf(customType.prototype), "className", this).call(this) || "");
      }
    }, {
      key: "drawSubject",
      value: function drawSubject(context) {
        this.typeSettings.subject = _extends({}, typeSettings.subject, this.typeSettings.subject);
        return get$3(customType.prototype.__proto__ || Object.getPrototypeOf(customType.prototype), "drawSubject", this).call(this, _extends({}, context, this.typeSettings.subject));
      }
    }, {
      key: "drawConnector",
      value: function drawConnector(context) {
        this.typeSettings.connector = _extends({}, typeSettings.connector, this.typeSettings.connector);
        return get$3(customType.prototype.__proto__ || Object.getPrototypeOf(customType.prototype), "drawConnector", this).call(this, _extends({}, context, typeSettings.connector, this.typeSettings.connector));
      }
    }, {
      key: "drawNote",
      value: function drawNote(context) {
        this.typeSettings.note = _extends({}, typeSettings.note, this.typeSettings.note);
        return get$3(customType.prototype.__proto__ || Object.getPrototypeOf(customType.prototype), "drawNote", this).call(this, _extends({}, context, typeSettings.note, this.typeSettings.note));
      }
    }, {
      key: "drawNoteContent",
      value: function drawNoteContent(context) {
        return get$3(customType.prototype.__proto__ || Object.getPrototypeOf(customType.prototype), "drawNoteContent", this).call(this, _extends({}, context, typeSettings.note, this.typeSettings.note));
      }
    }], [{
      key: "init",
      value: function init(annotation, accessors) {
        get$3(customType.__proto__ || Object.getPrototypeOf(customType), "init", this).call(this, annotation, accessors);

        if (_init) {
          annotation = _init(annotation, accessors);
        }

        return annotation;
      }
    }]);
    return customType;
  }(initialType);
};

var d3NoteText = function (_Type) {
  inherits(d3NoteText, _Type);

  function d3NoteText(params) {
    classCallCheck(this, d3NoteText);

    var _this7 = possibleConstructorReturn(this, (d3NoteText.__proto__ || Object.getPrototypeOf(d3NoteText)).call(this, params));

    _this7.textWrap = params.textWrap || 120;

    _this7.drawText();

    return _this7;
  }

  createClass(d3NoteText, [{
    key: "updateTextWrap",
    value: function updateTextWrap(textWrap) {
      this.textWrap = textWrap;
      this.drawText();
    } //TODO: add update text functionality

  }, {
    key: "drawText",
    value: function drawText() {
      if (this.note) {
        newWithClass(this.note, [this.annotation], "g", "annotation-note-content");
        var noteContent = this.note.select("g.annotation-note-content");
        newWithClass(noteContent, [this.annotation], "rect", "annotation-note-bg");
        newWithClass(noteContent, [this.annotation], "text", "annotation-note-label");
        newWithClass(noteContent, [this.annotation], "text", "annotation-note-title");
        var titleBBox = {
          height: 0
        };
        var label = this.a.select("text.annotation-note-label");
        var wrapLength = this.annotation.note && this.annotation.note.wrap || this.typeSettings && this.typeSettings.note && this.typeSettings.note.wrap || this.textWrap;
        var wrapSplitter = this.annotation.note && this.annotation.note.wrapSplitter || this.typeSettings && this.typeSettings.note && this.typeSettings.note.wrapSplitter;
        var bgPadding = this.annotation.note && this.annotation.note.bgPadding || this.typeSettings && this.typeSettings.note && this.typeSettings.note.bgPadding;
        var bgPaddingFinal = {
          top: 0,
          bottom: 0,
          left: 0,
          right: 0
        };

        if (typeof bgPadding === "number") {
          bgPaddingFinal = {
            top: bgPadding,
            bottom: bgPadding,
            left: bgPadding,
            right: bgPadding
          };
        } else if (bgPadding && (typeof bgPadding === "undefined" ? "undefined" : _typeof$1(bgPadding)) === "object") {
          bgPaddingFinal = _extends(bgPaddingFinal, bgPadding);
        }

        if (this.annotation.note.title) {
          var title = this.a.select("text.annotation-note-title");
          title.text(this.annotation.note.title);
          title.attr("fill", this.annotation.color);
          title.attr("font-weight", "bold");
          title.call(wrap, wrapLength, wrapSplitter);
          titleBBox = title.node().getBBox();
        }

        label.text(this.annotation.note.label).attr("dx", "0");
        label.call(wrap, wrapLength, wrapSplitter);
        label.attr("y", titleBBox.height * 1.1 || 0);
        label.attr("fill", this.annotation.color);
        var bbox = this.getNoteBBox();
        this.a.select("rect.annotation-note-bg").attr("width", bbox.width + bgPaddingFinal.left + bgPaddingFinal.right).attr("height", bbox.height + bgPaddingFinal.top + bgPaddingFinal.bottom).attr("x", bbox.x - bgPaddingFinal.left).attr("y", -bgPaddingFinal.top).attr("fill", "white").attr("fill-opacity", 0);
      }
    }
  }]);
  return d3NoteText;
}(Type);

var d3Label = customType(d3NoteText, {
  className: "label",
  note: {
    align: "middle"
  }
});
var d3Callout = customType(d3NoteText, {
  className: "callout",
  note: {
    lineType: "horizontal"
  }
});
var d3CalloutElbow = customType(d3Callout, {
  className: "callout elbow",
  connector: {
    type: "elbow"
  }
});
var d3CalloutCurve = customType(d3Callout, {
  className: "callout curve",
  connector: {
    type: "curve"
  }
});
var d3Badge = customType(Type, {
  className: "badge",
  subject: {
    type: "badge"
  },
  disable: ["connector", "note"]
});
var d3CalloutCircle = customType(d3NoteText, {
  className: "callout circle",
  subject: {
    type: "circle"
  },
  note: {
    lineType: "horizontal"
  },
  connector: {
    type: "elbow"
  }
});
var d3CalloutRect = customType(d3NoteText, {
  className: "callout rect",
  subject: {
    type: "rect"
  },
  note: {
    lineType: "horizontal"
  },
  connector: {
    type: "elbow"
  }
});

var ThresholdMap = function (_d3Callout) {
  inherits(ThresholdMap, _d3Callout);

  function ThresholdMap() {
    classCallCheck(this, ThresholdMap);
    return possibleConstructorReturn(this, (ThresholdMap.__proto__ || Object.getPrototypeOf(ThresholdMap)).apply(this, arguments));
  }

  createClass(ThresholdMap, [{
    key: "mapY",
    value: function mapY(accessors) {
      get$3(ThresholdMap.prototype.__proto__ || Object.getPrototypeOf(ThresholdMap.prototype), "mapY", this).call(this, accessors);
      var a = this.annotation;

      if ((a.subject.x1 || a.subject.x2) && a.data && accessors.y) {
        a.y = accessors.y(a.data);
      }

      if ((a.subject.x1 || a.subject.x2) && !a.x) {
        a.x = a.subject.x1 || a.subject.x2;
      }
    }
  }, {
    key: "mapX",
    value: function mapX(accessors) {
      get$3(ThresholdMap.prototype.__proto__ || Object.getPrototypeOf(ThresholdMap.prototype), "mapX", this).call(this, accessors);
      var a = this.annotation;

      if ((a.subject.y1 || a.subject.y2) && a.data && accessors.x) {
        a.x = accessors.x(a.data);
      }

      if ((a.subject.y1 || a.subject.y2) && !a.y) {
        a.y = a.subject.y1 || a.subject.y2;
      }
    }
  }]);
  return ThresholdMap;
}(d3Callout);

var d3XYThreshold = customType(ThresholdMap, {
  className: "callout xythreshold",
  subject: {
    type: "threshold"
  }
});

var newWithClass = function newWithClass(a, d, type, className, classID) {
  var group = a.selectAll(type + "." + (classID || className)).data(d);
  group.enter().append(type).merge(group).attr("class", className);
  group.exit().remove();
  return a;
};

var addHandlers = function addHandlers(dispatcher, annotation, _ref3) {
  var component = _ref3.component,
      name = _ref3.name;

  if (component) {
    component.on("mouseover.annotations", function () {
      dispatcher.call(name + "over", component, annotation);
    }).on("mouseout.annotations", function () {
      return dispatcher.call(name + "out", component, annotation);
    }).on("click.annotations", function () {
      return dispatcher.call(name + "click", component, annotation);
    });
  }
}; //Text wrapping code adapted from Mike Bostock


var wrap = function wrap(text, width, wrapSplitter) {
  var lineHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.2;
  text.each(function () {
    var text = select(this),
        words = text.text().split(wrapSplitter || /[ \t\r\n]+/).reverse().filter(function (w) {
      return w !== "";
    });
    var word = void 0,
        line$$1 = [],
        tspan = text.text(null).append("tspan").attr("x", 0).attr("dy", 0.8 + "em");

    while (word = words.pop()) {
      line$$1.push(word);
      tspan.text(line$$1.join(" "));

      if (tspan.node().getComputedTextLength() > width && line$$1.length > 1) {
        line$$1.pop();
        tspan.text(line$$1.join(" "));
        line$$1 = [word];
        tspan = text.append("tspan").attr("x", 0).attr("dy", lineHeight + "em").text(word);
      }
    }
  });
};

var bboxWithoutHandles = function bboxWithoutHandles(selection) {
  var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ":not(.handle)";

  if (!selection) {
    return {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    };
  }

  return selection.selectAll(selector).nodes().reduce(function (p, c) {
    var bbox = c.getBBox();
    p.x = Math.min(p.x, bbox.x);
    p.y = Math.min(p.y, bbox.y);
    p.width = Math.max(p.width, bbox.width);
    var yOffset = c && c.attributes && c.attributes.y;
    p.height = Math.max(p.height, (yOffset && parseFloat(yOffset.value) || 0) + bbox.height);
    return p;
  }, {
    x: 0,
    y: 0,
    width: 0,
    height: 0
  });
};

function annotation() {
  var annotations = [],
      collection = void 0,
      context = void 0,
      //TODO: add canvas functionality
  disable = [],
      accessors = {},
      accessorsInverse = {},
      editMode = false,
      ids = void 0,
      type = d3Callout,
      textWrap = void 0,
      notePadding = void 0,
      annotationDispatcher = dispatch$1("subjectover", "subjectout", "subjectclick", "connectorover", "connectorout", "connectorclick", "noteover", "noteout", "noteclick", "dragend", "dragstart"),
      sel = void 0;

  var annotation = function annotation(selection) {
    sel = selection; //TODO: check to see if this is still needed

    if (!editMode) {
      selection.selectAll("circle.handle").remove();
    }

    var translatedAnnotations = annotations.map(function (a) {
      if (!a.type) {
        a.type = type;
      }

      if (!a.disable) {
        a.disable = disable;
      }

      return new Annotation(a);
    });
    collection = collection || new AnnotationCollection({
      annotations: translatedAnnotations,
      accessors: accessors,
      accessorsInverse: accessorsInverse,
      ids: ids
    });
    var annotationG = selection.selectAll("g").data([collection]);
    annotationG.enter().append("g").attr("class", "annotations");
    var group = selection.select("g.annotations");
    newWithClass(group, collection.annotations, "g", "annotation");
    var annotation = group.selectAll("g.annotation");
    annotation.each(function (d) {
      var a = select(this);
      a.attr("class", "annotation");
      newWithClass(a, [d], "g", "annotation-connector");
      newWithClass(a, [d], "g", "annotation-subject");
      newWithClass(a, [d], "g", "annotation-note");
      newWithClass(a.select("g.annotation-note"), [d], "g", "annotation-note-content");
      d.type = d.type.toString() === "[object Object]" ? d.type : new d.type({
        a: a,
        annotation: d,
        textWrap: textWrap,
        notePadding: notePadding,
        editMode: editMode,
        dispatcher: annotationDispatcher,
        accessors: accessors
      });
      d.type.draw();
      d.type.drawText && d.type.drawText();
    });
  };

  annotation.json = function () {
    /* eslint-disable no-console */
    console.log("Annotations JSON was copied to your clipboard. Please note the annotation type is not JSON compatible. It appears in the objects array in the console, but not in the copied JSON.", collection.json);
    /* eslint-enable no-console */

    window.copy(JSON.stringify(collection.json.map(function (a) {
      delete a.type;
      return a;
    })));
    return annotation;
  };

  annotation.update = function () {
    if (annotations && collection) {
      annotations = collection.annotations.map(function (a) {
        a.type.draw();
        return a;
      });
    }

    return annotation;
  };

  annotation.updateText = function () {
    if (collection) {
      collection.updateText(textWrap);
      annotations = collection.annotations;
    }

    return annotation;
  };

  annotation.updatedAccessors = function () {
    collection.setPositionWithAccessors();
    annotations = collection.annotations;
    return annotation;
  };

  annotation.disable = function (_) {
    if (!arguments.length) return disable;
    disable = _;

    if (collection) {
      collection.updateDisable(disable);
      annotations = collection.annotations;
    }

    return annotation;
  };

  annotation.textWrap = function (_) {
    if (!arguments.length) return textWrap;
    textWrap = _;

    if (collection) {
      collection.updateTextWrap(textWrap);
      annotations = collection.annotations;
    }

    return annotation;
  };

  annotation.notePadding = function (_) {
    if (!arguments.length) return notePadding;
    notePadding = _;

    if (collection) {
      collection.updateNotePadding(notePadding);
      annotations = collection.annotations;
    }

    return annotation;
  }; //todo think of how to handle when undefined is sent


  annotation.type = function (_, settings) {
    if (!arguments.length) return type;
    type = _;

    if (collection) {
      collection.annotations.map(function (a) {
        a.type.note && a.type.note.selectAll("*:not(.annotation-note-content)").remove();
        a.type.noteContent && a.type.noteContent.selectAll("*").remove();
        a.type.subject && a.type.subject.selectAll("*").remove();
        a.type.connector && a.type.connector.selectAll("*").remove();
        a.type.typeSettings = {};
        a.type = type;
        a.subject = settings && settings.subject || a.subject;
        a.connector = settings && settings.connector || a.connector;
        a.note = settings && settings.note || a.note;
      });
      annotations = collection.annotations;
    }

    return annotation;
  };

  annotation.annotations = function (_) {
    if (!arguments.length) return collection && collection.annotations || annotations;
    annotations = _;

    if (collection && collection.annotations) {
      var rerun = annotations.some(function (d) {
        return !d.type || d.type.toString() !== "[object Object]";
      });

      if (rerun) {
        collection = null;
        annotation(sel);
      } else {
        collection.annotations = annotations;
      }
    }

    return annotation;
  };

  annotation.context = function (_) {
    if (!arguments.length) return context;
    context = _;
    return annotation;
  };

  annotation.accessors = function (_) {
    if (!arguments.length) return accessors;
    accessors = _;
    return annotation;
  };

  annotation.accessorsInverse = function (_) {
    if (!arguments.length) return accessorsInverse;
    accessorsInverse = _;
    return annotation;
  };

  annotation.ids = function (_) {
    if (!arguments.length) return ids;
    ids = _;
    return annotation;
  };

  annotation.editMode = function (_) {
    if (!arguments.length) return editMode;
    editMode = _;

    if (sel) {
      sel.selectAll("g.annotation").classed("editable", editMode);
    }

    if (collection) {
      collection.editMode(editMode);
      annotations = collection.annotations;
    }

    return annotation;
  };

  annotation.collection = function (_) {
    if (!arguments.length) return collection;
    collection = _;
    return annotation;
  };

  annotation.on = function () {
    var value = annotationDispatcher.on.apply(annotationDispatcher, arguments);
    return value === annotationDispatcher ? annotation : value;
  };

  return annotation;
}

var index = {
  annotation: annotation,
  annotationTypeBase: Type,
  annotationLabel: d3Label,
  annotationCallout: d3Callout,
  annotationCalloutCurve: d3CalloutCurve,
  annotationCalloutElbow: d3CalloutElbow,
  annotationCalloutCircle: d3CalloutCircle,
  annotationCalloutRect: d3CalloutRect,
  annotationXYThreshold: d3XYThreshold,
  annotationBadge: d3Badge,
  annotationCustomType: customType
};

var AnnotationTypes = /*#__PURE__*/Object.freeze({
	__proto__: null,
	annotation: annotation,
	annotationTypeBase: Type,
	annotationLabel: d3Label,
	annotationCallout: d3Callout,
	annotationCalloutCurve: d3CalloutCurve,
	annotationCalloutElbow: d3CalloutElbow,
	annotationCalloutCircle: d3CalloutCircle,
	annotationCalloutRect: d3CalloutRect,
	annotationXYThreshold: d3XYThreshold,
	annotationBadge: d3Badge,
	annotationCustomType: customType,
	'default': index
});

var ANNOTATION_TYPES = ['annotationCallout', 'annotationCalloutCircle', 'annotationCalloutCurve', 'annotationCalloutElbow', 'annotationCalloutRect', 'annotationXThreshold', 'annotationYThreshold']; //,'annotationLabel','annotationBadge'

var d3_annotation = annotation;

var toSusieConfig = function toSusieConfig(a, viz) {
  var currentSize = viz.chart.contentSize || viz.chart.size || {
    width: 0,
    height: 0
  };

  var annotationConfig = _objectSpread2({}, a.config);

  annotationConfig = JSON.parse(JSON.stringify(annotationConfig));
  if (!annotationConfig.note.title) annotationConfig.note.title = 'Annotation title';
  if (a.type === 'annotationXThreshold' || a.type === 'annotationYThreshold') annotationConfig.type = d3XYThreshold;else annotationConfig.type = AnnotationTypes[a.type];
  annotationConfig.id = a.id;
  annotationConfig.color = viz.config.skin === 'light' ? '#222' : '#ddd';
  annotationConfig.note.bgPadding = {
    top: 14,
    left: 8,
    right: 15,
    bottom: 14
  };
  if (a.type === 'annotationXThreshold') annotationConfig.subject = {
    y1: 0,
    y2: currentSize.height
  };else if (a.type === 'annotationYThreshold') annotationConfig.subject = {
    x1: 0,
    x2: currentSize.width
  };

  if (!annotationConfig.x) {
    annotationConfig.x = 0.5;
    annotationConfig.y = 0.6;
    annotationConfig.dx = 0.2;
    annotationConfig.dy = -0.1;
  }

  annotationConfig.x = annotationConfig.x * currentSize.width;
  annotationConfig.y = annotationConfig.y * currentSize.height;
  annotationConfig.dx = annotationConfig.dx * currentSize.width;
  annotationConfig.dy = annotationConfig.dy * currentSize.height;

  if (annotationConfig.subject) {
    if (annotationConfig.subject.height) annotationConfig.subject.height = annotationConfig.subject.height * currentSize.height;
    if (annotationConfig.subject.width) annotationConfig.subject.width = annotationConfig.subject.width * currentSize.width;
    if (annotationConfig.subject.radius) annotationConfig.subject.radius = annotationConfig.subject.radius * currentSize.width;
  }

  return annotationConfig;
};

var fromSusieConfig = function fromSusieConfig(src, d, viz) {
  var currentSize = viz.chart.contentSize || viz.chart.size;

  var propper = _objectSpread2(_objectSpread2({}, src), {}, {
    config: _objectSpread2({}, d.json)
  });

  delete propper.config.type;
  propper = JSON.parse(JSON.stringify(propper));
  propper.config.x = propper.config.x / currentSize.width;
  propper.config.y = propper.config.y / currentSize.height;
  propper.config.dx = propper.config.dx / currentSize.width;
  propper.config.dy = propper.config.dy / currentSize.height;

  if (propper.config.subject) {
    if (propper.config.subject.height) propper.config.subject.height = propper.config.subject.height / currentSize.height;
    if (propper.config.subject.width) propper.config.subject.width = propper.config.subject.width / currentSize.width;
    if (propper.config.subject.radius) propper.config.subject.radius = propper.config.subject.radius / currentSize.width;
  }

  return propper;
};

function AnnotationBehavior($root, viz) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var downTarget = null;
  var editMode = viz.editMode && $root.closest('.editing-annotations');

  var triggerChange = function triggerChange(src, d) {
    var propper = fromSusieConfig(src, d, viz);
    if (viz.onAnnotationChange) viz.onAnnotationChange(propper);
  };

  var d3Configs = (config.annotations || []).map(function (a) {
    return toSusieConfig(a, viz);
  });
  var makeAnnotations = d3_annotation().editMode(editMode).notePadding(15).textWrap(140).annotations(d3Configs).on('dragend', function (d) {
    // console.log("ANNOTATION DRAGGED")
    var src = config.annotations.find(function (a) {
      return a.id === d.id;
    }); // Menuda basura... Es para poder comprovar si se ha movido...

    var srcConfig = toSusieConfig(src, viz);

    if (d.dx === srcConfig.dx && d.dy === srcConfig.dy && d.x === srcConfig.x && d.y === srcConfig.y) {
      // console.log("THIS WAS A CLICK")
      if (downTarget) {
        setEditing(d, downTarget, function () {
          return triggerChange(src, d);
        });
        downTarget = null;
      }
    } else {
      triggerChange(src, d);
    }
  });
  var annotationsRoot = d3_select($root).selectAll('.annotation-group').data(config.annotations ? [null] : []);
  var annotationsRootEnter = annotationsRoot.enter().append("g").attr("class", "annotation-group");
  annotationsRoot = annotationsRoot.merge(annotationsRootEnter);
  if (viz.chart.margin) annotationsRoot.attr('transform', "translate(".concat(viz.chart.margin.left, ",").concat(viz.chart.margin.top, ")"));
  annotationsRoot.call(makeAnnotations).raise().style('font-family', 'santander-microtext-embedded').select('.annotations').selectAll('.annotation').select('.annotation-note').select('.annotation-note-content').selectAll('text').style('cursor', editMode ? 'text' : 'default').on('mousedown', function (e) {
    downTarget = e.currentTarget;
  });
  annotationsRoot.select('.annotations').selectAll('.annotation').on('click', function () {
    d3_select(this).raise();
    if (viz.onAnnotationClick) viz.onAnnotationClick();
  });
  makeAnnotations.editMode(editMode).update();
  annotationsRoot.select('.annotations').selectAll('.annotation').select('.annotation-note').select('.annotation-note-content').select('.annotation-note-bg').style('fill-opacity', 0.9).style('fill', viz.config.skin === 'light' ? '#e0eef3' : '#434343');
  annotationsRoot.select('.annotations').selectAll('.annotation').nodes().forEach(function (el) {
    el.querySelectorAll('.handle').forEach(function (handle) {
      handle.style.fillOpacity = '0.3';
      handle.style.fill = viz.config.skin === 'light' ? '#eee' : '#888';
      handle.style.stroke = viz.config.skin === 'light' ? '#888' : '#ccc';
      handle.style.strokeDasharray = '2';
    });
  });
  annotationsRoot.select('.annotations').selectAll('.annotation').select('.annotation-note').select('.annotation-note-content').each(function (d) {
    console.log('d', d);
    var sel = d3_select(this);

    if (!sel.select('.number').node()) {
      var number = sel.append('g').attr('class', 'number handle');
      number.append('circle').attr('r', 10);
      number.append('text').text(d.id).attr('font-size', '10').attr('text-anchor', 'middle').attr('dominant-baseline', 'central').style('pointer-events', 'none');
    } // not this way...
    // d3_select(sel.node().parentNode).select('.note-line').attr('d','M0,0H100,0')


    var bbox = sel.select('.annotation-note-bg').node().getBBox();
    sel.select('.number').attr('transform', "translate(".concat(bbox.width / 2 - 10, ",").concat(bbox.height - 15, ")")).raise().style('fill-opacity', '1').style('display', editMode ? 'block' : 'none');
    sel.select('.number').select('circle').attr('fill', viz.config.skin === 'light' ? '#fafafa' : '#020202').attr('stroke', viz.config.skin === 'light' ? '#ccc' : '#444').attr('stroke-dasharray', 'none');
    sel.select('.number').select('text').attr('fill', viz.config.skin === 'light' ? '#020202' : '#fafafa'); // if(!sel.select('.text-rect-title').node()){
    //   sel.append('path').attr('class','text-rect-title').attr('fill','#fafafa').attr('stroke','#aaa')
    //   sel.append('path').attr('class','text-rect-sub').attr('fill','#fafafa').attr('stroke','#aaa')
    // }
    // let tbx = sel.select('.annotation-note-title').node().getBBox()
    // let sbx = sel.select('.annotation-note-label').node().getBBox()
    // let width = Math.max(tbx.width,sbx.width)
    // sel.select('.text-rect-title').attr('d',dentedRect(width,tbx.height,['tl','tr','bl','br'],null,5)).lower()
    // sel.select('.text-rect-sub').attr('d',dentedRect(width,sbx.height,['tl','tr','bl','br'],null,5)).attr('transform',`translate(0,${sbx.y})`).lower()
  });
  annotationsRoot.select('.annotations').selectAll('.annotation').select('.annotation-note').select('.note-line').lower();
  annotationsRoot.select('.annotations').selectAll('.annotation').select('.annotation-connector').raise(); // annotationsRoot.select('.annotations')
  //   .selectAll('.annotation').select('.annotation-note').select('.annotation-note-bg').lower()

  annotationsRoot.select('.annotations').selectAll('.annotation').select('.annotation-note').select('.annotation-note-content').select('.number').raise(); // apaño para la transicion del "play" de _ghostData

  if (viz.chart._ghostData) annotationsRoot = annotationsRoot.transition().duration(800).style('opacity', 0);
  annotationsRoot.transition().duration(1000).delay(1400).style('opacity', 1);

  function auto_grow(element, original) {
    element.style.height = "16px";
    element.style.height = element.scrollHeight + "px";
    var parentAllowed = original.parentNode.getBBox().width - 20;
    element.style.width = 16 + 'px';
    element.style.whiteSpace = 'nowrap';
    var fromMaxWidth = Math.min(140, element.scrollWidth);
    element.style.whiteSpace = 'normal';
    element.style.width = parentAllowed + 'px';
    element.style.width = Math.max(fromMaxWidth, Math.max(parentAllowed, element.scrollWidth)) + "px"; // element.style.height = "16px";
    // element.style.height = (element.scrollHeight)+"px";
    // let parentAllowed = original.parentNode.getBBox().width - 20
    // element.style.width = parentAllowed+'px'
    // element.style.width = (Math.max(parentAllowed,element.scrollWidth))+"px";
  }

  var setEditing = function setEditing(d, node, callback) {
    var type = node.className.baseVal.indexOf('annotation-note-title') >= 0 ? 'title' : 'label';
    var bb1 = node.getBBox();
    var globalOffset = viz.chart.margin ? {
      x: viz.chart.margin.left,
      y: viz.chart.margin.top
    } : {
      x: 0,
      y: 0
    };
    var translate = node.parentNode.getAttribute('transform').replace('translate', '').replace('(', '').replace(')', '').split(','); // let localpoint = type==='title'?{x:d.x+d.dx,y:d.y+d.dy+15}:{x:d.x+d.dx,y:d.y+d.dy+15}
    // localpoint.x-=d.translation.x
    // localpoint.y-=d.translation.y

    var localpoint = d.translation;
    localpoint.x += +translate[0] + bb1.x + globalOffset.x;
    localpoint.y += +translate[1] + bb1.y + globalOffset.y;
    var myforeign = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
    var textarea = document.createElement("textarea");
    var textnode = document.createTextNode(d.note[type]);
    textarea.appendChild(textnode);
    textarea.setAttribute("contentEditable", "true"); // textarea.setAttribute("width", "140px");

    textarea.style.width = "140px";
    textarea.style.height = bb1.height + 'px';
    textarea.style.fontFamily = 'santander-microtext-embedded';
    textarea.style.lineHeight = '19px';
    textarea.style.fontSize = '16px';
    textarea.style.overflow = 'hidden';
    textarea.style.resize = "none";
    textarea.style.minHeight = textarea.style.height; // textarea.style.maxHeight="140px"

    textarea.style.border = 'solid 1px #CEDEE7';
    textarea.style.outline = 'none';
    textarea.style.padding = '4px';
    textarea.style.overflowWrap = 'normal';
    textarea.style.background = '#F6FAFC';
    textarea.style.borderRadius = '4px';
    myforeign.setAttribute("width", "800px");
    myforeign.setAttribute("height", "300px"); // myforeign.classList.add("foreign"); //to make div fit text
    // textarea.classList.add("insideforeign"); //to make div fit text

    var unsetEditing = function unsetEditing() {
      var content = textarea.value;
      d.note[type] = content;
      myforeign.remove();
      callback();
    };

    textarea.addEventListener('input', function (e) {
      auto_grow(textarea, node);
    });
    textarea.addEventListener('keydown', function (e) {
      if (e.code === 'Enter') {
        e.preventDefault();
        textarea.blur();
      }
    });
    textarea.addEventListener('blur', unsetEditing);
    myforeign.setAttributeNS(null, "transform", "translate(" + localpoint.x + " " + localpoint.y + ")");
    $root.appendChild(myforeign);
    myforeign.appendChild(textarea);
    auto_grow(textarea, node);
    textarea.focus();
    textarea.select();
  };
}

AnnotationBehavior.defaultConfig = {
  index: 203,

  /**
   * Array of annotation objects with a title and subtitle. See [annotation](#/developer/PropDetails#annotations)
   */
  annotations: {
    type: [Array],
    "default": [],
    exposed: true
  }
};
AnnotationBehavior.configName = 'AnnotationBehavior';

var sampleCategories = ['Quantity', 'Sold', 'Magnitude', 'Category with long name', 'Budget', 'Total volume', 'Average %', 'Another category with along name', 'Misc', 'Indicator', 'KPI_1', 'KPI_2', 'Other Indicator', 'GDP', 'HDI', 'GPI', 'PQLI', 'Spain', 'France', 'USA'];
var sampleMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
var sampleLines = ['Line 1', 'Line 2', 'Line 3', 'Line 4', 'Line 5', 'Line 6', 'Line 7', 'Line 8', 'Line 9'];
var sampleDimension = ['First Dimension', 'Second Dimension', 'Ohter Dimension', 'Very long dimension Name', 'Another long dimension name', 'Yet another long dimension name', 'dim_6', 'dim_7', 'dim_8', 'dim_9'];
var sampleLetters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 'u', 'v', 'w', 'x', 'y', 'z'];
var numDec = 2;
function sanitizeData(value) {
  var sanitized = value.map(function (row) {
    return row.map(function (cell) {
      if (cell === '') return null;else if (cell instanceof Date) return cell;else if ((!isNaN(Number(cell)) || !isNaN(Number(String(cell).replace(',', '.')))) && String(cell).replaceAll(' ', '') === String(cell)) {
        return Number(String(cell).replace(',', '.'));
      } else return cell;
    });
  });
  return sanitized;
}
function convertRowsToData(rows) {
  var dims = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var headers = rows[0]; // //si no lleva id, se lo metemos (haciendo copia)
  // if(headers[0]!=='id'){
  //   headers = ['id',...headers]
  //   rows = rows.map((r,index)=>[index,...r])
  // }

  var data = rows.slice(1).map(function (row) {
    var rowObject = {
      id: row[0]
    };

    if (headers.length > 2 || dims === 2) {
      rowObject.value = headers.slice(1).map(function (header, i) {
        return {
          id: header,
          parentId: row[0],
          value: row[i + 1]
        };
      });
    } else {
      //SOLO cuando es "simple" podemso cambiar el nombre del "value"
      rowObject[headers[1]] = row[1];
    }

    return rowObject;
  }); // console.log("TO (d3)DATA FORMAT:")
  // console.log(data)

  return data;
} ///////////////////////////////

function makeRandomData() {
  var signed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
  var max;
  var rowIds = sampleCategories.slice(0, size);
  if (Math.random() > 0.0) max = 100;else max = 1;
  var rows = rowIds.map(function (d) {
    return [d, +((signed ? -max / 2 : 0) + Math.random() * max).toFixed(numDec)];
  }); // rows[0][1] = 1000+100*Math.random()

  return [['id', 'value']].concat(rows);
}
function makeRandomData2D() {
  var signed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [5, 5];

  if (size.length != 2) {
    size = [5, 5];
  }

  var rowIds = sampleMonths.slice(0, size[0]);
  var colIds = ['id'].concat(sampleCategories.slice(0, size[1]));
  var rows = rowIds.map(function (rowId) {
    return [rowId].concat(_toConsumableArray(_toConsumableArray(Array(size[1]).keys()).map(function () {
      return +((signed ? -500 : 0) + Math.random() * 1000).toFixed(numDec);
    })));
  });
  return [colIds].concat(rows);
}
function makeRandomData2DPercentage() {
  var signed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [5, 5];

  if (size.length != 2) {
    size = [5, 5];
  }

  var rowIds = sampleCategories.slice(0, size[0]);
  var colIds = ['id'].concat(sampleLetters.slice(0, size[1]));
  var rows = rowIds.map(function (rowId) {
    return [rowId].concat(_toConsumableArray(_toConsumableArray(Array(size[1]).keys()).map(function () {
      return +((signed ? -100 : 0) + Math.random() * 400).toFixed(numDec);
    })));
  });
  return [colIds].concat(rows);
} //BASURA...
// export function makeRandomData2DDates(signed=true, size=[1,8]){
//   if(size.length != 2) {
//     size = [1,8]
//   }
//   let rowIds = sampleLines.slice(0, size[0])
//   let colIds = [...Array(size[1]).keys()].map((d)=>{
//     let date = new Date()
//     date.setDate(d)
//     date.setHours(0, 0, 0)
//     return date
//   })
//   let rows = rowIds.map((rowId)=>{
//     return [
//       rowId,
//       ...colIds.map(()=>{
//         return +((signed?-5000:0)+Math.random()*10000).toFixed(numDec)
//       })
//     ]
//   })
//   return [colIds].concat(rows)
// }
// SAME BASURA...
// export function makeRandomData2DLines(signed=true, size=[3,8]){
//   if(size.length != 2) {
//     size = [3,8]
//   }
//   let rowIds = sampleLines.slice(0, size[0])
//   let colIds = [...Array(size[1]).keys()]
//   let rows = rowIds.map((rowId)=>{
//     return [
//       rowId,
//       ...[...Array(size[1] -1).keys()].map(()=>{
//         return +((signed?-5000:0)+Math.random()*10000).toFixed(numDec)
//       })
//     ]
//   })
//   return [colIds].concat(rows)
// }

function makeRandomData2DLines() {
  var signed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [3, 8];

  if (size.length != 2) {
    size = [5, 5];
  }

  var rowIds = _toConsumableArray(Array(size[1]).keys());

  var colIds = ['id'].concat(sampleLines.slice(0, size[0]));
  var rows = rowIds.map(function (rowId) {
    return [rowId].concat(_toConsumableArray(_toConsumableArray(Array(size[0]).keys()).map(function () {
      return +((signed ? -500 : 0) + Math.random() * 1000).toFixed(numDec);
    })));
  });
  return [colIds].concat(rows);
} // header: [id,x,y,group,size]

function makeRandomDataScatter() {
  var signed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
  var colIds = ['id', 'x', 'y', 'group'];
  var groups = Array.from(Array(Math.floor(1 + Math.random() * 5)).keys()).map(function (i) {
    return 'group_' + (i + 1);
  });
  var maxX = Math.random() > 0.5 ? 10 : 1000; //10

  var maxY = Math.random() > 0.5 ? 100 : 5; //10

  var rows = _toConsumableArray(Array(size).keys()).map(function (d) {
    return [d < sampleCategories.length ? sampleCategories[d] : d, +((signed ? -maxX / 2 : 0) + Math.random() * maxX).toFixed(numDec), +((signed ? -maxY / 2 : 0) + Math.random() * maxY).toFixed(numDec), groups[Math.floor(Math.random() * groups.length)]];
  });

  return [colIds].concat(rows);
}
function makeRandomDataBubble() {
  var signed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
  var colIds = ['id', 'x', 'y', 'group', 'size'];
  var groups = Array.from(Array(Math.floor(1 + Math.random() * 5)).keys()).map(function (i) {
    return 'group_' + (i + 1);
  });
  var maxX = Math.random() > 0.5 ? 10 : 1000; //10

  var maxY = Math.random() > 0.5 ? 100 : 5; //10

  var maxSize = Math.random() > 0.5 ? 10 : 1000;

  var rows = _toConsumableArray(Array(size).keys()).map(function (d) {
    return [d < sampleCategories.length ? sampleCategories[d] : d, +((signed ? -maxX / 2 : 0) + Math.random() * maxX).toFixed(numDec), +((signed ? -maxY / 2 : 0) + Math.random() * maxY).toFixed(numDec), groups[Math.floor(Math.random() * groups.length)], +(Math.random() * maxSize).toFixed(numDec)];
  });

  return [colIds].concat(rows);
} // header: [id,open,high,close,low]

function makeRandomDataCandleStick() {
  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
  var colIds = ['id', 'open', 'close', 'high', 'low'];

  var rows = _toConsumableArray(Array(size).keys()).map(function (d) {
    var v = +(Math.random() * 50).toFixed(numDec);
    var o = v + +(-5 + Math.random() * 10).toFixed(numDec);
    var c = v + +(-5 + Math.random() * 10).toFixed(numDec);
    return [d, o, //Math.random()*50,
    c, //Math.random()*50,
    +(Math.max(o, c) + Math.random() * 10).toFixed(numDec), //Math.random()*50,
    +(Math.min(o, c) - Math.random() * 10).toFixed(numDec) //Math.random()*50,
    // value: Math.random()*500,
    ];
  });

  return [colIds].concat(rows);
} // header: [id,x,y,color]

function makeRandomDataHeatMap() {
  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [5, 5];

  if (size.length != 2) {
    size = [5, 5];
  }

  var colIds = ['x', 'y', 'color'];
  var xs = sampleLetters.slice(0, size[0]);
  var ys = sampleLetters.slice(0, size[1]);
  var rows = [];
  xs.forEach(function (x) {
    ys.forEach(function (y) {
      rows.push([// x+'_'+y,
      x, y, +Math.random().toFixed(numDec)]);
    });
  });
  return [colIds].concat(rows);
}
function makeRandomDataChoropleth(features) {
  var featureIdProperty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';
  // return ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19'].map((d)=>{
  //   return {
  //     id: d,
  //     // cod_ccaa: d,
  //     value: Math.random()*100
  //   }
  // })
  var colIds = ['id', 'value'];
  var rows = features.map(function (d) {
    return [d.properties[featureIdProperty], // adm1_code: d,
    +(Math.random() * 100).toFixed(numDec)];
  });
  return [colIds].concat(rows);
}
function makeRandomDataChoroplethCat(features) {
  var featureIdProperty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';
  // return ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19'].map((d)=>{
  //   return {
  //     id: d,
  //     // cod_ccaa: d,
  //     value: Math.random()*100
  //   }
  // })
  var categories = Array.from(Array(Math.floor(1 + Math.random() * 5)).keys()).map(function (i) {
    return 'category' + (i + 1);
  });
  var colIds = ['id', 'category'];
  var rows = features.map(function (d) {
    return [d.properties[featureIdProperty], // adm1_code: d,
    categories[Math.floor(Math.random() * categories.length)]];
  });
  return [colIds].concat(rows);
} // header: [id,dim_0,dim_1,dim_2,dim_3,dim_4]

function makeRandomDataParallelCoords() {
  var signed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [3, 5];

  if (size.length != 2) {
    size = [3, 5];
  }
  /*let colIds = ['id','a','b','c','d','e']
  let rows = ['Line 1','Line 2','Line 3'].map((d)=>{
    return [
      d,
      (signed?-200:0)+Math.random()*5,
      (signed?-500:0)+Math.random()*20,
      (signed?-500:0)+Math.random()*20,
      (signed?-5:0)+Math.random()*20,
      (signed?-500:0)+Math.random()*60,
    ]
  })
  return [colIds].concat(rows) */


  var colIds = ['id'].concat(sampleDimension.slice(0, size[1]));
  var rows = sampleLines.slice(0, size[0]).map(function (d) {
    return [d].concat(_toConsumableArray(Array(size[1]).keys()).map(function (i) {
      return +((signed ? -100 : 0) + Math.random() * 100 + (i + 1) * Math.random()).toFixed(numDec);
    }));
  });
  return [colIds].concat(rows);
} // header: [id,bar1,line1,line2]

function makeRandomDataLineAndBarChart() {
  var signed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [1, 8];

  if (size.length != 2) {
    size = [1, 8];
  } //TODO: review this one, it doesnt' seem to be dynamic


  var lines = _toConsumableArray(Array(size[0]).keys()).map(function (i) {
    return 'line' + (i + 1);
  });

  var colIds = ['id', 'bar1'].concat(lines);
  var max;
  var rowIds = sampleCategories.slice(0, size[1]);
  if (Math.random() > 0.0) max = 100;else max = 1;
  var rows = rowIds.map(function (d) {
    return [d, +((signed ? -max / 2 : 0) + Math.random() * max).toFixed(numDec)].concat(_toConsumableArray(lines.map(function () {
      return +((signed ? -max / 2 : 0) + Math.random() * max).toFixed(numDec);
    })));
  });
  return [colIds].concat(rows);
} /////////////////////////////////////////////

function transpose(data) {
  var ob = {};
  data.forEach(function (row) {
    row.value.forEach(function (col) {
      if (!ob[col.id]) ob[col.id] = {
        value: [],
        id: col.id
      };
      ob[col.id].value.push(col);
    });
  });
  var res = Object.keys(ob).map(function (key) {
    return {
      id: ob[key].id,
      value: ob[key].value
    };
  });
  return res;
}

var dataUtils = /*#__PURE__*/Object.freeze({
	__proto__: null,
	sanitizeData: sanitizeData,
	convertRowsToData: convertRowsToData,
	makeRandomData: makeRandomData,
	makeRandomData2D: makeRandomData2D,
	makeRandomData2DPercentage: makeRandomData2DPercentage,
	makeRandomData2DLines: makeRandomData2DLines,
	makeRandomDataScatter: makeRandomDataScatter,
	makeRandomDataBubble: makeRandomDataBubble,
	makeRandomDataCandleStick: makeRandomDataCandleStick,
	makeRandomDataHeatMap: makeRandomDataHeatMap,
	makeRandomDataChoropleth: makeRandomDataChoropleth,
	makeRandomDataChoroplethCat: makeRandomDataChoroplethCat,
	makeRandomDataParallelCoords: makeRandomDataParallelCoords,
	makeRandomDataLineAndBarChart: makeRandomDataLineAndBarChart,
	transpose: transpose
});

var BaseViz = /*#__PURE__*/function () {
  function BaseViz($root) {
    var _this = this;

    _classCallCheck(this, BaseViz);

    //,config) { ???
    var resizeObserver = new ResizeObserver(function () {
      setTimeout(_this.afterChartUpdate.bind(_this), 100);
    });
    resizeObserver.observe($root);
    this.$root = $root;
    this.$root.style.border = 'solid 1px #DEEDF2';
    d3_select($root).style('overflow', 'hidden');
    var contentWrapper = d3_select($root).append('div').attr('class', 'wrapper').style('margin', '16px').style('width', 'calc(100% - 32px)').style('height', 'calc(100% - 32px)');
    contentWrapper.style('display', 'flex').style('flex-direction', 'column').style('position', 'relative').style('font-family', 'santander-microtext-embedded').style('user-select', 'none');
    var headerRoot = contentWrapper.append('div').attr('class', 'header-container').style('text-align', 'left').style('position', 'relative');
    this.$title = headerRoot.append('div').attr('class', 'title').style('font-size', '22px').style('font-family', 'santander-headline-bold-embedded') // .style('font-weight','bold')
    .node();
    this.$separator = headerRoot.append('div').attr('class', 'separator rect').style('width', '28px').style('height', '3px').style('background-color', PRIMARY_COLOR).style('margin', '10px 0 7px 0').node();
    this.$subTitle = headerRoot.append('div').attr('class', 'sub-title').style('font-size', '18px').style('font-weight', 'regular').node(); // this.$headerRoot = headerRoot.node()

    this.$chartRoot = contentWrapper.append('svg').attr('class', 'chart-container').style('width', '100%').style('flex', '1 1 auto').node();
    this.$legendRoot = contentWrapper.append('div').attr('class', 'legend-container').node();
    var footerRoot = contentWrapper.append('div').attr('class', 'footer-container').style('display', 'flex').style('justify-content', 'space-between').style('align-items', 'flex-end').style('position', 'relative').style('margin-top', '10px');
    this.$sourceRoot = footerRoot.append('div').attr('class', 'source-container').style('font-size', '12px').style('line-height', '10px').node();
    this.$logoRoot = footerRoot.append('div').attr('class', 'logo').node();
    this.$logoRoot.style.marginLeft = 'auto';
    this.chart = new this.__proto__.constructor.chartClass(this.$chartRoot);
    this.chart._parent = this;
    this.chart.helperListeners.afterItemsHelper = this.afterItemsHelper.bind(this);
  }

  _createClass(BaseViz, [{
    key: "beforeChartUpdate",
    value: function beforeChartUpdate() {
      var _this2 = this;

      this.$title.innerHTML = this.config.title;
      this.$subTitle.innerHTML = this.config.subTitle;
      this.$separator.style.display = this.config.title !== '' ? 'block' : 'none';
      this.$title.style.display = this.config.title !== '' ? 'block' : 'none';
      this.$subTitle.style.display = this.config.subTitle !== '' ? 'block' : 'none'; // config: sourceCredits
      //ya se "quita" con innerHTML = '' :D

      if (this.config.sourceLink && this.config.sourceLink !== '') {
        var propperLink = this.config.sourceLink;
        if (propperLink.indexOf('http') < 0) propperLink = 'http://' + propperLink;
        this.$sourceRoot.innerHTML = "<a href=\"".concat(propperLink, "\" style=\"color: inherit\" target=\"_blank\">").concat(this.config.sourceCredits, "</a>");
      } else {
        this.$sourceRoot.innerHTML = this.config.sourceCredits;
      } // config: showLogo


      var logoData;

      if (this.config.showLogo) {
        logoData = this.config.showLogo === true ? LOGOS[0] : LOGOS.find(function (l) {
          return l.id === _this2.config.showLogo;
        });
      }

      var logoContent = d3_select(this.$logoRoot).selectAll('.logo-content').data(logoData ? [logoData] : [], function (d) {
        return d.id;
      });
      var logoEnter = logoContent.enter().append('div').attr('class', 'logo-content');
      logoEnter.each(function (d) {
        var svg = new DOMParser().parseFromString(logoData.svg, 'image/svg+xml').documentElement;
        var _svg$viewBox$baseVal = svg.viewBox.baseVal,
            x = _svg$viewBox$baseVal.x,
            y = _svg$viewBox$baseVal.y,
            width = _svg$viewBox$baseVal.width,
            height = _svg$viewBox$baseVal.height;
        svg.setAttribute('class', 'logo');
        svg.setAttribute('height', 16);
        svg.setAttribute('width', 16 * (width / height));
        this.append(svg);
      });
      logoContent.exit().remove();
      this.$logoRoot.style.display = this.config.showLogo ? 'block' : 'none';
      this.$sourceRoot.style.display = this.config.sourceCredits !== '' ? 'block' : 'none';
      this.$root.style.transition = 'background-color .8s'; // console.log('setting skin styles', this.config.skin)
      // config: skin

      if (this.config.skin === 'dark') {
        this.$root.style.backgroundColor = SKIN_BACKGROUND_DARK;
        this.$root.style.color = '#fff';
        this.$title.style.color = '#fff';
        this.$subTitle.style.color = '#ddd';
        this.$sourceRoot.style.color = '#ddd'; //TODO: SHOULD BRING BACK!

        d3_select(this.$logoRoot).selectAll('.logo-content').select('svg').each(function () {
          this.style.fill = '#ddd';
          setFills(this, '#ddd');
        });
      } else {
        this.$root.style.backgroundColor = SKIN_BACKGROUND;
        this.$root.style.color = '#888';
        this.$title.style.color = '#222';
        this.$subTitle.style.color = '#666';
        this.$sourceRoot.style.color = '#666'; //TODO: SHOULD BRING BACK!

        d3_select(this.$logoRoot).selectAll('.logo-content').select('svg').each(function () {
          this.style.fill = '#666';
          setFills(this, '#666');
        });
      }
    } // WARNING: esto estaba asi, pero al acorn no le gustaba...
    // afterItemsHelper = () => {

  }, {
    key: "afterItemsHelper",
    value: function afterItemsHelper() {
      if (this.data) {
        if (this.config.LegendBehavior.showLegend) {
          var icon = this.config.LegendBehavior && this.config.LegendBehavior.icon || 'circle';
          LegendBehavior(this.$legendRoot, this.chart, {
            icon: icon
          });
        } else {
          this.$legendRoot.innerHTML = '';
        }

        TooltipBehavior(this.chart, this.config.TooltipBehavior || {});
      }
    }
  }, {
    key: "afterChartUpdate",
    value: function afterChartUpdate() {
      if (this.config && this.config.AnnotationBehavior) AnnotationBehavior(this.$chartRoot, this, this.config.AnnotationBehavior);
    }
  }, {
    key: "_getConfig",
    value: function _getConfig() {
      var behaviorsConfig = this.__proto__.constructor.behaviors.reduce(function (config, bh) {
        config[bh.configName] = bh.defaultConfig;
        return config;
      }, {});

      var baseConfig = mergeConfig(this.__proto__.constructor.defaultConfig, behaviorsConfig);
      var tmp = mergeConfig(baseConfig, this.constructor.defaultConfig);

      var tmp2 = this.constructor.chartClass.prototype._getConfig();

      var config = mergeConfig(tmp, tmp2); // TODO: falta mergear los "behaviros" ??

      return config;
    }
  }, {
    key: "getSVG",
    value: function getSVG() {
      var _this3 = this;

      return svgfontCheck().then(function () {
        return _this3._getSVG.call(_this3);
      });
    }
  }, {
    key: "_getSVG",
    value: function _getSVG() {
      var _this4 = this;

      var cloneNode = function cloneNode(target, source) {
        var clone;
        var responsePromise;

        if (source.node().classList[0] === 'logo-content') {
          var content = source.html();
          clone = target.append('g').html(content);
        } else if (source.node().nodeName === 'svg') {
          var _content = source.html();

          clone = target.append('g').html(_content);
          var refs = [];
          clone.node().querySelectorAll('text').forEach(function ($t) {
            return refs.push($t);
          });
          source.node().querySelectorAll('text').forEach(function ($t, i) {
            var t = d3_select($t);

            if (t.attr('display') !== 'none' && !(+t.style('opacity') === 0)) {
              textToSVGText(t, d3_select(refs[i].parentNode));
            }

            refs[i].remove();
          }); // chapuzilla fills de gradients (safari)

          clone.node().querySelectorAll('linearGradient').forEach(function (h) {
            return h.id = 'cloned-' + h.id;
          });
          clone.node().querySelectorAll('.gradient-rect').forEach(function (h) {
            return h.style.fill = h.style.fill.replace('#', '#cloned-');
          });
          clone.node().querySelectorAll('path').forEach(function (h) {
            var fill = h.getAttribute('fill');
            if (fill && fill.indexOf('url(#grd') >= 0) h.setAttribute('fill', fill.replace('#', '#cloned-'));
          });
        } else if (source.node().children.length === 0) {
          var textContent = source.node().innerHTML;

          if (textContent !== '') {
            divToSVGText(source, target);
          } else {
            var rect = source.node().getBoundingClientRect();
            var shape = source.node().classList[1];

            if (shape === 'dented-rect') {
              clone = target.append('path').attr('d', function () {
                return dentedRect(rect.width, rect.height, 'tr', null, 4);
              }).attr('shape-rendering', 'crispedges');
            } else if (shape) {
              clone = target.append(shape).attr('width', rect.width).attr('height', rect.height).attr('r', rect.width / 2).attr('cx', rect.width / 2).attr('cy', rect.height / 2).attr('shape-rendering', 'crispedges');
            }

            if (clone) clone.attr('fill', source.node().style.backgroundColor);
          }
        } else {
          source.node().children.forEach(function ($child) {
            if ($child.style.display !== 'none') {
              clone = target.append('g').attr('class', $child.classList);
              responsePromise = cloneNode(clone, d3_select($child));
            }
          });
        }

        var parentRect = source.node().parentNode.getBoundingClientRect();
        var childRect = source.node().getBoundingClientRect();
        target.attr('transform', "translate(".concat(childRect.x - parentRect.x, ",").concat(childRect.y - parentRect.y, ")"));
        return responsePromise || new Promise(function (res) {
          return res();
        });
      };

      var root = d3_select(this.$root);
      var frame = this.$root.getBoundingClientRect();
      var svg = d3_create('svg');
      svg.attr('width', frame.width).attr('height', frame.height).attr('color', this.$root.style.color);
      return cloneNode(svg, root).then(function () {
        // startDownload(svg.node(), this.config.title || this.componentLabel)
        svg.attr('transform', null);
        FONTS.forEach(function (fontDef) {
          var defs = svg.selectAll('defs').data([null]);
          defs = defs.merge(defs.enter().append('defs'));
          var svgStyleElement = generateFontStyleElement(fontDef, 'svg');
          defs.node().appendChild(svgStyleElement);
        });
        svg.node().innerHTML = svg.node().innerHTML.replaceAll('currentColor', _this4.$root.style.color);
        return svg.node();
      });
    }
  }, {
    key: "data",
    get: function get() {
      return this._data;
    },
    set: function set(value) {
      value = sanitizeData(value);
      this._data = value;
      this.beforeChartUpdate();
      this.chart.data = this.__proto__.constructor.dataControllerClass(value, this.config);
      this.afterChartUpdate();
    }
  }, {
    key: "config",
    get: function get() {
      return this._config;
    },
    set: function set(value) {
      this._config = value;
      this.beforeChartUpdate(); //Dangerous, pero se necesita no?
      // Se necesita por ejemplo para el "minBarHeight" de los barcharts...
      // entiendo qeu seteando el data directamente (_data) y luego el config por el setter solo se pinta una vez, no?!

      if (this.data) this.chart._data = this.__proto__.constructor.dataControllerClass(this.data, this.config);
      this.chart.config = this.config;
      this.afterChartUpdate();
    }
  }]);

  return BaseViz;
}();

_defineProperty(BaseViz, "defaultConfig", {
  /**
   * Skin of the chart. Background and default colorscheme will change according to the skin.
   */
  skin: {
    type: String,
    "default": 'light',
    options: ['light', 'dark'],
    exposed: true
  },

  /**
   * Main title of the chart.
   */
  title: {
    type: String,
    "default": 'Title',
    exposed: true
  },

  /**
   * Subtitle of the chart.
   */
  subTitle: {
    type: String,
    "default": 'Subtitle',
    exposed: true
  },

  /**
   * Show or hide the "Santander" logo on the bottom-right of the chart.
   */
  showLogo: {
    type: [String, Boolean],
    "default": 'santander_logo',
    options: LOGOS.map(function (d) {
      return d.id;
    }).concat([true, false]),
    exposed: true
  },

  /**
   * Text to credit the source of the data. Leave blank (`''`) to hide.
   */
  sourceCredits: {
    type: String,
    "default": 'default data source',
    exposed: true
  },

  /**
   * Link to the source credits.
   */
  sourceLink: {
    type: String,
    "default": '',
    exposed: true
  },

  /**
   * Delimiter character for thousands
   */
  thousandsDelimiter: {
    type: [String, Array, Function, null],
    "default": null,
    exposed: true
  },

  /**
   * Delimiter character for decimals
   */
  decimalDelimiter: {
    type: [String, Array, Function, null],
    "default": null,
    exposed: true
  }
});

_defineProperty(BaseViz, "behaviors", [TooltipBehavior, LegendBehavior, AnnotationBehavior]);

// import numeral from 'numeral'
var numeral = __webpack_require__(4);

function formatNumber(value, format, thou, dec) {
  if (numeral.locales['sdv-lib'] === undefined) numeral.register('locale', 'sdv-lib', _objectSpread2({}, numeral.locales['en']));
  if (thou === 'none') thou = '';
  numeral.locales['sdv-lib'].delimiters = {
    thousands: thou !== null ? thou : ',',
    decimal: dec !== null ? dec : '.'
  };
  numeral.locale('sdv-lib'); // chapuzilla porque el numeral asume porcentages en "por 1"

  if (format && format.indexOf('%') >= 0) value = value / 100;
  var formattedValue = numeral(value).format(format || '0,0.00');
  return formattedValue;
}

var BaseChart = /*#__PURE__*/function () {
  _createClass(BaseChart, [{
    key: "data",
    get: function get() {
      return this._data;
    },
    set: function set(value) {
      this._data = value; // Guarro este "_helpersUpdated", pero HAY que updatear la primera vez y no las siguientes... no?
      // pues parece que no, el ParalellCoords neceista update del axis helper por si aparecen "ejes nuevos"!!!!
      // if(!this._helpersUpdated)

      this.updateHelpers();

      this._draw();
    }
  }, {
    key: "ghostData",
    get: function get() {
      return this._ghostData;
    },
    set: function set(value) {
      this._ghostData = value;
      this.updateHelpers();

      this._draw();
    }
  }, {
    key: "config",
    get: function get() {
      return this._config;
    },
    set: function set(value) {
      this._config = value; // extractValues(mergeConfig(this._getConfig(),value))

      this.updateHelpers();

      this._draw();
    }
  }]);

  function BaseChart($root) {
    _classCallCheck(this, BaseChart);

    _defineProperty(this, "_data", null);

    _defineProperty(this, "_ghostData", null);

    this.$root = $root;
    window.__sdv_counter__ = (window.__sdv_counter__ || 0) + 1;
    this._chartId = window.__sdv_counter__; // this.config = mergeConfigValues(this.constructor.defaultConfig,config)

    this.helperListeners = {};
    this.initHelpers();
  }

  _createClass(BaseChart, [{
    key: "getValueFormat",
    value: function getValueFormat(onAxis) {
      var formatString;
      var index;

      if (this.config.AxisHelper) {
        if (onAxis && onAxis.indexOf('_') >= 0) index = +onAxis.split('_')[1];
        if (index !== undefined && Array.isArray(this.config.AxisHelper[onAxis[0]].valueFormat)) formatString = this.config.AxisHelper[onAxis[0]].valueFormat[index] || this.config.AxisHelper[onAxis[0]].valueFormat[0];else if (onAxis) formatString = this.config.AxisHelper[onAxis[0]].valueFormat;else formatString = this.config.AxisHelper.y.valueFormat || this.config.AxisHelper.x.valueFormat;
      }

      if (!formatString) formatString = this.config.valueFormat || '';
      return formatString;
    }
  }, {
    key: "getUnit",
    value: function getUnit(onAxis) {
      var unit;
      var index;

      if (onAxis) {
        if (onAxis.indexOf('_') >= 0) index = onAxis.split('_')[1];

        if (this.config.AxisHelper && this.config.AxisHelper[onAxis[0]].unit) {
          if (index !== undefined && Array.isArray(this.config.AxisHelper[onAxis[0]].unit)) unit = this.config.AxisHelper[onAxis[0]].unit[index];else unit = this.config.AxisHelper[onAxis[0]].unit;
        } else unit = this.config.unit;
      } else {
        if (this.config.unit) unit = this.config.unit;else if (this.config.AxisHelper) unit = this.config.AxisHelper.y && this.config.AxisHelper.y.unit || this.config.AxisHelper.x && this.config.AxisHelper.x.unit;
      }

      return unit;
    }
  }, {
    key: "matchFormatString",
    value: function matchFormatString(formatString) {
      var regex = /(?:\[([DNS])\])?(.+)/;
      var match = formatString.match(regex);
      return match;
    }
  }, {
    key: "getValueType",
    value: function getValueType(onAxis) {
      var match = this.matchFormatString(this.getValueFormat(onAxis));
      return match && match[1];
    }
  }, {
    key: "formatValue",
    value: function formatValue(value, onAxis) {
      var _this$_parent$_parent, _this$_parent$_parent2;

      var match = this.matchFormatString(this.getValueFormat(onAxis));
      var type = match && match[1];
      var format = match && match[2];
      var thouDel = this.config.thousandsDelimiter;
      var decDel = this.config.decimalDelimiter;
      var restrictedFormats = onAxis && ((_this$_parent$_parent = this._parent._parent.constructor.dataFormat) === null || _this$_parent$_parent === void 0 ? void 0 : (_this$_parent$_parent2 = _this$_parent$_parent.find(function (f) {
        return f.axis === onAxis || f.axis[0] === onAxis[0];
      })) === null || _this$_parent$_parent2 === void 0 ? void 0 : _this$_parent$_parent2.types);
      if (type === 'D' && (!restrictedFormats || restrictedFormats.includes(Date))) return timeFormat(format)(value);else if (!isNaN(Number(value)) && String(value).replaceAll(' ', '') === String(value) && (!restrictedFormats || restrictedFormats.includes(Number))) return formatNumber(value, format, thouDel, decDel).toUpperCase();else return value; //|| '-'
    }
  }, {
    key: "valueWithUnit",
    value: function valueWithUnit(value, onAxis) {
      var formattedValue = this.formatValue(value, onAxis);
      var unit = this.getUnit(onAxis);
      var unitsThatGoBefore = ['$', '¤', '£'];
      if (unitsThatGoBefore.indexOf(unit) >= 0) return unit + formattedValue;else if (unit) return formattedValue + ' ' + unit;else return formattedValue; // return unit?formattedValue+' '+unit:formattedValue
    }
  }, {
    key: "initHelpers",
    value: function initHelpers() {
      var _this = this;

      // console.log('init helpers')
      this._beforeDraws = [];
      this._afterDraws = [];
      this._helperIds = [];

      this.__proto__.constructor.helpers.forEach(function (helperDef) {
        var helperClass;

        if (typeof helperDef === 'function') {
          helperClass = helperDef;
        } else {
          helperClass = helperDef["class"];
        }

        var _helperClass = helperClass,
            init = _helperClass.init,
            beforeDraw = _helperClass.beforeDraw,
            afterDraw = _helperClass.afterDraw,
            rest = _objectWithoutProperties(_helperClass, ["init", "beforeDraw", "afterDraw"]);

        Object.assign(_this.__proto__.constructor.prototype, rest);
        init.call(_this);

        _this._beforeDraws.push(beforeDraw);

        _this._afterDraws.push(afterDraw);

        _this._helperIds.push(helperClass.configName);
      });
    }
  }, {
    key: "updateHelpers",
    value: function updateHelpers() {
      var _this2 = this;

      if (!this.data) return;
      this._helpersUpdated = true; // console.log('update helpers')

      this.__proto__.constructor.helpers.forEach(function (helperDef) {
        var helperClass;

        if (typeof helperDef === 'function') {
          helperClass = helperDef;
        } else {
          helperClass = helperDef["class"];
        }

        var _helperClass2 = helperClass,
            update = _helperClass2.update;
        update.call(_this2);
      });
    }
  }, {
    key: "_draw",
    value: function _draw() {
      var _this3 = this;

      if (!this.data) return; // console.log('----> drawing chart')

      this.beforeHelpers();

      this._beforeDraws.forEach(function (bd) {
        bd.call(_this3);
      });

      this.beforeDraw();
      this.draw();
      this.afterDraw();

      this._afterDraws.forEach(function (ad) {
        ad.call(_this3);
      });

      this.afterHelpers();
      this.emit('drawn', {
        data: this.data,
        config: this.config
      });
    }
  }, {
    key: "beforeHelpers",
    value: function beforeHelpers() {}
  }, {
    key: "beforeDraw",
    value: function beforeDraw() {}
  }, {
    key: "draw",
    value: function draw() {
      console.warn("Viz ".concat(this.constructor.name, " must implement draw()"));
    }
  }, {
    key: "afterDraw",
    value: function afterDraw() {}
  }, {
    key: "afterHelpers",
    value: function afterHelpers() {}
  }, {
    key: "_getConfig",
    value: function _getConfig() {
      // console.log("this.helpers",this.constructor.helpers)
      var config = mergeConfig(this.__proto__.constructor.defaultConfig, this.constructor.defaultConfig);
      return this.constructor.helpers.reduce(function (res, helperDef) {
        // let clasDef = h.class || h
        // return mergeConfig(config,{[clasDef.name]:clasDef.defaultConfig})
        // A VER sI SE PUEDE UNIFICAR "BIEN" Con el otro "mergeConfigValues"
        var helperConfig;
        var helperClass;

        if (typeof helperDef === 'function') {
          helperConfig = {};
          helperClass = helperDef;
        } else {
          helperConfig = helperDef.config;
          helperClass = helperDef["class"];
        }

        var _helperClass3 = helperClass,
            defaultConfig = _helperClass3.defaultConfig;
        var helperName = helperClass.configName;
        return mergeConfig(_defineProperty({}, helperName, mergeConfig(defaultConfig, helperConfig)), res);
      }, config);
    }
  }, {
    key: "emit",
    value: function emit(eventName, data) {
      this._parent._parent.emit(eventName, data);
    }
  }]);

  return BaseChart;
}();

var DEFAULT_DURATION = 1000;
var DEFAULT_DELAY_STEP = 80;

var ItemsHelper = /*#__PURE__*/function (_BaseHelper) {
  _inherits(ItemsHelper, _BaseHelper);

  var _super = _createSuper(ItemsHelper);

  function ItemsHelper() {
    _classCallCheck(this, ItemsHelper);

    return _super.apply(this, arguments);
  }

  _createClass(ItemsHelper, null, [{
    key: "init",
    value: function init() {
      this.__itemsNames = [];
    }
  }, {
    key: "update",
    value: function update() {
      var _this = this;

      if (Array.isArray(this.config.ItemsHelper.colorScale)) {
        this.cachedColorScale = [];
        this.config.ItemsHelper.colorScale.forEach(function (c, i) {
          _this.cachedColorScale[i] = _this._setCachedColorScale(_this.config.ItemsHelper.colorScale[i], _this.config.ItemsHelper.colorDict[i], i);
        });
      } else {
        this.cachedColorScale = this._setCachedColorScale(this.config.ItemsHelper.colorScale, this.config.ItemsHelper.colorDict);
      }
    }
  }, {
    key: "beforeDraw",
    value: function beforeDraw() {
      var _this2 = this;

      if (this._zooming) {
        this.__itemsNames.forEach(function (itemsName) {
          _this2[itemsName + 'Trans'] = _this2[itemsName].transition().duration(0);
          _this2[itemsName + 'EnterTrans'] = _this2[itemsName + 'Enter'].transition().duration(0);
          _this2[itemsName + 'ExitTrans'] = _this2[itemsName + 'Exit'].transition().duration(0).remove();
        });

        return;
      }

      if (typeof this.config.ItemsHelper.colorScale == 'string' && this.config.ItemsHelper.colorScale.indexOf('sequential') >= 0) {
        this.cachedColorScale.domain(d3_extent(this.data.map(function (d) {
          return _this2._colorKey(d);
        }))).nice();
      }

      var bindingData = this.ghostData || this.data;

      if (!Array.isArray(this.data)) {
        //BASURA: esta todo hardcodeado para lines and bars... hay que hacerlo generico o limpiarlo
        // bindingData = {} (Bars and lines)
        // let types = Object.keys(bindingData)
        var types = ['bars', 'lines'];
        types.forEach(function (type) {
          if (type === 'bars') {
            // let data = bindingData[type]
            var className = type + '-' + _this2.config.ItemsHelper.className;

            _this2._drawItems(bindingData.bars || [], _this2.content || _this2.root, type + 'Items', className);
          } else if (type === 'lines') {
            var _className = "parent-".concat(type, "-").concat(_this2.config.ItemsHelper.className);

            _this2._drawItems(bindingData.lines || [], _this2.content || _this2.root, type + 'ParentItems', _className);

            _className = type + '-' + _this2.config.ItemsHelper.className;

            _this2._drawItems(function (d) {
              return d.value;
            }, _this2.linesParentItems.merge(_this2.linesParentItemsEnter), type + 'Items', _className);
          }
        });
      } else if (this.data[0] && this.data[0].dimensions !== undefined) {
        // bindingData = [dimensions:[]] (Parallel coords) 
        var className = "parent-".concat(this.config.ItemsHelper.className);

        this._drawItems(bindingData, this.content || this.root, 'parentItems', className);

        className = this.config.ItemsHelper.className;

        this._drawItems(function (d) {
          return Object.keys(d.dimensions).map(function (dim) {
            return {
              id: dim,
              value: d.dimensions[dim],
              parentId: d.id
            };
          });
        }, this.parentItems.merge(this.parentItemsEnter), 'items', className);
      } else if (this.data[0] && Array.isArray(this.data[0].value)) {
        // bindingData = [[]] (Lines and Stackets)    
        var _className2 = "parent-".concat(this.config.ItemsHelper.className);

        this._drawItems(bindingData, this.content || this.root, 'parentItems', _className2);

        _className2 = this.config.ItemsHelper.className;

        this._drawItems(function (d) {
          return d.value;
        }, this.parentItems.merge(this.parentItemsEnter), 'items', _className2);
      } else {
        // bindingData = [] (Bars)    
        this._drawItems(bindingData, this.content || this.root, 'items', this.config.ItemsHelper.className);
      }

      if (this.helperListeners['afterItemsHelper']) this.helperListeners['afterItemsHelper']();
    }
  }, {
    key: "draw",
    value: function draw() {}
  }, {
    key: "afterDraw",
    value: function afterDraw() {
      if (this.constructor.name === 'PieChartChart') this._prevData = _toConsumableArray(this.ghostData || this.data);
    }
  }]);

  return ItemsHelper;
}(BaseHelper);

_defineProperty(ItemsHelper, "configName", 'ItemsHelper');

_defineProperty(ItemsHelper, "defaultConfig", {
  index: 101,
  className: {
    type: String,
    "default": 'item'
  },

  /**
   * Colors to be assigned to each item. See [colorScales](#/developer/PropDetails#colorScale)
   */
  colorScale: {
    type: [String, Function, Array],
    "default": 'categorical',
    options: ['categorical', 'sequential2', 'sequential3', 'single'],
    exposed: true
  },

  /**
   * Dictionary to "manually" assign a color to each item. See [colorScales](#/developer/PropDetails#colorScale)
   */
  colorDict: {
    type: [Object, Array, null],
    "default": null,
    exposed: true
  },
  colorMode: {
    type: [String, Array],
    "default": 'fill',
    options: ['fill', 'stroke']
  },
  colorKey: {
    type: [String, Function],
    "default": 'id'
  },

  /**
   * Enable/disable transition between datasets. Set to `true` for a `400ms` transition. Or specify the `Number` of miliseconds.
   */
  transition: {
    type: [Boolean, Number, String],
    "default": true,
    exposed: true
  }
});

_defineProperty(ItemsHelper, "_getCategories", function (data) {
  var _this3 = this;

  return Object.keys(data.reduce(function (res, d) {
    var id = _this3._colorKey(d);

    res[id] = {};
    return res;
  }, {}));
});

_defineProperty(ItemsHelper, "_getScheme", function (schemeId, data) {
  if (schemeId === 'PRIMARY_CAT_SCHEME') {
    var categories = this._getCategories(data);

    if (categories.length < 9) schemeId = 'PRIMARY_CAT_SCHEME_LOW';else if (categories.length < 16) schemeId = 'PRIMARY_CAT_SCHEME_MID';else schemeId = 'PRIMARY_CAT_SCHEME_HIGH';
  }

  return COLORS[schemeId + (this.config.skin === 'dark' ? '_DARK' : '')];
});

_defineProperty(ItemsHelper, "_setCachedColorScale", function (colorScale, colorDict, i) {
  var _this4 = this;

  var customColors = colorDict && Object.keys(colorDict).reduce(function (res, key) {
    res[key] = colorDict[key].color || colorDict[key];
    return res;
  }, {}); //CHAPUZA bars and lines... :(

  var data;

  if (!Array.isArray(this.data)) {
    if (i === 1) data = this.data.bars; //WTF!! porque estaba "al reves"?!?!?!?
    else data = this.data.lines;
  } else data = this.data; // Si hay custom colors pero no rellenan todo, rellenamos con los "que se pueda" de la primary_cat_scheme


  if (colorScale === 'categorical' && customColors && data.filter(function (d) {
    return !customColors[_this4._colorKey(d)];
  }).length > 0) {
    var unusedColors = _toConsumableArray(this._getScheme('PRIMARY_CAT_SCHEME', data));

    unusedColors = unusedColors.filter(function (d) {
      return Object.values(customColors).indexOf(d) < 0;
    });
    data.forEach(function (d, i) {
      if (!customColors[_this4._colorKey(d)]) {
        customColors[_this4._colorKey(d)] = unusedColors[0];
        unusedColors.shift();
      }
    });
  }

  var result;

  if (colorScale === 'single') {
    result = function result() {
      return customColors ? customColors['all'] : _this4._getScheme('PRIMARY_COLOR');
    };
  } else if (colorScale === 'categorical') {
    if (customColors) result = ordinal().domain(Object.keys(customColors)).range(Object.values(customColors));else result = ordinal(this._getScheme('PRIMARY_CAT_SCHEME', data)).domain(this._getCategories(data)); //added this DOMAIN to preent d3scale from using internally cached colors
  } else if (colorScale === 'sequential2') {
    if (customColors) result = sequential().interpolator(rgbBasis(Object.values(customColors)));else result = sequential().interpolator(rgbBasis(this._getScheme('PRIMARY_SEQ2_SCHEME')));
  } else if (colorScale === 'sequential3') {
    if (customColors) result = sequential().interpolator(rgbBasis(Object.values(customColors)));else result = sequential().interpolator(rgbBasis(this._getScheme('PRIMARY_SEQ3_SCHEME')));
  } else {
    result = colorScale;
  }

  return result;
});

_defineProperty(ItemsHelper, "_colorKey", function (d) {
  if (typeof this.config.ItemsHelper.colorKey === "function") return this.config.ItemsHelper.colorKey(d);else return d[this.config.ItemsHelper.colorKey];
});

_defineProperty(ItemsHelper, "color", function (d, i) {
  if (typeof this.config.ItemsHelper.colorScale === "function") {
    return this.cachedColorScale(d);
  } else {
    if (Array.isArray(this.cachedColorScale)) {
      return this.cachedColorScale[i](this._colorKey(d));
    } else {
      return this.cachedColorScale(this._colorKey(d));
    }
  }
});

_defineProperty(ItemsHelper, "strokeDasharray", function (d, i) {
  var dict = Array.isArray(this.config.ItemsHelper.colorDict) ? this.config.ItemsHelper.colorDict[i] : this.config.ItemsHelper.colorDict;
  var mode = Array.isArray(this.config.ItemsHelper.colorMode) ? this.config.ItemsHelper.colorMode[i] : this.config.ItemsHelper.colorMode;

  if (mode === 'stroke' && dict) {
    if (dict[this._colorKey(d)] && dict[this._colorKey(d)].stroke === 'dashed') return '5 3';else return 'none';
  } else return 'none';
});

_defineProperty(ItemsHelper, "_drawItems", function (data, rootSel, itemsName, className) {
  this[itemsName] = rootSel.selectAll(".".concat(className)).data(data, function (d) {
    return d.id;
  });
  this[itemsName + 'Enter'] = this[itemsName].enter().append('g').attr('class', className);
  this[itemsName + 'Exit'] = this[itemsName].exit();
  var duration = 0;

  if (this.config.ItemsHelper.transition) {
    duration = this.config.ItemsHelper.transition === true ? DEFAULT_DURATION : this.config.ItemsHelper.transition;
  }

  this._transitionDuration = duration;
  var delayStep = Math.min(duration / data.length, DEFAULT_DELAY_STEP);
  this[itemsName + 'Trans'] = this[itemsName].transition().duration(duration);
  this[itemsName + 'EnterTrans'] = this[itemsName + 'Enter'].transition().duration(duration).delay(function (d, i) {
    return i * delayStep;
  });
  this[itemsName + 'ExitTrans'] = this[itemsName + 'Exit'].transition().duration(duration).remove();
  if (this.__itemsNames.indexOf(itemsName) < 0) this.__itemsNames.push(itemsName); // INTERESANTE pero muy loco....
  // Object.defineProperties(this, {
  //   [itemsName+'Trans'] :{
  //     get () {
  //       if(self[itemsName+'Trans_internal'].active) {
  //         return self[itemsName+'Trans_internal']
  //       }
  //       else {
  //         return self[itemsName]
  //       }
  //     }
  //   }
  // });
});

var RootHelper = /*#__PURE__*/function (_BaseHelper) {
  _inherits(RootHelper, _BaseHelper);

  var _super = _createSuper(RootHelper);

  function RootHelper() {
    _classCallCheck(this, RootHelper);

    return _super.apply(this, arguments);
  }

  _createClass(RootHelper, null, [{
    key: "init",
    value: function init() {
      this.root = d3_select(this.$root).style('font-family', "santander-microtext-embedded");
    }
  }, {
    key: "beforeDraw",
    value: function beforeDraw() {
      // this.size = this.$root.getBoundingClientRect()
      var content = d3_select(this.$root).selectAll('.content').data([null]);
      this.content = content.merge(content.enter().append('g').attr('class', 'content')); // content.raise()
      // this.size = this.$root.getBoundingClientRect()
    }
  }, {
    key: "draw",
    value: function draw() {}
  }, {
    key: "afterDraw",
    value: function afterDraw() {
      var root = d3_select(this.$root);
      root.select('.content').raise();
      root.select('.annotation-group').raise();
    }
  }]);

  return RootHelper;
}(BaseHelper);

_defineProperty(RootHelper, "configName", 'RootHelper');

/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */

/* eslint-disable require-jsdoc, valid-jsdoc */
var MapShim = function () {
  if (typeof Map !== 'undefined') {
    return Map;
  }
  /**
   * Returns index in provided array that matches the specified key.
   *
   * @param {Array<Array>} arr
   * @param {*} key
   * @returns {number}
   */


  function getIndex(arr, key) {
    var result = -1;
    arr.some(function (entry, index) {
      if (entry[0] === key) {
        result = index;
        return true;
      }

      return false;
    });
    return result;
  }

  return (
    /** @class */
    function () {
      function class_1() {
        this.__entries__ = [];
      }

      Object.defineProperty(class_1.prototype, "size", {
        /**
         * @returns {boolean}
         */
        get: function () {
          return this.__entries__.length;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * @param {*} key
       * @returns {*}
       */

      class_1.prototype.get = function (key) {
        var index = getIndex(this.__entries__, key);
        var entry = this.__entries__[index];
        return entry && entry[1];
      };
      /**
       * @param {*} key
       * @param {*} value
       * @returns {void}
       */


      class_1.prototype.set = function (key, value) {
        var index = getIndex(this.__entries__, key);

        if (~index) {
          this.__entries__[index][1] = value;
        } else {
          this.__entries__.push([key, value]);
        }
      };
      /**
       * @param {*} key
       * @returns {void}
       */


      class_1.prototype.delete = function (key) {
        var entries = this.__entries__;
        var index = getIndex(entries, key);

        if (~index) {
          entries.splice(index, 1);
        }
      };
      /**
       * @param {*} key
       * @returns {void}
       */


      class_1.prototype.has = function (key) {
        return !!~getIndex(this.__entries__, key);
      };
      /**
       * @returns {void}
       */


      class_1.prototype.clear = function () {
        this.__entries__.splice(0);
      };
      /**
       * @param {Function} callback
       * @param {*} [ctx=null]
       * @returns {void}
       */


      class_1.prototype.forEach = function (callback, ctx) {
        if (ctx === void 0) {
          ctx = null;
        }

        for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
          var entry = _a[_i];
          callback.call(ctx, entry[1], entry[0]);
        }
      };

      return class_1;
    }()
  );
}();
/**
 * Detects whether window and document objects are available in current environment.
 */


var isBrowser$1 = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.

var global$1 = function () {
  if (typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g.Math === Math) {
    return __webpack_require__.g;
  }

  if (typeof self !== 'undefined' && self.Math === Math) {
    return self;
  }

  if (typeof window !== 'undefined' && window.Math === Math) {
    return window;
  } // eslint-disable-next-line no-new-func


  return Function('return this')();
}();
/**
 * A shim for the requestAnimationFrame which falls back to the setTimeout if
 * first one is not supported.
 *
 * @returns {number} Requests' identifier.
 */


var requestAnimationFrame$1 = function () {
  if (typeof requestAnimationFrame === 'function') {
    // It's required to use a bounded function because IE sometimes throws
    // an "Invalid calling object" error if rAF is invoked without the global
    // object on the left hand side.
    return requestAnimationFrame.bind(global$1);
  }

  return function (callback) {
    return setTimeout(function () {
      return callback(Date.now());
    }, 1000 / 60);
  };
}(); // Defines minimum timeout before adding a trailing call.


var trailingTimeout = 2;
/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */

function throttle(callback, delay) {
  var leadingCall = false,
      trailingCall = false,
      lastCallTime = 0;
  /**
   * Invokes the original callback function and schedules new invocation if
   * the "proxy" was called during current request.
   *
   * @returns {void}
   */

  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }

    if (trailingCall) {
      proxy();
    }
  }
  /**
   * Callback invoked after the specified delay. It will further postpone
   * invocation of the original function delegating it to the
   * requestAnimationFrame.
   *
   * @returns {void}
   */


  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  /**
   * Schedules invocation of the original function.
   *
   * @returns {void}
   */


  function proxy() {
    var timeStamp = Date.now();

    if (leadingCall) {
      // Reject immediately following calls.
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      } // Schedule new call to be in invoked when the pending one is resolved.
      // This is important for "transitions" which never actually start
      // immediately so there is a chance that we might miss one if change
      // happens amids the pending invocation.


      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }

    lastCallTime = timeStamp;
  }

  return proxy;
} // Minimum delay before invoking the update of observers.


var REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that
// might affect dimensions of observed elements.

var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.

var mutationObserverSupported = typeof MutationObserver !== 'undefined';
/**
 * Singleton controller class which handles updates of ResizeObserver instances.
 */

var ResizeObserverController =
/** @class */
function () {
  /**
   * Creates a new instance of ResizeObserverController.
   *
   * @private
   */
  function ResizeObserverController() {
    /**
     * Indicates whether DOM listeners have been added.
     *
     * @private {boolean}
     */
    this.connected_ = false;
    /**
     * Tells that controller has subscribed for Mutation Events.
     *
     * @private {boolean}
     */

    this.mutationEventsAdded_ = false;
    /**
     * Keeps reference to the instance of MutationObserver.
     *
     * @private {MutationObserver}
     */

    this.mutationsObserver_ = null;
    /**
     * A list of connected observers.
     *
     * @private {Array<ResizeObserverSPI>}
     */

    this.observers_ = [];
    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
  }
  /**
   * Adds observer to observers list.
   *
   * @param {ResizeObserverSPI} observer - Observer to be added.
   * @returns {void}
   */


  ResizeObserverController.prototype.addObserver = function (observer) {
    if (!~this.observers_.indexOf(observer)) {
      this.observers_.push(observer);
    } // Add listeners if they haven't been added yet.


    if (!this.connected_) {
      this.connect_();
    }
  };
  /**
   * Removes observer from observers list.
   *
   * @param {ResizeObserverSPI} observer - Observer to be removed.
   * @returns {void}
   */


  ResizeObserverController.prototype.removeObserver = function (observer) {
    var observers = this.observers_;
    var index = observers.indexOf(observer); // Remove observer if it's present in registry.

    if (~index) {
      observers.splice(index, 1);
    } // Remove listeners if controller has no connected observers.


    if (!observers.length && this.connected_) {
      this.disconnect_();
    }
  };
  /**
   * Invokes the update of observers. It will continue running updates insofar
   * it detects changes.
   *
   * @returns {void}
   */


  ResizeObserverController.prototype.refresh = function () {
    var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might
    // be future ones caused by CSS transitions.

    if (changesDetected) {
      this.refresh();
    }
  };
  /**
   * Updates every observer from observers list and notifies them of queued
   * entries.
   *
   * @private
   * @returns {boolean} Returns "true" if any observer has detected changes in
   *      dimensions of it's elements.
   */


  ResizeObserverController.prototype.updateObservers_ = function () {
    // Collect observers that have active observations.
    var activeObservers = this.observers_.filter(function (observer) {
      return observer.gatherActive(), observer.hasActive();
    }); // Deliver notifications in a separate cycle in order to avoid any
    // collisions between observers, e.g. when multiple instances of
    // ResizeObserver are tracking the same element and the callback of one
    // of them changes content dimensions of the observed target. Sometimes
    // this may result in notifications being blocked for the rest of observers.

    activeObservers.forEach(function (observer) {
      return observer.broadcastActive();
    });
    return activeObservers.length > 0;
  };
  /**
   * Initializes DOM listeners.
   *
   * @private
   * @returns {void}
   */


  ResizeObserverController.prototype.connect_ = function () {
    // Do nothing if running in a non-browser environment or if listeners
    // have been already added.
    if (!isBrowser$1 || this.connected_) {
      return;
    } // Subscription to the "Transitionend" event is used as a workaround for
    // delayed transitions. This way it's possible to capture at least the
    // final state of an element.


    document.addEventListener('transitionend', this.onTransitionEnd_);
    window.addEventListener('resize', this.refresh);

    if (mutationObserverSupported) {
      this.mutationsObserver_ = new MutationObserver(this.refresh);
      this.mutationsObserver_.observe(document, {
        attributes: true,
        childList: true,
        characterData: true,
        subtree: true
      });
    } else {
      document.addEventListener('DOMSubtreeModified', this.refresh);
      this.mutationEventsAdded_ = true;
    }

    this.connected_ = true;
  };
  /**
   * Removes DOM listeners.
   *
   * @private
   * @returns {void}
   */


  ResizeObserverController.prototype.disconnect_ = function () {
    // Do nothing if running in a non-browser environment or if listeners
    // have been already removed.
    if (!isBrowser$1 || !this.connected_) {
      return;
    }

    document.removeEventListener('transitionend', this.onTransitionEnd_);
    window.removeEventListener('resize', this.refresh);

    if (this.mutationsObserver_) {
      this.mutationsObserver_.disconnect();
    }

    if (this.mutationEventsAdded_) {
      document.removeEventListener('DOMSubtreeModified', this.refresh);
    }

    this.mutationsObserver_ = null;
    this.mutationEventsAdded_ = false;
    this.connected_ = false;
  };
  /**
   * "Transitionend" event handler.
   *
   * @private
   * @param {TransitionEvent} event
   * @returns {void}
   */


  ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
    var _b = _a.propertyName,
        propertyName = _b === void 0 ? '' : _b; // Detect whether transition may affect dimensions of an element.

    var isReflowProperty = transitionKeys.some(function (key) {
      return !!~propertyName.indexOf(key);
    });

    if (isReflowProperty) {
      this.refresh();
    }
  };
  /**
   * Returns instance of the ResizeObserverController.
   *
   * @returns {ResizeObserverController}
   */


  ResizeObserverController.getInstance = function () {
    if (!this.instance_) {
      this.instance_ = new ResizeObserverController();
    }

    return this.instance_;
  };
  /**
   * Holds reference to the controller's instance.
   *
   * @private {ResizeObserverController}
   */


  ResizeObserverController.instance_ = null;
  return ResizeObserverController;
}();
/**
 * Defines non-writable/enumerable properties of the provided target object.
 *
 * @param {Object} target - Object for which to define properties.
 * @param {Object} props - Properties to be defined.
 * @returns {Object} Target object.
 */


var defineConfigurable = function (target, props) {
  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
    var key = _a[_i];
    Object.defineProperty(target, key, {
      value: props[key],
      enumerable: false,
      writable: false,
      configurable: true
    });
  }

  return target;
};
/**
 * Returns the global object associated with provided element.
 *
 * @param {Object} target
 * @returns {Object}
 */


var getWindowOf = function (target) {
  // Assume that the element is an instance of Node, which means that it
  // has the "ownerDocument" property from which we can retrieve a
  // corresponding global object.
  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from
  // provided element.

  return ownerGlobal || global$1;
}; // Placeholder of an empty content rectangle.


var emptyRect = createRectInit(0, 0, 0, 0);
/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */

function toFloat(value) {
  return parseFloat(value) || 0;
}
/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */


function getBordersSize(styles) {
  var positions = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }

  return positions.reduce(function (size, position) {
    var value = styles['border-' + position + '-width'];
    return size + toFloat(value);
  }, 0);
}
/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */


function getPaddings(styles) {
  var positions = ['top', 'right', 'bottom', 'left'];
  var paddings = {};

  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position = positions_1[_i];
    var value = styles['padding-' + position];
    paddings[position] = toFloat(value);
  }

  return paddings;
}
/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */


function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */


function getHTMLElementContentRect(target) {
  // Client width & height properties can't be
  // used exclusively as they provide rounded values.
  var clientWidth = target.clientWidth,
      clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and
  // detached elements. Though elements with width & height properties less
  // than 0.5 will be discarded as well.
  //
  // Without it we would need to implement separate methods for each of
  // those cases and it's not possible to perform a precise and performance
  // effective test for hidden elements. E.g. even jQuery's ':visible' filter
  // gives wrong results for elements with width & height less than 0.5.

  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }

  var styles = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the
  // only dimensions available to JS that contain non-rounded values. It could
  // be possible to utilize the getBoundingClientRect if only it's data wasn't
  // affected by CSS transformations let alone paddings, borders and scroll bars.

  var width = toFloat(styles.width),
      height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box
  // model is applied (except for IE).

  if (styles.boxSizing === 'border-box') {
    // Following conditions are required to handle Internet Explorer which
    // doesn't include paddings and borders to computed CSS dimensions.
    //
    // We can say that if CSS dimensions + paddings are equal to the "client"
    // properties then it's either IE, and thus we don't need to subtract
    // anything, or an element merely doesn't have paddings/borders styles.
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles, 'left', 'right') + horizPad;
    }

    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
    }
  } // Following steps can't be applied to the document's root element as its
  // client[Width/Height] properties represent viewport area of the window.
  // Besides, it's as well not necessary as the <html> itself neither has
  // rendered scroll bars nor it can be clipped.


  if (!isDocumentElement(target)) {
    // In some browsers (only in Firefox, actually) CSS width & height
    // include scroll bars size which can be removed at this step as scroll
    // bars are the only difference between rounded dimensions + paddings
    // and "client" properties, though that is not always true in Chrome.
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of "client" properties.
    // E.g. for an element with content width of 314.2px it sometimes gives
    // the client width of 315px and for the width of 314.7px it may give
    // 314px. And it doesn't happen all the time. So just ignore this delta
    // as a non-relevant.

    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }

    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }

  return createRectInit(paddings.left, paddings.top, width, height);
}
/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */


var isSVGGraphicsElement = function () {
  // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
  // interface.
  if (typeof SVGGraphicsElement !== 'undefined') {
    return function (target) {
      return target instanceof getWindowOf(target).SVGGraphicsElement;
    };
  } // If it's so, then check that element is at least an instance of the
  // SVGElement and that it has the "getBBox" method.
  // eslint-disable-next-line no-extra-parens


  return function (target) {
    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';
  };
}();
/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */


function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */


function getContentRect(target) {
  if (!isBrowser$1) {
    return emptyRect;
  }

  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }

  return getHTMLElementContentRect(target);
}
/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */


function createReadOnlyRect(_a) {
  var x = _a.x,
      y = _a.y,
      width = _a.width,
      height = _a.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.

  var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.

  defineConfigurable(rect, {
    x: x,
    y: y,
    width: width,
    height: height,
    top: y,
    right: x + width,
    bottom: height + y,
    left: x
  });
  return rect;
}
/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */


function createRectInit(x, y, width, height) {
  return {
    x: x,
    y: y,
    width: width,
    height: height
  };
}
/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */


var ResizeObservation =
/** @class */
function () {
  /**
   * Creates an instance of ResizeObservation.
   *
   * @param {Element} target - Element to be observed.
   */
  function ResizeObservation(target) {
    /**
     * Broadcasted width of content rectangle.
     *
     * @type {number}
     */
    this.broadcastWidth = 0;
    /**
     * Broadcasted height of content rectangle.
     *
     * @type {number}
     */

    this.broadcastHeight = 0;
    /**
     * Reference to the last observed content rectangle.
     *
     * @private {DOMRectInit}
     */

    this.contentRect_ = createRectInit(0, 0, 0, 0);
    this.target = target;
  }
  /**
   * Updates content rectangle and tells whether it's width or height properties
   * have changed since the last broadcast.
   *
   * @returns {boolean}
   */


  ResizeObservation.prototype.isActive = function () {
    var rect = getContentRect(this.target);
    this.contentRect_ = rect;
    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
  };
  /**
   * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
   * from the corresponding properties of the last observed content rectangle.
   *
   * @returns {DOMRectInit} Last observed content rectangle.
   */


  ResizeObservation.prototype.broadcastRect = function () {
    var rect = this.contentRect_;
    this.broadcastWidth = rect.width;
    this.broadcastHeight = rect.height;
    return rect;
  };

  return ResizeObservation;
}();

var ResizeObserverEntry =
/** @class */
function () {
  /**
   * Creates an instance of ResizeObserverEntry.
   *
   * @param {Element} target - Element that is being observed.
   * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
   */
  function ResizeObserverEntry(target, rectInit) {
    var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable
    // and are also not enumerable in the native implementation.
    //
    // Property accessors are not being used as they'd require to define a
    // private WeakMap storage which may cause memory leaks in browsers that
    // don't support this type of collections.

    defineConfigurable(this, {
      target: target,
      contentRect: contentRect
    });
  }

  return ResizeObserverEntry;
}();

var ResizeObserverSPI =
/** @class */
function () {
  /**
   * Creates a new instance of ResizeObserver.
   *
   * @param {ResizeObserverCallback} callback - Callback function that is invoked
   *      when one of the observed elements changes it's content dimensions.
   * @param {ResizeObserverController} controller - Controller instance which
   *      is responsible for the updates of observer.
   * @param {ResizeObserver} callbackCtx - Reference to the public
   *      ResizeObserver instance which will be passed to callback function.
   */
  function ResizeObserverSPI(callback, controller, callbackCtx) {
    /**
     * Collection of resize observations that have detected changes in dimensions
     * of elements.
     *
     * @private {Array<ResizeObservation>}
     */
    this.activeObservations_ = [];
    /**
     * Registry of the ResizeObservation instances.
     *
     * @private {Map<Element, ResizeObservation>}
     */

    this.observations_ = new MapShim();

    if (typeof callback !== 'function') {
      throw new TypeError('The callback provided as parameter 1 is not a function.');
    }

    this.callback_ = callback;
    this.controller_ = controller;
    this.callbackCtx_ = callbackCtx;
  }
  /**
   * Starts observing provided element.
   *
   * @param {Element} target - Element to be observed.
   * @returns {void}
   */


  ResizeObserverSPI.prototype.observe = function (target) {
    if (!arguments.length) {
      throw new TypeError('1 argument required, but only 0 present.');
    } // Do nothing if current environment doesn't have the Element interface.


    if (typeof Element === 'undefined' || !(Element instanceof Object)) {
      return;
    }

    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }

    var observations = this.observations_; // Do nothing if element is already being observed.

    if (observations.has(target)) {
      return;
    }

    observations.set(target, new ResizeObservation(target));
    this.controller_.addObserver(this); // Force the update of observations.

    this.controller_.refresh();
  };
  /**
   * Stops observing provided element.
   *
   * @param {Element} target - Element to stop observing.
   * @returns {void}
   */


  ResizeObserverSPI.prototype.unobserve = function (target) {
    if (!arguments.length) {
      throw new TypeError('1 argument required, but only 0 present.');
    } // Do nothing if current environment doesn't have the Element interface.


    if (typeof Element === 'undefined' || !(Element instanceof Object)) {
      return;
    }

    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }

    var observations = this.observations_; // Do nothing if element is not being observed.

    if (!observations.has(target)) {
      return;
    }

    observations.delete(target);

    if (!observations.size) {
      this.controller_.removeObserver(this);
    }
  };
  /**
   * Stops observing all elements.
   *
   * @returns {void}
   */


  ResizeObserverSPI.prototype.disconnect = function () {
    this.clearActive();
    this.observations_.clear();
    this.controller_.removeObserver(this);
  };
  /**
   * Collects observation instances the associated element of which has changed
   * it's content rectangle.
   *
   * @returns {void}
   */


  ResizeObserverSPI.prototype.gatherActive = function () {
    var _this = this;

    this.clearActive();
    this.observations_.forEach(function (observation) {
      if (observation.isActive()) {
        _this.activeObservations_.push(observation);
      }
    });
  };
  /**
   * Invokes initial callback function with a list of ResizeObserverEntry
   * instances collected from active resize observations.
   *
   * @returns {void}
   */


  ResizeObserverSPI.prototype.broadcastActive = function () {
    // Do nothing if observer doesn't have active observations.
    if (!this.hasActive()) {
      return;
    }

    var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.

    var entries = this.activeObservations_.map(function (observation) {
      return new ResizeObserverEntry(observation.target, observation.broadcastRect());
    });
    this.callback_.call(ctx, entries, ctx);
    this.clearActive();
  };
  /**
   * Clears the collection of active observations.
   *
   * @returns {void}
   */


  ResizeObserverSPI.prototype.clearActive = function () {
    this.activeObservations_.splice(0);
  };
  /**
   * Tells whether observer has active observations.
   *
   * @returns {boolean}
   */


  ResizeObserverSPI.prototype.hasActive = function () {
    return this.activeObservations_.length > 0;
  };

  return ResizeObserverSPI;
}(); // Registry of internal observers. If WeakMap is not available use current shim
// for the Map collection as it has all required methods and because WeakMap
// can't be fully polyfilled anyway.


var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
/**
 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
 * exposing only those methods and properties that are defined in the spec.
 */

var ResizeObserver$1 =
/** @class */
function () {
  /**
   * Creates a new instance of ResizeObserver.
   *
   * @param {ResizeObserverCallback} callback - Callback that is invoked when
   *      dimensions of the observed elements change.
   */
  function ResizeObserver(callback) {
    if (!(this instanceof ResizeObserver)) {
      throw new TypeError('Cannot call a class as a function.');
    }

    if (!arguments.length) {
      throw new TypeError('1 argument required, but only 0 present.');
    }

    var controller = ResizeObserverController.getInstance();
    var observer = new ResizeObserverSPI(callback, controller, this);
    observers.set(this, observer);
  }

  return ResizeObserver;
}(); // Expose public methods of ResizeObserver.


['observe', 'unobserve', 'disconnect'].forEach(function (method) {
  ResizeObserver$1.prototype[method] = function () {
    var _a;

    return (_a = observers.get(this))[method].apply(_a, arguments);
  };
});

var index$1 = function () {
  // Export existing implementation if available.
  if (typeof global$1.ResizeObserver !== 'undefined') {
    return global$1.ResizeObserver;
  }

  return ResizeObserver$1;
}();

var SizeHelper = /*#__PURE__*/function (_BaseHelper) {
  _inherits(SizeHelper, _BaseHelper);

  var _super = _createSuper(SizeHelper);

  function SizeHelper() {
    _classCallCheck(this, SizeHelper);

    return _super.apply(this, arguments);
  }

  _createClass(SizeHelper, null, [{
    key: "init",
    value: function init() {
      var self = this;
      var resizeObserver = new index$1(function () {
        var newSize = self.$root.getBoundingClientRect();

        if (JSON.stringify(self.size) !== JSON.stringify(newSize)) {
          if (newSize && newSize.width !== 0 && newSize.height !== 0) {
            self.size = newSize;

            self._draw();
          }
        }
      });
      resizeObserver.observe(self.$root.parentNode);
    }
  }, {
    key: "beforeDraw",
    value: function beforeDraw() {
      this.size = this.$root.getBoundingClientRect();
    }
  }, {
    key: "draw",
    value: function draw() {}
  }, {
    key: "afterDraw",
    value: function afterDraw() {}
  }]);

  return SizeHelper;
}(BaseHelper);

_defineProperty(SizeHelper, "configName", 'SizeHelper');

var SelectableHelper = /*#__PURE__*/function (_BaseHelper) {
  _inherits(SelectableHelper, _BaseHelper);

  var _super = _createSuper(SelectableHelper);

  function SelectableHelper() {
    _classCallCheck(this, SelectableHelper);

    return _super.apply(this, arguments);
  }

  _createClass(SelectableHelper, null, [{
    key: "init",
    value: function init() {
      this.selection = [];
      var self = this;
      d3_select(this.$root).on('click', function (e, d) {
        if (e.currentTarget === e.target) {
          self.selection = [];
          self.$root.dispatchEvent(new MouseEvent('mouseover'));

          self._updateSelection();
        }
      });
    }
  }, {
    key: "afterDraw",
    value: function afterDraw() {
      var enters = this.itemsEnter;
      var self = this;

      if (enters) {
        enters.on('click', function (e, d) {
          if (d.parentId) {
            if (self.data.lines) {
              d = self.data.lines.find(function (dd) {
                return dd.id === d.parentId;
              }) || self.data.bars.find(function (dd) {
                return dd.id === d.parentId;
              });
            } else {
              d = self.data.find(function (dd) {
                return dd.id === d.parentId;
              });
            }
          }

          self._setSelection(e, d);

          e.currentTarget.dispatchEvent(new MouseEvent('mousemove'));
          e.target.dispatchEvent(new MouseEvent('mousemove'));
        });
      } // update para cuando cambiamos la prop (no podemos hacer siempre xk se estropean las transitions...)


      if (!this.config.SelectableHelper.enableSelection && this.selection.length) this._updateSelection();
    }
  }]);

  return SelectableHelper;
}(BaseHelper);

_defineProperty(SelectableHelper, "configName", 'SelectableHelper');

_defineProperty(SelectableHelper, "defaultConfig", {
  index: 103,

  /**
   * Enable/disable selection of the items. When enabled, items will be highlighted on click/tap.
   */
  enableSelection: {
    type: Boolean,
    "default": true,
    exposed: true
  }
});

_defineProperty(SelectableHelper, "_updateSelection", function () {
  var _this = this;

  // Bastante guarrero, pero efectivo!
  if (!this.config.SelectableHelper.enableSelection) this.selection = [];
  var items = this.parentItems && this.parentItems.merge(this.parentItemsEnter) || this.items && this.items.merge(this.itemsEnter) || this.linesItems && this.linesItems.merge(this.linesItemsEnter);
  var self = this;

  if (this.selection.length) {
    items.transition().duration(200).style('opacity', function (dd) {
      return _this.selection.indexOf(dd) >= 0 ? 1 : 0.3;
    });

    if (this.setSelectedFunc) {
      items.transition().duration(200).each(function (dd) {
        if (self.selection.indexOf(dd) >= 0) d3_select(this).call(self.setSelectedFunc.bind(self), dd);else d3_select(this).call(self.unsetSelectedFunc.bind(self), dd);
      });
    }
  } else {
    items.transition().duration(200).style('opacity', 1);

    if (this.unsetSelectedFunc) {
      items.transition().duration(200).each(function (dd) {
        d3_select(this).call(self.unsetSelectedFunc.bind(self), dd);
      });
    }
  }

  this.emit('select', this.selection);
});

_defineProperty(SelectableHelper, "_setSelection", function (e, d) {
  if (this.selection.indexOf(d) >= 0) this.selection = this.selection.filter(function (dd) {
    return dd !== d;
  });else this.selection = [d]; //this.selection.push(d)

  this._updateSelection();
});

var MAX_BAR_WIDTH = 40;

var BarChartChart = /*#__PURE__*/function (_BaseChart) {
  _inherits(BarChartChart, _BaseChart);

  var _super = _createSuper(BarChartChart);

  function BarChartChart() {
    var _this;

    _classCallCheck(this, BarChartChart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.zeroBased = true;
    return _this;
  }

  _createClass(BarChartChart, [{
    key: "checkConsistency",
    value: function checkConsistency() {
      return true;
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this2 = this;

      var longDir, getTranslate, getOffset, getShort; //,shortDir

      var barWidth, subBarWidth;

      if (this.config.horizontal) {
        longDir = 'height'; // shortDir = 'width'

        getTranslate = function getTranslate(_long, _short) {
          return "translate(".concat(_short, ",").concat(_long, ")");
        };

        var offsetValue;
        if (this.axes.y.func.scale().domain()[0] < 0 && this.axes.y.func.scale().domain()[1] > 0) offsetValue = 0;else offsetValue = this.axes.y.func.scale().domain()[0];

        getOffset = function getOffset(v) {
          return Math.min(v, _this2.axes.y.func.scale()(offsetValue));
        };

        getShort = function getShort(v) {
          return Math.abs(_this2.axes.y.func.scale()(offsetValue) - v);
        };
      } else {
        longDir = 'width'; // shortDir = 'height'

        getTranslate = function getTranslate(_long2, _short2) {
          return "translate(".concat(_long2, ",").concat(_short2, ")");
        };

        var _offsetValue;

        if (this.axes.y.func.scale().domain()[0] < 0 && this.axes.y.func.scale().domain()[1] > 0) _offsetValue = 0;else _offsetValue = this.axes.y.func.scale().domain()[0];

        getOffset = function getOffset(v) {
          return Math.min(v, _this2.axes.y.func.scale()(_offsetValue));
        };

        getShort = function getShort(v) {
          return Math.abs(_this2.axes.y.func.scale()(_offsetValue) - v);
        };
      }

      var barPercent = 0.7;
      barWidth = Math.min(MAX_BAR_WIDTH, this.axes.x.scale.bandwidth() * barPercent);
      var barMargin = (this.axes.x.scale.bandwidth() - barWidth) / 2;
      var drawItem;

      if (this.config.mode === 'stacked') {
        var stackPadding = 2;

        drawItem = function drawItem(sel, status) {
          sel.attr('transform', function (d) {
            var barPos;
            if (status === 'enter' || status === 'exit') barPos = _this2.axes.y.func.scale()(0);else barPos = _this2.axes.y.func.scale()(_this2.config.horizontal ? d.y0 : d.y1);
            return getTranslate(_this2.axes.x.func.scale()(d.id) + barMargin, barPos + (_this2.config.horizontal ? 0 : stackPadding / 2));
          });
          sel.select('path').attr('fill', function (d) {
            return _this2.color({
              id: d.parentId
            });
          }).attr('d', function (d) {
            var barLength;
            if (status === 'enter' || status === 'exit') barLength = 0;else barLength = getShort(_this2.axes.y.func.scale()(d.safeValue)) - (d.isFirstLayer ? stackPadding : stackPadding); //no tenia sentido hacerlos distinos, no!?

            barLength = Math.max(barLength, 0); //y le faltaba esto para cuando el "safeValue" da 0!!!

            var w = longDir === 'width' ? barWidth : barLength;
            var h = longDir === 'width' ? barLength : barWidth;
            return dentedRect(w, h, d.isLastLayer ? longDir === 'width' ? 'tl' : 'tr' : d.isFirstLayer ? longDir === 'width' ? 'br' : 'bl' : 'none');
          });
        };
      } else if (this.config.mode === 'grouped') {
        barWidth = this.axes.x.scale.bandwidth() * barPercent;
        barMargin = (this.axes.x.scale.bandwidth() - barWidth) / 2;
        var subScale = band().domain(this.data.map(function (d) {
          return d.id;
        })).range([barMargin, barMargin + barWidth]); //.range([w/2-w/6,w/2+w/3-w/6])

        var subBarPercent = 0.7; // let subBarWidth = subScale.bandwidth()*subBarPercent
        // let subBarMargin = subScale.bandwidth()*(1-subBarPercent)/2

        subBarWidth = Math.min(MAX_BAR_WIDTH, subScale.bandwidth() * subBarPercent);
        var subBarMargin = (subScale.bandwidth() - subBarWidth) / 2;

        drawItem = function drawItem(sel, status) {
          sel.attr('transform', function (d) {
            var barPos;
            if (status === 'enter' || status === 'exit') barPos = getOffset(_this2.axes.y.func.scale()(0));else barPos = getOffset(_this2.axes.y.func.scale()(d.safeValue));
            return getTranslate(_this2.axes.x.func.scale()(d.id) + subScale(d.parentId) + subBarMargin, barPos);
          });
          sel.select('path').attr('fill', function (d) {
            return _this2.color({
              id: d.parentId
            });
          }).attr('d', function (d) {
            var barLength;
            if (status === 'enter' || status === 'exit') barLength = 0;else barLength = getShort(_this2.axes.y.func.scale()(d.safeValue));
            var w = longDir === 'width' ? subBarWidth : barLength;
            var h = longDir === 'width' ? barLength : subBarWidth;
            var dent = longDir === 'width' ? d.safeValue > 0 ? ['tl', 'br'] : 'bl' : d.safeValue > 0 ? ['bl', 'tr'] : 'tr';
            var gap = null;

            if (_this2.axes.y.func.scale().isChunky && d.safeValue > _this2.axes.y.func.scale()._threshold) {
              gap = _this2.axes.y.func.scale()(_this2.axes.y.func.scale()._threshold) - _this2.axes.y.func.scale()(d.safeValue);
            }

            return dentedRect(w, h, dent, gap);
          });
        };
      } else {
        drawItem = function drawItem(sel, status) {
          sel.attr('transform', function (d) {
            var barPos;
            if (status === 'enter' || status === 'exit') barPos = getOffset(_this2.axes.y.func.scale()(0));else barPos = getOffset(_this2.axes.y.func.scale()(d.safeValue));
            return getTranslate(_this2.axes.x.func.scale()(d.id) + barMargin, barPos);
          });
          sel.select('path').attr('fill', function (d) {
            return _this2.color(d);
          }).attr('d', function (d) {
            var barLength;
            if (status === 'enter' || status === 'exit') barLength = 0;else barLength = getShort(_this2.axes.y.func.scale()(d.safeValue));
            var w = longDir === 'width' ? barWidth : barLength;
            var h = longDir === 'width' ? barLength : barWidth;
            var dent = longDir === 'width' ? d.safeValue > 0 ? ['tl', 'br'] : 'bl' : d.safeValue > 0 ? ['bl', 'tr'] : 'tr';
            var gap = null;

            if (_this2.axes.y.func.scale().isChunky && d.safeValue > _this2.axes.y.func.scale()._threshold) {
              gap = _this2.axes.y.func.scale()(_this2.axes.y.func.scale()._threshold) - _this2.axes.y.func.scale()(d.safeValue);
            }

            return dentedRect(w, h, dent, gap);
          });
        };
      }

      this.itemsEnter.append('path'); // HAy que pintar lo "viejos" primero para assegurar que se mantiene el orden de colores...

      this.itemsTrans.call(drawItem);
      this.itemsEnter.call(drawItem, 'enter');
      this.itemsEnterTrans.call(drawItem);
      this.itemsExitTrans.style('opacity', 0);
      if (this.parentItemsExitTrans) this.parentItemsExitTrans.style('opacity', 0);
      var datumValues = this.itemsEnter.merge(this.items).selectAll('.datum-value').data(function (d) {
        if (_this2.config.showDatumValues) {
          if (_this2.config.mode === 'stacked') {
            if (d.isLastLayer) {
              //chapuzilla raruna (el safeVAlue este, para stacked+horizontal).. pero va...
              return [{
                value: d.y1,
                safeValue: d.y1 - d.y0
              }];
            } else {
              return [];
            }
          } else {
            return [d];
          }
        } else {
          return [];
        }
      });
      datumValues.exit().transition().style('opacity', 0).remove();
      datumValues = datumValues.merge(datumValues.enter().append('text').attr('class', 'datum-value').style('opacity', 0).style('font-size', '14px').style('font-weight', 'bold').attr('fill', 'currentColor'));
      datumValues.text(function (d) {
        return _this2.formatValue(d.value, 'y');
      }) // .text(d => this.valueWithUnit(d.value, 'y'))
      .transition().style('opacity', 1);

      if (this.config.horizontal) {
        datumValues.attr('dominant-baseline', 'middle').attr('text-anchor', 'start').attr('y', 2 + (this.config.mode === 'grouped' ? subBarWidth / 2 : barWidth / 2)).attr('x', function (d) {
          return getShort(_this2.axes.y.func.scale()(d.safeValue)) + 8;
        });
      } else {
        datumValues.attr('text-anchor', 'middle').attr('x', this.config.mode === 'grouped' ? subBarWidth / 2 : barWidth / 2).attr('y', -8);
      } // this.itemsEnter.append('text').attr('text-anchor', 'middle')
      // this.items
      //   .merge(this.itemsEnter)
      //   .select('text')
      //   // .text(d => this.formatValue(d.value, 'y'))
      //   .text(d => this.valueWithUnit(d.value, 'y'))
      //   .attr('x', this.config.mode === 'grouped' ? subBarWidth / 2 : barWidth / 2)
      //   .attr('y', -8)

    }
  }]);

  return BarChartChart;
}(BaseChart);

_defineProperty(BarChartChart, "defaultConfig", {
  /**
   * Orientation of the bars. When setting `horizontal: true` the x and y axes will be swapped.
   */
  horizontal: {
    type: Boolean,
    "default": false,
    exposed: true
  },
  mode: {
    type: String,
    "default": 'single',
    options: ['single', 'grouped', 'stacked']
  },

  /**
   * Show the value on top of each bar.
   */
  showDatumValues: {
    type: Boolean,
    "default": false,
    exposed: true
  },

  /**
   * Minimum height of each bar (in pixels).
   */
  minBarHeight: {
    type: [Number],
    "default": 0,
    exposed: true
  },
  AxisHelper: {
    /**
     * Enable automatic scroll. If enabled, axes will be scrolalbel only if the number of bars is large enough.
     */
    zoom: {
      value: false
    },
    x: {
      scale: {
        value: 'band',
        exposed: false
      },
      getExtent: function getExtent(data) {
        if (this.config.mode === 'stacked') return categoricalExtent(data); //return data[0].value.map((d)=>d.id)
        else if (this.config.mode === 'grouped') return categoricalExtent(data); //return data[0].value.map((d)=>d.id)
          else return categoricalExtent(data); //return data.map((d)=>d.id)
      }
    },
    y: {
      side: 'right',
      getExtent: function getExtent(data) {
        var extent, extentParts;

        if (this.config.mode === 'stacked') {
          extentParts = continuousExtentParts(data, function (d) {
            return [d.y0, d.y1];
          }); // console.log("extent parts",extentParts)

          extent = continuousExtent(extentParts);
        } else if (this.config.mode === 'grouped') {
          extentParts = continuousExtentParts(data); // console.log("extent parts",extentParts)

          extent = continuousExtent(extentParts); //d3.extent(data.reduce((res,d)=>res.concat(d3.extent(d.value,(dd)=>dd.value)),[]))
        } else {
          extentParts = data.map(function (d) {
            return {
              value: [d.value, d.value]
            };
          }); //ESTABA MAL ESTOª!!!!! no?
          // console.log("extent parts",extentParts)

          extent = continuousExtent(data); //d3.extent(data,(d)=>d.value)
        } //Protect label!
        // let originalExtent = extent
        // extent = padLinear(extent,0.2)
        // NOT GOOD, porque se hace el padlinear luego, en el _setDomain
        // if(originalExtent[0]>=0) extent[0]=0
        // console.log("bar extent bef",extent)


        if (this.config.AxisHelper.y.showTickValues && this.config.AxisHelper.y.unit) {
          extent = cleanCollisions(this.axes.y, extent, extentParts);
        } // console.log("bar extent aft",extent)


        return extent;
      }
    }
  },
  TooltipBehavior: {
    getItemOffset: function getItemOffset($el) {
      var original = $el.getBoundingClientRect();
      return {
        x: original.x + original.width / 2,
        y: original.top //- 5,

      };
    }
  }
});

_defineProperty(BarChartChart, "helpers", [RootHelper, ItemsHelper, SelectableHelper, SizeHelper, AxisHelper]);

const pi$2 = Math.PI,
      tau$2 = 2 * pi$2,
      epsilon$3 = 1e-6,
      tauEpsilon$1 = tau$2 - epsilon$3;

function Path$2() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath

  this._ = "";
}

function path$1() {
  return new Path$2();
}

Path$2.prototype = path$1.prototype = {
  constructor: Path$2,
  moveTo: function (x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function () {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function (x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function (x1, y1, x, y) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function (x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon$3)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$3) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        } // Otherwise, draw an arc!
        else {
            var x20 = x2 - x0,
                y20 = y2 - y0,
                l21_2 = x21 * x21 + y21 * y21,
                l20_2 = x20 * x20 + y20 * y20,
                l21 = Math.sqrt(l21_2),
                l01 = Math.sqrt(l01_2),
                l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                t01 = l / l01,
                t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

            if (Math.abs(t01 - 1) > epsilon$3) {
              this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            }

            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
          }
  },
  arc: function (x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon$3 || Math.abs(this._y1 - y0) > epsilon$3) {
        this._ += "L" + x0 + "," + y0;
      } // Is this arc empty? We’re done.


    if (!r) return; // Does the angle go the wrong way? Flip the direction.

    if (da < 0) da = da % tau$2 + tau$2; // Is this a complete circle? Draw two arcs to complete the circle.

    if (da > tauEpsilon$1) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } // Is this arc non-empty? Draw an arc!
    else if (da > epsilon$3) {
        this._ += "A" + r + "," + r + ",0," + +(da >= pi$2) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
  },
  rect: function (x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function () {
    return this._;
  }
};

function constant$8 (x) {
  return function constant() {
    return x;
  };
}

var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var max$1 = Math.max;
var min$1 = Math.min;
var sin = Math.sin;
var sqrt = Math.sqrt;
var epsilon$4 = 1e-12;
var pi$3 = Math.PI;
var halfPi$1 = pi$3 / 2;
var tau$3 = 2 * pi$3;
function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);
}
function asin$1(x) {
  return x >= 1 ? halfPi$1 : x <= -1 ? -halfPi$1 : Math.asin(x);
}

function arcInnerRadius$1(d) {
  return d.innerRadius;
}

function arcOuterRadius$1(d) {
  return d.outerRadius;
}

function arcStartAngle$1(d) {
  return d.startAngle;
}

function arcEndAngle$1(d) {
  return d.endAngle;
}

function arcPadAngle$1(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect$1(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0,
      y10 = y1 - y0,
      x32 = x3 - x2,
      y32 = y3 - y2,
      t = y32 * x10 - x32 * y10;
  if (t * t < epsilon$4) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
} // Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html


function cornerTangents$1(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * sqrt(max$1(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00; // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?

  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

function d3_arc () {
  var innerRadius = arcInnerRadius$1,
      outerRadius = arcOuterRadius$1,
      cornerRadius = constant$8(0),
      padRadius = null,
      startAngle = arcStartAngle$1,
      endAngle = arcEndAngle$1,
      padAngle = arcPadAngle$1,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - halfPi$1,
        a1 = endAngle.apply(this, arguments) - halfPi$1,
        da = abs(a1 - a0),
        cw = a1 > a0;
    if (!context) context = buffer = path$1(); // Ensure that the outer radius is always larger than the inner radius.

    if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?

    if (!(r1 > epsilon$4)) context.moveTo(0, 0); // Or is it a circle or annulus?
    else if (da > tau$3 - epsilon$4) {
        context.moveTo(r1 * cos(a0), r1 * sin(a0));
        context.arc(0, 0, r1, a0, a1, !cw);

        if (r0 > epsilon$4) {
          context.moveTo(r0 * cos(a1), r0 * sin(a1));
          context.arc(0, 0, r0, a1, a0, cw);
        }
      } // Or is it a circular or annular sector?
      else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = ap > epsilon$4 && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
              rc = min$1(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.

          if (rp > epsilon$4) {
            var p0 = asin$1(rp / r0 * sin(ap)),
                p1 = asin$1(rp / r1 * sin(ap));
            if ((da0 -= p0 * 2) > epsilon$4) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > epsilon$4) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * cos(a01),
              y01 = r1 * sin(a01),
              x10 = r0 * cos(a10),
              y10 = r0 * sin(a10); // Apply rounded corners?

          if (rc > epsilon$4) {
            var x11 = r1 * cos(a11),
                y11 = r1 * sin(a11),
                x00 = r0 * cos(a00),
                y00 = r0 * sin(a00),
                oc; // Restrict the corner radius according to the sector angle.

            if (da < pi$3 && (oc = intersect$1(x01, y01, x00, y00, x11, y11, x10, y10))) {
              var ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
                  lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = min$1(rc, (r0 - lc) / (kc - 1));
              rc1 = min$1(rc, (r1 - lc) / (kc + 1));
            }
          } // Is the sector collapsed to a line?


          if (!(da1 > epsilon$4)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?
          else if (rc1 > epsilon$4) {
              t0 = cornerTangents$1(x00, y00, x01, y01, r1, rc1, cw);
              t1 = cornerTangents$1(x11, y11, x10, y10, r1, rc1, cw);
              context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                  context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
                }
            } // Or is the outer ring just a circular arc?
            else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?

          if (!(r0 > epsilon$4) || !(da0 > epsilon$4)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > epsilon$4) {
              t0 = cornerTangents$1(x10, y10, x11, y11, r0, -rc0, cw);
              t1 = cornerTangents$1(x01, y01, x00, y00, r0, -rc0, cw);
              context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                  context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
                }
            } // Or is the inner ring just a circular arc?
            else context.arc(0, 0, r0, a10, a00, cw);
        }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function () {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$3 / 2;
    return [cos(a) * r, sin(a) * r];
  };

  arc.innerRadius = function (_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$8(+_), arc) : innerRadius;
  };

  arc.outerRadius = function (_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$8(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function (_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$8(+_), arc) : cornerRadius;
  };

  arc.padRadius = function (_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$8(+_), arc) : padRadius;
  };

  arc.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$8(+_), arc) : startAngle;
  };

  arc.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$8(+_), arc) : endAngle;
  };

  arc.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$8(+_), arc) : padAngle;
  };

  arc.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };

  return arc;
}

function array$1 (x) {
  return typeof x === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
  : Array.from(x); // Map, Set, iterable, string, or anything else
}

function Linear$1(context) {
  this._context = context;
}

Linear$1.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        this._context.lineTo(x, y);

        break;
    }
  }
};
function d3_curveLinear (context) {
  return new Linear$1(context);
}

function x$1(p) {
  return p[0];
}
function y$1(p) {
  return p[1];
}

function d3_line (x, y) {
  var defined = constant$8(true),
      context = null,
      curve = d3_curveLinear,
      output = null;
  x = typeof x === "function" ? x : x === undefined ? x$1 : constant$8(x);
  y = typeof y === "function" ? y : y === undefined ? y$1 : constant$8(y);

  function line(data) {
    var i,
        n = (data = array$1(data)).length,
        d,
        defined0 = false,
        buffer;
    if (context == null) output = curve(buffer = path$1());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
      }

      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : constant$8(+_), line) : x;
  };

  line.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : constant$8(+_), line) : y;
  };

  line.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$8(!!_), line) : defined;
  };

  line.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}

function d3_area (x0, y0, y1) {
  var x1 = null,
      defined = constant$8(true),
      context = null,
      curve = d3_curveLinear,
      output = null;
  x0 = typeof x0 === "function" ? x0 : x0 === undefined ? x$1 : constant$8(+x0);
  y0 = typeof y0 === "function" ? y0 : y0 === undefined ? constant$8(0) : constant$8(+y0);
  y1 = typeof y1 === "function" ? y1 : y1 === undefined ? y$1 : constant$8(+y1);

  function area(data) {
    var i,
        j,
        k,
        n = (data = array$1(data)).length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);
    if (context == null) output = curve(buffer = path$1());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();

          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }

          output.lineEnd();
          output.areaEnd();
        }
      }

      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return d3_line().defined(defined).curve(curve).context(context);
  }

  area.x = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$8(+_), x1 = null, area) : x0;
  };

  area.x0 = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$8(+_), area) : x0;
  };

  area.x1 = function (_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$8(+_), area) : x1;
  };

  area.y = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$8(+_), y1 = null, area) : y0;
  };

  area.y0 = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$8(+_), area) : y0;
  };

  area.y1 = function (_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$8(+_), area) : y1;
  };

  area.lineX0 = area.lineY0 = function () {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function () {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function () {
    return arealine().x(x1).y(y0);
  };

  area.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$8(!!_), area) : defined;
  };

  area.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}

function descending (a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

function identity$5 (d) {
  return d;
}

function d3_pie () {
  var value = identity$5,
      sortValues = descending,
      sort = null,
      startAngle = constant$8(0),
      endAngle = constant$8(tau$3),
      padAngle = constant$8(0);

  function pie(data) {
    var i,
        n = (data = array$1(data)).length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(tau$3, Math.max(-tau$3, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    } // Optionally sort the arcs by previously-computed values or by data.


    if (sortValues != null) index.sort(function (i, j) {
      return sortValues(arcs[i], arcs[j]);
    });else if (sort != null) index.sort(function (i, j) {
      return sort(data[i], data[j]);
    }); // Compute the arcs! They are stored in the original data's order.

    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant$8(+_), pie) : value;
  };

  pie.sortValues = function (_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function (_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$8(+_), pie) : startAngle;
  };

  pie.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$8(+_), pie) : endAngle;
  };

  pie.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$8(+_), pie) : padAngle;
  };

  return pie;
}

var curveRadialLinear = curveRadial(d3_curveLinear);

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function () {
    this._curve.areaStart();
  },
  areaEnd: function () {
    this._curve.areaEnd();
  },
  lineStart: function () {
    this._curve.lineStart();
  },
  lineEnd: function () {
    this._curve.lineEnd();
  },
  point: function (a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};
function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;
  return radial;
}

function lineRadial(l) {
  var c = l.curve;
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function (_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return l;
}
function d3_lineRadial () {
  return lineRadial(d3_line().curve(curveRadialLinear));
}

function noop$2 () {}

function point$5(that, x, y) {
  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}
function Cardinal$1(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal$1.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        point$5(this, this._x1, this._y1);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        this._x1 = x, this._y1 = y;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point$5(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};
var d3_curveCardinal = (function custom(tension) {
  function cardinal(context) {
    return new Cardinal$1(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: noop$2,
  areaEnd: noop$2,
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._point) this._context.closePath();
  },
  point: function (x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);
  }
};
function d3_curveLinearClosed (context) {
  return new LinearClosed(context);
}

function none$2 (series, order) {
  if (!((n = series.length) > 1)) return;

  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];

    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}

function none$3 (series) {
  var n = series.length,
      o = new Array(n);

  while (--n >= 0) o[n] = n;

  return o;
}

function stackValue(d, key) {
  return d[key];
}

function stackSeries(key) {
  const series = [];
  series.key = key;
  return series;
}

function d3_stack () {
  var keys = constant$8([]),
      order = none$3,
      offset = none$2,
      value = stackValue;

  function stack(data) {
    var sz = Array.from(keys.apply(this, arguments), stackSeries),
        i,
        n = sz.length,
        j = -1,
        oz;

    for (const d of data) {
      for (i = 0, ++j; i < n; ++i) {
        (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
      }
    }

    for (i = 0, oz = array$1(order(sz)); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function (_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant$8(Array.from(_)), stack) : keys;
  };

  stack.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant$8(+_), stack) : value;
  };

  stack.order = function (_) {
    return arguments.length ? (order = _ == null ? none$3 : typeof _ === "function" ? _ : constant$8(Array.from(_)), stack) : order;
  };

  stack.offset = function (_) {
    return arguments.length ? (offset = _ == null ? none$2 : _, stack) : offset;
  };

  return stack;
}

function BarChartDataController(rows) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var headers = rows[0];
  var propperHeaders;
  var dims;

  if (config.mode === 'stacked') {
    propperHeaders = ['id'].concat(_toConsumableArray(headers.slice(1)));
    dims = 2;
  } else if (config.mode === 'grouped') {
    propperHeaders = ['id'].concat(_toConsumableArray(headers.slice(1)));
    dims = 2;
  } else {
    propperHeaders = ['id', 'value'];
    dims = 1;
  }

  var data = convertRowsToData([propperHeaders].concat(_toConsumableArray(rows.slice(1))), dims);
  var extent;

  if (config.mode === 'stacked') {
    extent = [min(data, function (d) {
      return min(d.value, function (dd) {
        return dd.value;
      });
    }), max(data, function (d) {
      return max(d.value, function (dd) {
        return dd.value;
      });
    })];
  } else if (config.mode === 'grouped') {
    extent = [min(data, function (d) {
      return min(d.value, function (dd) {
        return dd.value;
      });
    }), max(data, function (d) {
      return max(d.value, function (dd) {
        return dd.value;
      });
    })];
  } else {
    extent = d3_extent(data, function (d) {
      return d.value;
    });
  }

  if (extent[0] > 0) extent[0] = 0;
  var extentSize = Math.abs(extent[1] - extent[0]);

  var getSafeValue = function getSafeValue(v) {
    return config.minBarHeight ? Math.sign(v || 1) * Math.max(extentSize * config.minBarHeight / 100, Math.abs(v)) : +v;
  }; //BASTANTE BASURIL ESTO... pero lo que da parece que no esta mal...


  if (config.mode === 'stacked') {
    var keys = data.reduce(function (res, d) {
      d.value.forEach(function (dd) {
        return res.push(dd.id);
      });
      return res;
    }, []);
    keys = keys.filter(function (value, index, self) {
      return self.indexOf(value) === index;
    });
    var objArray = data.map(function (layer) {
      var res = {
        id: layer.id
      };
      layer.value.forEach(function (dd) {
        res[dd.id] = dd.value;
      });
      return res;
    });
    var stack = d3_stack().value(function (d, key) {
      return getSafeValue(d[key]);
    }).keys(keys);
    var stacked = stack(objArray);
    var result = stacked.map(function (layer) {
      return {
        id: layer.key,
        index: layer.index,
        value: layer.map(function (dd) {
          return {
            id: dd.data.id,
            value: dd.data[layer.key],
            safeValue: getSafeValue(dd.data[layer.key]),
            y0: dd[0],
            y1: dd[1],
            layerIndex: layer.index,
            isLastLayer: keys.indexOf(layer.key) === keys.length - 1,
            isFirstLayer: keys.indexOf(layer.key) === 0,
            parentId: layer.key
          };
        })
      };
    });
    return result;
  } else if (config.mode === 'grouped') {
    // return data.map((d,i)=>{
    //   if(!d.id) d.id = i
    //   return d
    // })
    var _keys = data.reduce(function (res, d) {
      d.value.forEach(function (dd) {
        return res.push(dd.id);
      });
      return res;
    }, []);

    _keys = _keys.filter(function (value, index, self) {
      return self.indexOf(value) === index;
    });

    var res = _keys.map(function (key) {
      return {
        id: key,
        value: data.map(function (dd) {
          var cand = dd.value.find(function (ddd) {
            return ddd.id === key;
          });
          return {
            id: cand.parentId,
            parentId: cand.id,
            value: cand.value,
            safeValue: getSafeValue(cand.value)
          };
        })
      };
    });

    return res;
  } else {
    return data.map(function (d, i) {
      if (!d.id) d.id = i;
      d.safeValue = getSafeValue(d.value);
      return d;
    });
  }
}

var BarChartViz = /*#__PURE__*/function (_BaseViz) {
  _inherits(BarChartViz, _BaseViz);

  var _super = _createSuper(BarChartViz);

  function BarChartViz() {
    _classCallCheck(this, BarChartViz);

    return _super.apply(this, arguments);
  }

  return BarChartViz;
}(BaseViz);

_defineProperty(BarChartViz, "defaultConfig", {
  ItemsHelper: {
    colorScale: {
      value: 'categorical',
      options: ['categorical', 'single']
    }
  },
  AxisHelper: {
    x: {
      trimThreshold: {
        nonEditable: true,
        exposed: false
      },
      valueFormat: {
        nonEditable: true,
        exposed: false
      },
      unit: {
        nonEditable: true,
        exposed: false
      },
      scale: {
        nonEditable: true
      },
      tickMatchData: {
        nonEditable: true,
        exposed: false
      }
    }
  }
});

_defineProperty(BarChartViz, "chartClass", BarChartChart);

_defineProperty(BarChartViz, "dataControllerClass", BarChartDataController);

function getDownloadUrl(svg) {
  // filename = filename || 'Exported Chart'
  // filename = filename.split(' ').join('_')
  //get svg source.
  var serializer = new XMLSerializer();
  var source = serializer.serializeToString(svg); //add name spaces.

  if (!source.match(/^<svg[^>]+xmlns="http:\/\/www\.w3\.org\/2000\/svg"/)) {
    source = source.replace(/^<svg/, '<svg xmlns="http://www.w3.org/2000/svg"');
  }

  if (!source.match(/^<svg[^>]+"http:\/\/www\.w3\.org\/1999\/xlink"/)) {
    source = source.replace(/^<svg/, '<svg xmlns:xlink="http://www.w3.org/1999/xlink"');
  } //add xml declaration


  source = '<?xml version="1.0" standalone="no"?>\r\n' + source; //convert svg source to URI data scheme.

  var url = "data:image/svg+xml;charset=utf-8," + encodeURIComponent(source);
  return url; // var elem = document.createElement('a');
  // elem.href = url
  // elem.download = filename+'.svg';
  // elem.click();
  // window.URL.revokeObjectURL(url);
}

var cloneDeep = __webpack_require__(5);

var BaseComponent = /*#__PURE__*/function () {
  _createClass(BaseComponent, [{
    key: "data",
    get: function get() {
      return this._data;
    },
    set: function set(value) {
      this._data = value;
      this.viz.data = this.data;
    }
  }, {
    key: "config",
    get: function get() {
      return this._config;
    },
    set: function set(value) {
      var merged = mergeConfig(value, this._getConfig());
      var valid = extractValues(merged);
      this._config = valid;
      this.viz.config = this.config;
      this.viz.onAnnotationChange = this.onAnnotationChange;
      this.viz.onAnnotationClick = this.onAnnotationClick;
      this.viz.editMode = this.editMode;
    }
  }]);

  function BaseComponent($root, data, config) {
    var _this = this;

    _classCallCheck(this, BaseComponent);

    this.$root = $root;
    this.viz = new this.__proto__.constructor.vizClass(this.$root);
    this.viz._parent = this;
    this.viz.componentLabel = this.__proto__.constructor.componentLabel || 'name_not_found'; //this.constructor.name.replace('Component','')

    fontCheck().then(function () {
      // console.log("font is ready-------",document.fonts.check('1em santander'))
      // IMPORTANT, como metemos primero el "config" no se ejecutan dos draws seguidos [porque hay unos "if(!data) return" por ahi...]
      // this.config = config
      _this.config = config;
      if (data) _this.data = data; // if (this.onReady) this.onReady()

      _this.emit('ready', {
        data: _this.data,
        config: _this.config
      });
    });
  }

  _createClass(BaseComponent, [{
    key: "_getConfig",
    value: function _getConfig() {
      var config = this.constructor.vizClass.prototype._getConfig(); // estaba fatal, esto:
      // let result = mergeConfig(config, mergeConfig(this.__proto__.constructor.defaultConfig,this.constructor.defaultConfig))


      var result = mergeConfig(this.constructor.defaultConfig, config);
      return cloneDeep(result);
    }
  }, {
    key: "getSVG",
    value: function getSVG() {
      return this.viz.getSVG();
    }
  }, {
    key: "getSVGURL",
    value: function getSVGURL() {
      return this.getSVG().then(function (svg) {
        return getDownloadUrl(svg);
      });
    }
  }, {
    key: "on",
    value: function on(eventName, callback) {
      this.addEventListener(eventName, callback);
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(eventName, callback) {
      var _this$eventListeners;

      this.eventListeners || (this.eventListeners = {});
      (_this$eventListeners = this.eventListeners)[eventName] || (_this$eventListeners[eventName] = []);
      this.eventListeners[eventName].push(callback);
    }
  }, {
    key: "emit",
    value: function emit(eventName, data) {
      data = data ? JSON.parse(JSON.stringify(data)) : undefined;

      if (this.eventListeners) {
        var _this$eventListeners$;

        (_this$eventListeners$ = this.eventListeners[eventName]) === null || _this$eventListeners$ === void 0 ? void 0 : _this$eventListeners$.forEach(function (cb) {
          cb(data);
        });
      }

      var onName = "on".concat(eventName.charAt(0).toUpperCase() + eventName.slice(1));
      if (this[onName]) this[onName](data);
    }
  }]);

  return BaseComponent;
}();

/**
 * # {componentLabel} (`class {componentClassName}`)
 * A bar chart is used to display values of a single variable represented by the height or length of lines or rectangles of equal width.
 * 
 * ### Example Usage
 * ```javascript
 *   import {BarChart} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new BarChart($el, data, config);
 *   
 * ```
 * 
 * This chart is only intended to draw simple bar charts (vertical or horizontal) for stacked or grouped bar charts see [StackedBarChart](#/developer/StackedBarsComponent) and [GroupedBarChart](#/developer/GroupedBarsComponent)
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 2 columns. Each row represents a bar, and the first column should be the id/label of the bar, and the second column its value.
 *  
 * | category | value  |
 * | -------- | ------ |
 * |   a      |    22.4|
 * |   b      |    52.3|
 * |   c      |    12.8|
 * |   d      |    26.0|
 * 
 * {.data-table}
 *
 */

var BarChartComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(BarChartComponent, _BaseComponent);

  var _super = _createSuper(BarChartComponent);

  function BarChartComponent($root, config, data) {
    _classCallCheck(this, BarChartComponent);

    return _super.call(this, $root, config, data);
  }

  return BarChartComponent;
}(BaseComponent);

_defineProperty(BarChartComponent, "componentLabel", "Bar chart");

_defineProperty(BarChartComponent, "vizClass", BarChartViz);

_defineProperty(BarChartComponent, "dataFormat", [{
  index: 0,
  axis: 'x0',
  types: [String],
  role: 'id',
  roleLabel: 'Category'
}, {
  index: 1,
  axis: 'y0',
  types: [Number],
  role: 'value',
  roleLabel: 'Value'
}]);

_defineProperty(BarChartComponent, "defaultConfig", {
  title: BarChartComponent.componentLabel,
  AxisHelper: {
    x: {
      /**
       * Show/hide labels for each bar on the X axis.
       */
      showTickValues: false
    }
  }
});

function tree_add (d) {
  const x = +this._x.call(null, d),
        y = +this._y.call(null, d);
  return add(this.cover(x, y), x, y, d);
}

function add(tree, x, y, d) {
  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

  var parent,
      node = tree._root,
      leaf = {
    data: d
  },
      x0 = tree._x0,
      y0 = tree._y0,
      x1 = tree._x1,
      y1 = tree._y1,
      xm,
      ym,
      xp,
      yp,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return tree._root = leaf, tree; // Find the existing leaf for the new point, or add it.

  while (node.length) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
  } // Is the new point is exactly coincident with the existing point?


  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree; // Otherwise, split the leaf node until the old and new point are separated.

  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));

  return parent[j] = node, parent[i] = leaf, tree;
}

function addAll(data) {
  var d,
      i,
      n = data.length,
      x,
      y,
      xz = new Array(n),
      yz = new Array(n),
      x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity; // Compute the points and their extent.

  for (i = 0; i < n; ++i) {
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
    xz[i] = x;
    yz[i] = y;
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  } // If there were no (valid) points, abort.


  if (x0 > x1 || y0 > y1) return this; // Expand the tree to cover the new points.

  this.cover(x0, y0).cover(x1, y1); // Add the new points.

  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }

  return this;
}

function tree_cover (x, y) {
  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

  var x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1; // If the quadtree has no extent, initialize them.
  // Integer extent are necessary so that if we later double the extent,
  // the existing quadrant boundaries don’t change due to floating point error!

  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x)) + 1;
    y1 = (y0 = Math.floor(y)) + 1;
  } // Otherwise, double repeatedly to cover.
  else {
      var z = x1 - x0 || 1,
          node = this._root,
          parent,
          i;

      while (x0 > x || x >= x1 || y0 > y || y >= y1) {
        i = (y < y0) << 1 | x < x0;
        parent = new Array(4), parent[i] = node, node = parent, z *= 2;

        switch (i) {
          case 0:
            x1 = x0 + z, y1 = y0 + z;
            break;

          case 1:
            x0 = x1 - z, y1 = y0 + z;
            break;

          case 2:
            x1 = x0 + z, y0 = y1 - z;
            break;

          case 3:
            x0 = x1 - z, y0 = y1 - z;
            break;
        }
      }

      if (this._root && this._root.length) this._root = node;
    }

  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}

function tree_data () {
  var data = [];
  this.visit(function (node) {
    if (!node.length) do data.push(node.data); while (node = node.next);
  });
  return data;
}

function tree_extent (_) {
  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
}

function Quad (node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}

function tree_find (x, y, radius) {
  var data,
      x0 = this._x0,
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      x3 = this._x1,
      y3 = this._y1,
      quads = [],
      node = this._root,
      q,
      i;
  if (node) quads.push(new Quad(node, x0, y0, x3, y3));
  if (radius == null) radius = Infinity;else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
  }

  while (q = quads.pop()) {
    // Stop searching if this quadrant can’t contain a closer node.
    if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue; // Bisect the current quadrant.

    if (node.length) {
      var xm = (x1 + x2) / 2,
          ym = (y1 + y2) / 2;
      quads.push(new Quad(node[3], xm, ym, x2, y2), new Quad(node[2], x1, ym, xm, y2), new Quad(node[1], xm, y1, x2, ym), new Quad(node[0], x1, y1, xm, ym)); // Visit the closest quadrant first.

      if (i = (y >= ym) << 1 | x >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } // Visit this point. (Visiting coincident points isn’t necessary!)
    else {
        var dx = x - +this._x.call(null, node.data),
            dy = y - +this._y.call(null, node.data),
            d2 = dx * dx + dy * dy;

        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x - d, y0 = y - d;
          x3 = x + d, y3 = y + d;
          data = node.data;
        }
      }
  }

  return data;
}

function tree_remove (d) {
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

  var parent,
      node = this._root,
      retainer,
      previous,
      next,
      x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return this; // Find the leaf node for the point.
  // While descending, also retain the deepest parent with a non-removed sibling.

  if (node.length) while (true) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
  } // Find the point to remove.

  while (node.data !== d) if (!(previous = node, node = node.next)) return this;

  if (next = node.next) delete node.next; // If there are multiple coincident points, remove just the point.

  if (previous) return next ? previous.next = next : delete previous.next, this; // If this is the root point, remove it.

  if (!parent) return this._root = next, this; // Remove this leaf.

  next ? parent[i] = next : delete parent[i]; // If the parent now contains exactly one leaf, collapse superfluous parents.

  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer) retainer[j] = node;else this._root = node;
  }

  return this;
}
function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);

  return this;
}

function tree_root () {
  return this._root;
}

function tree_size () {
  var size = 0;
  this.visit(function (node) {
    if (!node.length) do ++size; while (node = node.next);
  });
  return size;
}

function tree_visit (callback) {
  var quads = [],
      q,
      node = this._root,
      child,
      x0,
      y0,
      x1,
      y1;
  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
    }
  }

  return this;
}

function tree_visitAfter (callback) {
  var quads = [],
      next = [],
      q;
  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    var node = q.node;

    if (node.length) {
      var child,
          x0 = q.x0,
          y0 = q.y0,
          x1 = q.x1,
          y1 = q.y1,
          xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
    }

    next.push(q);
  }

  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }

  return this;
}

function defaultX(d) {
  return d[0];
}
function tree_x (_) {
  return arguments.length ? (this._x = _, this) : this._x;
}

function defaultY(d) {
  return d[1];
}
function tree_y (_) {
  return arguments.length ? (this._y = _, this) : this._y;
}

function quadtree(nodes, x, y) {
  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}

function Quadtree(x, y, x0, y0, x1, y1) {
  this._x = x;
  this._y = y;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = undefined;
}

function leaf_copy(leaf) {
  var copy = {
    data: leaf.data
  },
      next = copy;

  while (leaf = leaf.next) next = next.next = {
    data: leaf.data
  };

  return copy;
}

var treeProto = quadtree.prototype = Quadtree.prototype;

treeProto.copy = function () {
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
      node = this._root,
      nodes,
      child;
  if (!node) return copy;
  if (!node.length) return copy._root = leaf_copy(node), copy;
  nodes = [{
    source: node,
    target: copy._root = new Array(4)
  }];

  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length) nodes.push({
          source: child,
          target: node.target[i] = new Array(4)
        });else node.target[i] = leaf_copy(child);
      }
    }
  }

  return copy;
};

treeProto.add = tree_add;
treeProto.addAll = addAll;
treeProto.cover = tree_cover;
treeProto.data = tree_data;
treeProto.extent = tree_extent;
treeProto.find = tree_find;
treeProto.remove = tree_remove;
treeProto.removeAll = removeAll;
treeProto.root = tree_root;
treeProto.size = tree_size;
treeProto.visit = tree_visit;
treeProto.visitAfter = tree_visitAfter;
treeProto.x = tree_x;
treeProto.y = tree_y;

function constant$9 (x) {
  return function () {
    return x;
  };
}

function jiggle (random) {
  return (random() - 0.5) * 1e-6;
}

function x$2(d) {
  return d.x + d.vx;
}

function y$2(d) {
  return d.y + d.vy;
}

function d3_forceCollide (radius) {
  var nodes,
      radii,
      random,
      strength = 1,
      iterations = 1;
  if (typeof radius !== "function") radius = constant$9(radius == null ? 1 : +radius);

  function force() {
    var i,
        n = nodes.length,
        tree,
        node,
        xi,
        yi,
        ri,
        ri2;

    for (var k = 0; k < iterations; ++k) {
      tree = quadtree(nodes, x$2, y$2).visitAfter(prepare);

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }

    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data,
          rj = quad.r,
          r = ri + rj;

      if (data) {
        if (data.index > node.index) {
          var x = xi - data.x - data.vx,
              y = yi - data.y - data.vy,
              l = x * x + y * y;

          if (l < r * r) {
            if (x === 0) x = jiggle(random), l += x * x;
            if (y === 0) y = jiggle(random), l += y * y;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y *= l) * r;
            data.vx -= x * (r = 1 - r);
            data.vy -= y * r;
          }
        }

        return;
      }

      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }

  function prepare(quad) {
    if (quad.data) return quad.r = radii[quad.data.index];

    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    radii = new Array(n);

    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }

  force.initialize = function (_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = +_, force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$9(+_), initialize(), force) : radius;
  };

  return force;
}

function index$2(d) {
  return d.index;
}

function find$1(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node) throw new Error("node not found: " + nodeId);
  return node;
}

function d3_forceLink (links) {
  var id = index$2,
      strength = defaultStrength,
      strengths,
      distance = constant$9(30),
      distances,
      nodes,
      count,
      bias,
      random,
      iterations = 1;
  if (links == null) links = [];

  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }

  function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
        link = links[i], source = link.source, target = link.target;
        x = target.x + target.vx - source.x - source.vx || jiggle(random);
        y = target.y + target.vy - source.y - source.vy || jiggle(random);
        l = Math.sqrt(x * x + y * y);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x *= l, y *= l;
        target.vx -= x * (b = bias[i]);
        target.vy -= y * b;
        source.vx += x * (b = 1 - b);
        source.vy += y * b;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        m = links.length,
        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),
        link;

    for (i = 0, count = new Array(n); i < m; ++i) {
      link = links[i], link.index = i;
      if (typeof link.source !== "object") link.source = find$1(nodeById, link.source);
      if (typeof link.target !== "object") link.target = find$1(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }

    for (i = 0, bias = new Array(m); i < m; ++i) {
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }

    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
  }

  function initializeStrength() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }

  function initializeDistance() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }

  force.initialize = function (_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };

  force.links = function (_) {
    return arguments.length ? (links = _, initialize(), force) : links;
  };

  force.id = function (_) {
    return arguments.length ? (id = _, force) : id;
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$9(+_), initializeStrength(), force) : strength;
  };

  force.distance = function (_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : constant$9(+_), initializeDistance(), force) : distance;
  };

  return force;
}

// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
const a = 1664525;
const c = 1013904223;
const m = 4294967296; // 2^32

function lcg () {
  let s = 1;
  return () => (s = (a * s + c) % m) / m;
}

var initialRadius = 10,
    initialAngle = Math.PI * (3 - Math.sqrt(5));
function d3_forceSimulation (nodes) {
  var simulation,
      alpha = 1,
      alphaMin = 0.001,
      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
      alphaTarget = 0,
      velocityDecay = 0.6,
      forces = new Map(),
      stepper = timer(step),
      event = dispatch("tick", "end"),
      random = lcg();
  if (nodes == null) nodes = [];

  function step() {
    tick();
    event.call("tick", simulation);

    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }

  function tick(iterations) {
    var i,
        n = nodes.length,
        node;
    if (iterations === undefined) iterations = 1;

    for (var k = 0; k < iterations; ++k) {
      alpha += (alphaTarget - alpha) * alphaDecay;
      forces.forEach(function (force) {
        force(alpha);
      });

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null) node.x += node.vx *= velocityDecay;else node.x = node.fx, node.vx = 0;
        if (node.fy == null) node.y += node.vy *= velocityDecay;else node.y = node.fy, node.vy = 0;
      }
    }

    return simulation;
  }

  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null) node.x = node.fx;
      if (node.fy != null) node.y = node.fy;

      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(0.5 + i),
            angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }

      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }

  function initializeForce(force) {
    if (force.initialize) force.initialize(nodes, random);
    return force;
  }

  initializeNodes();
  return simulation = {
    tick: tick,
    restart: function () {
      return stepper.restart(step), simulation;
    },
    stop: function () {
      return stepper.stop(), simulation;
    },
    nodes: function (_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
    },
    alpha: function (_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },
    alphaMin: function (_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },
    alphaDecay: function (_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },
    alphaTarget: function (_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },
    velocityDecay: function (_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },
    randomSource: function (_) {
      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
    },
    force: function (name, _) {
      return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
    },
    find: function (x, y, radius) {
      var i = 0,
          n = nodes.length,
          dx,
          dy,
          d2,
          node,
          closest;
      if (radius == null) radius = Infinity;else radius *= radius;

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x - node.x;
        dy = y - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius) closest = node, radius = d2;
      }

      return closest;
    },
    on: function (name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
}

function layoutLabels(nodes, scale) {
  var anchors = [];
  nodes.each(function (d) {
    anchors.push({
      id: 'anchor_' + d.id,
      node_id: d.id,
      fy: scale(d),
      fx: 0
    });
  });
  nodes.each(function (d) {
    // if (!this.y) //RESETEAMOS CADA VEZ, que sino a veces quedaban "swapeados"
    this.y = scale(d);
    if (!this.fx) this.fx = 0;
    this.id = d.id;
    this.anchorRef = anchors.find(function (dd) {
      return dd.node_id === d.id;
    }); // console.log('node d', d), (this._currentY = Math.random())
  });
  var simNodes = nodes.nodes().concat(anchors);
  var simLinks = anchors.map(function (a) {
    return {
      id: 'link_' + a.node_id,
      source: a.id,
      target: a.node_id
    };
  }); // WARNIGN, UN POCO ARBITRARIO EL "RADIUS 10"

  var simulation = d3_forceSimulation(simNodes).force('collision', d3_forceCollide().radius(function (d) {
    if (d.id.indexOf('anchor') >= 0) return 0;else return 10;
  })).force('link', d3_forceLink(simLinks).id(function (d) {
    return d.id;
  }).distance(0)).alphaDecay(0.1);
  simulation.tick(100);
  return nodes;
}

function colorToGradId(color) {
  var str = "grd-".concat(parseInt(color.replace('#', '0x')));
  console.log('WTF', str);
  return str;
}

function updateGradientDefs(root, colors) {
  var defs = d3_select(root).selectAll('defs').data([null]);
  defs = defs.merge(defs.enter().append('defs'));
  var grads = defs.selectAll('linearGradient').data(colors, function (d) {
    return d;
  });
  grads.exit().remove();
  grads.enter().append('linearGradient').attr('id', function (d) {
    return colorToGradId(d);
  }).attr('x2', '0%').attr('y2', '100%').each(function (color) {
    d3_select(this).append('stop').attr('offset', '0%').attr('style', "stop-color:".concat(color, ";stop-opacity:0.2"));
    d3_select(this).append('stop').attr('offset', '100%').attr('style', "stop-color:".concat(color, ";stop-opacity:0"));
  });
}

var LineChartChart = /*#__PURE__*/function (_BaseChart) {
  _inherits(LineChartChart, _BaseChart);

  var _super = _createSuper(LineChartChart);

  function LineChartChart() {
    _classCallCheck(this, LineChartChart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _super.call.apply(_super, [this].concat(args));
  }

  _createClass(LineChartChart, [{
    key: "checkConsistency",
    value: function checkConsistency() {
      return true;
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this = this;

      if (this.config.mode === 'lines') {
        var line = d3_line().defined(function (d) {
          return d.value !== null;
        }).curve(this.config.curve === 'smooth' ? d3_curveCardinal : d3_curveLinear).x(function (d) {
          return _this.axes.x.func.scale()(d.id);
        }).y(function (d) {
          return _this.axes.y.func.scale()(d.value);
        }); //shadow area

        var y0s = this.data.map(function (d) {
          return {
            id: d.id,
            y0: min(d.value, function (dd) {
              return dd.value;
            })
          };
        });
        var area = d3_area().curve(this.config.curve === 'smooth' ? d3_curveCardinal : d3_curveLinear).x(function (d) {
          return _this.axes.x.func.scale()(d.id);
        }).y0(function (d) {
          return _this.axes.y.func.scale()(y0s.find(function (dd) {
            return dd.id === d.parentId;
          }).y0);
        }).y1(function (d) {
          return _this.axes.y.func.scale()(d.value);
        }); // this.itemsEnter.append('path')

        this.parentItemsEnter.append('path').attr('class', 'line').attr('fill', 'none');
        this.parentItemsEnter.append('path').attr('class', 'shadow').style('pointer-events', 'none'); // this.itemsEnter.call(drawItem,'enter')
        // this.parentItemsEnter.select('path').attr('d',(d)=>line(d.value)).attr('stroke',(d)=>this.color(d))
        // this.itemsEnterTrans.call(drawItem)

        var self = this;
        this.parentItemsEnter.select('.line').attr('d', function (d) {
          return line(d.value);
        }).attr('stroke', function (d) {
          return _this.color(d);
        }) // .attr('stroke-dasharray',(d)=>this.strokeDasharray(d))
        .each(function () {
          this._totalLength = this.getTotalLength();
        }).attr('stroke-dasharray', function (d) {
          var dashing = self.strokeDasharray(d);
          if (dashing === 'none') dashing = '1 0';
          var dashLength = dashing.split(/[\s,]/).map(function (a) {
            return parseFloat(a) || 0;
          }).reduce(function (a, b) {
            return a + b;
          });
          var dashCount = Math.ceil(this._totalLength / dashLength);
          var newDashes = new Array(dashCount).join(dashing + ' ');
          var dashArray = newDashes + ' 0, ' + this._totalLength;
          return dashArray;
        }).attr('stroke-dashoffset', function () {
          return this._totalLength;
        });
        this.parentItemsEnter.select('.shadow').style('opacity', 0).attr('d', function (d) {
          return area(d.value);
        }).attr('fill', function (d) {
          if (_this.config.gradientFill) return "url(#".concat(colorToGradId(_this.color(d)), ")");else return 'none';
        });
        this.parentItemsEnterTrans.select('.line').attr('stroke-dashoffset', 0);
        this.parentItemsEnterTrans.select('.shadow').style('opacity', 1);
        this.parentItems.select('.line').attr('stroke-dasharray', 'none');
        updateGradientDefs(this.$root, this.config.gradientFill ? this.data.map(function (d) {
          return _this.color(d);
        }) : []);
        this.parentItemsTrans.select('.line').attr('d', function (d) {
          return line(d.value);
        }).attr('stroke', function (d) {
          return _this.color(d);
        }).attr('stroke-dasharray', function (d) {
          return _this.strokeDasharray(d);
        });
        this.parentItemsTrans.select('.shadow').style('opacity', 1).attr('d', function (d) {
          return area(d.value);
        }).attr('fill', function (d) {
          if (_this.config.gradientFill) return "url(#".concat(colorToGradId(_this.color(d)), ")");else return 'none';
        });
        this.parentItemsExitTrans.style('opacity', 0);
      } else {
        var _area = d3_area().curve(this.config.curve === 'smooth' ? d3_curveCardinal : d3_curveLinear).x(function (d) {
          return _this.axes.x.func.scale()(d.id);
        }).y0(function (d) {
          return _this.axes.y.func.scale()(d.y0);
        }).y1(function (d) {
          return _this.axes.y.func.scale()(d.y1);
        });

        var _line = d3_line().defined(function (d) {
          return d.value !== null;
        }).curve(this.config.curve === 'smooth' ? d3_curveCardinal : d3_curveLinear).x(function (d) {
          return _this.axes.x.func.scale()(d.id);
        }).y(function (d) {
          return _this.axes.y.func.scale()(d.y1);
        });

        this.parentItemsEnter.append('path').attr('class', 'area');
        this.parentItemsEnter.append('path').attr('class', 'separator'); // this.parentItemsEnter.append('path')
        // this.parentItems.select('path').attr('d',(d)=>area(d.value)).attr('fill',(d)=>this.color(d))

        this.parentItemsEnter.select('.area').attr('d', function (d) {
          return _area(d.value.map(function (dd) {
            return {
              id: dd.id,
              y0: 0,
              y1: 0
            };
          }));
        }).attr('fill', function (d) {
          return _this.color(d);
        });
        this.parentItemsEnterTrans.select('.area').attr('d', function (d) {
          return _area(d.value);
        }).attr('fill', function (d) {
          return _this.color(d);
        });
        this.parentItemsTrans.select('.area').attr('d', function (d) {
          return _area(d.value);
        }).attr('fill', function (d) {
          return _this.color(d);
        });
        this.parentItemsEnter.select('.separator').attr('d', function (d) {
          return _line(d.value.map(function (dd) {
            return {
              id: dd.id,
              y0: 0,
              y1: 0
            };
          }));
        }).attr('fill', 'none').attr('stroke', function (d, i, arr) {
          return i < arr.length - 1 ? '#fff' : 'none';
        }).attr('stroke-width', 2);
        this.parentItemsEnterTrans.select('.separator').attr('d', function (d) {
          return _line(d.value);
        }).attr('stroke', function (d, i, arr) {
          return i < arr.length - 1 ? '#fff' : 'none';
        });
        this.parentItemsTrans.select('.separator').attr('d', function (d) {
          return _line(d.value);
        }).attr('stroke', function (d, i, arr) {
          return i < arr.length - 1 ? '#fff' : 'none';
        });
        this.parentItemsExitTrans.style('opacity', 0);
        this.parentItems.merge(this.parentItemsEnter).sort(function (a, b) {
          return b.value[0].y0 - a.value[0].y0;
        });
      }

      var items = this.items.merge(this.itemsEnter);
      var breakpoints = items.raise().selectAll('.break-point').data(function (d) {
        return _this.config.showPoints && (d.value || d.value == 0) ? [d] : [];
      });
      breakpoints.exit().transition().style('opacity', 0).remove();
      var breakpointsEnter = breakpoints.enter().append('g').attr('class', 'break-point'); //dots to enlarge click area

      breakpointsEnter.append('circle').attr('r', '20').attr('opacity', 0);
      breakpointsEnter.append('circle').attr('class', 'dot');
      breakpointsEnter.attr('transform', function (d) {
        return "translate(".concat(_this.axes.x.func.scale()(d.id), ",").concat(_this.axes.y.func.scale()(d.y1 || d.value), ")");
      });
      this.itemsEnter.select('.break-point').attr('transform', function (d) {
        return "translate(".concat(_this.axes.x.func.scale()(d.id), ",").concat(_this.axes.y.func.scale()(d.y1 || d.value), ")");
      }).select('.dot').attr('fill', this.config.skin === 'light' ? SKIN_BACKGROUND : SKIN_BACKGROUND_DARK).attr('stroke', function (d) {
        return _this.color({
          id: d.parentId
        });
      }).attr('r', 0);
      this.itemsEnterTrans.select('.break-point').select('.dot').attr('r', 3);
      this.itemsTrans.select('.break-point').attr('transform', function (d) {
        return "translate(".concat(_this.axes.x.func.scale()(d.id), ",").concat(_this.axes.y.func.scale()(d.y1 || d.value), ")");
      }).select('.dot').attr('fill', this.config.skin === 'light' ? SKIN_BACKGROUND : SKIN_BACKGROUND_DARK).attr('stroke', function (d) {
        return _this.color({
          id: d.parentId
        });
      }).attr('r', 3);
      this.itemsExitTrans.select('.dot').attr('opacity', 0);
      var parentItems = this.parentItems.merge(this.parentItemsEnter);
      var lineLabels = parentItems.selectAll('.line-label').data(function (d) {
        return _this.config.showLineLabel ? [d] : [];
      });
      lineLabels.exit().transition().style('opacity', 0).remove();
      var lineLabelsEnter = lineLabels.enter().append('g').attr('class', 'line-label');
      lineLabelsEnter.append('text').attr('dominant-baseline', 'middle').style('font-weight', 'bold').style('font-size', '15px').text(function (d) {
        return d.id;
      });
      lineLabels = lineLabels.merge(lineLabelsEnter);
      lineLabels.selectAll('text').attr('fill', function (d) {
        return mapAccessibleColor(_this.color(d), _this.config.skin);
      });
      layoutLabels(lineLabels, function (d) {
        return _this.axes.y.func.scale()(d.value[d.value.length - 1].y1 || d.value[d.value.length - 1].value);
      });
      var x0 = max(this.data, function (d) {
        return max(d.value, function (dd) {
          return _this.axes.x.func.scale()(dd.id);
        });
      });
      x0 = Math.min(this.axes.x.func.scale().range()[1], x0) + 12;
      lineLabelsEnter.attr('transform', function () {
        return "translate(".concat(x0, ",").concat(this.y, ")");
      }).style('opacity', 0);
      lineLabels.transition().duration(1000).style('opacity', 1).attr('transform', function () {
        return "translate(".concat(x0, ",").concat(this.y, ")");
      }); //datum values

      var datumValues = this.itemsEnter.merge(this.items).select('.break-point').selectAll('.datum-value').data(function (d) {
        return _this.config.showDatumValues ? [d] : [];
      });
      this.itemsExit.select('.datum-value').transition().style('opacity', 0).remove();
      datumValues.exit().transition().style('opacity', 0).remove();
      datumValues = datumValues.merge(datumValues.enter().append('text').attr('class', 'datum-value').style('opacity', 0).style('font-size', '14px').style('font-weight', 'bold').attr('fill', 'currentColor'));
      datumValues // .text(d => this.formatValue(d.value, 'y'))
      .text(function (d) {
        return _this.valueWithUnit(d.value, 'y');
      }).transition().style('opacity', 1);
      datumValues.attr('text-anchor', 'middle').attr('x', 0).attr('y', -8);
    }
  }]);

  return LineChartChart;
}(BaseChart);

_defineProperty(LineChartChart, "defaultConfig", {
  /**
   * Type of curve. `smooth` curves will interpolate between the data poitns. `shapr` curves will be composed of straight line segments.
   */
  curve: {
    type: String,
    "default": 'smooth',
    options: ['smooth', 'sharp'],
    exposed: true
  },

  /**
   * Show/hide the data points that form each line.
   */
  showPoints: {
    type: Boolean,
    "default": true,
    exposed: true
  },
  showLineLabel: {
    type: Boolean,
    "default": false,
    exposed: true
  },
  showDatumValues: {
    type: Boolean,
    "default": false,
    exposed: true
  },
  gradientFill: {
    type: Boolean,
    "default": false,
    exposed: true
  },
  AxisHelper: {
    x: {
      getExtent: function getExtent(data) {
        if (this.axes.x.scale.type === 'scalePoint') return categoricalExtent(data);else return continuousExtent(data, function (d) {
          return d.id;
        });
      },
      getDataType: function getDataType(data) {
        var ticks = continuousExtentTicks(data, function (d) {
          return d.id;
        });
        if (ticks.every(function (n) {
          return n.getTime;
        })) return Date;else if (ticks.some(function (n) {
          return isNaN(Number(n)) || String(n).replaceAll(' ', '') !== String(n);
        })) return String;else return null;
      } // valueFormat: '[D]%d %b'

    },
    y: {
      getExtent: function getExtent(data) {
        var extent, extentParts;

        if (this.config.mode === 'lines') {
          extentParts = continuousExtentParts(data); // console.log("extent parts",extentParts)

          extent = continuousExtent(extentParts);
        } else {
          extentParts = continuousExtentParts(data, function (d) {
            return [d.y0, d.y1];
          }); // console.log("extent parts",extentParts)

          extent = continuousExtent(extentParts);
        }

        if (extent[0] == extent[1]) extent = padLinear(extent, 0.2);else if (this.config.AxisHelper.y.showTickValues && this.config.AxisHelper.y.unit) {
          extent = cleanCollisions(this.axes.y, extent, extentParts);
        }
        return extent; // if(originalExtent[0]>0) extent[0]=0
      }
    }
  }
});

_defineProperty(LineChartChart, "helpers", [RootHelper, ItemsHelper, SelectableHelper, SizeHelper, AxisHelper // {
//   class: AxisHelper,
//   config: {
//     x:{
//       getExtent: function (data){
//         let extent = continuousExtent(data,(d)=>d.id)
//         // if(this.getValueType('x')==='D' && this.config.AxisHelper.x.scale==='linear') extent = padLinear(extent,0.2)
//         return extent
//       },
//       // valueFormat: '[D]%d %b'
//     },
//     y:{
//       getExtent: function (data){
//         let extent,extentParts
//         if(this.config.mode==='lines'){
//           extentParts = continuousExtentParts(data)
//           // console.log("extent parts",extentParts)
//           extent = continuousExtent(extentParts)
//         } else {
//           extentParts = continuousExtentParts(data,(d)=>[d.y0,d.y1])
//           // console.log("extent parts",extentParts)
//           extent = continuousExtent(extentParts)
//         }
//         // extent = padLinear(extent,0.2)
//         extent = cleanCollisions(this.axes.y, extent, extentParts)
//         return extent
//         // if(originalExtent[0]>0) extent[0]=0
//       }
//     }
//   }
// },
]);

function LineChartDataController(rows) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var headers = rows[0];
  var propperHeaders = ['id'].concat(_toConsumableArray(headers.slice(1)));
  var data = convertRowsToData([propperHeaders].concat(_toConsumableArray(rows.slice(1))), 2);

  if (config.mode === 'areas') {
    var keys = data.reduce(function (res, d) {
      d.value.forEach(function (dd) {
        return res.push(dd.id);
      });
      return res;
    }, []);
    keys = keys.filter(function (value, index, self) {
      return self.indexOf(value) === index;
    });
    var objArray = data.map(function (layer) {
      var res = {
        id: layer.id
      };
      layer.value.forEach(function (dd) {
        res[dd.id] = dd.value;
      });
      return res;
    });
    var stack = d3_stack().value(function (d, key) {
      return d[key];
    }).keys(keys);
    var stacked = stack(objArray);
    var result = stacked.map(function (layer) {
      return {
        id: layer.key,
        index: layer.index,
        value: layer.map(function (dd) {
          return {
            id: dd.data.id,
            value: dd.data[layer.key],
            y0: dd[0],
            y1: dd[1],
            layerIndex: layer.index,
            isLastLayer: keys.indexOf(layer.key) === keys.length - 1,
            isFirstLayer: keys.indexOf(layer.key) === 0,
            parentId: layer.key
          };
        })
      };
    });
    return result;
  } else {
    var _keys = data.reduce(function (res, d) {
      d.value.forEach(function (dd) {
        return res.push(dd.id);
      });
      return res;
    }, []);

    _keys = _keys.filter(function (value, index, self) {
      return self.indexOf(value) === index;
    });
    console.log("keys", _keys);

    var res = _keys.map(function (key) {
      return {
        id: key,
        value: data.map(function (dd) {
          var cand = dd.value.find(function (ddd) {
            return ddd.id === key;
          });
          return {
            id: cand.parentId,
            parentId: cand.id,
            value: cand.value
          };
        })
      };
    });

    return res;
  }
}

var LineChartViz = /*#__PURE__*/function (_BaseViz) {
  _inherits(LineChartViz, _BaseViz);

  var _super = _createSuper(LineChartViz);

  function LineChartViz() {
    _classCallCheck(this, LineChartViz);

    return _super.apply(this, arguments);
  }

  return LineChartViz;
}(BaseViz);

_defineProperty(LineChartViz, "chartClass", LineChartChart);

_defineProperty(LineChartViz, "defaultConfig", {
  mode: {
    type: String,
    "default": 'lines',
    options: ['lines', 'areas']
  },
  ItemsHelper: {
    colorScale: {
      value: 'categorical',
      options: ['categorical'],
      nonEditable: true
    }
  },
  AxisHelper: {
    y: {
      trimThreshold: {
        nonEditable: true
      }
    },
    x: {
      trimThreshold: {
        nonEditable: true
      },
      showTickValues: {
        nonEditable: true
      }
    },
    zoomAxes: ['x']
  },
  TooltipBehavior: {
    getHtml: function getHtml(d) {
      return "\n        <div class=\"tip-value important\">".concat(this.valueWithUnit(d.value, 'y'), "</div>\n        <div class=\"tip-id\">\n          <span class=\"icon\" style=\"display: inline-block; width: 9px; height: 9px; border-radius: 50%; background: ").concat(this.color({
        id: d.parentId
      }), "; margin-right: 3px\"></span>\n          ").concat(d.parentId, "\n        </div>\n        <div class=\"secondary\">").concat(this.formatValue(d.id, 'x'), "</div>\n      ");
    }
  },
  LegendBehavior: {
    icon: 'line'
  }
});

_defineProperty(LineChartViz, "dataControllerClass", LineChartDataController);

/**
 * # {componentLabel} (`class {componentClassName}`)
 * A line chart or line plot or line graph or curve chart is a type of chart which displays information as a series of data points called 'markers' connected by straight line segments.
 * 
 * ### Example Usage
 * ```javascript
 *   
 *   import {LineChart} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new LineChart($el, data, config);
 *   
 * ```
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 2 or more columns. 
 * 
 * Each row represents a point in the X axis. The first column should be the id/label of each point. The rest of the columns should represent the values for each of the lines in the chart.
 * 
 * |  xValue    | line1  |  line2   |  line3   |
 * | --------   | ------ |  ------  |  ------  |
 * |   0       |    22.4|      15.4|      43.2|
 * |   1      |    52.3|      29.3|      12.8|
 * |   2      |    12.8|      34.1|      61.4|
 * |   3      |    26.0|      12.3|      14.5|
 * 
 * {.data-table}
 * 
 * */

var LineChartComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(LineChartComponent, _BaseComponent);

  var _super = _createSuper(LineChartComponent);

  function LineChartComponent() {
    _classCallCheck(this, LineChartComponent);

    return _super.apply(this, arguments);
  }

  return LineChartComponent;
}(BaseComponent);

_defineProperty(LineChartComponent, "vizClass", LineChartViz);

_defineProperty(LineChartComponent, "dataFormat", [{
  index: 0,
  axis: 'x0',
  label: 'id',
  types: [Number, String, Date],
  role: 'id',
  roleLabel: 'X value - Number, Date (dd-mm-yyyy) or String'
}, {
  index: -1,
  axis: 'y0',
  label: 'Line',
  types: [Number, null],
  role: 'value',
  roleLabel: 'Y value'
}]);

_defineProperty(LineChartComponent, "componentLabel", "Line chart");

_defineProperty(LineChartComponent, "defaultConfig", {
  title: LineChartComponent.componentLabel,
  ItemsHelper: {
    colorMode: 'stroke'
  }
});

/**
 * # {componentLabel} (`class {componentClassName}`)
 * A line chart or line plot or line graph or curve chart is a type of chart which displays information as a series of data points called 'markers' connected by straight line segments.
 *
 * ### Example Usage
 * ```javascript
 *
 *   import {StackedArea} from 'sdv-lib'
 *
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new StackedArea($el, data, config);
 *
 * ```
 *
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 2 or more columns.
 *
 * Each row represents a point in the X axis. The first column should be the id/label of each point. The rest of the columns should represent the values for each of the areas in the chart.
 *
 * |  xValue    | area1  |  area2   |  area3   |
 * | --------   | ------ |  ------  |  ------  |
 * |   0       |    22.4|      15.4|      43.2|
 * |   1      |    52.3|      29.3|      12.8|
 * |   2      |    12.8|      34.1|      61.4|
 * |   3      |    26.0|      12.3|      14.5|
 *
 * {.data-table}
 *
 * Areas will be stacked in the orther in which they appear in the table.
 *
 * */

var StackedAreaComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(StackedAreaComponent, _BaseComponent);

  var _super = _createSuper(StackedAreaComponent);

  function StackedAreaComponent() {
    _classCallCheck(this, StackedAreaComponent);

    return _super.apply(this, arguments);
  }

  return StackedAreaComponent;
}(BaseComponent);

_defineProperty(StackedAreaComponent, "vizClass", LineChartViz);

_defineProperty(StackedAreaComponent, "dataFormat", [{
  index: 0,
  axis: 'x0',
  label: 'id',
  types: [Number, Date],
  role: 'id',
  roleLabel: 'X value - Number or Date (dd-mm-yyyy)'
}, {
  index: -1,
  axis: 'y0',
  label: 'Line',
  types: [Number],
  role: 'value',
  roleLabel: 'Y value'
}]);

_defineProperty(StackedAreaComponent, "componentLabel", 'Area chart');

_defineProperty(StackedAreaComponent, "defaultConfig", {
  title: StackedAreaComponent.componentLabel,
  mode: 'areas',
  LegendBehavior: {
    icon: 'square'
  },
  ItemsHelper: {
    colorMode: 'fill'
  },
  gradientFill: {
    value: false,
    nonEditable: true
  }
});

/**
 * # {componentLabel} (`class {componentClassName}`)
 * The stacked bar chart is used to display values across two or more categorical variables. Each bar is divided into a number of sub-bars stacked end to end, each one corresponding to a level of the second categorical variable.
 * 
 * ### Example Usage
 * ```javascript
 *   
 *   import {StackedBars} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new StackedBars($el, data, config);
 *   
 * ```
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 3 or more columns.
 * 
 * Each row represents a stack. The first column should be the id/label of the stack, and the rest of the columns should represent each of the layers in the stack.
 * 
 * | category   | value1 |  value2  |  value3  |
 * | --------   | ------ |  ------  |  ------  |
 * |   Jan      |    22.4|      15.4|      43.2|
 * |   Feb      |    52.3|      29.3|      12.8|
 * |   Mar      |    12.8|      34.1|      61.4|
 * |   Apr      |    26.0|      12.3|      14.5|
 * 
 * {.data-table}
 * 
 * Each layer will be assigned a different color, to distinguish them inside of each stack. 
 *
 * */

var StackedBarsComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(StackedBarsComponent, _BaseComponent);

  var _super = _createSuper(StackedBarsComponent);

  function StackedBarsComponent() {
    _classCallCheck(this, StackedBarsComponent);

    return _super.apply(this, arguments);
  }

  return StackedBarsComponent;
}(BaseComponent);

_defineProperty(StackedBarsComponent, "vizClass", BarChartViz);

_defineProperty(StackedBarsComponent, "componentLabel", "Stacked Bar chart");

_defineProperty(StackedBarsComponent, "dataFormat", [{
  index: 0,
  axis: 'x0',
  types: [String],
  role: 'id',
  roleLabel: 'Category'
}, {
  index: -1,
  axis: 'y0',
  label: 'Stack',
  types: [Number, null],
  role: 'value',
  roleLabel: 'Stacked value'
}]);

_defineProperty(StackedBarsComponent, "defaultConfig", {
  title: StackedBarsComponent.componentLabel,
  mode: 'stacked',
  ItemsHelper: {
    colorScale: {
      value: 'categorical',
      options: ['categorical'],
      nonEditable: true
    }
  },

  /**
   * Show the TOTAL value on top of each stack.
   */
  showDatumValues: {
    type: Boolean,
    "default": false,
    exposed: true
  },
  AxisHelper: {
    y: {
      trimThreshold: {
        nonEditable: true
      }
    },
    x: {
      showTickValues: {
        nonEditable: true
      }
    }
  },
  TooltipBehavior: {
    getHtml: function getHtml(d) {
      return "\n        <div class=\"tip-value important\">".concat(this.valueWithUnit(d.value, 'y'), "</div>\n        <div class=\"tip-id\">\n          <span class=\"icon\" style=\"display: inline-block; width: 9px; height: 9px; border-radius: 50%; background: ").concat(this.color({
        id: d.parentId
      }), "; margin-right: 3px\"></span>\n          ").concat(d.parentId, "\n        </div>\n        <div class=\"secondary\">").concat(this.formatValue(d.id, 'x'), "</div>\n        ");
    }
  }
});

/**
 * # {componentLabel} (`class {componentClassName}`)
 * A paired column chart displays more than one data series in clustered vertical columns. Each data series shares the same axis labels, so vertical bars are grouped by category. Clustered columns allow the direct comparison of multiple series, but they become visually complex quickly.
 * 
 * ### Example Usage
 * ```javascript
 *   
 *   import {GroupedBars} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new GroupedBars($el, data, config);
 *   
 * ```
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 3 or more columns. 
 * 
 * Each row represents a group. The first column should be the id/label of the group, and the rest of the columns should represent each of the values of the bars in each group.
 * 
 * | category   | value1 |  value2  |  value3  |
 * | --------   | ------ |  ------  |  ------  |
 * |   Jan      |    22.4|      15.4|      43.2|
 * |   Feb      |    52.3|      29.3|      12.8|
 * |   Mar      |    12.8|      34.1|      61.4|
 * |   Apr      |    26.0|      12.3|      14.5|
 * 
 * {.data-table}
 * 
 * Each column will be assigned a different color, to distinguish them inside of each group.
 *
 */

var GroupedBarsComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(GroupedBarsComponent, _BaseComponent);

  var _super = _createSuper(GroupedBarsComponent);

  function GroupedBarsComponent() {
    _classCallCheck(this, GroupedBarsComponent);

    return _super.apply(this, arguments);
  }

  return GroupedBarsComponent;
}(BaseComponent);

_defineProperty(GroupedBarsComponent, "vizClass", BarChartViz);

_defineProperty(GroupedBarsComponent, "componentLabel", "Grouped Bar chart");

_defineProperty(GroupedBarsComponent, "dataFormat", [{
  index: 0,
  axis: 'x0',
  types: [String],
  role: 'id',
  roleLabel: 'Category'
}, {
  index: -1,
  axis: 'y0',
  types: [Number, null],
  role: 'value',
  roleLabel: 'Group value'
}]);

_defineProperty(GroupedBarsComponent, "defaultConfig", {
  title: GroupedBarsComponent.componentLabel,
  mode: 'grouped',
  ItemsHelper: {
    colorScale: {
      value: 'categorical',
      options: ['categorical'],
      nonEditable: true
    }
  },
  AxisHelper: {
    x: {
      showTickValues: {
        nonEditable: true
      }
    }
  },
  TooltipBehavior: {
    getHtml: function getHtml(d) {
      return "\n        <div class=\"tip-value important\">".concat(this.valueWithUnit(d.value, 'y'), "</div>\n        <div class=\"tip-id\">\n          <span class=\"icon\" style=\"display: inline-block; width: 9px; height: 9px; border-radius: 50%; background: ").concat(this.color({
        id: d.parentId
      }), "; margin-right: 3px\"></span>\n          ").concat(d.parentId, "\n        </div>\n        <div class=\"secondary\">").concat(this.formatValue(d.id, 'x'), "</div>");
    }
  } // ItemsHelper: {
  //   colorScale: (d)=>{
  //     if(d.id==='X') return '#f00'
  //     else if (d.id==='Y') return '#0f0'
  //     else if (d.id==='Z') return '#00f'
  //     else return '#222'
  //   }
  // }

});

var PieChartChart = /*#__PURE__*/function (_BaseChart) {
  _inherits(PieChartChart, _BaseChart);

  var _super = _createSuper(PieChartChart);

  function PieChartChart() {
    _classCallCheck(this, PieChartChart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _super.call.apply(_super, [this].concat(args));
  }

  _createClass(PieChartChart, [{
    key: "beforeHelpers",
    value: function beforeHelpers() {// this.content = this.root.selectAll('.content').data([null])
      // this.content = this.content.merge(this.content.enter().append('g').attr('class','content'))
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this = this;

      function findNeighborArc(i, data0, data1, key, backward) {
        var d;

        if (!backward) {
          /* eslint-disable no-cond-assign */
          return (d = findPreceding(i, data0, data1, key)) ? {
            startAngle: d.endAngle,
            endAngle: d.endAngle
          }
          /* eslint-disable no-cond-assign */
          // : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}
          // : null;
          : {
            startAngle: 0,
            endAngle: 0
          };
        } else {
          return (d = findFollowing(i, data0, data1, key)) ? {
            startAngle: d.startAngle,
            endAngle: d.startAngle
          }
          /* eslint-disable no-cond-assign */
          // :(d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle} /* eslint-disable no-cond-assign */ 
          // : null;
          : {
            startAngle: 2 * Math.PI,
            endAngle: 2 * Math.PI
          };
        }
      } // Find the element in data0 that joins the highest preceding element in data1.


      function findPreceding(i, data0, data1, key) {
        var m = data0.length;

        while (--i >= 0) {
          var k = key(data1[i]);

          for (var j = 0; j < m; ++j) {
            if (key(data0[j]) === k) return data0[j];
          }
        }
      } // Find the element in data0 that joins the lowest following element in data1.


      function findFollowing(i, data0, data1, key) {
        var n = data1.length,
            m = data0.length;

        while (++i < n) {
          var k = key(data1[i]);

          for (var j = 0; j < m; ++j) {
            if (key(data0[j]) === k) return data0[j];
          }
        }
      } // Store the displayed angles in _current.
      // Then, interpolate from _current to the new angles.
      // During the transition, _current is updated in-place by d3_interpolate.


      function arcTween(a) {
        var i = d3_interpolate(this._current, a);
        this._current = i(0);
        return function (t) {
          return arc(i(t));
        };
      }

      function key(d) {
        return d && d.data && d.data.id;
      }

      var radius = 0.9 * Math.min(this.size.width / 2, this.size.height / 2);
      if (this.config.showLabels) radius = radius - 30;
      var innerRadius = this.config.mode === 'donut' ? 0.7 * radius : 0.01 * radius;
      var arc = d3_arc().innerRadius(innerRadius).outerRadius(radius);
      this._arc = arc;
      this.content.attr('transform', "translate(".concat(this.size.width / 2, ",").concat(this.size.height / 2, ")"));
      this.itemsEnter.append('path');
      var data0 = this._prevData || this.data;
      var data1 = this.data;
      this.itemsEnter.select('path').attr('fill', function (d) {
        return _this.color(d.data);
      }).each(function (d, i) {
        if (data0 === data1) this._current = {
          startAngle: 0,
          endAngle: 0
        };else this._current = findNeighborArc(i, data0, data1, key) || d;
      }).attr('d', function () {
        return arc(this._current);
      });
      this.itemsEnterTrans.delay(0).select('path').attr('fill', function (d) {
        return _this.color(d.data);
      }).attrTween("d", arcTween);
      this.itemsTrans.select('path').attr('fill', function (d) {
        return _this.color(d.data);
      }).attrTween("d", arcTween);
      this.itemsExitTrans.style('opacity', 0).select('path').attrTween("d", function (d, i) {
        return arcTween.call(this, findNeighborArc(i, data1, data0, key, true) || d);
      }); // this.itemsExit.datum(function(d, i) { return findNeighborArc(i, data1, data0, key) || d; })
      // this.itemsExitTrans.select('path').attrTween("d", arcTween)
      // CENTRAL VALUE

      var self = this;
      var fontSize = 28;
      var centerValue = d3_select(this.$root).selectAll('.center-value').data(this.config.mode === 'donut' && this.config.centerValue ? [null] : []);
      var centerValueEnter = centerValue.enter().append('text').attr('class', 'center-value').style('opacity', 0);
      var centerValueValue = this.config.centerValue === true ? this.data.reduce(function (sum, dd) {
        return sum + dd.data.value;
      }, 0) : this.config.centerValue || null;
      centerValue.exit().transition().style('opacity', 0).remove();
      centerValue = centerValue.merge(centerValueEnter);
      centerValue.attr('transform', "translate(".concat(this.size.width / 2, ",").concat(this.size.height / 2, ")")).attr('fill', 'currentColor').attr('font-size', fontSize).attr('font-family', 'santander-microtext-embedded').attr('text-anchor', 'middle').attr('dy', '0.36em'); // this.formatValue(this.data.reduce((sum,d)=>sum+d.value,0))
      // centerValueEnter.text(this.formatValue(centerValueValue))

      if (centerValue.node()) {
        var l = centerValue.node().getComputedTextLength();

        while (l > 1.8 * innerRadius && fontSize > 10) {
          fontSize = fontSize - 1;
          centerValue.attr('font-size', fontSize);
          l = centerValue.node().getComputedTextLength();
        }
      }

      centerValueEnter.text('');
      centerValue.transition().duration(this._transitionDuration).textTween(function () {
        var i = d3_interpolate(this._current || 0, centerValueValue);
        return function (t) {
          return self.valueWithUnit(this._current = i(t));
        };
      }).style('opacity', 1); // LABELS
      // this.itemsEnter.selectAll('.label').data([null]).enter().append('g').attr('class','label')

      var labels = this.items.merge(this.itemsEnter).selectAll('.label').data(function (d) {
        return _this.config.showLabels ? [d] : [];
      });
      var labelsEnter = labels.enter().append('g').attr('class', 'label');
      labels.exit().attr('opacity', 0).remove();
      this.itemsExitTrans.select('.label').attr('opacity', 0);
      var r0 = radius * 0.1,
          dr = radius * 0.2,
          dh = radius * 0.1;
      labelsEnter.append('path').attr('stroke', 'currentColor').attr('fill', 'none');
      labelsEnter.append('text').attr('fill', 'currentColor').text(function (d) {
        return d.id;
      }).attr('alignment-baseline', 'middle').attr('font-size', '14').attr('font-family', 'santander-microtext-embedded');

      var outerCentroid = function outerCentroid(d) {
        var angle = d.startAngle + (d.endAngle - d.startAngle) / 2 - Math.PI / 2;
        return [Math.cos(angle) * radius, Math.sin(angle) * radius];
      };

      var labelPath = function labelPath(d) {
        // let center = this._arc.centroid(d)
        var angle = d.startAngle + (d.endAngle - d.startAngle) / 2 - Math.PI / 2;
        var center = outerCentroid(d);
        var sign = center[0] > 0 ? 1 : -1;
        var start = [center[0] + Math.cos(angle) * r0, center[1] + Math.sin(angle) * r0];
        var joint = [center[0] + Math.cos(angle) * dr, center[1] + Math.sin(angle) * dr];
        var end = [joint[0] + sign * dh, joint[1]];
        return "M ".concat(start, " L ").concat(joint, " L ").concat(end);
      };

      var labelTextAnchor = function labelTextAnchor(d) {
        // let center = this._arc.centroid(d)
        var center = outerCentroid(d);
        var sign = center[0] > 0 ? 1 : -1;
        return sign < 0 ? 'end' : 'start';
      };

      var labelTransform = function labelTransform(d) {
        // let center = this._arc.centroid(d)
        var center = outerCentroid(d);
        var angle = d.startAngle + (d.endAngle - d.startAngle) / 2 - Math.PI / 2;
        var sign = center[0] > 0 ? 1 : -1; // let start = [center[0]+Math.cos(angle)*r0,center[1]+Math.sin(angle)*r0]

        var joint = [center[0] + Math.cos(angle) * dr, center[1] + Math.sin(angle) * dr];
        var end = [joint[0] + sign * dh * 1.2, joint[1]];
        return "translate(".concat(end, ")");
      };

      function pathTween(a) {
        var i = d3_interpolate(this._current, a);
        this._current = i(0);
        return function (t) {
          return labelPath(i(t));
        };
      }

      function transTween(a) {
        var i = d3_interpolate(this._current, a);
        this._current = i(0);
        return function (t) {
          return labelTransform(i(t));
        };
      }

      labelsEnter.attr('opacity', 0);
      labelsEnter.select('path').attr('d', labelPath);
      labelsEnter.select('text').attr('text-anchor', labelTextAnchor).attr('transform', labelTransform);
      var labelsTrans = labels.merge(labelsEnter).transition().duration(1000);
      labelsTrans.attr('opacity', 1);
      labelsTrans.select('path') // .attr('d', labelPath)
      .attrTween('d', pathTween);
      labelsTrans.select('text').attr('text-anchor', labelTextAnchor) // .attr('transform', labelTransform)
      .attrTween('transform', transTween);
    }
  }]);

  return PieChartChart;
}(BaseChart);

_defineProperty(PieChartChart, "defaultConfig", {
  mode: {
    type: String,
    "default": 'pie',
    options: ['pie', 'donut'],
    exposed: false
  },

  /**
   * If set, all values smaller than this threshold will be grouped in a single sector labeled "Others".
   */
  groupOthersThreshold: {
    type: Number,
    "default": 0,
    exposed: true
  },

  /**
   * If set to `true`, sector values will be show as a percentage of the total.
   */
  showPercentage: {
    type: Boolean,
    "default": true,
    exposed: true
  },

  /**
   * If a value is set, it will be displayed in the center of the donut. If set to `true`, the total sum of the sector values will be displayed.
   */
  centerValue: {
    type: [Boolean, Number, String],
    "default": true,
    exposed: true
  },

  /**
   * If set, all sectors will span at lease this angle. Usefull if some values are too small to be seen.
   */
  minSectorAngle: {
    type: Number,
    "default": 0,
    exposed: true
  },

  /**
   * Show/hide labels for each sector.
   */
  showLabels: {
    type: Boolean,
    "default": true,
    exposed: true
  },
  TooltipBehavior: {
    getHtml: function getHtml(d) {
      var _this2 = this;

      if (d.data.othersData) {
        var datas = d.data.othersData;
        var html = datas.map(function (dd) {
          return "\n            <div class=\"tip-value important\">".concat(_this2.valueWithUnit(dd.value), "</div>\n            <div class=\"tip-id\">\n              <span class=\"icon\" style=\"display: inline-block; width: 9px; height: 9px; border-radius: 50%; background: ").concat(_this2.color({
            id: dd.id
          }), "; margin-right: 3px\"></span>\n              ").concat(dd.id, "\n            </div>\n            ").concat(_this2.config.showPercentage ? '<div class="secondary">' + dd.percent + '%</div>' : '', "\n            ");
        });
        return html.join('<br/>');
      } else {
        return "\n          <div class=\"tip-value important\">".concat(this.valueWithUnit(d.data.value), "</div>\n          <div class=\"tip-id\">\n            <span class=\"icon\" style=\"display: inline-block; width: 9px; height: 9px; border-radius: 50%; background: ").concat(this.color({
          id: d.id
        }), "; margin-right: 3px\"></span>\n            ").concat(d.id, "\n          </div>\n          ").concat(this.config.showPercentage ? '<div class="secondary">' + d.data.percent + '%</div>' : '', "\n          ");
      }
    },
    getItemOffset: function getItemOffset($el, d) {
      var parentRect = this.root.node().getBoundingClientRect();

      var center = this._arc.centroid(d); // console.log(parentRect,center)


      return {
        x: parentRect.x + parentRect.width / 2 + center[0],
        y: parentRect.y + parentRect.height / 2 + center[1]
      };
    }
  }
});

_defineProperty(PieChartChart, "helpers", [RootHelper, ItemsHelper, SelectableHelper, SizeHelper]);

function PieDataController(rows, config) {
  var propperHeaders = ['id', 'value'];
  var data = convertRowsToData([propperHeaders].concat(_toConsumableArray(rows.slice(1))), 1);
  var total = data.reduce(function (sum, d) {
    return sum + +d.value;
  }, 0);
  data = data.map(function (d) {
    var percent = Math.floor(100 * d.value / total);
    if (percent < 1) percent = '<1';
    return _objectSpread2(_objectSpread2({}, d), {}, {
      percent: percent
    });
  });

  if (config.groupOthersThreshold > 0) {
    var threshold = total * config.groupOthersThreshold / 100;
    var others = data.filter(function (d) {
      return d.value <= threshold;
    });
    var notOthers = data.filter(function (d) {
      return d.value > threshold;
    });

    if (others.length > 1) {
      data = notOthers.concat([{
        id: 'Others',
        value: others.reduce(function (sum, d) {
          return sum + +d.value;
        }, 0),
        othersData: others
      }]);
    }
  }

  var minAngle = config.minSectorAngle ? config.minSectorAngle / 180 * Math.PI : 0;
  var minValue = minAngle * total / (2 * Math.PI);
  var pie = d3_pie().value(function (d) {
    return Math.max(d.value, minValue);
  }).padAngle(.02).sort(null);
  var res = pie(data);
  res.forEach(function (d) {
    return d.id = d.data.id;
  });
  return res; // return data.map((d,i)=>{
  //   if(!d.id) d.id = i
  //   return d
  // })
}

var PieChartViz = /*#__PURE__*/function (_BaseViz) {
  _inherits(PieChartViz, _BaseViz);

  var _super = _createSuper(PieChartViz);

  function PieChartViz() {
    _classCallCheck(this, PieChartViz);

    return _super.apply(this, arguments);
  }

  return PieChartViz;
}(BaseViz);

_defineProperty(PieChartViz, "chartClass", PieChartChart);

_defineProperty(PieChartViz, "dataControllerClass", PieDataController);

_defineProperty(PieChartViz, "defaultConfig", {
  LegendBehavior: {
    showLegend: {
      value: false
    }
  },
  ItemsHelper: {
    colorScale: {
      value: 'categorical',
      options: ['categorical'],
      nonEditable: true
    }
  },
  valueFormat: {
    type: [String, Array, Function, null],
    "default": null
  },
  unit: {
    type: [String, Boolean, null],
    "default": false
  }
});

/**
 * # {componentLabel} (`class {componentClassName}`)
 * 
 * A pie chart is a circular statistical graphic, which is divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice is proportional to the quantity it represents.
 * 
 * ### Example Usage
 * ```javascript
 * 
 *   import {DonutChart} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new DonutChart($el, data, config);
 * ```
 * 
 * This class is only intended to draw simple Pie charts. For regular [Donut Chart](#/developer/DonutChartComponent)s see the corresponding documentation.
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 2 columns. Each row represents a sector: the first column should be the id/label of the sector, and the second column its value.
 *  
 * | category | value  |
 * | -------- | ------ |
 * |   a      |    22.4|
 * |   b      |    52.3|
 * |   c      |    12.8|
 * |   d      |    26.0|
 * 
 * {.data-table}
 * */

var PieChartComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(PieChartComponent, _BaseComponent);

  var _super = _createSuper(PieChartComponent);

  function PieChartComponent() {
    _classCallCheck(this, PieChartComponent);

    return _super.apply(this, arguments);
  }

  return PieChartComponent;
}(BaseComponent);

_defineProperty(PieChartComponent, "vizClass", PieChartViz);

_defineProperty(PieChartComponent, "componentLabel", "Pie chart");

_defineProperty(PieChartComponent, "dataFormat", [{
  index: 0,
  axis: '',
  types: [String],
  role: 'id',
  roleLabel: 'Category'
}, {
  index: 1,
  axis: '',
  types: [Number],
  role: 'value',
  roleLabel: 'Value'
}]);

_defineProperty(PieChartComponent, "defaultConfig", {
  title: PieChartComponent.componentLabel,
  mode: 'pie',
  centerValue: {
    nonEditable: true
  }
});

var MAX_BAR_WIDTH$1 = 40;

var LineAndBarChartChart = /*#__PURE__*/function (_BaseChart) {
  _inherits(LineAndBarChartChart, _BaseChart);

  var _super = _createSuper(LineAndBarChartChart);

  function LineAndBarChartChart() {
    var _this;

    _classCallCheck(this, LineAndBarChartChart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.zeroBased = true;
    return _this;
  }

  _createClass(LineAndBarChartChart, [{
    key: "checkConsistency",
    value: function checkConsistency() {
      return true;
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this2 = this;

      var getTranslate = function getTranslate(_long, _short) {
        return "translate(".concat(_long, ",").concat(_short, ")");
      };

      var linesScale = this.axes.y_0.func.scale();
      var barsScale = this.axes.y_1.func.scale();
      var xScale = this.axes.x.func.scale();
      var offsetValue;
      if (barsScale.domain()[0] < 0 && barsScale.domain()[1] > 0) offsetValue = 0;else offsetValue = barsScale.domain()[0];

      var getOffset = function getOffset(v) {
        return Math.min(v, barsScale(offsetValue));
      };

      var getShort = function getShort(v) {
        return Math.abs(barsScale(offsetValue) - v);
      };

      var barPercent = 0.7; // let barWidth = xScale.bandwidth()*barPercent
      // let barMargin = xScale.bandwidth()*(1-barPercent)/2

      var barWidth = Math.min(MAX_BAR_WIDTH$1, xScale.bandwidth() * barPercent);
      var barMargin = (xScale.bandwidth() - barWidth) / 2; // this.barsItemsEnter.append('rect')

      this.barsItemsEnter.append('path');
      this.barsItemsEnter.attr('transform', function (d) {
        return getTranslate(xScale(d.id) + barMargin, getOffset(barsScale(0)));
      }).select('path').attr('fill', function (d) {
        return _this2.color(d, 1);
      }).attr('d', function (d) {
        var w =  barWidth ;
        var h =  0 ;
        var dent =  d.value > 0 ? ['tl', 'br'] : 'bl' ;
        return dentedRect(w, h, dent);
      });
      this.barsItemsEnterTrans.attr('transform', function (d) {
        return getTranslate(xScale(d.id) + barMargin, getOffset(barsScale(d.value)));
      }).select('path').attr('d', function (d) {
        var w =  barWidth ;
        var h =  getShort(barsScale(d.value)) ;
        var dent =  d.value > 0 ? ['tl', 'br'] : 'bl' ;
        return dentedRect(w, h, dent);
      });
      this.barsItems.lower();
      this.barsItemsTrans.attr('transform', function (d) {
        return getTranslate(xScale(d.id) + barMargin, getOffset(barsScale(d.value)));
      }) // this.barsItems.select('rect').transition()
      //   .attr(longDir,()=>barWidth)
      //   .attr(shortDir,(d)=> getShort(barsScale(d.value)))
      //   .attr('fill',(d)=>this.color(d))
      .select('path').attr('fill', function (d) {
        return _this2.color(d, 1);
      }).attr('d', function (d) {
        var w =  barWidth ;
        var h =  getShort(barsScale(d.value)) ;
        var dent =  d.value > 0 ? ['tl', 'br'] : 'bl' ;
        return dentedRect(w, h, dent);
      });
      this.barsItemsExitTrans.style('opacity', 0); // BAR DATUMS LABELS

      var datumValues = this.barsItemsEnter.merge(this.barsItems).selectAll('.datum-value').data(function (d) {
        return _this2.config.showBarDatumValues ? [d] : [];
      });
      datumValues.exit().transition().style('opacity', 0).remove();
      datumValues = datumValues.merge(datumValues.enter().append('text').attr('class', 'datum-value').style('opacity', 0).style('font-size', '14px').style('font-weight', 'bold').attr('fill', 'currentColor'));
      datumValues.text(function (d) {
        return _this2.formatValue(d.value, 'y_1');
      }).transition().style('opacity', 1);
      datumValues.attr('text-anchor', 'middle').attr('x', barWidth / 2).attr('y', -8); ///////////////LINES//////////

      var line = d3_line().curve(this.config.curve === 'smooth' ? d3_curveCardinal : d3_curveLinear).x(function (d) {
        return xScale(d.id) + barMargin + barWidth / 2;
      }).y(function (d) {
        return linesScale(d.value);
      });
      var self = this;
      this.linesParentItemsEnter.append('path').attr('class', 'ghost-path').attr('fill', 'none').attr('stroke-width', '3px').attr('stroke', this.config.skin === 'light' ? SKIN_BACKGROUND : SKIN_BACKGROUND_DARK).attr('d', function (d) {
        return line(d.value);
      }).style('opacity', 0);
      this.linesParentItemsEnter.append('path').attr('class', 'real-path').attr('fill', 'none').attr('stroke', function (d) {
        return _this2.color(d, 0);
      }).attr('d', function (d) {
        return line(d.value);
      }).each(function () {
        this._totalLength = this.getTotalLength();
      }).attr('stroke-dasharray', function (d) {
        var dashing = self.strokeDasharray(d);
        if (dashing === 'none') dashing = '1 0';
        var dashLength = dashing.split(/[\s,]/).map(function (a) {
          return parseFloat(a) || 0;
        }).reduce(function (a, b) {
          return a + b;
        });
        var dashCount = Math.ceil(this._totalLength / dashLength);
        var newDashes = new Array(dashCount).join(dashing + ' ');
        var dashArray = newDashes + ' 0, ' + this._totalLength;
        return dashArray;
      }).attr('stroke-dashoffset', function () {
        return this._totalLength;
      });
      this.linesParentItemsEnterTrans.select('.ghost-path').style('opacity', 1);
      this.linesParentItemsEnterTrans.select('.real-path').attr('stroke-dashoffset', 0);
      this.linesParentItems.select('.real-path').attr('stroke-dasharray', 'none');
      this.linesParentItemsTrans.select('.real-path').attr('stroke-dasharray', function (d) {
        return _this2.strokeDasharray(d, 0);
      });
      this.linesParentItemsTrans.select('.real-path').attr('stroke', function (d) {
        return _this2.color(d, 0);
      });
      this.linesParentItemsTrans.select('.real-path').attr('d', function (d) {
        return line(d.value);
      });
      this.linesParentItemsTrans.select('.ghost-path').attr('d', function (d) {
        return line(d.value);
      }).attr('stroke', this.config.skin === 'light' ? SKIN_BACKGROUND : SKIN_BACKGROUND_DARK);
      this.linesParentItemsExitTrans.style('opacity', 0);
      this.linesParentItems.merge(this.linesParentItemsEnter).raise(); // NO ESTA BIEN AUN...

      var linesItems = this.linesItems.merge(this.linesItemsEnter);
      var breakpoints = linesItems.raise().selectAll('.break-point').data(function (d) {
        return _this2.config.showPoints && (d.value || d.value == 0) ? [d] : [];
      });
      breakpoints.exit().transition().style('opacity', 0).remove();
      var breakpointsEnter = breakpoints.enter().append('g').attr('class', 'break-point'); //dots to enlarge click area
      //breakpointsEnter.append('circle').attr('r', '20').attr('opacity', 0)

      breakpointsEnter.append('circle').attr('class', 'dot');
      breakpointsEnter.attr('transform', function (d) {
        return "translate(".concat(xScale(d.id) + barMargin + barWidth / 2, ",").concat(linesScale(d.value), ")");
      });
      this.linesItemsEnter.select('.break-point').attr('transform', function (d) {
        return "translate(".concat(xScale(d.id) + barMargin + barWidth / 2, ",").concat(linesScale(d.value), ")");
      }).select('.dot').attr('fill', this.config.skin === 'light' ? SKIN_BACKGROUND : SKIN_BACKGROUND_DARK).attr('stroke', function (d) {
        return _this2.color({
          id: d.parentId
        }, 0);
      }).attr('r', 0);
      this.linesItemsEnterTrans.select('.break-point').select('.dot').attr('r', 3);
      this.linesItemsTrans.select('.break-point').attr('transform', function (d) {
        return "translate(".concat(xScale(d.id) + barMargin + barWidth / 2, ",").concat(linesScale(d.value), ")");
      }).select('.dot').attr('fill', this.config.skin === 'light' ? SKIN_BACKGROUND : SKIN_BACKGROUND_DARK).attr('stroke', function (d) {
        return _this2.color({
          id: d.parentId
        }, 0);
      }).attr('r', 3);
      this.linesItemsExitTrans.select('.dot').attr('opacity', 0); // LINES DATUMS LABELS

      var lineDatumValues = breakpointsEnter.merge(breakpoints).selectAll('.line-datum-value').data(function (d) {
        return _this2.config.showLineDatumValues ? [d] : [];
      });
      lineDatumValues.exit().transition().style('opacity', 0).remove();
      lineDatumValues = lineDatumValues.merge(lineDatumValues.enter().append('text').attr('class', 'line-datum-value').style('opacity', 0).style('font-size', '14px').style('font-weight', 'bold').attr('fill', 'currentColor'));
      lineDatumValues.text(function (d) {
        return _this2.formatValue(d.value, 'y_0');
      }).transition().style('opacity', 1);
      lineDatumValues.attr('text-anchor', 'middle').attr('x', 0).attr('y', -12);
    }
  }, {
    key: "getLegendData",
    value: function getLegendData() {
      var legendData = {
        lines: _toConsumableArray(this.data.lines),
        bars: _toConsumableArray(this.data.bars)
      };
      legendData.lines.icon = 'line';
      legendData.bars.icon = 'square';
      return legendData;
    }
  }]);

  return LineAndBarChartChart;
}(BaseChart);

_defineProperty(LineAndBarChartChart, "defaultConfig", {
  /**
   * Type of curve. `smooth` curves will interpolate between the data poitns. `shapr` curves will be composed of straight line segments.
   */
  curve: {
    type: String,
    "default": 'smooth',
    options: ['smooth', 'sharp'],
    exposed: true
  },

  /**
   * Show/hide the data points that form each line.
   */
  showPoints: {
    type: Boolean,
    "default": true,
    exposed: true
  },

  /**
   * Show the value on top of each bar.
   */
  showBarDatumValues: {
    type: Boolean,
    "default": false,
    exposed: true
  },

  /**
   * Show the value of each point in the line.
   */
  showLineDatumValues: {
    type: Boolean,
    "default": false,
    exposed: true
  },
  ItemsHelper: {
    colorScale: {
      value: ['categorical', 'categorical'],
      multiValueIds: ['lines', 'bars']
    },
    colorMode: {
      value: ['stroke', 'fill'],
      multiValueIds: ['lines', 'bars']
    },
    colorDict: {
      value: [null, null],
      multiValueIds: ['lines', 'bars']
    }
  },
  AxisHelper: {
    x: {
      scale: 'band',
      getExtent: function getExtent(data) {
        return categoricalExtent(data.bars); //data.bars.map((d)=>d.id)
      }
    },
    y: {
      getExtent: function getExtent(data, dimLabel) {
        // "TIENEN QUE MATCHEAR LAS "SCALES""....
        var extent, extentParts;

        if (dimLabel === 'y_lines') {
          extent = d3_extent(data.lines.reduce(function (res, d) {
            return res.concat(d3_extent(d.value, function (dd) {
              return dd.value;
            }));
          }, []));
          extentParts = continuousExtentParts(data.lines); // console.log("line extent bef",extent)

          if (this.config.AxisHelper.y.showTickValues && this.config.AxisHelper.y.unit) {
            extent = cleanCollisions(this.axes.y_0, extent, extentParts); // NOSE COMO adaptar el cleancollisions para que mire en el "otro axis"...

            extent = cleanCollisions(this.axes.y_1, extent, extentParts); // console.log("line extent aft",extent)
          }
        } else if (dimLabel === 'y_bars') {
          extentParts = data.bars.map(function (d) {
            return {
              value: [d, d]
            };
          });
          extent = continuousExtent(data.bars); // console.log("bar extent bef",extent)

          if (this.config.AxisHelper.y.showTickValues && this.config.AxisHelper.y.unit) {
            extent = cleanCollisions(this.axes.y_1, extent, extentParts); // NOSE COMO adaptar el cleancollisions para que mire en el "otro axis"...

            extent = cleanCollisions(this.axes.y_0, extent, extentParts); // console.log("bar extent aft",extent)
          }
        }

        return extent;
      },
      dimensions: 'line-and-bar',
      valueFormat: {
        value: ['[N]0.0', '[N]0.0'],
        multiValueIds: ['lines', 'bars']
      },
      unit: {
        value: ['line units', 'bar units'],
        multiValueIds: ['lines', 'bars']
      },
      tickOrientation: {
        value: ['horizontal', 'horizontal'],
        multiValueIds: ['lines', 'bars']
      }
    }
  },
  TooltipBehavior: {
    itemsKeys: ['linesItems', 'barsItems'],
    getItemOffset: function getItemOffset($el) {
      var original = $el.getBoundingClientRect();
      return {
        x: original.x + original.width / 2,
        y: original.top //- 5

      };
    },
    getHtml: function getHtml(d, itemsKey) {
      console.log('should use onAxis', itemsKey);
      var onAxis = itemsKey === 'linesItems' ? 'y_0' : 'y_1';

      if (itemsKey === 'linesItems') {
        return "\n            <div class=\"tip-value important\">".concat(this.valueWithUnit(d.value, onAxis), "</div>\n            <div class=\"tip-id\">\n              <span class=\"icon\" style=\"display: inline-block; width: 9px; height: 9px; border-radius: 50%; background: ").concat(this.color({
          id: d.parentId
        }, 0), "; margin-right: 3px\"></span>\n              ").concat(d.parentId, "\n            </div>\n            <div class=\"secondary\">").concat(this.formatValue(d.id, 'x'), "</div>\n            ");
      } else {
        return "\n            <div class=\"tip-value important\">".concat(this.valueWithUnit(d.value, onAxis), "</div>\n            <div class=\"tip-id\">\n              <span class=\"icon\" style=\"display: inline-block; width: 9px; height: 9px; border-radius: 50%; background: ").concat(this.color({
          id: d.id
        }, 1), "; margin-right: 3px\"></span>\n              ").concat(d.id, "\n            </div>\n            ");
      }
      /*return `
        <span class="important">${this.valueWithUnit(d.value, onAxis)}</span>
        <br/>
        ${d.id}
      `*/

    }
  }
});

_defineProperty(LineAndBarChartChart, "helpers", [RootHelper, ItemsHelper, // {
//   class: ItemsHelper,
//   config:{
//     colorScale: {
//       value: ['categorical','categorical'],
//       multiValueIds: ['lines','bars']
//     },
//     colorMode: {
//       value: ['stroke','fill'],
//       multiValueIds: ['lines','bars']
//     },
//     colorDict: {
//       value: [null,null],
//       multiValueIds: ['lines','bars']
//     }
//   }
// },
SelectableHelper, SizeHelper, AxisHelper // {
//   class: AxisHelper,
//   config: {
//     x:{
//       scale: 'band',
//       getExtent: function (data){
//         return categoricalExtent(data.bars) //data.bars.map((d)=>d.id)
//       }
//     },
//     y:{
//       getExtent: function (data,dimLabel){
//         // "TIENEN QUE MATCHEAR LAS "SCALES""....
//         let extent,extentParts
//         if(dimLabel === 'y_lines') {
//           extent = d3_extent(data.lines.reduce((res,d)=>res.concat(d3_extent(d.value,(dd)=>dd.value)),[]))
//           extentParts = continuousExtentParts(data.lines)
//           // console.log("line extent bef",extent)
//           extent = cleanCollisions(this.axes.y_0, extent, extentParts)
//           // NOSE COMO adaptar el cleancollisions para que mire en el "otro axis"...
//           extent = cleanCollisions(this.axes.y_1, extent, extentParts)
//           // console.log("line extent aft",extent)
//         } else if(dimLabel === 'y_bars') {
//           extentParts = data.bars.map((d)=>({value:[d,d]}))
//           extent = continuousExtent(data.bars)
//           // console.log("bar extent bef",extent)
//           extent = cleanCollisions(this.axes.y_1, extent, extentParts)
//           // NOSE COMO adaptar el cleancollisions para que mire en el "otro axis"...
//           extent = cleanCollisions(this.axes.y_0, extent, extentParts)
//           // console.log("bar extent aft",extent)
//         }
//         return extent
//       },
//       dimensions: 'line-and-bar',
//       valueFormat: {
//         value: ['[N]0.0','[N]0.0'],
//         multiValueIds: ['lines','bars']
//       },
//       unit: {
//         value: ['line units','bar units'],
//         multiValueIds: ['lines','bars']
//       },
//       tickOrientation: {
//         value: ['horizontal','horizontal'],
//         multiValueIds: ['lines','bars']
//       },
//     }
//   }
// }
]);

function LineAndBarDataController(rows) {
  var headers = rows[0];
  var propperHeaders;
  propperHeaders = ['id', 'bars'].concat(_toConsumableArray(headers.slice(2)));
  var data = convertRowsToData([propperHeaders].concat(_toConsumableArray(rows.slice(1))), headers.length - 1);
  var barIds = [propperHeaders[1]];
  var lineIds = propperHeaders.splice(2);
  var lines = data.map(function (d) {
    return {
      id: d.id,
      value: lineIds.map(function (lineId) {
        return {
          id: lineId,
          parentId: d.id,
          value: +d.value.find(function (dd) {
            return dd.id === lineId;
          }).value
        };
      })
    };
  }); //BULLCRAP!!! NO ENTIENDO PORQUE HAY QUE CAMBIAR LOS id/parentId...

  lines = transpose(lines);
  lines.forEach(function (line) {
    line.value.forEach(function (point) {
      point.id = point.parentId;
      point.parentId = line.id;
    });
  });
  var bars = data.map(function (d) {
    return {
      id: d.id,
      value: +d.value.find(function (dd) {
        return dd.id === barIds[0];
      }).value
    };
  });
  return {
    lines: lines,
    bars: bars
  };
}

var LineAndBarChartViz = /*#__PURE__*/function (_BaseViz) {
  _inherits(LineAndBarChartViz, _BaseViz);

  var _super = _createSuper(LineAndBarChartViz);

  function LineAndBarChartViz() {
    _classCallCheck(this, LineAndBarChartViz);

    return _super.apply(this, arguments);
  }

  return LineAndBarChartViz;
}(BaseViz);

_defineProperty(LineAndBarChartViz, "chartClass", LineAndBarChartChart);

_defineProperty(LineAndBarChartViz, "dataControllerClass", LineAndBarDataController);

_defineProperty(LineAndBarChartViz, "defaultConfig", {
  ItemsHelper: {
    colorScale: {
      nonEditable: true
    }
  },
  AxisHelper: {
    y: {
      trimThreshold: {
        nonEditable: true
      }
    },
    x: {
      trimThreshold: {
        nonEditable: true
      },
      valueFormat: {
        nonEditable: true
      },
      unit: {
        nonEditable: true
      },
      scale: {
        nonEditable: true,
        exposed: false
      }
    }
  }
});

/**
 * # {componentLabel} (`class {componentClassName}`)
 * Used to display data using a number of bars and/or lines, each of which represent a particular category. A combination of bars and lines in the same visualization can be useful when comparing values in different categories, since the combination gives a clear view of which category is higher or lower. An example of this can be seen when comparing the projected sales with the actual sales for different time periods.
 * 
 * ### Example Usage
 * ```javascript
 *   
 *   import {LineAndBarChart} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new LineAndBarChart($el, data, config);
 *   
 * ```
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 3 or more columns. 
 * 
 * Each row represents a point in the X axis. The first column should be the id/label of each point. 
 * 
 * The second column represents the values for the Bars in the chart.
 * 
 * The rest of the columns should represent the values for each of the lines in the chart.
 * 
 * |  categroy    | bar  |  line1   |  line2   |
 * | --------   | ------ |  ------  |  ------  |
 * |   a       |    22.4|      15.4|      43.2|
 * |   b      |    52.3|      29.3|      12.8|
 * |   c      |    12.8|      34.1|      61.4|
 * |   d      |    26.0|      12.3|      14.5|
 * 
 * {.data-table}
 * */

var LineAndBarChartComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(LineAndBarChartComponent, _BaseComponent);

  var _super = _createSuper(LineAndBarChartComponent);

  function LineAndBarChartComponent() {
    _classCallCheck(this, LineAndBarChartComponent);

    return _super.apply(this, arguments);
  }

  return LineAndBarChartComponent;
}(BaseComponent);

_defineProperty(LineAndBarChartComponent, "vizClass", LineAndBarChartViz);

_defineProperty(LineAndBarChartComponent, "componentLabel", "Bar + Line chart");

_defineProperty(LineAndBarChartComponent, "dataFormat", [{
  index: 0,
  axis: 'x0',
  types: [String],
  role: 'id',
  roleLabel: 'Category (X)'
}, {
  index: 1,
  axis: 'y0',
  types: [Number],
  role: 'value',
  roleLabel: 'Bar value (Y)'
}, {
  index: -1,
  axis: 'y0',
  label: 'Line',
  types: [Number],
  role: 'value',
  roleLabel: 'Line value (Y)'
}]);

_defineProperty(LineAndBarChartComponent, "defaultConfig", {
  title: LineAndBarChartComponent.componentLabel,
  AxisHelper: {
    x: {
      /**
       * Show/hide labels for each bar on the X axis.
       */
      showTickValues: false
    }
  }
});

var ParallelCoordsChart = /*#__PURE__*/function (_BaseChart) {
  _inherits(ParallelCoordsChart, _BaseChart);

  var _super = _createSuper(ParallelCoordsChart);

  function ParallelCoordsChart() {
    _classCallCheck(this, ParallelCoordsChart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _super.call.apply(_super, [this].concat(args));
  }

  _createClass(ParallelCoordsChart, [{
    key: "checkConsistency",
    value: function checkConsistency() {
      return true;
    }
  }, {
    key: "setSelectedFunc",
    value: function setSelectedFunc(sel, d) {
      if (!this.axes.x) {
        // let c = d3_color(this.color(d));
        // c.opacity = 0.4
        // sel.select('path').attr('fill',c+'')
        sel.select('path').attr('fill', this.color(d));
        sel.select('path').attr('fill-opacity', 0.4);
      }
    }
  }, {
    key: "unsetSelectedFunc",
    value: function unsetSelectedFunc(sel) {
      if (!this.axes.x) {
        // sel.select('path').attr('fill','rgba(0,0,0,0)')
        sel.select('path').attr('fill', 'none');
        sel.select('path').attr('fill-opacity', 0);
      }
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this = this;

      var dimsIds = this.data[0] ? Object.keys(this.data[0].dimensions).map(function (d, i) {
        return 'y_' + i;
      }) : [];
      var dimsNames = this.data[0] ? Object.keys(this.data[0].dimensions).map(function (d) {
        return d;
      }) : [];
      var line;
      var getValues;
      var getPos;

      if (this.axes.x) {
        getValues = function getValues(dim, value, i) {
          return [_this.axes.x.func.scale()(dim), _this.axes[dimsIds[i]].func.scale()(value)];
        };

        getPos = function getPos(_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              x = _ref2[0],
              y = _ref2[1];

          return [x, y];
        };

        line = function line(d) {
          return d3_line().curve(d3_curveLinear)(dimsNames.map(function (dim, i) {
            // return [this.axes.x.scale(dim), this.axes[dimsIds[i]].scale(d.dimensions[dim])] 
            return getValues(dim, d.dimensions[dim], i);
          }));
        };
      } else {
        getValues = function getValues(dim, value, i) {
          return [i / dimsIds.length * 2 * Math.PI, _this.axes[dimsIds[i]].func.scale()(value)];
        };

        getPos = function getPos(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              angle = _ref4[0],
              radius = _ref4[1];

          return [Math.cos(angle - Math.PI / 2) * radius, Math.sin(angle - Math.PI / 2) * radius];
        };

        line = function line(d) {
          return d3_lineRadial().curve(d3_curveLinearClosed)(dimsNames.map(function (dim, i) {
            // return [(i / dimsIds.length) * 2*Math.PI, this.axes[dimsIds[i]].scale(d.dimensions[dim])] 
            return getValues(dim, d.dimensions[dim], i);
          }));
        };
      }

      this.parentItemsEnter.append('path').attr('fill', 'none').attr('pointer-events', 'none');
      var self = this;
      this.parentItemsEnter.select('path').attr('d', function (d) {
        return line(d);
      }) // .attr('fill','rgba(0,0,0,0)')
      .attr('stroke', function (d) {
        return _this.color(d);
      }) // .attr('stroke-dasharray',(d)=>this.strokeDasharray(d))
      .each(function () {
        this._totalLength = this.getTotalLength();
      }).attr('stroke-dasharray', function (d) {
        var dashing = self.strokeDasharray(d);
        if (dashing === 'none') dashing = '1 0';
        var dashLength = dashing.split(/[\s,]/).map(function (a) {
          return parseFloat(a) || 0;
        }).reduce(function (a, b) {
          return a + b;
        });
        var dashCount = Math.ceil(this._totalLength / dashLength);
        var newDashes = new Array(dashCount).join(dashing + " ");
        var dashArray = newDashes + " 0, " + this._totalLength;
        return dashArray;
      }).attr('stroke-dashoffset', function () {
        return this._totalLength;
      });
      this.parentItemsEnterTrans.select('path').attr('stroke-dashoffset', 0);
      this.parentItemsTrans.select('path').attr('d', function (d) {
        return line(d);
      }).attr('stroke', function (d) {
        return _this.color(d);
      }).attr('stroke-dasharray', function (d) {
        return _this.strokeDasharray(d);
      }); // let self = this

      var items = this.items.merge(this.itemsEnter);
      var breakpoints = items.raise().selectAll('.break-point').data(this.config.showPoints ? [null] : []);
      breakpoints.exit().remove();
      var breakpointsEnter = breakpoints.enter().append('g').attr('class', 'break-point');
      breakpointsEnter.append('circle');
      this.itemsEnter.select('.break-point').attr('transform', function (d, i) {
        var pos = getPos(getValues(d.id, d.value, i));
        return "translate(".concat(pos[0], ",").concat(pos[1], ")"); // return `translate(${self.axes.x.scale(d.id)},${self.axes[dimsIds[i]].scale(d.value)})`
      }).select('circle').attr('fill', function (d) {
        return _this.config.skin === 'light' ? SKIN_BACKGROUND : SKIN_BACKGROUND_DARK;
      }).attr('stroke', function (d) {
        return _this.color({
          id: d.parentId
        });
      }).attr('r', 0);
      this.itemsEnterTrans.select('.break-point').select('circle').attr('fill', this.config.skin === 'light' ? SKIN_BACKGROUND : SKIN_BACKGROUND_DARK).attr('stroke', function (d) {
        return _this.color({
          id: d.parentId
        });
      }).attr('r', 3);
      this.itemsTrans.select('.break-point').attr('transform', function (d, i) {
        var pos = getPos(getValues(d.id, d.value, i));
        return "translate(".concat(pos[0], ",").concat(pos[1], ")"); // return `translate(${self.axes.x.scale(d.id)},${self.axes[dimsIds[i]].scale(d.value)})`
      }).select('circle').attr('fill', this.config.skin === 'light' ? SKIN_BACKGROUND : SKIN_BACKGROUND_DARK).attr('stroke', function (d) {
        return _this.color({
          id: d.parentId
        });
      }).attr('r', 3);
      this.itemsExitTrans.style('opacity', 0);
      if (this.parentItemsExitTrans) this.parentItemsExitTrans.style('opacity', 0); //(RADAR) AXIS LABELS

      var xDims = this.getXAxesIds();
      var yDims = this.getYAxesIds();

      if (xDims.length === 0) {
        var yDimNames = this.getYAxesLabels();
        var titleRadius = this.axes[yDims[0]].scale.range()[1] + 10;
        yDims.forEach(function (axis, i) {
          var root = _this.axes[axis].selection;
          var titles = root.selectAll('.title').data([null]);
          var titlesEnter = titles.enter().append('text').attr('class', 'title');
          var angle = i / yDims.length * 360;
          titles.merge(titlesEnter).text(function (d) {
            return yDimNames[i];
          }).attr('text-anchor', function () {
            return angle === 0 ? 'middle' : angle > 180 ? 'end' : 'start';
          }).attr('dominant-baseline', 'central').attr('fill', 'currentColor').attr('transform', function (d) {
            return "translate(0,".concat(titleRadius, ") rotate(").concat(-angle + 180, ") ");
          });
        });
      } //(RADAR) Grid lines


      if (xDims.length === 0) {
        var mainAxis = this.axes['y_0'];
        var grids = mainAxis.selection.selectAll('.grid').data([0, 25, 50, 75, 100]);
        var gridsEnter = grids.enter().append('path').attr('class', 'grid').attr('stroke', '#ddd');
        grids = grids.merge(gridsEnter);
        var dtheta = 2 * Math.PI / yDims.length;
        grids.attr('d', function (d) {
          var r = mainAxis.func.scale()(d);
          return "M 0,".concat(r) + yDims.map(function (dim, i) {
            return "L ".concat(Math.sin(dtheta * i) * r, " ").concat(Math.cos(dtheta * i) * r);
          }).join('') + 'Z';
        });
        var ticks = mainAxis.selection.selectAll('.my-tick').data([0, 100]);
        var ticksEnter = ticks.enter().append('text').attr('class', 'my-tick').attr('fill', 'currentColor').attr('text-anchor', 'start').attr('font-size', '14px');
        ticks.merge(ticksEnter).text(function (d) {
          return d;
        }).attr('dx', 5).attr('transform', function (d) {
          return " translate(0,".concat(mainAxis.func.scale()(d), ") rotate(").concat(-180, ")");
        });
      }
    }
  }]);

  return ParallelCoordsChart;
}(BaseChart);

_defineProperty(ParallelCoordsChart, "defaultConfig", {
  /**
   * Show/hide the data points that form each line.
   */
  showPoints: {
    type: Boolean,
    "default": false,
    exposed: true
  },
  AxisHelper: {
    x: {
      scale: 'point',
      getExtent: function getExtent(data) {
        return data[0] ? Object.keys(data[0].dimensions).map(function (d) {
          return d;
        }) : [];
      }
    },
    y: {
      scale: {
        value: ['linear'],
        multiValueIds: 'data.dimensions'
      },
      getExtent: function getExtent(data, dimLabel, dimId) {
        // console.log("data,dim",data,dimLabel)
        var extent = d3_extent(data.reduce(function (res, d) {
          return res.concat(d.dimensions[dimLabel]);
        }, []));
        var yDims = this.getYAxesIds();

        if (this.getUnit(dimId[0]) && this.getUnit(dimId[0])[yDims.indexOf(dimId)]) {
          extent = cleanCollisions(this.axes[dimId], extent, [{
            value: extent.map(function (e) {
              return {
                value: e
              };
            })
          }], 1.01);
        }

        return extent;
      },
      valueFormat: {
        value: ['[N]0'],
        multiValueIds: 'data.dimensions'
      },
      unit: {
        value: [false],
        multiValueIds: 'data.dimensions'
      },
      dimensions: 'data.dimensions'
    }
  },
  TooltipBehavior: {
    getHtml: function getHtml(d) {
      var yDims = this.getYAxesIds();
      var yDimNames = this.getYAxesLabels();
      var onAxis = yDims[yDimNames.indexOf(d.id)];
      return "\n        <div class=\"tip-value important\">".concat(this.valueWithUnit(d.value, onAxis), "</div>\n        <div class=\"tip-id\">\n          <span class=\"icon\" style=\"display: inline-block; width: 9px; height: 9px; border-radius: 50%; background: ").concat(this.color({
        id: d.parentId
      }), "; margin-right: 3px\"></span>\n          ").concat(d.parentId, "\n        </div>\n        <div class=\"secondary\">").concat(d.id, "</div>\n        ");
    }
  }
});

_defineProperty(ParallelCoordsChart, "helpers", [RootHelper, ItemsHelper, SelectableHelper, SizeHelper, AxisHelper // {
//   class: AxisHelper,
//   config: {
//     x:{
//       scale: 'point',
//       getExtent: function (data){
//         return data[0] ? Object.keys(data[0].dimensions).map((d)=>d) : []
//       }
//     },
//     y:{
//       scale:{
//         value: ['linear'],
//         multiValueIds: 'data.dimensions'
//       },
//       getExtent: function(data,dimLabel,dimId){
//         // console.log("data,dim",data,dimLabel)
//         let extent = d3_extent(data.reduce((res,d)=>res.concat(d.dimensions[dimLabel]),[]))
//         let yDims = this.getYAxesIds()
//         if(this.getUnit(dimId[0]) && this.getUnit(dimId[0])[yDims.indexOf(dimId)]){
//           extent = cleanCollisions(this.axes[dimId], extent, [{value:extent.map((e)=>({value:e}))}],1.01)
//         }
//         return extent
//       },
//       valueFormat: {
//         value: ['[N]0'],
//         multiValueIds: 'data.dimensions'
//       },
//       unit: {
//         value: [false],
//         multiValueIds: 'data.dimensions'
//       },
//       dimensions: 'data.dimensions'
//     },
//   }
// },
]);

function ParallelCoordsDataController(rows) {
  //},config={}) {
  var headers = rows[0];
  var propperHeaders = ['id'].concat(_toConsumableArray(headers.slice(1)));
  var data = convertRowsToData([propperHeaders].concat(_toConsumableArray(rows.slice(1))), headers.length - 1);
  return data.map(function (d) {
    var dims = d.value.map(function (d) {
      return d.id;
    });
    return {
      id: d.id,
      dimensions: dims.reduce(function (res, dim) {
        if (dim !== 'id') res[dim] = +d.value.find(function (dd) {
          return dd.id === dim;
        }).value;
        return res;
      }, {})
    };
  });
}

var ParallelCoordsViz = /*#__PURE__*/function (_BaseViz) {
  _inherits(ParallelCoordsViz, _BaseViz);

  var _super = _createSuper(ParallelCoordsViz);

  function ParallelCoordsViz() {
    _classCallCheck(this, ParallelCoordsViz);

    return _super.apply(this, arguments);
  }

  return ParallelCoordsViz;
}(BaseViz);

_defineProperty(ParallelCoordsViz, "chartClass", ParallelCoordsChart);

_defineProperty(ParallelCoordsViz, "dataControllerClass", ParallelCoordsDataController);

_defineProperty(ParallelCoordsViz, "defaultConfig", {
  ItemsHelper: {
    colorScale: {
      value: 'categorical',
      options: ['categorical'],
      nonEditable: true
    },
    colorMode: 'stroke'
  },
  AxisHelper: {
    y: {
      trimThreshold: {
        nonEditable: true
      }
    },
    x: {
      trimThreshold: {
        nonEditable: true
      },
      valueFormat: {
        nonEditable: true
      },
      unit: {
        nonEditable: true
      },
      scale: {
        nonEditable: true
      },
      showTickValues: {
        nonEditable: true
      },
      tickMatchData: {
        nonEditable: true,
        exposed: false
      }
    }
  }
});

/**
 * # {componentLabel} (`class {componentClassName}`)
 * Parallel coordinates is a visualization technique used to plot individual data elements across many dimensions. Each of the dimensions corresponds to a vertical axis and each data element is displayed as a series of connected points along the dimensions/axes.
 * 
 * ### Example Usage
 * ```javascript
 *   
 *   import {ParallelCoords} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new ParallelCoords($el, data, config);
 *   
 * ```
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 3 or more columns.
 * 
 * Each row represents a line. 
 * 
 * The first columns represents the id/label of the line.
 * 
 * Each other column represents a dimension.
 * 
 * | id           |  dim1 |  dim2  |  dim3  |
 * | --------     | ------ |  ------  |  ------  |
 * |   line 1     |    22.4|      15.4|      43.2|
 * |   line 2     |    52.3|      29.3|      12.8|
 * |   line 3     |    12.8|      34.1|      61.4|
 * |   line 4     |    26.0|      12.3|      14.5|
 * 
 * {.data-table}
 * 
 *
 * */

var ParallelCoordsComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(ParallelCoordsComponent, _BaseComponent);

  var _super = _createSuper(ParallelCoordsComponent);

  function ParallelCoordsComponent($root, config, data) {
    _classCallCheck(this, ParallelCoordsComponent);

    return _super.call(this, $root, config, data);
  }

  return ParallelCoordsComponent;
}(BaseComponent);

_defineProperty(ParallelCoordsComponent, "vizClass", ParallelCoordsViz);

_defineProperty(ParallelCoordsComponent, "componentLabel", "Parallel coordinates");

_defineProperty(ParallelCoordsComponent, "dataFormat", [{
  index: 0,
  axis: '',
  label: 'id',
  types: [String],
  role: 'id',
  roleLabel: 'Line name'
}, {
  index: -1,
  axis: 'y',
  label: 'Dimension',
  types: [Number],
  role: 'value',
  roleLabel: 'Dimension value'
}]);

_defineProperty(ParallelCoordsComponent, "defaultConfig", {
  title: ParallelCoordsComponent.componentLabel
});

var RadarChartViz = /*#__PURE__*/function (_BaseViz) {
  _inherits(RadarChartViz, _BaseViz);

  var _super = _createSuper(RadarChartViz);

  function RadarChartViz() {
    _classCallCheck(this, RadarChartViz);

    return _super.apply(this, arguments);
  }

  return RadarChartViz;
}(BaseViz);

_defineProperty(RadarChartViz, "defaultConfig", {
  showPoints: true,
  AxisHelper: {
    zoom: {
      nonEditable: true
    },
    x: {
      dimensions: null,
      grid: false,
      tickOrientation: {
        nonEditable: true
      },
      trimThreshold: {
        nonEditable: true
      },
      valueFormat: {
        nonEditable: true
      },
      unit: {
        nonEditable: true
      },
      scale: {
        nonEditable: true
      },
      tickMatchData: {
        nonEditable: true,
        exposed: false
      }
    },
    y: {
      // tickFormat: ()=>'',
      grid: false,
      tickOrientation: {
        nonEditable: true
      },
      getExtent: function getExtent(data, dimLabel) {
        return [0, 100];
      },
      trimThreshold: {
        nonEditable: true
      },
      scale: {
        nonEditable: true
      },
      unit: {
        nonEditable: true
      }
    }
  },
  ItemsHelper: {
    colorScale: {
      value: 'categorical',
      options: ['categorical'],
      nonEditable: true
    },
    colorMode: 'stroke'
  }
});

_defineProperty(RadarChartViz, "chartClass", ParallelCoordsChart);

_defineProperty(RadarChartViz, "dataControllerClass", ParallelCoordsDataController);

/**
 * # {componentLabel} (`class {componentClassName}`)
 * Used to display multivariate data in the form of a two-dimensional chart of three or more quantitative variables represented on axes starting from the same point.
 * 
 * ### Example Usage
 * ```javascript
 *   
 *   import {RadarChart} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new RadarChart($el, data, config);
 *   
 * ```
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 3 or more columns.
 * 
 * Each row represents a line. 
 * 
 * The first columns represents the id/label of the line.
 * 
 * Each other column represents a dimension.
 * 
 * | id           |  dim1 |  dim2  |  dim3  |
 * | --------     | ------ |  ------  |  ------  |
 * |   line 1     |    22.4|      15.4|      43.2|
 * |   line 2     |    52.3|      29.3|      12.8|
 * |   line 3     |    12.8|      34.1|      61.4|
 * |   line 4     |    26.0|      12.3|      14.5|
 * 
 * {.data-table}
 * 
 * Note: All dimensions are assumed to be normalized between 0 and 100.
 * 
 *
 * */

var RadarChartComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(RadarChartComponent, _BaseComponent);

  var _super = _createSuper(RadarChartComponent);

  function RadarChartComponent() {
    _classCallCheck(this, RadarChartComponent);

    return _super.apply(this, arguments);
  }

  return RadarChartComponent;
}(BaseComponent);

_defineProperty(RadarChartComponent, "vizClass", RadarChartViz);

_defineProperty(RadarChartComponent, "componentLabel", "Radar chart");

_defineProperty(RadarChartComponent, "dataFormat", [{
  index: 0,
  axis: '',
  label: 'id',
  types: [String],
  role: 'id',
  roleLabel: 'Line name'
}, {
  index: -1,
  axis: 'y',
  label: 'Dimension',
  types: [Number],
  role: 'value',
  roleLabel: 'Dimension value'
}]);

_defineProperty(RadarChartComponent, "defaultConfig", {
  title: RadarChartComponent.componentLabel
});

/**
 * # {componentLabel} (`class {componentClassName}`)
 * 
 * A donut chart is a circular statistical graphic, which is divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice is proportional to the quantity it represents.
 * 
 * ### Example Usage
 * ```javascript
 * 
 *   import {DonutChart} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new DonutChart($el, data, config);
 * ```
 * 
 * This class is only intended to draw Donut charts with a hole and a total value, for regular [Pie Chart](#/developer/PieChartComponent)s see the corresponding documentation.
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 2 columns. Each row represents a sector: the first column should be the id/label of the sector, and the second column its value.
 *  
 * | category | value  |
 * | -------- | ------ |
 * |   a      |    22.4|
 * |   b      |    52.3|
 * |   c      |    12.8|
 * |   d      |    26.0|
 * 
 * {.data-table}
 * */

var DonutChartComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(DonutChartComponent, _BaseComponent);

  var _super = _createSuper(DonutChartComponent);

  function DonutChartComponent() {
    _classCallCheck(this, DonutChartComponent);

    return _super.apply(this, arguments);
  }

  return DonutChartComponent;
}(BaseComponent);

_defineProperty(DonutChartComponent, "vizClass", PieChartViz);

_defineProperty(DonutChartComponent, "dataFormat", [{
  index: 0,
  axis: '',
  types: [String],
  role: 'id',
  roleLabel: 'Category'
}, {
  index: 1,
  axis: '',
  types: [Number],
  role: 'value',
  roleLabel: 'Value'
}]);

_defineProperty(DonutChartComponent, "componentLabel", "Donut chart");

_defineProperty(DonutChartComponent, "defaultConfig", {
  title: DonutChartComponent.componentLabel,
  mode: 'donut'
});

var DEFAULT_SCATTER_R = 6;

var ScatterPlotChart = /*#__PURE__*/function (_BaseChart) {
  _inherits(ScatterPlotChart, _BaseChart);

  var _super = _createSuper(ScatterPlotChart);

  function ScatterPlotChart() {
    _classCallCheck(this, ScatterPlotChart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _super.call.apply(_super, [this].concat(args));
  }

  _createClass(ScatterPlotChart, [{
    key: "checkConsistency",
    value: function checkConsistency() {
      return true;
    }
  }, {
    key: "getLegendData",
    value: function getLegendData() {
      var _this = this;

      var legendData = {};

      if (this.config.groupAttr) {
        var groups = this.data.reduce(function (res, d) {
          res.push(d.group);
          return res;
        }, []);
        groups = groups.filter(function (d, i) {
          return groups.indexOf(d) === i;
        });
        var groupData = groups.map(function (g) {
          return {
            id: g,
            group: g
          };
        });
        legendData.group = groupData;
        legendData.group.icon = 'circle';
      }

      if (this.config.sizeAttr) {
        var sizes = this._sizeScale.nice().ticks(3);

        sizes = [sizes[0], sizes[sizes.length - 1]];
        sizes.splice(1, 0, sizes[0] + (sizes[1] - sizes[0]) / 2);
        var sizeData = sizes.map(function (d) {
          return {
            id: d,
            value: 2 * _this._sizeScale(d)
          };
        });
        legendData.size = sizeData;
        legendData.size.icon = 'circle';
        legendData.size.type = 'size';
      }

      return legendData;
    }
  }, {
    key: "beforeHelpers",
    value: function beforeHelpers() {
      this._sizeScale = linear$1().domain(d3_extent(this.data, function (d) {
        return d.size;
      })).range([3, 15]);
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this2 = this;

      if (this.config.mode === 'grid') {
        this.itemsEnter.selectAll('.square').data([null]).enter().append('g').attr('class', 'square').append('rect'); // this.itemsEnter.call(drawItem,'enter')

        this.itemsEnter.select('.square').attr('transform', function (d) {
          return "translate(".concat(_this2.axes.x.func.scale()(d[_this2.config.xAttr]), ",").concat(_this2.axes.y.func.scale()(d[_this2.config.yAttr]), ")");
        }).select('rect').attr('fill', function (d) {
          return _this2.color(d);
        }).attr('width', function () {
          return _this2.axes.x.func.scale().bandwidth();
        }).attr('height', function () {
          return _this2.axes.y.func.scale().bandwidth();
        }).style('opacity', 0);
        this.itemsEnterTrans.select('.square').select('rect').style('opacity', 1);
        this.itemsTrans.select('.square').attr('transform', function (d) {
          return "translate(".concat(_this2.axes.x.func.scale()(d[_this2.config.xAttr]), ",").concat(_this2.axes.y.func.scale()(d[_this2.config.yAttr]), ")");
        }).select('rect').attr('fill', function (d) {
          return _this2.color(d);
        }).attr('width', function () {
          return _this2.axes.x.func.scale().bandwidth();
        }).attr('height', function () {
          return _this2.axes.y.func.scale().bandwidth();
        }).style('opacity', 1);
        this.itemsExitTrans.style('opacity', 0);
      } else {
        var safeR = function safeR(d) {
          var max = _this2.config.maxSize ? _this2.config.maxSize : Infinity;
          var min = _this2.config.minSize ? _this2.config.minSize : 0;
          return _this2.config.sizeAttr ? Math.max(min, Math.min(max, _this2._sizeScale(d.size))) : DEFAULT_SCATTER_R;
        };

        this.itemsEnter.selectAll('.point').data([null]).enter().append('g').attr('class', 'point').append('circle');
        this.itemsEnter.select('.point').attr('transform', function (d) {
          return "translate(".concat(_this2.axes.x.func.scale()(d[_this2.config.xAttr]), ",").concat(_this2.axes.y.func.scale()(d[_this2.config.yAttr]), ")");
        }).select('circle').attr('fill', function (d) {
          return _this2.color(d);
        }).attr('r', 0);
        this.itemsEnterTrans.select('.point').select('circle').attr('r', safeR);
        var mergedItems = this.items.merge(this.itemsEnter);
        var labels = mergedItems.select('.point').selectAll('text').data(this.config.showLabels ? [null] : []);
        labels.enter().append('text') // .attr('text-anchor','middle')
        .attr('font-size', '14px').attr('fill', 'currentColor');
        labels.exit().transition().style('opacity', 0).remove();
        mergedItems.select('.point').select('text').text(function (d) {
          return d.id;
        }).call(wrapSvgText, 80).attr('transform', function (d) {
          return "translate(".concat(safeR(d) + 6, ",-").concat(safeR(d) + 6, ")");
        }).selectAll('tspan').attr('x', 0).attr('y', 0);
        this.itemsEnter.select('.point').select('text').attr('opacity', 0);
        this.itemsEnterTrans.select('.point').select('text').attr('opacity', 1);
        this.itemsTrans.select('.point').attr('transform', function (d) {
          return "translate(".concat(_this2.axes.x.func.scale()(d[_this2.config.xAttr]), ",").concat(_this2.axes.y.func.scale()(d[_this2.config.yAttr]), ")");
        }).select('circle').attr('fill', function (d) {
          return _this2.color(d);
        }).attr('r', safeR);
        this.itemsExitTrans.style('opacity', 0);
      }
    }
  }]);

  return ScatterPlotChart;
}(BaseChart);

_defineProperty(ScatterPlotChart, "defaultConfig", {
  groupAttr: {
    type: String,
    "default": 'group'
  },
  xAttr: {
    type: String,
    "default": 'x'
  },
  yAttr: {
    type: String,
    "default": 'y'
  },
  sizeAttr: {
    type: [String, null],
    "default": 'size'
  },
  mode: {
    type: [String],
    "default": 'dots',
    options: ['dots', 'grid']
  },

  /**
   * If set, all data points will have at least this radius.
   */
  minSize: {
    type: Number,
    "default": 0,
    exposed: true
  },

  /**
   * If set, all data points will have at most this radius.
   */
  maxSize: {
    type: Number,
    "default": Infinity,
    exposed: true
  },

  /**
   * Show/hide the label of each data point.
   */
  showLabels: {
    type: Boolean,
    "default": true,
    exposed: true
  },
  AxisHelper: {
    zoom: false,
    x: {
      scale: 'linear',
      getValue: function getValue(d) {
        return d.x;
      },
      getExtent: function getExtent(data) {
        var _this3 = this;

        var extent = continuousExtent(data, function (d) {
          return d[_this3.config.xAttr];
        }); // d3_extent(data.map((d)=>d[this.config.xAttr]))
        // return padLinear(extent,0.2)

        return extent;
      },
      grid: true
    },
    y: {
      scale: 'linear',
      getValue: function getValue(d) {
        return d.y;
      },
      getExtent: function getExtent(data) {
        var _this4 = this;

        var extent = continuousExtent(data, function (d) {
          return d[_this4.config.yAttr];
        }); //d3_extent(data.map((d)=>d[this.config.yAttr]))
        // return padLinear(extent,0.2)

        return extent;
      },
      grid: true
    }
  }
});

_defineProperty(ScatterPlotChart, "helpers", [RootHelper, ItemsHelper, SelectableHelper, SizeHelper, AxisHelper]);

function ScatterDataController(rows) {
  var headers = rows[0];
  var propperHeaders = ['id', 'x', 'y', 'group', 'size'];
  var data = convertRowsToData([propperHeaders].concat(_toConsumableArray(rows.slice(1))), 4);
  return data.map(function (point) {
    return {
      id: point.id,
      x: +point.value.find(function (d) {
        return d.id === 'x';
      }).value,
      y: +point.value.find(function (d) {
        return d.id === 'y';
      }).value,
      group: point.value.find(function (d) {
        return d.id === 'group';
      }).value,
      size: +point.value.find(function (d) {
        return d.id === 'size';
      }).value
    };
  });
}

var ScatterPlotViz = /*#__PURE__*/function (_BaseViz) {
  _inherits(ScatterPlotViz, _BaseViz);

  var _super = _createSuper(ScatterPlotViz);

  function ScatterPlotViz() {
    _classCallCheck(this, ScatterPlotViz);

    return _super.apply(this, arguments);
  }

  return ScatterPlotViz;
}(BaseViz);

_defineProperty(ScatterPlotViz, "defaultConfig", {
  sizeAttr: null,
  ItemsHelper: {
    colorScale: {
      value: 'categorical',
      options: ['categorical'],
      //['sequential2','sequential3','categorical']
      nonEditable: true
    },
    colorKey: 'group'
  },
  AxisHelper: {
    x: {
      showTickValues: {
        nonEditable: true
      },
      tickMatchData: {
        nonEditable: true,
        exposed: false
      }
    }
  },
  TooltipBehavior: {
    getHtml: function getHtml(d) {
      return "\n        <div class=\"tip-value important\">".concat(d.id, "</div>\n        <div class=\"tip-id\">\n          x: ").concat(this.valueWithUnit(d.x, 'x'), " | y: ").concat(this.valueWithUnit(d.y, 'y'), "\n        </div>\n        <div class=\"secondary\">\n          <span class=\"icon\" style=\"display: inline-block; width: 9px; height: 9px; border-radius: 50%; background: ").concat(this.color(d), "; margin-right: 3px\"></span>\n          ").concat(d.group, "\n        </div>\n        ");
    },
    getItemOffset: function getItemOffset($el, d) {
      var targetRect = d3_select($el).select('circle').node().getBoundingClientRect();
      return {
        x: targetRect.x + targetRect.width / 2,
        y: targetRect.y + targetRect.height / 2 //- 10

      };
    }
  },
  LegendBehavior: {
    icon: 'circle'
  }
});

_defineProperty(ScatterPlotViz, "chartClass", ScatterPlotChart);

_defineProperty(ScatterPlotViz, "dataControllerClass", ScatterDataController);

/**
 * # {componentLabel} (`class {componentClassName}`)
 * Used to display values for typically two variables for a set of data. If the points are coded (color/shape/size), one additional variable can be displayed. The data are displayed as a collection of points, each having the value of one variable determining the position on the horizontal axis and the value of the other variable determining the position on the vertical axis.
 *  
 * ### Example Usage
 * ```javascript
 *   
 *   import {ScatterPlot} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new ScatterPlot($el, data, config);
 *   
 * ```
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 3 or 4 columns.
 * 
 * Each row represents a data point.
 * 
 * The first column should represent the id/label of the data point.
 * 
 * The second and third columns should represent the X and Y coordinates of the point.
 * 
 * The fourth column (optional) should represent the color group to which the point belongs.
 * 
 * Note: the x and y coordinates can be numebers or strings, and will be sorted in the orther in which they appear in the table.
 * 
 * | id   |  x    | y    |  color |
 * | ---- | ---   | ---- | -----  |
 * |  a   |  14.2 | 24.2 | group1 |
 * |  b   |  52.3 | 51.2 | group1 |
 * |  c   |  16.3 | 21.6 | group2 |
 * |  d   |  43.0 | 18.2 | group2 |
 * 
 * 
 * {.data-table}
 * 
 * */

var ScatterPlotComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(ScatterPlotComponent, _BaseComponent);

  var _super = _createSuper(ScatterPlotComponent);

  function ScatterPlotComponent() {
    _classCallCheck(this, ScatterPlotComponent);

    return _super.apply(this, arguments);
  }

  return ScatterPlotComponent;
}(BaseComponent);

_defineProperty(ScatterPlotComponent, "vizClass", ScatterPlotViz);

_defineProperty(ScatterPlotComponent, "dataFormat", [{
  index: 0,
  axis: '',
  label: 'id',
  types: [String],
  role: 'id',
  roleLabel: 'Item'
}, {
  index: 1,
  axis: 'x0',
  label: 'x value',
  types: [Number, Date],
  role: 'value',
  roleLabel: 'X value - Number or Date (dd-mm-yyyy)'
}, {
  index: 2,
  axis: 'y0',
  label: 'x value',
  types: [Number],
  role: 'value',
  roleLabel: 'Y value'
}, {
  index: 3,
  axis: '',
  label: 'color',
  types: [String],
  role: 'value',
  roleLabel: 'Category/Color'
}]);

_defineProperty(ScatterPlotComponent, "componentLabel", "Scatter plot");

_defineProperty(ScatterPlotComponent, "defaultConfig", {
  title: ScatterPlotComponent.componentLabel
});

var ScatterPlotViz$1 = /*#__PURE__*/function (_BaseViz) {
  _inherits(ScatterPlotViz, _BaseViz);

  var _super = _createSuper(ScatterPlotViz);

  function ScatterPlotViz() {
    _classCallCheck(this, ScatterPlotViz);

    return _super.apply(this, arguments);
  }

  return ScatterPlotViz;
}(BaseViz);

_defineProperty(ScatterPlotViz$1, "defaultConfig", {
  ItemsHelper: {
    colorScale: {
      value: 'categorical',
      options: ['categorical'],
      //['sequential2','sequential3','categorical']
      nonEditable: true
    },
    colorKey: 'group'
  },
  AxisHelper: {
    x: {
      showTickValues: {
        nonEditable: true
      },
      tickMatchData: {
        nonEditable: true,
        exposed: false
      }
    }
  },
  TooltipBehavior: {
    getHtml: function getHtml(d) {
      return "\n        <div class=\"tip-value important\">".concat(d.id, "</div>\n        <div class=\"tip-id\">\n          x: ").concat(this.valueWithUnit(d.x, 'x'), " | y: ").concat(this.valueWithUnit(d.y, 'y'), " <br/>\n          size: ").concat(this.valueWithUnit(d.size), "\n        </div>\n        <div class=\"secondary\">\n          <span class=\"icon\" style=\"display: inline-block; width: 9px; height: 9px; border-radius: 50%; background: ").concat(this.color(d), "; margin-right: 3px\"></span>\n          ").concat(d.group, "\n        </div>\n        ");
    },
    getItemOffset: function getItemOffset($el, d) {
      var targetRect = d3_select($el).select('circle').node().getBoundingClientRect();
      return {
        x: targetRect.x + targetRect.width / 2,
        y: targetRect.y + targetRect.height / 2 //- 10

      };
    }
  },
  LegendBehavior: {
    icon: 'circle'
  }
});

_defineProperty(ScatterPlotViz$1, "chartClass", ScatterPlotChart);

_defineProperty(ScatterPlotViz$1, "dataControllerClass", ScatterDataController);

/**
 * # {componentLabel} (`class {componentClassName}`)
 * Used to display three or four dimensions of data. Each entity of associated data is plotted as a bubble that expresses two of the values through the bubble’s xy location and the third through its size.
 * 
 * Bubble charts can be considered a variation of the scatter plot, in which the data points are replaced with bubbles.
 * 
 * ### Example Usage
 * ```javascript
 *   import {BubbleChart} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new BubbleChart($el, data, config);
 *   
 * ```
 * 
 * This chart can be considered as an extension of a [ScatterPlot](#/developer/ScatterPlotComponent), with an additional variable mapped into the bubble size
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 5 columns. Each row represents a bubble, and the first column should be the id/label, then its X and Y postion, its group (for colors) and its size.
 *  
 * | ID       |     X  |    Y  |  Group   |   Size    |
 * | -------- | ------ |-------|----------|-----------|
 * |   a      |    22.4|   22.4|  Group 1 |   2.30    |
 * |   b      |    52.3|   12.5|  Group 2 |   2.45    |
 * |   c      |    12.8|   52.2|  Group 1 |   4.10    |
 * |   d      |    13.3|   12.6|  Group 2 |   5.12    |
 * 
 * {.data-table}
 *
 */

var BubbleChartComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(BubbleChartComponent, _BaseComponent);

  var _super = _createSuper(BubbleChartComponent);

  function BubbleChartComponent() {
    _classCallCheck(this, BubbleChartComponent);

    return _super.apply(this, arguments);
  }

  return BubbleChartComponent;
}(BaseComponent);

_defineProperty(BubbleChartComponent, "componentLabel", "Bubble chart");

_defineProperty(BubbleChartComponent, "vizClass", ScatterPlotViz$1);

_defineProperty(BubbleChartComponent, "dataFormat", [{
  index: 0,
  axis: '',
  label: 'id',
  types: [String],
  role: 'id',
  roleLabel: 'Item'
}, {
  index: 1,
  axis: 'x0',
  label: 'x value',
  types: [Number, Date],
  role: 'value',
  roleLabel: 'X value - Number or Date (dd-mm-yyyy)'
}, {
  index: 2,
  axis: 'y0',
  label: 'x value',
  types: [Number, Date],
  role: 'value',
  roleLabel: 'Y value - Number or Date (dd-mm-yyyy)'
}, {
  index: 3,
  axis: '',
  label: 'color',
  types: [String],
  role: 'value',
  roleLabel: 'Category/Color'
}, {
  index: 4,
  axis: '',
  label: 'size',
  types: [Number],
  role: 'value',
  roleLabel: 'Size value'
}]);

_defineProperty(BubbleChartComponent, "defaultConfig", {
  title: BubbleChartComponent.componentLabel
});

function HeatMapDataController(rows) {
  var propperHeaders = ['id', 'x', 'y', 'color'];
  var headers = rows[0];
  if (headers.length < propperHeaders.length) rows = rows.map(function (r, i) {
    return [i].concat(_toConsumableArray(r));
  });
  var data = convertRowsToData([propperHeaders].concat(_toConsumableArray(rows.slice(1))), 3);
  return data.map(function (point) {
    return {
      id: point.id,
      //point.value.find((d)=>d.id==='x').value+'_'+point.value.find((d)=>d.id==='y').value
      x: point.value.find(function (d) {
        return d.id === 'x';
      }).value,
      y: point.value.find(function (d) {
        return d.id === 'y';
      }).value,
      color: point.value.find(function (d) {
        return d.id === 'color';
      }).value
    };
  });
}

var HeatMapViz = /*#__PURE__*/function (_BaseViz) {
  _inherits(HeatMapViz, _BaseViz);

  var _super = _createSuper(HeatMapViz);

  function HeatMapViz() {
    _classCallCheck(this, HeatMapViz);

    return _super.apply(this, arguments);
  }

  return HeatMapViz;
}(BaseViz);

_defineProperty(HeatMapViz, "defaultConfig", {
  sizeAttr: null,
  mode: 'grid',
  valueFormat: {
    type: [String, Array, Function, null],
    "default": null
  },
  unit: {
    type: [String, Boolean, null],
    "default": false
  },
  AxisHelper: {
    x: {
      trimThreshold: {
        nonEditable: true
      },
      valueFormat: {
        nonEditable: true
      },
      unit: {
        nonEditable: true
      },
      showTickValues: {
        nonEditable: true
      },
      scale: {
        value: 'band',
        options: ['band'],
        nonEditable: true,
        exposed: false
      },
      getExtent: function getExtent(data) {
        return data.map(function (d) {
          return d.x;
        });
      },
      tickMatchData: {
        nonEditable: true,
        exposed: false
      }
    },
    y: {
      trimThreshold: {
        nonEditable: true
      },
      valueFormat: {
        nonEditable: true
      },
      unit: {
        nonEditable: true
      },
      scale: {
        value: 'band',
        options: ['band'],
        nonEditable: true
      },
      getExtent: function getExtent(data) {
        return data.map(function (d) {
          return d.y;
        });
      }
    },
    zoom: {
      value: false,
      nonEditable: true
    }
  },
  minSize: {
    exposed: false
  },
  maxSize: {
    exposed: false
  },
  showLabels: {
    nonEditable: true,
    exposed: false
  },
  ItemsHelper: {
    colorScale: {
      value: 'sequential3',
      options: ['sequential2', 'sequential3']
    },
    colorKey: 'color'
  },
  TooltipBehavior: {
    getHtml: function getHtml(d) {
      return "\n          <div class=\"important\">".concat(this.valueWithUnit(d.color), "</div>\n          <div>").concat(this.valueWithUnit(d.x, 'x'), " | ").concat(this.valueWithUnit(d.y, 'y'), "</div>");
    }
  }
});

_defineProperty(HeatMapViz, "chartClass", ScatterPlotChart);

_defineProperty(HeatMapViz, "dataControllerClass", HeatMapDataController);

/**
 * # {componentLabel} (`class {componentClassName}`)
 * A HeatMap is used to display the magnitude of a phenomenon as color in two dimensions. The variation in color may be by hue or intensity, giving obvious visual cues to the reader about how the phenomenon is clustered or varies over space.
 * 
 * ### Example Usage
 * ```javascript
 *   
 *   import {HeatMap} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new HeatMap($el, data, config);
 *   
 * ```
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with exactly 3 columns.
 * 
 * Each row represents a cell in the chart. The first two columns should represent the coordinates (x and y) and the third columnd should represent the value/color.
 * 
 * Note: the x and y coordinates can be numebers or strings, and will be sorted in the orther in which they appear in the table.
 * 
 * |     |  x    | y    |  color   |
 * |  ----  | ------| ---  |  ------  | 
 * |  1    |   a   |     A|      15.4| 
 * |  2    |   a   |     B|      29.3|   
 * |  3    |   a   |     C|      34.1|    
 * |  4    |   b   |     A|      12.3|  
 * |  5    |   b   |     B|      12.3|  
 * |  6    |   b   |     C|      12.3|  
 * |  7   |   c   |     A|      12.3|  
 * |  8    |   c   |     B|      12.3|  
 * |  9   |   c   |     C|      12.3|  
 * 
 * {.data-table}
 * 
 * */

var HeatMapComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(HeatMapComponent, _BaseComponent);

  var _super = _createSuper(HeatMapComponent);

  function HeatMapComponent() {
    _classCallCheck(this, HeatMapComponent);

    return _super.apply(this, arguments);
  }

  return HeatMapComponent;
}(BaseComponent);

_defineProperty(HeatMapComponent, "vizClass", HeatMapViz);

_defineProperty(HeatMapComponent, "componentLabel", "Heat map");

_defineProperty(HeatMapComponent, "dataFormat", [{
  index: 0,
  axis: 'x0',
  label: 'x category',
  types: [String],
  role: 'partial-id',
  roleLabel: 'X category'
}, {
  index: 1,
  axis: 'y0',
  label: 'y category',
  types: [String],
  role: 'partial-id',
  roleLabel: 'Y category'
}, {
  index: 2,
  axis: '',
  label: 'color',
  types: [String],
  role: 'value',
  roleLabel: 'Value'
}]);

_defineProperty(HeatMapComponent, "defaultConfig", {
  title: HeatMapComponent.componentLabel
});

var CandleStickChart = /*#__PURE__*/function (_BaseChart) {
  _inherits(CandleStickChart, _BaseChart);

  var _super = _createSuper(CandleStickChart);

  function CandleStickChart() {
    _classCallCheck(this, CandleStickChart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _super.call.apply(_super, [this].concat(args));
  }

  _createClass(CandleStickChart, [{
    key: "checkConsistency",
    value: function checkConsistency() {
      return true;
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this = this;

      var enter = this.itemsEnter.selectAll('.candle').data([null]).enter().append('g').attr('class', 'candle');
      enter.append('rect');
      enter.append('line');
      this.itemsEnter.select('.candle').attr('transform', function (d) {
        return "translate(".concat(_this.axes.x.func.scale()(d.id), ",").concat(_this.axes.y.func.scale()(d.high), ")");
      });
      this.itemsEnterTrans.select('.candle').select('rect').attr('fill', function (d) {
        return _this.color(d);
      }).attr('width', 10).attr('x', -5).attr('y', function (d) {
        return _this.axes.y.func.scale()(d.open) - _this.axes.y.func.scale()(d.high);
      }).attr('height', function (d) {
        return Math.abs(_this.axes.y.func.scale()(d.open) - _this.axes.y.func.scale()(d.close));
      });
      this.itemsEnterTrans.select('.candle').select('line').attr('stroke', function (d) {
        return _this.color(d);
      }).attr('y0', function () {
        return 0;
      }).attr('y1', function (d) {
        return _this.axes.y.func.scale()(d.low) - _this.axes.y.func.scale()(d.high);
      });
      this.itemsTrans.select('.candle').attr('transform', function (d) {
        return "translate(".concat(_this.axes.x.func.scale()(d.id), ",").concat(_this.axes.y.func.scale()(d.high), ")");
      });
      this.itemsTrans.select('.candle').select('rect').attr('fill', function (d) {
        return _this.color(d);
      }).attr('width', 10).attr('x', -5).attr('y', function (d) {
        return _this.axes.y.func.scale()(d.open) - _this.axes.y.func.scale()(d.high);
      }).attr('height', function (d) {
        return Math.abs(_this.axes.y.func.scale()(d.open) - _this.axes.y.func.scale()(d.close));
      });
      this.itemsTrans.select('.candle').select('line').attr('stroke', function (d) {
        return _this.color(d);
      }).attr('y0', function () {
        return 0;
      }).attr('y1', function (d) {
        return _this.axes.y.func.scale()(d.low) - _this.axes.y.func.scale()(d.high);
      });
      this.itemsExitTrans.style('opacity', 0);
    }
  }]);

  return CandleStickChart;
}(BaseChart);

_defineProperty(CandleStickChart, "defaultConfig", {
  ItemsHelper: {
    colorScale: function colorScale(d) {
      return d.open > d.close ? PRIMARY_BIN_SCHEME[0] : PRIMARY_BIN_SCHEME[1];
    }
  },
  AxisHelper: {
    x: {
      scale: {
        value: 'linear',
        exposed: false
      },
      getExtent: function getExtent(data) {
        return continuousExtent(data, function (d) {
          return d.id;
        }); //d3.extent(data.map((d)=>d.id))
      }
    },
    y: {
      getExtent: function getExtent(data) {
        var extent; // extent = continuousExtent(data) //d3.extent(data,(d)=>d.value)

        var extentParts = continuousExtentParts(data.map(function (d) {
          return {
            value: [d]
          };
        }), function (d) {
          return [d.low, d.high];
        }); // console.log("extent parts",extentParts)

        extent = continuousExtent(extentParts);

        if (this.config.AxisHelper.y.showTickValues && this.config.AxisHelper.y.unit) {
          extent = cleanCollisions(this.axes.y, extent, extentParts);
        }

        return extent;
      }
    }
  }
});

_defineProperty(CandleStickChart, "helpers", [RootHelper, ItemsHelper, // {
//   class: ItemsHelper,
//   config:{
//     colorScale: (d)=>{
//       return (d.open>d.close)?PRIMARY_BIN_SCHEME[0]:PRIMARY_BIN_SCHEME[1]
//     }
//   }
// },
SelectableHelper, SizeHelper, AxisHelper // {
//   class: AxisHelper,
//   config: {
//     x:{
//       scale: 'linear',
//       getExtent: function (data){
//         return continuousExtent(data,(d)=>d.id) //d3.extent(data.map((d)=>d.id))
//       }
//     },
//     y:{
//       getExtent: function (data){
//         let extent 
//         // extent = continuousExtent(data) //d3.extent(data,(d)=>d.value)
//         let extentParts = continuousExtentParts(data.map((d)=>({value:[d]})),(d)=>[d.low,d.high])
//         // console.log("extent parts",extentParts)
//         extent = continuousExtent(extentParts) 
//         extent = cleanCollisions(this.axes.y, extent, extentParts)
//         return extent
//       }
//     }
//   }
// },
]);

function CandleStickDataController(rows) {
  var headers = rows[0];
  var propperHeaders = ['id', 'open', 'close', 'high', 'low'];
  var data = convertRowsToData([propperHeaders].concat(_toConsumableArray(rows.slice(1))), 4);
  return data.map(function (point) {
    return {
      id: point.id,
      open: +point.value.find(function (d) {
        return d.id === 'open';
      }).value,
      close: +point.value.find(function (d) {
        return d.id === 'close';
      }).value,
      high: +point.value.find(function (d) {
        return d.id === 'high';
      }).value,
      low: +point.value.find(function (d) {
        return d.id === 'low';
      }).value
    };
  });
}

var CandleStickViz = /*#__PURE__*/function (_BaseViz) {
  _inherits(CandleStickViz, _BaseViz);

  var _super = _createSuper(CandleStickViz);

  function CandleStickViz() {
    _classCallCheck(this, CandleStickViz);

    return _super.apply(this, arguments);
  }

  return CandleStickViz;
}(BaseViz);

_defineProperty(CandleStickViz, "defaultConfig", {
  LegendBehavior: {
    showLegend: {
      value: true,
      nonEditable: true
    }
  },
  ItemsHelper: {
    colorScale: {
      nonEditable: true
    },
    colorDict: {
      nonEditable: true
    }
  },
  AxisHelper: {
    y: {
      trimThreshold: {
        nonEditable: true
      }
    },
    x: {
      showTickValues: {
        nonEditable: true
      },
      trimThreshold: {
        nonEditable: true
      }
    },
    zoomAxes: ['x']
  },
  TooltipBehavior: {
    getHtml: function getHtml(d) {
      return "<div> \n        open: ".concat(this.valueWithUnit(d.open), "<br/>\n        close: ").concat(this.valueWithUnit(d.close), "<br/>\n        low: ").concat(this.valueWithUnit(d.low), "<br/>\n        high: ").concat(this.valueWithUnit(d.high), "</div>\n        <div class=\"secondary\">").concat(d.id, "</div>\n        ");
    }
  }
});

_defineProperty(CandleStickViz, "chartClass", CandleStickChart);

_defineProperty(CandleStickViz, "dataControllerClass", CandleStickDataController);

/**
 * # {componentLabel} (`class {componentClassName}`)
 * 
 * Used to display price movements of a security, derivative, or currency. 
 * 
 * Each "candlestick" typically shows one day, thus a one-month chart may show the 20 trading days as 20 candlesticks. Candlestick charts can also be built using intervals shorter or longer than one day. It is similar to a bar chart in that each candlestick represents all four important pieces of information for that day: open and close in the thick body; high and low in the “candle wick”.
 * 
 * ### Example Usage
 * ```javascript
 *   import {CandleStick} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new CandleStick($el, data, config);
 * ```
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 5 columns. Each row represents an entry, and the first column should be the X value, then its open,close, high and low values.
 *  
 * | X       |     Open  |    Close  |  High   |   Low    |
 * | -------- | ------ |-------|----------|-----------|
 * |   1      |    22.4|   22.4|  15.66  |   12.30    |
 * |   2      |    52.3|   12.5|   52.4 |   32.45    |
 * |   3      |    12.8|   52.2|  48.10  |   44.10    |
 * 
 * {.data-table}
 *
 */

var CandleStickComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(CandleStickComponent, _BaseComponent);

  var _super = _createSuper(CandleStickComponent);

  function CandleStickComponent() {
    _classCallCheck(this, CandleStickComponent);

    return _super.apply(this, arguments);
  }

  return CandleStickComponent;
}(BaseComponent);

_defineProperty(CandleStickComponent, "vizClass", CandleStickViz);

_defineProperty(CandleStickComponent, "dataFormat", [{
  index: 0,
  axis: 'x0',
  label: 'id',
  types: [Number, Date],
  role: 'id',
  roleLabel: 'X value - Number or Date (dd-mm-yyyy)'
}, {
  index: 1,
  axis: 'y0',
  label: 'Open',
  types: [Number],
  role: 'value',
  roleLabel: 'Open'
}, {
  index: 2,
  axis: 'y0',
  label: 'Close',
  types: [Number],
  role: 'value',
  roleLabel: 'Close'
}, {
  index: 3,
  axis: 'y0',
  label: 'High',
  types: [Number],
  role: 'value',
  roleLabel: 'High'
}, {
  index: 4,
  axis: 'y0',
  label: 'Low',
  types: [Number],
  role: 'value',
  roleLabel: 'Low'
}]);

_defineProperty(CandleStickComponent, "componentLabel", "Candlestick");

_defineProperty(CandleStickComponent, "defaultConfig", {
  title: CandleStickComponent.componentLabel
});

var epsilon$5 = 1e-6;
var epsilon2$1 = 1e-12;
var pi$4 = Math.PI;
var halfPi$2 = pi$4 / 2;
var quarterPi = pi$4 / 4;
var tau$4 = pi$4 * 2;
var degrees$1 = 180 / pi$4;
var radians = pi$4 / 180;
var abs$1 = Math.abs;
var atan = Math.atan;
var atan2$1 = Math.atan2;
var cos$1 = Math.cos;
var exp = Math.exp;
var log = Math.log;
var sin$1 = Math.sin;
var sign$1 = Math.sign || function (x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sqrt$1 = Math.sqrt;
var tan = Math.tan;
function acos$1(x) {
  return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);
}
function asin$2(x) {
  return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);
}

function noop$3() {}

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function (object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function (object, stream) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function (object, stream) {
    stream.sphere();
  },
  Point: function (object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function (object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function (object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function (object, stream) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1,
      n = coordinates.length - closed,
      coordinate;
  stream.lineStart();

  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);

  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1,
      n = coordinates.length;
  stream.polygonStart();

  while (++i < n) streamLine(coordinates[i], stream, 1);

  stream.polygonEnd();
}

function geoStream (object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
}

function spherical(cartesian) {
  return [atan2$1(cartesian[1], cartesian[0]), asin$2(cartesian[2])];
}
function cartesian(spherical) {
  var lambda = spherical[0],
      phi = spherical[1],
      cosPhi = cos$1(phi);
  return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];
}
function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
} // TODO return a

function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}
function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
} // TODO return d

function cartesianNormalizeInPlace(d) {
  var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

function compose (a, b) {
  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function (x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };
  return compose;
}

function rotationIdentity(lambda, phi) {
  return [abs$1(lambda) > pi$4 ? lambda + Math.round(-lambda / tau$4) * tau$4 : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;
function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau$4) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}

function forwardRotationLambda(deltaLambda) {
  return function (lambda, phi) {
    return lambda += deltaLambda, [lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos$1(deltaPhi),
      sinDeltaPhi = sin$1(deltaPhi),
      cosDeltaGamma = cos$1(deltaGamma),
      sinDeltaGamma = sin$1(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = cos$1(phi),
        x = cos$1(lambda) * cosPhi,
        y = sin$1(lambda) * cosPhi,
        z = sin$1(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [atan2$1(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin$2(k * cosDeltaGamma + y * sinDeltaGamma)];
  }

  rotation.invert = function (lambda, phi) {
    var cosPhi = cos$1(phi),
        x = cos$1(lambda) * cosPhi,
        y = sin$1(lambda) * cosPhi,
        z = sin$1(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [atan2$1(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin$2(k * cosDeltaPhi - x * sinDeltaPhi)];
  };

  return rotation;
}

function rotation (rotate) {
  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
  }

  forward.invert = function (coordinates) {
    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
  };

  return forward;
}

function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = cos$1(radius),
      sinRadius = sin$1(radius),
      step = direction * delta;

  if (t0 == null) {
    t0 = radius + direction * tau$4;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$4;
  }

  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
    stream.point(point[0], point[1]);
  }
} // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].

function circleRadius(cosRadius, point) {
  point = cartesian(point), point[0] -= cosRadius;
  cartesianNormalizeInPlace(point);
  var radius = acos$1(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + tau$4 - epsilon$5) % tau$4;
}

function clipBuffer () {
  var lines = [],
      line;
  return {
    point: function (x, y, m) {
      line.push([x, y, m]);
    },
    lineStart: function () {
      lines.push(line = []);
    },
    lineEnd: noop$3,
    rejoin: function () {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function () {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}

function pointEqual (a, b) {
  return abs$1(a[0] - b[0]) < epsilon$5 && abs$1(a[1] - b[1]) < epsilon$5;
}

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection

  this.e = entry; // is an entry?

  this.v = false; // visited

  this.n = this.p = null; // next & previous
} // A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.


function clipRejoin (segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;
  segments.forEach(function (segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n,
        p0 = segment[0],
        p1 = segment[n],
        x;

    if (pointEqual(p0, p1)) {
      if (!p0[2] && !p1[2]) {
        stream.lineStart();

        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);

        stream.lineEnd();
        return;
      } // handle degenerate cases by moving the point


      p1[0] += 2 * epsilon$5;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });
  if (!subject.length) return;
  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;

    while (current.v) if ((current = current.n) === start) return;

    points = current.z;
    stream.lineStart();

    do {
      current.v = current.o.v = true;

      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }

        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;

          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }

        current = current.p;
      }

      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);

    stream.lineEnd();
  }
}

function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;

  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }

  a.n = b = array[0];
  b.p = a;
}

function longitude(point) {
  if (abs$1(point[0]) <= pi$4) return point[0];else return sign$1(point[0]) * ((abs$1(point[0]) + pi$4) % tau$4 - pi$4);
}

function polygonContains (polygon, point) {
  var lambda = longitude(point),
      phi = point[1],
      sinPhi = sin$1(phi),
      normal = [sin$1(lambda), -cos$1(lambda), 0],
      angle = 0,
      winding = 0;
  var sum = new Adder();
  if (sinPhi === 1) phi = halfPi$2 + epsilon$5;else if (sinPhi === -1) phi = -halfPi$2 - epsilon$5;

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = longitude(point0),
        phi0 = point0[1] / 2 + quarterPi,
        sinPhi0 = sin$1(phi0),
        cosPhi0 = cos$1(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = longitude(point1),
          phi1 = point1[1] / 2 + quarterPi,
          sinPhi1 = sin$1(phi1),
          cosPhi1 = cos$1(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > pi$4,
          k = sinPhi0 * sinPhi1;
      sum.add(atan2$1(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
      angle += antimeridian ? delta + sign * tau$4 : delta; // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?

      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection = cartesianCross(normal, arc);
        cartesianNormalizeInPlace(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$2(intersection[2]);

        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  } // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.


  return (angle < -epsilon$5 || angle < epsilon$5 && sum < -epsilon2$1) ^ winding & 1;
}

function clip (pointVisible, clipLine, interpolate, start) {
  return function (sink) {
    var line = clipLine(sink),
        ringBuffer = clipBuffer(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;
    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function () {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge(segments);
        var startInside = polygonContains(polygon, start);

        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }

        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function () {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i,
          n = ringSegments.length,
          m,
          segment,
          point;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n) return; // No intersections.

      if (clean & 1) {
        segment = ringSegments[0];

        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();

          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);

          sink.lineEnd();
        }

        return;
      } // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?


      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
}

function validSegment(segment) {
  return segment.length > 1;
} // Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.


function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$5 : halfPi$2 - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$5 : halfPi$2 - b[1]);
}

var clipAntimeridian = clip(function () {
  return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi$4, -halfPi$2]); // Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.

function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      clean; // no intersections

  return {
    lineStart: function () {
      stream.lineStart();
      clean = 1;
    },
    point: function (lambda1, phi1) {
      var sign1 = lambda1 > 0 ? pi$4 : -pi$4,
          delta = abs$1(lambda1 - lambda0);

      if (abs$1(delta - pi$4) < epsilon$5) {
        // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi$4) {
        // line crosses antimeridian
        if (abs$1(lambda0 - sign0) < epsilon$5) lambda0 -= sign0 * epsilon$5; // handle degeneracies

        if (abs$1(lambda1 - sign1) < epsilon$5) lambda1 -= sign1 * epsilon$5;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }

      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function () {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function () {
      return 2 - clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
  return abs$1(sinLambda0Lambda1) > epsilon$5 ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1) - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;

  if (from == null) {
    phi = direction * halfPi$2;
    stream.point(-pi$4, phi);
    stream.point(0, phi);
    stream.point(pi$4, phi);
    stream.point(pi$4, 0);
    stream.point(pi$4, -phi);
    stream.point(0, -phi);
    stream.point(-pi$4, -phi);
    stream.point(-pi$4, 0);
    stream.point(-pi$4, phi);
  } else if (abs$1(from[0] - to[0]) > epsilon$5) {
    var lambda = from[0] < to[0] ? pi$4 : -pi$4;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}

function clipCircle (radius) {
  var cr = cos$1(radius),
      delta = 6 * radians,
      smallRadius = cr > 0,
      notHemisphere = abs$1(cr) > epsilon$5; // TODO optimise for this common case

  function interpolate(from, to, direction, stream) {
    circleStream(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return cos$1(lambda) * cos$1(phi) > cr;
  } // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.


  function clipLine(stream) {
    var point0, // previous point
    c0, // code for previous point
    v0, // visibility of previous point
    v00, // visibility of first point
    clean; // no intersections

    return {
      lineStart: function () {
        v00 = v0 = false;
        clean = 1;
      },
      point: function (lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi$4 : -pi$4), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart();

        if (v !== v0) {
          point2 = intersect(point0, point1);
          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) point1[2] = 1;
        }

        if (v !== v0) {
          clean = 0;

          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1], 2);
            stream.lineEnd();
          }

          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t; // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.

          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;

            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1], 3);
            }
          }
        }

        if (v && (!point0 || !pointEqual(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }

        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function () {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function () {
        return clean | (v00 && v0) << 1;
      }
    };
  } // Intersects the great circle between a and b with the clip circle.


  function intersect(a, b, two) {
    var pa = cartesian(a),
        pb = cartesian(b); // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).

    var n1 = [1, 0, 0],
        // normal
    n2 = cartesianCross(pa, pb),
        n2n2 = cartesianDot(n2, n2),
        n1n2 = n2[0],
        // cartesianDot(n1, n2),
    determinant = n2n2 - n1n2 * n1n2; // Two polar points.

    if (!determinant) return !two && a;
    var c1 = cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = cartesianCross(n1, n2),
        A = cartesianScale(n1, c1),
        B = cartesianScale(n2, c2);
    cartesianAddInPlace(A, B); // Solve |p(t)|^2 = 1.

    var u = n1xn2,
        w = cartesianDot(A, u),
        uu = cartesianDot(u, u),
        t2 = w * w - uu * (cartesianDot(A, A) - 1);
    if (t2 < 0) return;
    var t = sqrt$1(t2),
        q = cartesianScale(u, (-w - t) / uu);
    cartesianAddInPlace(q, A);
    q = spherical(q);
    if (!two) return q; // Two intersection points.

    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;
    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
    var delta = lambda1 - lambda0,
        polar = abs$1(delta - pi$4) < epsilon$5,
        meridian = polar || delta < epsilon$5;
    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.

    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs$1(q[0] - lambda0) < epsilon$5 ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi$4 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = cartesianScale(u, (-w + t) / uu);
      cartesianAddInPlace(q1, A);
      return [q, spherical(q1)];
    }
  } // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.


  function code(lambda, phi) {
    var r = smallRadius ? radius : pi$4 - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right

    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above

    return code;
  }

  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$4, radius - pi$4]);
}

function clipLine (a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
}

var clipMax = 1e9,
    clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipRectangle(x0, y0, x1, y1) {
  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0,
        a1 = 0;

    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0); while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return abs$1(p[0] - x0) < epsilon$5 ? direction > 0 ? 0 : 3 : abs$1(p[0] - x1) < epsilon$5 ? direction > 0 ? 2 : 1 : abs$1(p[1] - y0) < epsilon$5 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
  }

  return function (stream) {
    var activeStream = stream,
        bufferStream = clipBuffer(),
        segments,
        polygon,
        ring,
        x__,
        y__,
        v__,
        // first point
    x_,
        y_,
        v_,
        // previous point
    first,
        clean;
    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

          if (a1 <= y1) {
            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
          } else {
            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
          }
        }
      }

      return winding;
    } // Buffer geometry within a polygon and then clip it en masse.


    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = merge(segments)).length;

      if (cleanInside || visible) {
        stream.polygonStart();

        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }

        if (visible) {
          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
        }

        stream.polygonEnd();
      }

      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    } // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.


    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }

      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);

      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;

        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

          if (clipLine(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }

            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }

      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}

var identity$6 = (x => x);

var areaSum = new Adder(),
    areaRingSum = new Adder(),
    x00,
    y00,
    x0,
    y0;
var areaStream = {
  point: noop$3,
  lineStart: noop$3,
  lineEnd: noop$3,
  polygonStart: function () {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function () {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop$3;
    areaSum.add(abs$1(areaRingSum));
    areaRingSum = new Adder();
  },
  result: function () {
    var area = areaSum / 2;
    areaSum = new Adder();
    return area;
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function areaPoint(x, y) {
  areaRingSum.add(y0 * x - x0 * y);
  x0 = x, y0 = y;
}

function areaRingEnd() {
  areaPoint(x00, y00);
}

var x0$1 = Infinity,
    y0$1 = x0$1,
    x1 = -x0$1,
    y1 = x1;
var boundsStream = {
  point: boundsPoint,
  lineStart: noop$3,
  lineEnd: noop$3,
  polygonStart: noop$3,
  polygonEnd: noop$3,
  result: function () {
    var bounds = [[x0$1, y0$1], [x1, y1]];
    x1 = y1 = -(y0$1 = x0$1 = Infinity);
    return bounds;
  }
};

function boundsPoint(x, y) {
  if (x < x0$1) x0$1 = x;
  if (x > x1) x1 = x;
  if (y < y0$1) y0$1 = y;
  if (y > y1) y1 = y;
}

var X0 = 0,
    Y0 = 0,
    Z0 = 0,
    X1 = 0,
    Y1 = 0,
    Z1 = 0,
    X2 = 0,
    Y2 = 0,
    Z2 = 0,
    x00$1,
    y00$1,
    x0$2,
    y0$2;
var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function () {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function () {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function () {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};

function centroidPoint(x, y) {
  X0 += x;
  Y0 += y;
  ++Z0;
}

function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x0$2 = x, y0$2 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0$2,
      dy = y - y0$2,
      z = sqrt$1(dx * dx + dy * dy);
  X1 += z * (x0$2 + x) / 2;
  Y1 += z * (y0$2 + y) / 2;
  Z1 += z;
  centroidPoint(x0$2 = x, y0$2 = y);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}

function centroidRingEnd() {
  centroidPointRing(x00$1, y00$1);
}

function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x00$1 = x0$2 = x, y00$1 = y0$2 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0$2,
      dy = y - y0$2,
      z = sqrt$1(dx * dx + dy * dy);
  X1 += z * (x0$2 + x) / 2;
  Y1 += z * (y0$2 + y) / 2;
  Z1 += z;
  z = y0$2 * x - x0$2 * y;
  X2 += z * (x0$2 + x);
  Y2 += z * (y0$2 + y);
  Z2 += z * 3;
  centroidPoint(x0$2 = x, y0$2 = y);
}

function PathContext(context) {
  this._context = context;
}
PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function (_) {
    return this._radius = _, this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._context.moveTo(x, y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._context.lineTo(x, y);

          break;
        }

      default:
        {
          this._context.moveTo(x + this._radius, y);

          this._context.arc(x, y, this._radius, 0, tau$4);

          break;
        }
    }
  },
  result: noop$3
};

var lengthSum = new Adder(),
    lengthRing,
    x00$2,
    y00$2,
    x0$3,
    y0$3;
var lengthStream = {
  point: noop$3,
  lineStart: function () {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function () {
    if (lengthRing) lengthPoint(x00$2, y00$2);
    lengthStream.point = noop$3;
  },
  polygonStart: function () {
    lengthRing = true;
  },
  polygonEnd: function () {
    lengthRing = null;
  },
  result: function () {
    var length = +lengthSum;
    lengthSum = new Adder();
    return length;
  }
};

function lengthPointFirst(x, y) {
  lengthStream.point = lengthPoint;
  x00$2 = x0$3 = x, y00$2 = y0$3 = y;
}

function lengthPoint(x, y) {
  x0$3 -= x, y0$3 -= y;
  lengthSum.add(sqrt$1(x0$3 * x0$3 + y0$3 * y0$3));
  x0$3 = x, y0$3 = y;
}

function PathString() {
  this._string = [];
}
PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function (_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._string.push("M", x, ",", y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._string.push("L", x, ",", y);

          break;
        }

      default:
        {
          if (this._circle == null) this._circle = circle(this._radius);

          this._string.push("M", x, ",", y, this._circle);

          break;
        }
    }
  },
  result: function () {
    if (this._string.length) {
      var result = this._string.join("");

      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}

function d3_geoPath (projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      geoStream(object, projectionStream(contextStream));
    }

    return contextStream.result();
  }

  path.area = function (object) {
    geoStream(object, projectionStream(areaStream));
    return areaStream.result();
  };

  path.measure = function (object) {
    geoStream(object, projectionStream(lengthStream));
    return lengthStream.result();
  };

  path.bounds = function (object) {
    geoStream(object, projectionStream(boundsStream));
    return boundsStream.result();
  };

  path.centroid = function (object) {
    geoStream(object, projectionStream(centroidStream));
    return centroidStream.result();
  };

  path.projection = function (_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$6) : (projection = _).stream, path) : projection;
  };

  path.context = function (_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function (_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
}

function transformer$2(methods) {
  return function (stream) {
    var s = new TransformStream();

    for (var key in methods) s[key] = methods[key];

    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function (x, y) {
    this.stream.point(x, y);
  },
  sphere: function () {
    this.stream.sphere();
  },
  lineStart: function () {
    this.stream.lineStart();
  },
  lineEnd: function () {
    this.stream.lineEnd();
  },
  polygonStart: function () {
    this.stream.polygonStart();
  },
  polygonEnd: function () {
    this.stream.polygonEnd();
  }
};

function fit(projection, fitBounds, object) {
  var clip = projection.clipExtent && projection.clipExtent();
  projection.scale(150).translate([0, 0]);
  if (clip != null) projection.clipExtent(null);
  geoStream(object, projection.stream(boundsStream));
  fitBounds(boundsStream.result());
  if (clip != null) projection.clipExtent(clip);
  return projection;
}

function fitExtent(projection, extent, object) {
  return fit(projection, function (b) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}
function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}
function fitWidth(projection, width, object) {
  return fit(projection, function (b) {
    var w = +width,
        k = w / (b[1][0] - b[0][0]),
        x = (w - k * (b[1][0] + b[0][0])) / 2,
        y = -k * b[0][1];
    projection.scale(150 * k).translate([x, y]);
  }, object);
}
function fitHeight(projection, height, object) {
  return fit(projection, function (b) {
    var h = +height,
        k = h / (b[1][1] - b[0][1]),
        x = -k * b[0][0],
        y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

var maxDepth = 16,
    // maximum depth of subdivision
cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)

function resample (project, delta2) {
  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
}

function resampleNone(project) {
  return transformer$2({
    point: function (x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample$1(project, delta2) {
  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;

    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = sqrt$1(a * a + b * b + c * c),
          phi2 = asin$2(c /= m),
          lambda2 = abs$1(abs$1(c) - 1) < epsilon$5 || abs$1(lambda0 - lambda1) < epsilon$5 ? (lambda0 + lambda1) / 2 : atan2$1(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;

      if (dz * dz / d2 > delta2 // perpendicular projected distance
      || abs$1((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }

  return function (stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
    lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function () {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = cartesian([lambda, phi]),
          p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}

var transformRadians = transformer$2({
  point: function (x, y) {
    this.stream.point(x * radians, y * radians);
  }
});

function transformRotate(rotate) {
  return transformer$2({
    point: function (x, y) {
      var r = rotate(x, y);
      return this.stream.point(r[0], r[1]);
    }
  });
}

function scaleTranslate(k, dx, dy, sx, sy) {
  function transform(x, y) {
    x *= sx;
    y *= sy;
    return [dx + k * x, dy - k * y];
  }

  transform.invert = function (x, y) {
    return [(x - dx) / k * sx, (dy - y) / k * sy];
  };

  return transform;
}

function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
  if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);
  var cosAlpha = cos$1(alpha),
      sinAlpha = sin$1(alpha),
      a = cosAlpha * k,
      b = sinAlpha * k,
      ai = cosAlpha / k,
      bi = sinAlpha / k,
      ci = (sinAlpha * dy - cosAlpha * dx) / k,
      fi = (sinAlpha * dx + cosAlpha * dy) / k;

  function transform(x, y) {
    x *= sx;
    y *= sy;
    return [a * x - b * y + dx, dy - b * x - a * y];
  }

  transform.invert = function (x, y) {
    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
  };

  return transform;
}

function projection(project) {
  return projectionMutator(function () {
    return project;
  })();
}
function projectionMutator(projectAt) {
  var project,
      k = 150,
      // scale
  x = 480,
      y = 250,
      // translate
  lambda = 0,
      phi = 0,
      // center
  deltaLambda = 0,
      deltaPhi = 0,
      deltaGamma = 0,
      rotate,
      // pre-rotate
  alpha = 0,
      // post-rotate angle
  sx = 1,
      // reflectX
  sy = 1,
      // reflectX
  theta = null,
      preclip = clipAntimeridian,
      // pre-clip angle
  x0 = null,
      y0,
      x1,
      y1,
      postclip = identity$6,
      // post-clip extent
  delta2 = 0.5,
      // precision
  projectResample,
      projectTransform,
      projectRotateTransform,
      cache,
      cacheStream;

  function projection(point) {
    return projectRotateTransform(point[0] * radians, point[1] * radians);
  }

  function invert(point) {
    point = projectRotateTransform.invert(point[0], point[1]);
    return point && [point[0] * degrees$1, point[1] * degrees$1];
  }

  projection.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };

  projection.preclip = function (_) {
    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
  };

  projection.postclip = function (_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };

  projection.clipAngle = function (_) {
    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
  };

  projection.clipExtent = function (_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$6) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function (_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function (_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function (_) {
    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
  };

  projection.rotate = function (_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
  };

  projection.angle = function (_) {
    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees$1;
  };

  projection.reflectX = function (_) {
    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
  };

  projection.reflectY = function (_) {
    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
  };

  projection.precision = function (_) {
    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);
  };

  projection.fitExtent = function (extent, object) {
    return fitExtent(projection, extent, object);
  };

  projection.fitSize = function (size, object) {
    return fitSize(projection, size, object);
  };

  projection.fitWidth = function (width, object) {
    return fitWidth(projection, width, object);
  };

  projection.fitHeight = function (height, object) {
    return fitHeight(projection, height, object);
  };

  function recenter() {
    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),
        transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);
    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = compose(project, transform);
    projectRotateTransform = compose(rotate, projectTransform);
    projectResample = resample(projectTransform, delta2);
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function () {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}

function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = pi$4 / 3,
      m = projectionMutator(projectAt),
      p = m(phi0, phi1);

  p.parallels = function (_) {
    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];
  };

  return p;
}

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = cos$1(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, sin$1(phi) / cosPhi0];
  }

  forward.invert = function (x, y) {
    return [x / cosPhi0, asin$2(y * cosPhi0)];
  };

  return forward;
}

function conicEqualAreaRaw(y0, y1) {
  var sy0 = sin$1(y0),
      n = (sy0 + sin$1(y1)) / 2; // Are the parallels symmetrical around the Equator?

  if (abs$1(n) < epsilon$5) return cylindricalEqualAreaRaw(y0);
  var c = 1 + sy0 * (2 * n - sy0),
      r0 = sqrt$1(c) / n;

  function project(x, y) {
    var r = sqrt$1(c - 2 * n * sin$1(y)) / n;
    return [r * sin$1(x *= n), r0 - r * cos$1(x)];
  }

  project.invert = function (x, y) {
    var r0y = r0 - y,
        l = atan2$1(x, abs$1(r0y)) * sign$1(r0y);
    if (r0y * n < 0) l -= pi$4 * sign$1(x) * sign$1(r0y);
    return [l / n, asin$2((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}
function conicEqualArea () {
  return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
}

function d3_geoAlbers () {
  return conicEqualArea().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
}

// as this will avoid emitting interleaving lines and polygons.

function multiplex(streams) {
  var n = streams.length;
  return {
    point: function (x, y) {
      var i = -1;

      while (++i < n) streams[i].point(x, y);
    },
    sphere: function () {
      var i = -1;

      while (++i < n) streams[i].sphere();
    },
    lineStart: function () {
      var i = -1;

      while (++i < n) streams[i].lineStart();
    },
    lineEnd: function () {
      var i = -1;

      while (++i < n) streams[i].lineEnd();
    },
    polygonStart: function () {
      var i = -1;

      while (++i < n) streams[i].polygonStart();
    },
    polygonEnd: function () {
      var i = -1;

      while (++i < n) streams[i].polygonEnd();
    }
  };
} // A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers


function d3_geoAlbersUsa () {
  var cache,
      cacheStream,
      lower48 = d3_geoAlbers(),
      lower48Point,
      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
      alaskaPoint,
      // EPSG:3338
  hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
      hawaiiPoint,
      // ESRI:102007
  point,
      pointStream = {
    point: function (x, y) {
      point = [x, y];
    }
  };

  function albersUsa(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
  }

  albersUsa.invert = function (coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
  };

  albersUsa.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function (_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function (_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function (_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(),
        x = +_[0],
        y = +_[1];
    lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);
    alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + epsilon$5, y + 0.120 * k + epsilon$5], [x - 0.214 * k - epsilon$5, y + 0.234 * k - epsilon$5]]).stream(pointStream);
    hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + epsilon$5, y + 0.166 * k + epsilon$5], [x - 0.115 * k - epsilon$5, y + 0.234 * k - epsilon$5]]).stream(pointStream);
    return reset();
  };

  albersUsa.fitExtent = function (extent, object) {
    return fitExtent(albersUsa, extent, object);
  };

  albersUsa.fitSize = function (size, object) {
    return fitSize(albersUsa, size, object);
  };

  albersUsa.fitWidth = function (width, object) {
    return fitWidth(albersUsa, width, object);
  };

  albersUsa.fitHeight = function (height, object) {
    return fitHeight(albersUsa, height, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
}

function mercatorRaw(lambda, phi) {
  return [lambda, log(tan((halfPi$2 + phi) / 2))];
}

mercatorRaw.invert = function (x, y) {
  return [x, 2 * atan(exp(y)) - halfPi$2];
};

function d3_geoMercator () {
  return mercatorProjection(mercatorRaw).scale(961 / tau$4);
}
function mercatorProjection(project) {
  var m = projection(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null,
      y0,
      x1,
      y1; // clip extent

  m.scale = function (_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function (_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.center = function (_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.clipExtent = function (_) {
    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = pi$4 * scale(),
        t = m(rotation(m.rotate()).invert([0, 0]));
    return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
  }

  return reclip();
}

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}
equirectangularRaw.invert = equirectangularRaw;
function d3_geoEquirectangular () {
  return projection(equirectangularRaw).scale(152.63);
}

function conicEquidistantRaw(y0, y1) {
  var cy0 = cos$1(y0),
      n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
      g = cy0 / n + y0;
  if (abs$1(n) < epsilon$5) return equirectangularRaw;

  function project(x, y) {
    var gy = g - y,
        nx = n * x;
    return [gy * sin$1(nx), g - gy * cos$1(nx)];
  }

  project.invert = function (x, y) {
    var gy = g - y,
        l = atan2$1(x, abs$1(gy)) * sign$1(gy);
    if (gy * n < 0) l -= pi$4 * sign$1(x) * sign$1(gy);
    return [l / n, g - sign$1(n) * sqrt$1(x * x + gy * gy)];
  };

  return project;
}
function d3_geoConicEquidistant () {
  return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
}

function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi,
      phi4 = phi2 * phi2;
  return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];
}

naturalEarth1Raw.invert = function (x, y) {
  var phi = y,
      i = 25,
      delta;

  do {
    var phi2 = phi * phi,
        phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
  } while (abs$1(delta) > epsilon$5 && --i > 0);

  return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];
};

function d3_geoNaturalEarth1 () {
  return projection(naturalEarth1Raw).scale(175.295);
}

var projections = {
  d3_geoMercator: d3_geoMercator,
  d3_geoNaturalEarth1: d3_geoNaturalEarth1,
  d3_geoConicEquidistant: d3_geoConicEquidistant,
  d3_geoAlbersUsa: d3_geoAlbersUsa,
  d3_geoEquirectangular: d3_geoEquirectangular,
  d3_geoAlbers: d3_geoAlbers
}; // import geojson from '../data/geojson/spain.geo.json'

var ChoroplethChart = /*#__PURE__*/function (_BaseChart) {
  _inherits(ChoroplethChart, _BaseChart);

  var _super = _createSuper(ChoroplethChart);

  function ChoroplethChart() {
    _classCallCheck(this, ChoroplethChart);

    return _super.apply(this, arguments);
  }

  _createClass(ChoroplethChart, [{
    key: "beforeHelpers",
    value: function beforeHelpers() {// this.content = this.root.selectAll('.content').data([null])
      // this.content = this.content.merge(this.content.enter().append('g').attr('class','content'))
      // this.content.attr('transform',`translate(${this.size.width/2},${this.size.height/2})`)
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this = this;

      var features = this.config.features;
      var featureIdProperty = this.config.featureIdProperty;
      var specialRegions = this.config.displacedFeatures || []; //['USA-3563','USA-3517']

      var regionGroups = _objectSpread2({
        "default": {
          type: 'FeatureCollection',
          features: features.filter(function (f) {
            return specialRegions.indexOf(f.properties[featureIdProperty]) < 0;
          })
        }
      }, specialRegions.reduce(function (ob, id) {
        ob[id] = features.find(function (f) {
          return f.properties[featureIdProperty] === id;
        });
        return ob;
      }, {}));

      var defaultMargin = 20;
      var defaultSize = {
        width: this.size.width,
        height: this.size.height - defaultMargin
      };

      var _short = Math.min(this.size.width, this.size.height);

      var boxWidth = Object.keys(regionGroups).length > 1 ? _short / (Object.keys(regionGroups).length - 1) * 0.24 : 0;
      var boxMargin = Object.keys(regionGroups).length > 1 ? _short * 0.08 : 0;
      var totalBoxWidth = boxWidth + 2 * boxMargin;
      var paths = Object.keys(regionGroups).reduce(function (result, key, i) {
        var extent;
        if (key === 'default') extent = [[boxWidth, defaultMargin], [defaultSize.width, defaultSize.height]];else {
          extent = [[totalBoxWidth * (i - 1) + boxMargin, defaultSize.height - boxWidth], [totalBoxWidth + totalBoxWidth * (i - 1), defaultSize.height]];
          console.log("displaced extent ".concat(key), extent);
        }
        var projFunc = typeof _this.config.projection === 'function' ? _this.config.projection : projections[_this.config.projection] || projections['d3_geoMercator'];
        var proj = projFunc().fitExtent(extent, regionGroups[key]);
        result[key] = d3_geoPath(proj);
        return result;
      }, {});
      this.itemsExitTrans.style('opacity', '0');
      this.itemsEnter.append('path').attr('vector-effect', 'non-scaling-stroke');
      this.itemsEnter.select('path').attr('fill', '#ddd');
      this.itemsEnterTrans.select('path').attr('fill', function (d) {
        return _this._colorKey(d) ? _this.color(d) : 'rgba(200,200,200,0.15)';
      }).attr('stroke', 'transparent');
      this.itemsTrans.select('path').attr('fill', function (d) {
        return _this._colorKey(d) ? _this.color(d) : 'rgba(200,200,200,0.15)';
      }); // this.items.merge(this.itemsEnter).select('path')

      this.itemsEnter.select('path').attr('d', function (d) {
        var f = features.find(function (f) {
          return f.properties[featureIdProperty] === d.id;
        });
        return (paths[d.id] ? paths[d.id] : paths["default"])(f);
      });
      this.itemsTrans.select('path').attr('d', function (d) {
        var f = features.find(function (f) {
          return f.properties[featureIdProperty] === d.id;
        });
        return (paths[d.id] ? paths[d.id] : paths["default"])(f);
      }).attr('stroke', this.config.skin === 'light' ? SKIN_BACKGROUND : SKIN_BACKGROUND_DARK);
    }
  }, {
    key: "getLegendData",
    value: function getLegendData() {
      var _this2 = this;

      if (this.config.ItemsHelper.colorScale === 'categorical') {
        var legendData = {};
        var categories = this.data.reduce(function (res, d) {
          res.push(d[_this2.config.ItemsHelper.colorKey]);
          return res;
        }, []);
        categories = categories.filter(function (d, i) {
          return categories.indexOf(d) === i;
        });
        var categoryData = categories.map(function (g) {
          return {
            id: g,
            category: g
          };
        });
        legendData.category = categoryData;
        legendData.category.icon = 'circle';
        return legendData;
      } else {
        return null;
      }
    }
  }]);

  return ChoroplethChart;
}(BaseChart);

_defineProperty(ChoroplethChart, "defaultConfig", {
  ItemsHelper: {
    colorScale: 'sequential2',
    colorKey: 'value'
  },

  /**
   * List of geojson `features` to be drawn. See [maps](#/developer/PropDetails#features).
   */
  features: {
    type: [Array, null],
    "default": null,
    exposed: true
  },

  /**
   * Name of the Id property in the `features`. See [maps](#/developer/PropDetails#valueFormat).
   */
  featureIdProperty: {
    type: String,
    "default": 'id',
    exposed: true
  },

  /**
   * Name of the Label property in the `features`. See [maps](#/developer/PropDetails#valueFormat).
   */
  featureLabelProperty: {
    type: String,
    "default": 'name',
    exposed: true
  },

  /**
   * List of displaced `features` to be shown in a separate box. See [maps](#/developer/PropDetails#valueFormat).
   */
  displacedFeatures: {
    type: Array,
    "default": [],
    exposed: true
  },

  /**
   * Name of a d3 projection function or custom projection function. See [maps](#/developer/PropDetails#valueFormat).
   */
  projection: {
    type: [String, Function],
    "default": 'd3_geoMercator',
    exposed: true
  }
});

_defineProperty(ChoroplethChart, "helpers", [RootHelper, ItemsHelper, SizeHelper, SelectableHelper]);

function ChoroplethDataController(rows, config) {
  var propperHeaders = ['id', config.ItemsHelper.colorKey];
  var data = convertRowsToData([propperHeaders].concat(_toConsumableArray(rows.slice(1))), 1);
  return config.features.map(function (feature) {
    var candidate = data.find(function (d) {
      return d.id === feature.properties[config.featureIdProperty];
    });
    var result = {
      id: feature.properties[config.featureIdProperty],
      label: feature.properties[config.featureLabelProperty]
    };
    if (candidate) result[config.ItemsHelper.colorKey] = candidate[config.ItemsHelper.colorKey] || undefined;
    return result;
  });
}

var ChoroplethViz = /*#__PURE__*/function (_BaseViz) {
  _inherits(ChoroplethViz, _BaseViz);

  var _super = _createSuper(ChoroplethViz);

  function ChoroplethViz() {
    _classCallCheck(this, ChoroplethViz);

    return _super.apply(this, arguments);
  }

  return ChoroplethViz;
}(BaseViz);

_defineProperty(ChoroplethViz, "defaultConfig", {
  LegendBehavior: {
    showLegend: {
      value: true
    }
  }
});

_defineProperty(ChoroplethViz, "chartClass", ChoroplethChart);

_defineProperty(ChoroplethViz, "dataControllerClass", ChoroplethDataController);

/**
 * # {componentLabel} (`class {componentClassName}`)
 * Used to display thematic data, in which areas are shaded or patterned in proportion to a statistical variable that represents an aggregate summary of a geographic characteristic within each area, such as population density or per-capita income.
 * 
 * Choropleth maps provide an easy way to visualize how a measurement varies across a geographic area or show the level of variability within a region.
 *
 *  ### Example Usage
 * ```javascript
 *   import {ChoroplethSeq} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new ChoroplethSeq($el, data, config);
 *   
 * ```
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 2 columns.
 * 
 * Each row represents a region in the map. 
 * 
 * The first column represents the id of the region (goejson feature). See [maps](#/developer/PropDetails#features) for more info on how to get the right ids in each case.
 * 
 * The second column represents value that will be used to color the reagion.
 * 
 * | id           |  value|  
 * | --------     | ------ |  
 * |   ESP        |    43.4|   
 * |   FRA        |    24.6|    
 * |   USA        |   15.7|     
 * |   GBR        |    53.5|   
 * 
 * {.data-table}

 * */

var ChoroplethSeqComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(ChoroplethSeqComponent, _BaseComponent);

  var _super = _createSuper(ChoroplethSeqComponent);

  function ChoroplethSeqComponent() {
    _classCallCheck(this, ChoroplethSeqComponent);

    return _super.apply(this, arguments);
  }

  return ChoroplethSeqComponent;
}(BaseComponent);

_defineProperty(ChoroplethSeqComponent, "vizClass", ChoroplethViz);

_defineProperty(ChoroplethSeqComponent, "componentLabel", "Choropleth Map");

_defineProperty(ChoroplethSeqComponent, "dataFormat", [{
  index: 0,
  axis: '',
  label: 'id',
  types: [String],
  role: 'feature-id',
  roleLabel: 'Area'
}, {
  index: 1,
  axis: '',
  label: 'value',
  types: [Number, null],
  role: 'value',
  roleLabel: 'Value'
}]);

_defineProperty(ChoroplethSeqComponent, "defaultConfig", {
  title: ChoroplethSeqComponent.componentLabel,
  valueFormat: {
    type: [String, Array, Function, null],
    "default": null
  },
  unit: {
    type: [String, Boolean, null],
    "default": false
  },
  ItemsHelper: {
    colorScale: {
      value: 'sequential2',
      options: ['sequential2', 'sequential3']
    }
  },
  TooltipBehavior: {
    getHtml: function getHtml(d) {
      return "\n          <span class=\"important\">".concat(this.valueWithUnit(d.value), "</span>\n          <br/>\n          ").concat(d.label, "\n        ");
    }
  }
});

/**
 * # {componentLabel} (`class {componentClassName}`)
 * Used to display thematic data on a map, in which areas are colored based on a categorical variable.
 * 
 * Choropleth maps provide an easy way to visualize how a measurement varies across a geographic area or show the level of variability within a region.
 *
 *  ### Example Usage
 * ```javascript
 *   import {ChoroplethCat} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new ChoroplethCat($el, data, config);
 *   
 * ```
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 2 columns.
 * 
 * Each row represents a region  in the map. 
 * 
 * The first column represents the id of the region (goejson feature). See [maps](#/developer/PropDetails#features) for more info on how to get the right ids in each case.
 * 
 * The second column represents color categroy of the region.
 * 
 * | id           |  category|  
 * | --------     | ------ |  
 * |   ESP        |    cat1|   
 * |   FRA        |    cat1|    
 * |   USA        |    cat2|     
 * |   GBR        |    cat3|   
 * 
 * {.data-table}
 * 
 *
 */

var ChoroplethCatComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(ChoroplethCatComponent, _BaseComponent);

  var _super = _createSuper(ChoroplethCatComponent);

  function ChoroplethCatComponent() {
    _classCallCheck(this, ChoroplethCatComponent);

    return _super.apply(this, arguments);
  }

  return ChoroplethCatComponent;
}(BaseComponent);

_defineProperty(ChoroplethCatComponent, "vizClass", ChoroplethViz);

_defineProperty(ChoroplethCatComponent, "componentLabel", "Choropleth Map - Categorical");

_defineProperty(ChoroplethCatComponent, "dataFormat", [{
  index: 0,
  axis: '',
  label: 'id',
  types: [String],
  role: 'feature-id',
  roleLabel: 'Area'
}, {
  index: 1,
  axis: '',
  label: 'category',
  types: [String, null],
  role: 'value',
  roleLabel: 'Category'
}]);

_defineProperty(ChoroplethCatComponent, "defaultConfig", {
  title: ChoroplethCatComponent.componentLabel,
  ItemsHelper: {
    colorScale: {
      value: 'categorical',
      options: ['categorical'],
      nonEditable: true
    },
    colorKey: 'category'
  },
  TooltipBehavior: {
    getHtml: function getHtml(d) {
      return "\n        <div class=\"important\">".concat(d.label, "</div>\n        <div>\n          <span class=\"icon\" style=\"display: inline-block; width: 9px; height: 9px; border-radius: 50%; background: ").concat(this.color(d), "; margin-right: 3px\"></span>\n          ").concat(d.category, "\n        </div>\n        ");
    }
  }
});

var PercentageBarChart = /*#__PURE__*/function (_BaseChart) {
  _inherits(PercentageBarChart, _BaseChart);

  var _super = _createSuper(PercentageBarChart);

  function PercentageBarChart() {
    var _this;

    _classCallCheck(this, PercentageBarChart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.zeroBased = true;
    return _this;
  }

  _createClass(PercentageBarChart, [{
    key: "checkConsistency",
    value: function checkConsistency() {
      return true;
    }
  }, {
    key: "beforeHelpers",
    value: function beforeHelpers() {
      this.margin = {
        top: 20,
        right: 100,
        left: 20,
        bottom: 20
      };
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this2 = this;

      var longDir, getTranslate, getShort; //,shortDir
      // let yScale = d3_scaleLinear().domain([0, 100]).range([0, this.contentSize.width])
      // let xScale = d3_scaleBand()
      //   .domain(categoricalExtent(this.data))
      //   .range([0, this.contentSize.height])

      longDir = 'height'; // shortDir = 'width'

      getTranslate = function getTranslate(_long, _short) {
        return "translate(".concat(_short, ",").concat(_long, ")");
      };

      var offsetValue;
      if (this.axes.y.func.scale().domain()[0] < 0 && this.axes.y.func.scale().domain()[1] > 0) offsetValue = 0;else offsetValue = this.axes.y.func.scale().domain()[0];

      getShort = function getShort(v) {
        return Math.abs(_this2.axes.y.func.scale()(offsetValue) - v);
      }; // let barPercent = 0.4
      // let barWidth = Math.min(MAX_BAR_WIDTH, this.axes.x.func.scale().bandwidth() * barPercent)


      var barWidth = this.axes.x.func.scale().bandwidth() - 22 - 8;
      var barMargin = (this.axes.x.func.scale().bandwidth() - barWidth) / 2;
      var drawItem;
      var stackPadding = 2;

      drawItem = function drawItem(sel, status) {
        sel.attr('transform', function (d) {
          var barPos;
          if (status === 'enter' || status === 'exit') barPos = _this2.axes.y.func.scale()(0);else barPos = _this2.axes.y.func.scale()(_this2.config.horizontal ? d.y0 : d.y1);
          return getTranslate(_this2.axes.x.func.scale()(d.id) + barMargin, barPos + (_this2.config.horizontal ? 0 : stackPadding / 2));
        });
        sel.select('.item-path').attr('transform', "translate(0,10)").attr('fill', function (d) {
          if (d.parentId === '_total_') return _this2.config.skin === 'dark' ? 'rgb(68, 68, 68)' : 'rgb(246, 250, 252)';else return _this2.color({
            id: d.parentId
          });
        }).attr('d', function (d) {
          var barLength;
          if (status === 'enter' || status === 'exit') barLength = 0;else barLength = getShort(_this2.axes.y.func.scale()(d.safeValue)) - (d.isFirstLayer ? stackPadding : stackPadding);
          barLength = Math.max(barLength, 0);
          var w = longDir === 'width' ? barWidth : barLength;
          var h = longDir === 'width' ? barLength : barWidth; //CUSTOMIZED:

          var dents = [d.isLastLayer ? 'br' : null, d.isFirstLayer ? 'tl' : null].filter(function (d) {
            return d;
          });
          if (dents.length === 0) dents = 'none';
          return dentedRect(w, h, dents);
        });
      };

      var totalsData = this.data[0].value.map(function (d) {
        return {
          id: d.id,
          parentId: '_total_',
          y0: 0,
          y1: 100,
          value: 100,
          safeValue: 100,
          totalPercentage: d.layerTotal,
          totalAbs: d.layerTotalAbs
        };
      });
      var totalsRoot = this.content.selectAll('.totals-layer').data([null]);
      totalsRoot = totalsRoot.merge(totalsRoot.enter().append('g').attr('class', 'totals-layer'));
      totalsRoot.lower();
      var totalsItems = totalsRoot.selectAll('.total-item').data(totalsData, function (d) {
        return d.id;
      });
      totalsItems.exit().remove();
      var totalsItemsEnter = totalsItems.enter().append('g').attr('class', 'total-item');
      totalsItemsEnter.append('path').attr('class', 'item-path');
      totalsItemsEnter.append('text').attr('class', 'label');
      totalsItemsEnter.append('text').attr('class', 'value');
      totalsItems = totalsItems.merge(totalsItemsEnter);
      totalsItems.call(drawItem);
      totalsItems.select('.label').style('font-size', '16px') // .style('font-family', 'santander-headline-bold-embedded')
      // .style('font-weight', 'bold')
      .style('fill', this.config.skin === 'dark' ? '#fff' : '#666').text(function (d) {
        return d.id + (_this2.config.showDatumValues ? " (".concat(_this2.valueWithUnit(d.totalAbs, 'y'), ")") : '');
      });
      totalsItems.select('.value') // .text(d => parseFloat(d.totalPercentage).toFixed(2) + '%')
      .text(function (d) {
        return _this2.formatValue(d.totalPercentage, 'y') + '%';
      }).style('font-size', '18px') // .style('font-family', 'santander-headline-bold-embedded')
      .style('font-weight', '300').style('fill', this.config.skin === 'dark' ? '#fff' : '#222').attr('transform', "translate(".concat(this.size.width - 40, ",").concat(10 + barWidth / 2, ")")).attr('text-anchor', 'end').attr('dominant-baseline', 'middle');
      this.itemsEnter.append('path').attr('class', 'item-path'); // HAy que pintar lo "viejos" primero para assegurar que se mantiene el orden de colores...

      this.itemsTrans.call(drawItem);
      this.itemsEnter.call(drawItem, 'enter');
      this.itemsEnterTrans.call(drawItem);
      this.itemsExitTrans.style('opacity', 0);
      if (this.parentItemsExitTrans) this.parentItemsExitTrans.style('opacity', 0);
    }
  }]);

  return PercentageBarChart;
}(BaseChart);

_defineProperty(PercentageBarChart, "defaultConfig", {
  /**
   * Minimum height of each bar (in pixels).
   */
  minBarHeight: {
    type: [Number],
    "default": 0,
    exposed: true
  },
  horizontal: {
    type: Boolean,
    "default": true,
    exposed: false,
    nonEditable: true
  },
  showDatumValues: {
    type: Boolean,
    "default": false,
    exposed: true
  },
  AxisHelper: {
    /**
     * Enable automatic scroll. If enabled, axes will be scrolalbel only if the number of bars is large enough.
     */
    zoom: {
      value: false,
      exposed: false,
      nonEditable: true
    },
    x: {
      scale: {
        value: 'band',
        exposed: false,
        nonEditable: true
      },
      side: {
        value: 'top',
        exposed: false,
        nonEditable: true
      },
      showTickValues: {
        value: false,
        exposed: false,
        nonEditable: true
      },
      tickOrientation: {
        exposed: false,
        nonEditable: true
      },
      tickWrap: {
        exposed: false,
        nonEditable: true
      },
      valueFormat: {
        exposed: false,
        nonEditable: true
      },
      grid: {
        exposed: false,
        nonEditable: true
      },
      unit: {
        exposed: false,
        nonEditable: true
      },
      trimThreshold: {
        value: false,
        exposed: false,
        nonEditable: true
      },
      getExtent: function getExtent(data) {
        return categoricalExtent(data);
      }
    },
    y: {
      side: {
        value: 'right',
        exposed: false,
        nonEditable: true
      },
      showTickValues: {
        value: false,
        exposed: false,
        nonEditable: true
      },
      scale: {
        value: 'linear',
        exposed: false,
        nonEditable: true
      },
      tickOrientation: {
        exposed: false,
        nonEditable: true
      },
      tickWrap: {
        exposed: false,
        nonEditable: true
      },
      trimThreshold: {
        value: false,
        exposed: false,
        nonEditable: true
      },
      getExtent: function getExtent(data) {
        // FIJAMOS 0,100 o no!?!?!
        return [0, 100]; // let extent, extentParts
        // extentParts = continuousExtentParts(data, d => [d.y0, d.y1])
        // // console.log("extent parts",extentParts)
        // extent = continuousExtent(extentParts)
        // // console.log("bar extent bef",extent)
        // extent = cleanCollisions(this.axes.y, extent, extentParts)
        // // console.log("bar extent aft",extent)
        // return extent
      }
    }
  },
  TooltipBehavior: {
    getItemOffset: function getItemOffset($el) {
      var original = $el.getBoundingClientRect();
      return {
        x: original.x + original.width / 2,
        y: original.top //- 5,

      };
    },
    getHtml: function getHtml(d) {
      if (this.data.length > 1) return "\n          <div class=\"tip-value important\">".concat(this.valueWithUnit(d.value, 'y'), "</div>\n          <div class=\"tip-id\">\n            <span class=\"icon\" style=\"display: inline-block; width: 9px; height: 9px; border-radius: 50%; background: ").concat(this.color({
        id: d.parentId
      }), "; margin-right: 3px\"></span>\n            ").concat(d.parentId, "\n          </div>\n          <div class=\"secondary\">").concat(this.formatValue(d.id, 'x'), "</div>\n            ");else return "\n        <div class=\"tip-value important\">".concat(this.valueWithUnit(d.value, 'y'), "</div>\n        <div class=\"secondary\">\n            ").concat(d.id, "\n          </div>\n        ");
    }
  }
});

_defineProperty(PercentageBarChart, "helpers", [RootHelper, ItemsHelper, SelectableHelper, SizeHelper, AxisHelper]);

function PercentageBarDataController(rows, config) {
  var headers = rows[0];
  var propperHeaders;
  var dims;
  propperHeaders = ['id'].concat(_toConsumableArray(headers.slice(1)));
  dims = 2;
  var data = convertRowsToData([propperHeaders].concat(_toConsumableArray(rows.slice(1))), dims); // FALTA NORMALIZAR!!!

  var total = data.reduce(function (sum, d) {
    return sum + +d.value.reduce(function (subsum, dd) {
      return subsum + +dd.value;
    }, 0);
  }, 0);
  data = data.map(function (d) {
    return _objectSpread2(_objectSpread2({}, d), {}, {
      value: d.value.map(function (dd) {
        return _objectSpread2(_objectSpread2({}, dd), {}, {
          percentage: 100 * dd.value / total
        });
      })
    });
  });
  data.forEach(function (d) {
    d.totalPercentage = d.value.reduce(function (sum, dd) {
      return sum + dd.percentage;
    }, 0);
    d.totalAbs = d.value.reduce(function (sum, dd) {
      return sum + dd.value;
    }, 0);
  });
  data.sort(function (a, b) {
    return a.totalPercentage - b.totalPercentage;
  }); // data = data.map(d => {
  //   let percent = Math.floor((100 * d.value) / total)
  //   if (percent < 1) percent = '<1'
  //   return { ...d, percent: percent }
  // })

  var extent = [min(data, function (d) {
    return min(d.value, function (dd) {
      return dd.percentage;
    });
  }), max(data, function (d) {
    return max(d.value, function (dd) {
      return dd.percentage;
    });
  })];
  if (extent[0] > 0) extent[0] = 0;
  var extentSize = Math.abs(extent[1] - extent[0]);

  var getSafeValue = function getSafeValue(v) {
    return config.minBarHeight ? Math.sign(v || 1) * Math.max(extentSize * config.minBarHeight / 100, Math.abs(v)) : +v;
  };

  var keys = data.reduce(function (res, d) {
    d.value.forEach(function (dd) {
      return res.push(dd.id);
    });
    return res;
  }, []);
  keys = keys.filter(function (value, index, self) {
    return self.indexOf(value) === index;
  });
  var objArray = data.map(function (layer) {
    var res = {
      id: layer.id
    };
    layer.value.forEach(function (dd) {
      res[dd.id] = {
        value: dd.value,
        percentage: dd.percentage,
        totalAbs: layer.totalAbs,
        totalPercentage: layer.totalPercentage
      };
    });
    return res;
  });
  var stack = d3_stack().value(function (d, key) {
    return getSafeValue(d[key].percentage);
  }).keys(keys);
  var stacked = stack(objArray);
  var result = stacked.map(function (layer) {
    return {
      id: layer.key,
      index: layer.index,
      value: layer.map(function (dd) {
        return {
          id: dd.data.id,
          value: dd.data[layer.key].value,
          safeValue: getSafeValue(dd.data[layer.key].percentage),
          y0: dd[0],
          y1: dd[1],
          layerIndex: layer.index,
          isLastLayer: keys.indexOf(layer.key) === keys.length - 1,
          isFirstLayer: keys.indexOf(layer.key) === 0,
          parentId: layer.key,
          layerTotal: dd.data[layer.key].totalPercentage,
          layerTotalAbs: dd.data[layer.key].totalAbs
        };
      })
    };
  }); // result.push({
  //   id: '_total_',
  //   value: stacked[0].map(dd => {
  //     return {
  //       id: dd.data.id,
  //       value: 100,
  //       parentId: '_total_',
  //       y0: 0,
  //       y1: 100,
  //       value: 100,
  //       safeValue: 100,
  //       layerIndex: -1,
  //     }
  //   }),
  // })

  return result; // let total = data.reduce((sum, d) => sum + +d.value, 0)
  // data = data.map(d => {
  //   let percent = Math.floor((100 * d.value) / total)
  //   if (percent < 1) percent = '<1'
  //   return { ...d, percent: percent }
  // })
  // if (config.groupOthersThreshold > 0) {
  //   let threshold = (total * config.groupOthersThreshold) / 100
  //   let others = data.filter(d => d.value <= threshold)
  //   let notOthers = data.filter(d => d.value > threshold)
  //   if (others.length > 1) {
  //     data = notOthers.concat([
  //       {
  //         id: 'Others',
  //         value: others.reduce((sum, d) => sum + +d.value, 0),
  //         othersData: others,
  //       },
  //     ])
  //   }
  // }
  // let minAngle = config.minSectorAngle ? (config.minSectorAngle / 180) * Math.PI : 0
  // let minValue = (minAngle * total) / (2 * Math.PI)
  // var pie = d3_pie()
  //   .value(d => Math.max(d.value, minValue))
  //   .padAngle(0.02)
  //   .sort(null)
  // let res = pie(data)
  // res.forEach(d => (d.id = d.data.id))
  // res.forEach(d => (d.safeValue = d.value))
  // return res
  // return data.map((d,i)=>{
  //   if(!d.id) d.id = i
  //   return d
  // })
}

var PercentageBarViz = /*#__PURE__*/function (_BaseViz) {
  _inherits(PercentageBarViz, _BaseViz);

  var _super = _createSuper(PercentageBarViz);

  function PercentageBarViz() {
    _classCallCheck(this, PercentageBarViz);

    return _super.apply(this, arguments);
  }

  return PercentageBarViz;
}(BaseViz);

_defineProperty(PercentageBarViz, "defaultConfig", {
  ItemsHelper: {
    colorScale: {
      value: 'categorical',
      options: ['categorical', 'single']
    }
  },
  AxisHelper: {
    x: {
      tickMatchData: {
        nonEditable: true,
        exposed: false
      }
    }
  }
});

_defineProperty(PercentageBarViz, "chartClass", PercentageBarChart);

_defineProperty(PercentageBarViz, "dataControllerClass", PercentageBarDataController);

/**
 * # {componentLabel} (`class {componentClassName}`)
 * The percentage bar chart is used to display how values are distributed across lines and categories (in the stacked version).
 * 
 * ### Example Usage
 * ```javascript
 *   
 *   import {PercentageBar} from 'sdv-lib'
 *   
 *   // Instantiate the chart with a DOM element, a data Array and a config Object
 *   let myChart = new PercentageBar($el, data, config);
 *   
 * ```
 * 
 * ### Data structure {.section-data-structure}
 * The tabular data for this chart should be a table with 2 or more columns.
 * 
 * Each row represents a data line. The first column should be the id/label of the stack, and the rest of the columns should represent each of the layers in the stack. Values will be transformed in percentage of the total value.
 * 
 * | category   | value1 |  value2  |  value3  |
 * | --------   | ------ |  ------  |  ------  |
 * |   Cat1     |    22.4|      15.4|      43.2|
 * |   Cat2     |    52.3|      29.3|      12.8|
 * |   Cat3     |    12.8|      34.1|      61.4|
 * 
 * {.data-table}
 * 
 * Each column will be assigned a different color, to distinguish them inside of each stack. 
 *
 * */

var PercentageBarComponent = /*#__PURE__*/function (_BaseComponent) {
  _inherits(PercentageBarComponent, _BaseComponent);

  var _super = _createSuper(PercentageBarComponent);

  function PercentageBarComponent($root, config, data) {
    _classCallCheck(this, PercentageBarComponent);

    return _super.call(this, $root, config, data);
  }

  return PercentageBarComponent;
}(BaseComponent);

_defineProperty(PercentageBarComponent, "componentLabel", 'Percentage Bars');

_defineProperty(PercentageBarComponent, "vizClass", PercentageBarViz);

_defineProperty(PercentageBarComponent, "dataFormat", [{
  index: 0,
  axis: 'x0',
  types: [String],
  role: 'id',
  roleLabel: 'Category'
}, {
  index: 1,
  axis: 'y0',
  types: [Number],
  role: 'value',
  roleLabel: 'Value'
}, {
  index: -1,
  axis: 'y0',
  label: 'Stack',
  types: [Number, null],
  role: 'value',
  roleLabel: 'Stacked value'
}]);

_defineProperty(PercentageBarComponent, "defaultConfig", {
  title: PercentageBarComponent.componentLabel
});

var componentList = [];
polyfill();
componentList.push(BarChartComponent);
componentList.push(LineChartComponent);
componentList.push(StackedAreaComponent);
componentList.push(StackedBarsComponent);
componentList.push(GroupedBarsComponent);
componentList.push(PieChartComponent);
componentList.push(LineAndBarChartComponent);
componentList.push(ParallelCoordsComponent);
componentList.push(RadarChartComponent);
componentList.push(DonutChartComponent);
componentList.push(ScatterPlotComponent);
componentList.push(BubbleChartComponent);
componentList.push(HeatMapComponent);
componentList.push(CandleStickComponent);
componentList.push(ChoroplethSeqComponent);
componentList.push(ChoroplethCatComponent);
componentList.push(PercentageBarComponent);
var CHARTS = componentList;
var SANTANDER_LOGOS = LOGOS;


//# sourceMappingURL=index.js.map


/***/ }),
/* 3 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! @preserve
 * numeral.js
 * version : 2.0.6
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */

(function (global, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function () {
    /************************************
        Variables
    ************************************/

    var numeral,
        _,
        VERSION = '2.0.6',
        formats = {},
        locales = {},
        defaults = {
            currentLocale: 'en',
            zeroFormat: null,
            nullFormat: null,
            defaultFormat: '0,0',
            scalePercentBy100: true
        },
        options = {
            currentLocale: defaults.currentLocale,
            zeroFormat: defaults.zeroFormat,
            nullFormat: defaults.nullFormat,
            defaultFormat: defaults.defaultFormat,
            scalePercentBy100: defaults.scalePercentBy100
        };


    /************************************
        Constructors
    ************************************/

    // Numeral prototype object
    function Numeral(input, number) {
        this._input = input;

        this._value = number;
    }

    numeral = function(input) {
        var value,
            kind,
            unformatFunction,
            regexp;

        if (numeral.isNumeral(input)) {
            value = input.value();
        } else if (input === 0 || typeof input === 'undefined') {
            value = 0;
        } else if (input === null || _.isNaN(input)) {
            value = null;
        } else if (typeof input === 'string') {
            if (options.zeroFormat && input === options.zeroFormat) {
                value = 0;
            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {
                value = null;
            } else {
                for (kind in formats) {
                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;

                    if (regexp && input.match(regexp)) {
                        unformatFunction = formats[kind].unformat;

                        break;
                    }
                }

                unformatFunction = unformatFunction || numeral._.stringToNumber;

                value = unformatFunction(input);
            }
        } else {
            value = Number(input)|| null;
        }

        return new Numeral(input, value);
    };

    // version number
    numeral.version = VERSION;

    // compare numeral object
    numeral.isNumeral = function(obj) {
        return obj instanceof Numeral;
    };

    // helper functions
    numeral._ = _ = {
        // formats numbers separators, decimals places, signs, abbreviations
        numberToFormat: function(value, format, roundingFunction) {
            var locale = locales[numeral.options.currentLocale],
                negP = false,
                optDec = false,
                leadingCount = 0,
                abbr = '',
                trillion = 1000000000000,
                billion = 1000000000,
                million = 1000000,
                thousand = 1000,
                decimal = '',
                neg = false,
                abbrForce, // force abbreviation
                abs,
                min,
                max,
                power,
                int,
                precision,
                signed,
                thousands,
                output;

            // make sure we never format a null value
            value = value || 0;

            abs = Math.abs(value);

            // see if we should use parentheses for negative number or if we should prefix with a sign
            // if both are present we default to parentheses
            if (numeral._.includes(format, '(')) {
                negP = true;
                format = format.replace(/[\(|\)]/g, '');
            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {
                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;
                format = format.replace(/[\+|\-]/g, '');
            }

            // see if abbreviation is wanted
            if (numeral._.includes(format, 'a')) {
                abbrForce = format.match(/a(k|m|b|t)?/);

                abbrForce = abbrForce ? abbrForce[1] : false;

                // check for space before abbreviation
                if (numeral._.includes(format, ' a')) {
                    abbr = ' ';
                }

                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');

                if (abs >= trillion && !abbrForce || abbrForce === 't') {
                    // trillion
                    abbr += locale.abbreviations.trillion;
                    value = value / trillion;
                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {
                    // billion
                    abbr += locale.abbreviations.billion;
                    value = value / billion;
                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {
                    // million
                    abbr += locale.abbreviations.million;
                    value = value / million;
                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {
                    // thousand
                    abbr += locale.abbreviations.thousand;
                    value = value / thousand;
                }
            }

            // check for optional decimals
            if (numeral._.includes(format, '[.]')) {
                optDec = true;
                format = format.replace('[.]', '.');
            }

            // break number and format
            int = value.toString().split('.')[0];
            precision = format.split('.')[1];
            thousands = format.indexOf(',');
            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;

            if (precision) {
                if (numeral._.includes(precision, '[')) {
                    precision = precision.replace(']', '');
                    precision = precision.split('[');
                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                } else {
                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);
                }

                int = decimal.split('.')[0];

                if (numeral._.includes(decimal, '.')) {
                    decimal = locale.delimiters.decimal + decimal.split('.')[1];
                } else {
                    decimal = '';
                }

                if (optDec && Number(decimal.slice(1)) === 0) {
                    decimal = '';
                }
            } else {
                int = numeral._.toFixed(value, 0, roundingFunction);
            }

            // check abbreviation again after rounding
            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {
                int = String(Number(int) / 1000);

                switch (abbr) {
                    case locale.abbreviations.thousand:
                        abbr = locale.abbreviations.million;
                        break;
                    case locale.abbreviations.million:
                        abbr = locale.abbreviations.billion;
                        break;
                    case locale.abbreviations.billion:
                        abbr = locale.abbreviations.trillion;
                        break;
                }
            }


            // format number
            if (numeral._.includes(int, '-')) {
                int = int.slice(1);
                neg = true;
            }

            if (int.length < leadingCount) {
                for (var i = leadingCount - int.length; i > 0; i--) {
                    int = '0' + int;
                }
            }

            if (thousands > -1) {
                int = int.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + locale.delimiters.thousands);
            }

            if (format.indexOf('.') === 0) {
                int = '';
            }

            output = int + decimal + (abbr ? abbr : '');

            if (negP) {
                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');
            } else {
                if (signed >= 0) {
                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');
                } else if (neg) {
                    output = '-' + output;
                }
            }

            return output;
        },
        // unformats numbers separators, decimals places, signs, abbreviations
        stringToNumber: function(string) {
            var locale = locales[options.currentLocale],
                stringOriginal = string,
                abbreviations = {
                    thousand: 3,
                    million: 6,
                    billion: 9,
                    trillion: 12
                },
                abbreviation,
                value,
                i,
                regexp;

            if (options.zeroFormat && string === options.zeroFormat) {
                value = 0;
            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {
                value = null;
            } else {
                value = 1;

                if (locale.delimiters.decimal !== '.') {
                    string = string.replace(/\./g, '').replace(locale.delimiters.decimal, '.');
                }

                for (abbreviation in abbreviations) {
                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\)|(\\' + locale.currency.symbol + ')?(?:\\))?)?$');

                    if (stringOriginal.match(regexp)) {
                        value *= Math.pow(10, abbreviations[abbreviation]);
                        break;
                    }
                }

                // check for negative number
                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;

                // remove non numbers
                string = string.replace(/[^0-9\.]+/g, '');

                value *= Number(string);
            }

            return value;
        },
        isNaN: function(value) {
            return typeof value === 'number' && isNaN(value);
        },
        includes: function(string, search) {
            return string.indexOf(search) !== -1;
        },
        insert: function(string, subString, start) {
            return string.slice(0, start) + subString + string.slice(start);
        },
        reduce: function(array, callback /*, initialValue*/) {
            if (this === null) {
                throw new TypeError('Array.prototype.reduce called on null or undefined');
            }

            if (typeof callback !== 'function') {
                throw new TypeError(callback + ' is not a function');
            }

            var t = Object(array),
                len = t.length >>> 0,
                k = 0,
                value;

            if (arguments.length === 3) {
                value = arguments[2];
            } else {
                while (k < len && !(k in t)) {
                    k++;
                }

                if (k >= len) {
                    throw new TypeError('Reduce of empty array with no initial value');
                }

                value = t[k++];
            }
            for (; k < len; k++) {
                if (k in t) {
                    value = callback(value, t[k], k, t);
                }
            }
            return value;
        },
        /**
         * Computes the multiplier necessary to make x >= 1,
         * effectively eliminating miscalculations caused by
         * finite precision.
         */
        multiplier: function (x) {
            var parts = x.toString().split('.');

            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);
        },
        /**
         * Given a variable number of arguments, returns the maximum
         * multiplier that must be used to normalize an operation involving
         * all of them.
         */
        correctionFactor: function () {
            var args = Array.prototype.slice.call(arguments);

            return args.reduce(function(accum, next) {
                var mn = _.multiplier(next);
                return accum > mn ? accum : mn;
            }, 1);
        },
        /**
         * Implementation of toFixed() that treats floats more like decimals
         *
         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
         * problems for accounting- and finance-related software.
         */
        toFixed: function(value, maxDecimals, roundingFunction, optionals) {
            var splitValue = value.toString().split('.'),
                minDecimals = maxDecimals - (optionals || 0),
                boundedPrecision,
                optionalsRegExp,
                power,
                output;

            // Use the smallest precision value possible to avoid errors from floating point representation
            if (splitValue.length === 2) {
              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);
            } else {
              boundedPrecision = minDecimals;
            }

            power = Math.pow(10, boundedPrecision);

            // Multiply up by precision, round accurately, then divide and use native toFixed():
            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);

            if (optionals > maxDecimals - boundedPrecision) {
                optionalsRegExp = new RegExp('\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');
                output = output.replace(optionalsRegExp, '');
            }

            return output;
        }
    };

    // avaliable options
    numeral.options = options;

    // avaliable formats
    numeral.formats = formats;

    // avaliable formats
    numeral.locales = locales;

    // This function sets the current locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    numeral.locale = function(key) {
        if (key) {
            options.currentLocale = key.toLowerCase();
        }

        return options.currentLocale;
    };

    // This function provides access to the loaded locale data.  If
    // no arguments are passed in, it will simply return the current
    // global locale object.
    numeral.localeData = function(key) {
        if (!key) {
            return locales[options.currentLocale];
        }

        key = key.toLowerCase();

        if (!locales[key]) {
            throw new Error('Unknown locale : ' + key);
        }

        return locales[key];
    };

    numeral.reset = function() {
        for (var property in defaults) {
            options[property] = defaults[property];
        }
    };

    numeral.zeroFormat = function(format) {
        options.zeroFormat = typeof(format) === 'string' ? format : null;
    };

    numeral.nullFormat = function (format) {
        options.nullFormat = typeof(format) === 'string' ? format : null;
    };

    numeral.defaultFormat = function(format) {
        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';
    };

    numeral.register = function(type, name, format) {
        name = name.toLowerCase();

        if (this[type + 's'][name]) {
            throw new TypeError(name + ' ' + type + ' already registered.');
        }

        this[type + 's'][name] = format;

        return format;
    };


    numeral.validate = function(val, culture) {
        var _decimalSep,
            _thousandSep,
            _currSymbol,
            _valArray,
            _abbrObj,
            _thousandRegEx,
            localeData,
            temp;

        //coerce val to string
        if (typeof val !== 'string') {
            val += '';

            if (console.warn) {
                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);
            }
        }

        //trim whitespaces from either sides
        val = val.trim();

        //if val is just digits return true
        if (!!val.match(/^\d+$/)) {
            return true;
        }

        //if val is empty return false
        if (val === '') {
            return false;
        }

        //get the decimal and thousands separator from numeral.localeData
        try {
            //check if the culture is understood by numeral. if not, default it to current locale
            localeData = numeral.localeData(culture);
        } catch (e) {
            localeData = numeral.localeData(numeral.locale());
        }

        //setup the delimiters and currency symbol based on culture/locale
        _currSymbol = localeData.currency.symbol;
        _abbrObj = localeData.abbreviations;
        _decimalSep = localeData.delimiters.decimal;
        if (localeData.delimiters.thousands === '.') {
            _thousandSep = '\\.';
        } else {
            _thousandSep = localeData.delimiters.thousands;
        }

        // validating currency symbol
        temp = val.match(/^[^\d]+/);
        if (temp !== null) {
            val = val.substr(1);
            if (temp[0] !== _currSymbol) {
                return false;
            }
        }

        //validating abbreviation symbol
        temp = val.match(/[^\d]+$/);
        if (temp !== null) {
            val = val.slice(0, -1);
            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {
                return false;
            }
        }

        _thousandRegEx = new RegExp(_thousandSep + '{2}');

        if (!val.match(/[^\d.,]/g)) {
            _valArray = val.split(_decimalSep);
            if (_valArray.length > 2) {
                return false;
            } else {
                if (_valArray.length < 2) {
                    return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx));
                } else {
                    if (_valArray[0].length === 1) {
                        return ( !! _valArray[0].match(/^\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                    } else {
                        return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                    }
                }
            }
        }

        return false;
    };


    /************************************
        Numeral Prototype
    ************************************/

    numeral.fn = Numeral.prototype = {
        clone: function() {
            return numeral(this);
        },
        format: function(inputString, roundingFunction) {
            var value = this._value,
                format = inputString || options.defaultFormat,
                kind,
                output,
                formatFunction;

            // make sure we have a roundingFunction
            roundingFunction = roundingFunction || Math.round;

            // format based on value
            if (value === 0 && options.zeroFormat !== null) {
                output = options.zeroFormat;
            } else if (value === null && options.nullFormat !== null) {
                output = options.nullFormat;
            } else {
                for (kind in formats) {
                    if (format.match(formats[kind].regexps.format)) {
                        formatFunction = formats[kind].format;

                        break;
                    }
                }

                formatFunction = formatFunction || numeral._.numberToFormat;

                output = formatFunction(value, format, roundingFunction);
            }

            return output;
        },
        value: function() {
            return this._value;
        },
        input: function() {
            return this._input;
        },
        set: function(value) {
            this._value = Number(value);

            return this;
        },
        add: function(value) {
            var corrFactor = _.correctionFactor.call(null, this._value, value);

            function cback(accum, curr, currI, O) {
                return accum + Math.round(corrFactor * curr);
            }

            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;

            return this;
        },
        subtract: function(value) {
            var corrFactor = _.correctionFactor.call(null, this._value, value);

            function cback(accum, curr, currI, O) {
                return accum - Math.round(corrFactor * curr);
            }

            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;

            return this;
        },
        multiply: function(value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = _.correctionFactor(accum, curr);
                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);
            }

            this._value = _.reduce([this._value, value], cback, 1);

            return this;
        },
        divide: function(value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = _.correctionFactor(accum, curr);
                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);
            }

            this._value = _.reduce([this._value, value], cback);

            return this;
        },
        difference: function(value) {
            return Math.abs(numeral(this._value).subtract(value).value());
        }
    };

    /************************************
        Default Locale && Format
    ************************************/

    numeral.register('locale', 'en', {
        delimiters: {
            thousands: ',',
            decimal: '.'
        },
        abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
        },
        ordinal: function(number) {
            var b = number % 10;
            return (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
        },
        currency: {
            symbol: '$'
        }
    });

    

(function() {
        numeral.register('format', 'bps', {
            regexps: {
                format: /(BPS)/,
                unformat: /(BPS)/
            },
            format: function(value, format, roundingFunction) {
                var space = numeral._.includes(format, ' BPS') ? ' ' : '',
                    output;

                value = value * 10000;

                // check for space before BPS
                format = format.replace(/\s?BPS/, '');

                output = numeral._.numberToFormat(value, format, roundingFunction);

                if (numeral._.includes(output, ')')) {
                    output = output.split('');

                    output.splice(-1, 0, space + 'BPS');

                    output = output.join('');
                } else {
                    output = output + space + 'BPS';
                }

                return output;
            },
            unformat: function(string) {
                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);
            }
        });
})();


(function() {
        var decimal = {
            base: 1000,
            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
        },
        binary = {
            base: 1024,
            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']
        };

    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {
            return decimal.suffixes.indexOf(item) < 0;
        }));
        var unformatRegex = allSuffixes.join('|');
        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)
        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';

    numeral.register('format', 'bytes', {
        regexps: {
            format: /([0\s]i?b)/,
            unformat: new RegExp(unformatRegex)
        },
        format: function(value, format, roundingFunction) {
            var output,
                bytes = numeral._.includes(format, 'ib') ? binary : decimal,
                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',
                power,
                min,
                max;

            // check for space before
            format = format.replace(/\s?i?b/, '');

            for (power = 0; power <= bytes.suffixes.length; power++) {
                min = Math.pow(bytes.base, power);
                max = Math.pow(bytes.base, power + 1);

                if (value === null || value === 0 || value >= min && value < max) {
                    suffix += bytes.suffixes[power];

                    if (min > 0) {
                        value = value / min;
                    }

                    break;
                }
            }

            output = numeral._.numberToFormat(value, format, roundingFunction);

            return output + suffix;
        },
        unformat: function(string) {
            var value = numeral._.stringToNumber(string),
                power,
                bytesMultiplier;

            if (value) {
                for (power = decimal.suffixes.length - 1; power >= 0; power--) {
                    if (numeral._.includes(string, decimal.suffixes[power])) {
                        bytesMultiplier = Math.pow(decimal.base, power);

                        break;
                    }

                    if (numeral._.includes(string, binary.suffixes[power])) {
                        bytesMultiplier = Math.pow(binary.base, power);

                        break;
                    }
                }

                value *= (bytesMultiplier || 1);
            }

            return value;
        }
    });
})();


(function() {
        numeral.register('format', 'currency', {
        regexps: {
            format: /(\$)/
        },
        format: function(value, format, roundingFunction) {
            var locale = numeral.locales[numeral.options.currentLocale],
                symbols = {
                    before: format.match(/^([\+|\-|\(|\s|\$]*)/)[0],
                    after: format.match(/([\+|\-|\)|\s|\$]*)$/)[0]
                },
                output,
                symbol,
                i;

            // strip format of spaces and $
            format = format.replace(/\s?\$\s?/, '');

            // format the number
            output = numeral._.numberToFormat(value, format, roundingFunction);

            // update the before and after based on value
            if (value >= 0) {
                symbols.before = symbols.before.replace(/[\-\(]/, '');
                symbols.after = symbols.after.replace(/[\-\)]/, '');
            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {
                symbols.before = '-' + symbols.before;
            }

            // loop through each before symbol
            for (i = 0; i < symbols.before.length; i++) {
                symbol = symbols.before[i];

                switch (symbol) {
                    case '$':
                        output = numeral._.insert(output, locale.currency.symbol, i);
                        break;
                    case ' ':
                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);
                        break;
                }
            }

            // loop through each after symbol
            for (i = symbols.after.length - 1; i >= 0; i--) {
                symbol = symbols.after[i];

                switch (symbol) {
                    case '$':
                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));
                        break;
                    case ' ':
                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));
                        break;
                }
            }


            return output;
        }
    });
})();


(function() {
        numeral.register('format', 'exponential', {
        regexps: {
            format: /(e\+|e-)/,
            unformat: /(e\+|e-)/
        },
        format: function(value, format, roundingFunction) {
            var output,
                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',
                parts = exponential.split('e');

            format = format.replace(/e[\+|\-]{1}0/, '');

            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);

            return output + 'e' + parts[1];
        },
        unformat: function(string) {
            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),
                value = Number(parts[0]),
                power = Number(parts[1]);

            power = numeral._.includes(string, 'e-') ? power *= -1 : power;

            function cback(accum, curr, currI, O) {
                var corrFactor = numeral._.correctionFactor(accum, curr),
                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);
                return num;
            }

            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);
        }
    });
})();


(function() {
        numeral.register('format', 'ordinal', {
        regexps: {
            format: /(o)/
        },
        format: function(value, format, roundingFunction) {
            var locale = numeral.locales[numeral.options.currentLocale],
                output,
                ordinal = numeral._.includes(format, ' o') ? ' ' : '';

            // check for space before
            format = format.replace(/\s?o/, '');

            ordinal += locale.ordinal(value);

            output = numeral._.numberToFormat(value, format, roundingFunction);

            return output + ordinal;
        }
    });
})();


(function() {
        numeral.register('format', 'percentage', {
        regexps: {
            format: /(%)/,
            unformat: /(%)/
        },
        format: function(value, format, roundingFunction) {
            var space = numeral._.includes(format, ' %') ? ' ' : '',
                output;

            if (numeral.options.scalePercentBy100) {
                value = value * 100;
            }

            // check for space before %
            format = format.replace(/\s?\%/, '');

            output = numeral._.numberToFormat(value, format, roundingFunction);

            if (numeral._.includes(output, ')')) {
                output = output.split('');

                output.splice(-1, 0, space + '%');

                output = output.join('');
            } else {
                output = output + space + '%';
            }

            return output;
        },
        unformat: function(string) {
            var number = numeral._.stringToNumber(string);
            if (numeral.options.scalePercentBy100) {
                return number * 0.01;
            }
            return number;
        }
    });
})();


(function() {
        numeral.register('format', 'time', {
        regexps: {
            format: /(:)/,
            unformat: /(:)/
        },
        format: function(value, format, roundingFunction) {
            var hours = Math.floor(value / 60 / 60),
                minutes = Math.floor((value - (hours * 60 * 60)) / 60),
                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));

            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);
        },
        unformat: function(string) {
            var timeArray = string.split(':'),
                seconds = 0;

            // turn hours and minutes into seconds and add them all up
            if (timeArray.length === 3) {
                // hours
                seconds = seconds + (Number(timeArray[0]) * 60 * 60);
                // minutes
                seconds = seconds + (Number(timeArray[1]) * 60);
                // seconds
                seconds = seconds + Number(timeArray[2]);
            } else if (timeArray.length === 2) {
                // minutes
                seconds = seconds + (Number(timeArray[0]) * 60);
                // seconds
                seconds = seconds + Number(timeArray[1]);
            }
            return Number(seconds);
        }
    });
})();

return numeral;
}));


/***/ }),
/* 5 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/**
 * Module dependenices
 */

const clone = __webpack_require__(6);
const typeOf = __webpack_require__(7);
const isPlainObject = __webpack_require__(8);

function cloneDeep(val, instanceClone) {
  switch (typeOf(val)) {
    case 'object':
      return cloneObjectDeep(val, instanceClone);
    case 'array':
      return cloneArrayDeep(val, instanceClone);
    default: {
      return clone(val);
    }
  }
}

function cloneObjectDeep(val, instanceClone) {
  if (typeof instanceClone === 'function') {
    return instanceClone(val);
  }
  if (instanceClone || isPlainObject(val)) {
    const res = new val.constructor();
    for (let key in val) {
      res[key] = cloneDeep(val[key], instanceClone);
    }
    return res;
  }
  return val;
}

function cloneArrayDeep(val, instanceClone) {
  const res = new val.constructor(val.length);
  for (let i = 0; i < val.length; i++) {
    res[i] = cloneDeep(val[i], instanceClone);
  }
  return res;
}

/**
 * Expose `cloneDeep`
 */

module.exports = cloneDeep;


/***/ }),
/* 6 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*!
 * shallow-clone <https://github.com/jonschlinkert/shallow-clone>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */



const valueOf = Symbol.prototype.valueOf;
const typeOf = __webpack_require__(7);

function clone(val, deep) {
  switch (typeOf(val)) {
    case 'array':
      return val.slice();
    case 'object':
      return Object.assign({}, val);
    case 'date':
      return new val.constructor(Number(val));
    case 'map':
      return new Map(val);
    case 'set':
      return new Set(val);
    case 'buffer':
      return cloneBuffer(val);
    case 'symbol':
      return cloneSymbol(val);
    case 'arraybuffer':
      return cloneArrayBuffer(val);
    case 'float32array':
    case 'float64array':
    case 'int16array':
    case 'int32array':
    case 'int8array':
    case 'uint16array':
    case 'uint32array':
    case 'uint8clampedarray':
    case 'uint8array':
      return cloneTypedArray(val);
    case 'regexp':
      return cloneRegExp(val);
    case 'error':
      return Object.create(val);
    default: {
      return val;
    }
  }
}

function cloneRegExp(val) {
  const flags = val.flags !== void 0 ? val.flags : (/\w+$/.exec(val) || void 0);
  const re = new val.constructor(val.source, flags);
  re.lastIndex = val.lastIndex;
  return re;
}

function cloneArrayBuffer(val) {
  const res = new val.constructor(val.byteLength);
  new Uint8Array(res).set(new Uint8Array(val));
  return res;
}

function cloneTypedArray(val, deep) {
  return new val.constructor(val.buffer, val.byteOffset, val.length);
}

function cloneBuffer(val) {
  const len = val.length;
  const buf = Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : Buffer.from(len);
  val.copy(buf);
  return buf;
}

function cloneSymbol(val) {
  return valueOf ? Object(valueOf.call(val)) : {};
}

/**
 * Expose `clone`
 */

module.exports = clone;


/***/ }),
/* 7 */
/***/ ((module) => {

var toString = Object.prototype.toString;

module.exports = function kindOf(val) {
  if (val === void 0) return 'undefined';
  if (val === null) return 'null';

  var type = typeof val;
  if (type === 'boolean') return 'boolean';
  if (type === 'string') return 'string';
  if (type === 'number') return 'number';
  if (type === 'symbol') return 'symbol';
  if (type === 'function') {
    return isGeneratorFn(val) ? 'generatorfunction' : 'function';
  }

  if (isArray(val)) return 'array';
  if (isBuffer(val)) return 'buffer';
  if (isArguments(val)) return 'arguments';
  if (isDate(val)) return 'date';
  if (isError(val)) return 'error';
  if (isRegexp(val)) return 'regexp';

  switch (ctorName(val)) {
    case 'Symbol': return 'symbol';
    case 'Promise': return 'promise';

    // Set, Map, WeakSet, WeakMap
    case 'WeakMap': return 'weakmap';
    case 'WeakSet': return 'weakset';
    case 'Map': return 'map';
    case 'Set': return 'set';

    // 8-bit typed arrays
    case 'Int8Array': return 'int8array';
    case 'Uint8Array': return 'uint8array';
    case 'Uint8ClampedArray': return 'uint8clampedarray';

    // 16-bit typed arrays
    case 'Int16Array': return 'int16array';
    case 'Uint16Array': return 'uint16array';

    // 32-bit typed arrays
    case 'Int32Array': return 'int32array';
    case 'Uint32Array': return 'uint32array';
    case 'Float32Array': return 'float32array';
    case 'Float64Array': return 'float64array';
  }

  if (isGeneratorObj(val)) {
    return 'generator';
  }

  // Non-plain objects
  type = toString.call(val);
  switch (type) {
    case '[object Object]': return 'object';
    // iterators
    case '[object Map Iterator]': return 'mapiterator';
    case '[object Set Iterator]': return 'setiterator';
    case '[object String Iterator]': return 'stringiterator';
    case '[object Array Iterator]': return 'arrayiterator';
  }

  // other
  return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
};

function ctorName(val) {
  return typeof val.constructor === 'function' ? val.constructor.name : null;
}

function isArray(val) {
  if (Array.isArray) return Array.isArray(val);
  return val instanceof Array;
}

function isError(val) {
  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');
}

function isDate(val) {
  if (val instanceof Date) return true;
  return typeof val.toDateString === 'function'
    && typeof val.getDate === 'function'
    && typeof val.setDate === 'function';
}

function isRegexp(val) {
  if (val instanceof RegExp) return true;
  return typeof val.flags === 'string'
    && typeof val.ignoreCase === 'boolean'
    && typeof val.multiline === 'boolean'
    && typeof val.global === 'boolean';
}

function isGeneratorFn(name, val) {
  return ctorName(name) === 'GeneratorFunction';
}

function isGeneratorObj(val) {
  return typeof val.throw === 'function'
    && typeof val.return === 'function'
    && typeof val.next === 'function';
}

function isArguments(val) {
  try {
    if (typeof val.length === 'number' && typeof val.callee === 'function') {
      return true;
    }
  } catch (err) {
    if (err.message.indexOf('callee') !== -1) {
      return true;
    }
  }
  return false;
}

/**
 * If you need to support Safari 5-7 (8-10 yr-old browser),
 * take a look at https://github.com/feross/is-buffer
 */

function isBuffer(val) {
  if (val.constructor && typeof val.constructor.isBuffer === 'function') {
    return val.constructor.isBuffer(val);
  }
  return false;
}


/***/ }),
/* 8 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */



var isObject = __webpack_require__(9);

function isObjectObject(o) {
  return isObject(o) === true
    && Object.prototype.toString.call(o) === '[object Object]';
}

module.exports = function isPlainObject(o) {
  var ctor,prot;

  if (isObjectObject(o) === false) return false;

  // If has modified constructor
  ctor = o.constructor;
  if (typeof ctor !== 'function') return false;

  // If has modified prototype
  prot = ctor.prototype;
  if (isObjectObject(prot) === false) return false;

  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }

  // Most likely a plain Object
  return true;
};


/***/ }),
/* 9 */
/***/ ((module) => {

"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */



module.exports = function isObject(val) {
  return val != null && typeof val === 'object' && Array.isArray(val) === false;
};


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__(0);
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;